/*
 * Copyright (C) 2019 ~ 2020 Uniontech Software Technology Co.,Ltd
 *
 * Author:
 *
 * Maintainer:
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// Code generated by "girgen"; DO NOT EDIT.

package nm

/*
#cgo pkg-config: libnm
*/
import "C"
import "github.com/electricface/go-gir/g-2.0"
import "github.com/electricface/go-gir/gi"
import "log"
import "unsafe"

var _I = gi.NewInvokerCache("NM")
var _ unsafe.Pointer
var _ *log.Logger

func init() {
	repo := gi.DefaultRepository()
	_, err := repo.Require("NM", "1.0", gi.REPOSITORY_LOAD_FLAG_LAZY)
	if err != nil {
		panic(err)
	}
}

// Flags NM80211ApFlags
type NM80211ApFlags int

const (
	NM80211ApFlagsNone    NM80211ApFlags = 0
	NM80211ApFlagsPrivacy NM80211ApFlags = 1
	NM80211ApFlagsWps     NM80211ApFlags = 2
	NM80211ApFlagsWpsPbc  NM80211ApFlags = 4
	NM80211ApFlagsWpsPin  NM80211ApFlags = 8
)

func NM80211ApFlagsGetType() gi.GType {
	ret := _I.GetGType(0, "80211ApFlags")
	return ret
}

// Flags NM80211ApSecurityFlags
type NM80211ApSecurityFlags int

const (
	NM80211ApSecurityFlagsNone         NM80211ApSecurityFlags = 0
	NM80211ApSecurityFlagsPairWep40    NM80211ApSecurityFlags = 1
	NM80211ApSecurityFlagsPairWep104   NM80211ApSecurityFlags = 2
	NM80211ApSecurityFlagsPairTkip     NM80211ApSecurityFlags = 4
	NM80211ApSecurityFlagsPairCcmp     NM80211ApSecurityFlags = 8
	NM80211ApSecurityFlagsGroupWep40   NM80211ApSecurityFlags = 16
	NM80211ApSecurityFlagsGroupWep104  NM80211ApSecurityFlags = 32
	NM80211ApSecurityFlagsGroupTkip    NM80211ApSecurityFlags = 64
	NM80211ApSecurityFlagsGroupCcmp    NM80211ApSecurityFlags = 128
	NM80211ApSecurityFlagsKeyMgmtPsk   NM80211ApSecurityFlags = 256
	NM80211ApSecurityFlagsKeyMgmt8021x NM80211ApSecurityFlags = 512
)

func NM80211ApSecurityFlagsGetType() gi.GType {
	ret := _I.GetGType(1, "80211ApSecurityFlags")
	return ret
}

// Enum NM80211Mode
type NM80211ModeEnum int

const (
	NM80211ModeUnknown NM80211ModeEnum = 0
	NM80211ModeAdhoc   NM80211ModeEnum = 1
	NM80211ModeInfra   NM80211ModeEnum = 2
	NM80211ModeAp      NM80211ModeEnum = 3
)

func NM80211ModeGetType() gi.GType {
	ret := _I.GetGType(2, "80211Mode")
	return ret
}

// Object AccessPoint
type AccessPoint struct {
	Object
}

func WrapAccessPoint(p unsafe.Pointer) (r AccessPoint) { r.P = p; return }

type IAccessPoint interface{ P_AccessPoint() unsafe.Pointer }

func (v AccessPoint) P_AccessPoint() unsafe.Pointer { return v.P }
func AccessPointGetType() gi.GType {
	ret := _I.GetGType(3, "AccessPoint")
	return ret
}

// nm_access_point_connection_valid
//
// [ connection ] trans: nothing
//
// [ result ] trans: nothing
//
func (v AccessPoint) ConnectionValid(connection IConnection) (result bool) {
	iv, err := _I.Get(0, "AccessPoint", "connection_valid", 30, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_Connection()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connection := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_connection}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_access_point_filter_connections
//
// [ connections ] trans: nothing
//
// [ result ] trans: everything
//
func (v AccessPoint) FilterConnections(connections int /*TODO_TYPE isPtr: true, tag: array*/) (result g.PtrArray) {
	iv, err := _I.Get(1, "AccessPoint", "filter_connections", 30, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connections := gi.NewIntArgument(connections) /*TODO*/
	args := []gi.Argument{arg_v, arg_connections}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_access_point_get_bssid
//
// [ result ] trans: nothing
//
func (v AccessPoint) GetBssid() (result string) {
	iv, err := _I.Get(2, "AccessPoint", "get_bssid", 30, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_access_point_get_flags
//
// [ result ] trans: nothing
//
func (v AccessPoint) GetFlags() (result NM80211ApFlags) {
	iv, err := _I.Get(3, "AccessPoint", "get_flags", 30, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = NM80211ApFlags(ret.Int())
	return
}

// nm_access_point_get_frequency
//
// [ result ] trans: nothing
//
func (v AccessPoint) GetFrequency() (result uint32) {
	iv, err := _I.Get(4, "AccessPoint", "get_frequency", 30, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_access_point_get_last_seen
//
// [ result ] trans: nothing
//
func (v AccessPoint) GetLastSeen() (result int32) {
	iv, err := _I.Get(5, "AccessPoint", "get_last_seen", 30, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_access_point_get_max_bitrate
//
// [ result ] trans: nothing
//
func (v AccessPoint) GetMaxBitrate() (result uint32) {
	iv, err := _I.Get(6, "AccessPoint", "get_max_bitrate", 30, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_access_point_get_mode
//
// [ result ] trans: nothing
//
func (v AccessPoint) GetMode() (result NM80211ModeEnum) {
	iv, err := _I.Get(7, "AccessPoint", "get_mode", 30, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = NM80211ModeEnum(ret.Int())
	return
}

// nm_access_point_get_rsn_flags
//
// [ result ] trans: nothing
//
func (v AccessPoint) GetRsnFlags() (result NM80211ApSecurityFlags) {
	iv, err := _I.Get(8, "AccessPoint", "get_rsn_flags", 30, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = NM80211ApSecurityFlags(ret.Int())
	return
}

// nm_access_point_get_ssid
//
// [ result ] trans: nothing
//
func (v AccessPoint) GetSsid() (result g.Bytes) {
	iv, err := _I.Get(9, "AccessPoint", "get_ssid", 30, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_access_point_get_strength
//
// [ result ] trans: nothing
//
func (v AccessPoint) GetStrength() (result uint8) {
	iv, err := _I.Get(10, "AccessPoint", "get_strength", 30, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint8()
	return
}

// nm_access_point_get_wpa_flags
//
// [ result ] trans: nothing
//
func (v AccessPoint) GetWpaFlags() (result NM80211ApSecurityFlags) {
	iv, err := _I.Get(11, "AccessPoint", "get_wpa_flags", 30, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = NM80211ApSecurityFlags(ret.Int())
	return
}

// ignore GType struct AccessPointClass

// Flags ActivationStateFlags
type ActivationStateFlags int

const (
	ActivationStateFlagsNone            ActivationStateFlags = 0
	ActivationStateFlagsIsMaster        ActivationStateFlags = 1
	ActivationStateFlagsIsSlave         ActivationStateFlags = 2
	ActivationStateFlagsLayer2Ready     ActivationStateFlags = 4
	ActivationStateFlagsIp4Ready        ActivationStateFlags = 8
	ActivationStateFlagsIp6Ready        ActivationStateFlags = 16
	ActivationStateFlagsMasterHasSlaves ActivationStateFlags = 32
)

func ActivationStateFlagsGetType() gi.GType {
	ret := _I.GetGType(4, "ActivationStateFlags")
	return ret
}

// Object ActiveConnection
type ActiveConnection struct {
	Object
}

func WrapActiveConnection(p unsafe.Pointer) (r ActiveConnection) { r.P = p; return }

type IActiveConnection interface{ P_ActiveConnection() unsafe.Pointer }

func (v ActiveConnection) P_ActiveConnection() unsafe.Pointer { return v.P }
func ActiveConnectionGetType() gi.GType {
	ret := _I.GetGType(5, "ActiveConnection")
	return ret
}

// nm_active_connection_get_connection
//
// [ result ] trans: nothing
//
func (v ActiveConnection) GetConnection() (result RemoteConnection) {
	iv, err := _I.Get(12, "ActiveConnection", "get_connection", 33, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_active_connection_get_connection_type
//
// [ result ] trans: nothing
//
func (v ActiveConnection) GetConnectionType() (result string) {
	iv, err := _I.Get(13, "ActiveConnection", "get_connection_type", 33, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_active_connection_get_default
//
// [ result ] trans: nothing
//
func (v ActiveConnection) GetDefault() (result bool) {
	iv, err := _I.Get(14, "ActiveConnection", "get_default", 33, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_active_connection_get_default6
//
// [ result ] trans: nothing
//
func (v ActiveConnection) GetDefault6() (result bool) {
	iv, err := _I.Get(15, "ActiveConnection", "get_default6", 33, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_active_connection_get_devices
//
// [ result ] trans: nothing
//
func (v ActiveConnection) GetDevices() (result g.PtrArray) {
	iv, err := _I.Get(16, "ActiveConnection", "get_devices", 33, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_active_connection_get_dhcp4_config
//
// [ result ] trans: nothing
//
func (v ActiveConnection) GetDhcp4Config() (result DhcpConfig) {
	iv, err := _I.Get(17, "ActiveConnection", "get_dhcp4_config", 33, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_active_connection_get_dhcp6_config
//
// [ result ] trans: nothing
//
func (v ActiveConnection) GetDhcp6Config() (result DhcpConfig) {
	iv, err := _I.Get(18, "ActiveConnection", "get_dhcp6_config", 33, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_active_connection_get_id
//
// [ result ] trans: nothing
//
func (v ActiveConnection) GetId() (result string) {
	iv, err := _I.Get(19, "ActiveConnection", "get_id", 33, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_active_connection_get_ip4_config
//
// [ result ] trans: nothing
//
func (v ActiveConnection) GetIp4Config() (result IPConfig) {
	iv, err := _I.Get(20, "ActiveConnection", "get_ip4_config", 33, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_active_connection_get_ip6_config
//
// [ result ] trans: nothing
//
func (v ActiveConnection) GetIp6Config() (result IPConfig) {
	iv, err := _I.Get(21, "ActiveConnection", "get_ip6_config", 33, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_active_connection_get_master
//
// [ result ] trans: nothing
//
func (v ActiveConnection) GetMaster() (result Device) {
	iv, err := _I.Get(22, "ActiveConnection", "get_master", 33, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_active_connection_get_specific_object_path
//
// [ result ] trans: nothing
//
func (v ActiveConnection) GetSpecificObjectPath() (result string) {
	iv, err := _I.Get(23, "ActiveConnection", "get_specific_object_path", 33, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_active_connection_get_state
//
// [ result ] trans: nothing
//
func (v ActiveConnection) GetState() (result ActiveConnectionStateEnum) {
	iv, err := _I.Get(24, "ActiveConnection", "get_state", 33, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ActiveConnectionStateEnum(ret.Int())
	return
}

// nm_active_connection_get_state_flags
//
// [ result ] trans: nothing
//
func (v ActiveConnection) GetStateFlags() (result ActivationStateFlags) {
	iv, err := _I.Get(25, "ActiveConnection", "get_state_flags", 33, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ActivationStateFlags(ret.Int())
	return
}

// nm_active_connection_get_state_reason
//
// [ result ] trans: nothing
//
func (v ActiveConnection) GetStateReason() (result ActiveConnectionStateReasonEnum) {
	iv, err := _I.Get(26, "ActiveConnection", "get_state_reason", 33, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ActiveConnectionStateReasonEnum(ret.Int())
	return
}

// nm_active_connection_get_uuid
//
// [ result ] trans: nothing
//
func (v ActiveConnection) GetUuid() (result string) {
	iv, err := _I.Get(27, "ActiveConnection", "get_uuid", 33, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_active_connection_get_vpn
//
// [ result ] trans: nothing
//
func (v ActiveConnection) GetVpn() (result bool) {
	iv, err := _I.Get(28, "ActiveConnection", "get_vpn", 33, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct ActiveConnectionClass

// Enum ActiveConnectionState
type ActiveConnectionStateEnum int

const (
	ActiveConnectionStateUnknown      ActiveConnectionStateEnum = 0
	ActiveConnectionStateActivating   ActiveConnectionStateEnum = 1
	ActiveConnectionStateActivated    ActiveConnectionStateEnum = 2
	ActiveConnectionStateDeactivating ActiveConnectionStateEnum = 3
	ActiveConnectionStateDeactivated  ActiveConnectionStateEnum = 4
)

func ActiveConnectionStateGetType() gi.GType {
	ret := _I.GetGType(6, "ActiveConnectionState")
	return ret
}

// Enum ActiveConnectionStateReason
type ActiveConnectionStateReasonEnum int

const (
	ActiveConnectionStateReasonUnknown             ActiveConnectionStateReasonEnum = 0
	ActiveConnectionStateReasonNone                ActiveConnectionStateReasonEnum = 1
	ActiveConnectionStateReasonUserDisconnected    ActiveConnectionStateReasonEnum = 2
	ActiveConnectionStateReasonDeviceDisconnected  ActiveConnectionStateReasonEnum = 3
	ActiveConnectionStateReasonServiceStopped      ActiveConnectionStateReasonEnum = 4
	ActiveConnectionStateReasonIpConfigInvalid     ActiveConnectionStateReasonEnum = 5
	ActiveConnectionStateReasonConnectTimeout      ActiveConnectionStateReasonEnum = 6
	ActiveConnectionStateReasonServiceStartTimeout ActiveConnectionStateReasonEnum = 7
	ActiveConnectionStateReasonServiceStartFailed  ActiveConnectionStateReasonEnum = 8
	ActiveConnectionStateReasonNoSecrets           ActiveConnectionStateReasonEnum = 9
	ActiveConnectionStateReasonLoginFailed         ActiveConnectionStateReasonEnum = 10
	ActiveConnectionStateReasonConnectionRemoved   ActiveConnectionStateReasonEnum = 11
	ActiveConnectionStateReasonDependencyFailed    ActiveConnectionStateReasonEnum = 12
	ActiveConnectionStateReasonDeviceRealizeFailed ActiveConnectionStateReasonEnum = 13
	ActiveConnectionStateReasonDeviceRemoved       ActiveConnectionStateReasonEnum = 14
)

func ActiveConnectionStateReasonGetType() gi.GType {
	ret := _I.GetGType(7, "ActiveConnectionStateReason")
	return ret
}

// Enum AgentManagerError
type AgentManagerErrorEnum int

const (
	AgentManagerErrorFailed            AgentManagerErrorEnum = 0
	AgentManagerErrorPermissiondenied  AgentManagerErrorEnum = 1
	AgentManagerErrorInvalididentifier AgentManagerErrorEnum = 2
	AgentManagerErrorNotregistered     AgentManagerErrorEnum = 3
	AgentManagerErrorNosecrets         AgentManagerErrorEnum = 4
	AgentManagerErrorUsercanceled      AgentManagerErrorEnum = 5
)

func AgentManagerErrorGetType() gi.GType {
	ret := _I.GetGType(8, "AgentManagerError")
	return ret
}

// Flags BluetoothCapabilities
type BluetoothCapabilitiesFlags int

const (
	BluetoothCapabilitiesNone BluetoothCapabilitiesFlags = 0
	BluetoothCapabilitiesDun  BluetoothCapabilitiesFlags = 1
	BluetoothCapabilitiesNap  BluetoothCapabilitiesFlags = 2
)

func BluetoothCapabilitiesGetType() gi.GType {
	ret := _I.GetGType(9, "BluetoothCapabilities")
	return ret
}

// Enum Capability
type CapabilityEnum int

const (
	CapabilityTeam CapabilityEnum = 1
)

func CapabilityGetType() gi.GType {
	ret := _I.GetGType(10, "Capability")
	return ret
}

// Object Checkpoint
type Checkpoint struct {
	Object
}

func WrapCheckpoint(p unsafe.Pointer) (r Checkpoint) { r.P = p; return }

type ICheckpoint interface{ P_Checkpoint() unsafe.Pointer }

func (v Checkpoint) P_Checkpoint() unsafe.Pointer { return v.P }
func CheckpointGetType() gi.GType {
	ret := _I.GetGType(11, "Checkpoint")
	return ret
}

// nm_checkpoint_get_created
//
// [ result ] trans: nothing
//
func (v Checkpoint) GetCreated() (result int64) {
	iv, err := _I.Get(29, "Checkpoint", "get_created", 82, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int64()
	return
}

// nm_checkpoint_get_devices
//
// [ result ] trans: nothing
//
func (v Checkpoint) GetDevices() (result g.PtrArray) {
	iv, err := _I.Get(30, "Checkpoint", "get_devices", 82, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_checkpoint_get_rollback_timeout
//
// [ result ] trans: nothing
//
func (v Checkpoint) GetRollbackTimeout() (result uint32) {
	iv, err := _I.Get(31, "Checkpoint", "get_rollback_timeout", 82, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// ignore GType struct CheckpointClass

// Flags CheckpointCreateFlags
type CheckpointCreateFlags int

const (
	CheckpointCreateFlagsNone                 CheckpointCreateFlags = 0
	CheckpointCreateFlagsDestroyAll           CheckpointCreateFlags = 1
	CheckpointCreateFlagsDeleteNewConnections CheckpointCreateFlags = 2
	CheckpointCreateFlagsDisconnectNewDevices CheckpointCreateFlags = 4
	CheckpointCreateFlagsAllowOverlapping     CheckpointCreateFlags = 8
)

func CheckpointCreateFlagsGetType() gi.GType {
	ret := _I.GetGType(12, "CheckpointCreateFlags")
	return ret
}

// Object Client
type Client struct {
	g.AsyncInitableIfc
	g.InitableIfc
	g.Object
}

func WrapClient(p unsafe.Pointer) (r Client) { r.P = p; return }

type IClient interface{ P_Client() unsafe.Pointer }

func (v Client) P_Client() unsafe.Pointer        { return v.P }
func (v Client) P_AsyncInitable() unsafe.Pointer { return v.P }
func (v Client) P_Initable() unsafe.Pointer      { return v.P }
func ClientGetType() gi.GType {
	ret := _I.GetGType(13, "Client")
	return ret
}

// nm_client_new
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func NewClient(cancellable g.ICancellable) (result Client, err error) {
	iv, err := _I.Get(32, "Client", "new", 85, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_client_new_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func NewClientFinish(result g.IAsyncResult) (result1 Client, err error) {
	iv, err := _I.Get(33, "Client", "new_finish", 85, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// nm_client_new_async
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func ClientNewAsync1(cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(34, "Client", "new_async", 85, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// nm_client_activate_connection_async
//
// [ connection ] trans: nothing
//
// [ device ] trans: nothing
//
// [ specific_object ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Client) ActivateConnectionAsync(connection IConnection, device IDevice, specific_object string, cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(35, "Client", "activate_connection_async", 85, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_Connection()
	}
	var tmp1 unsafe.Pointer
	if device != nil {
		tmp1 = device.P_Device()
	}
	c_specific_object := gi.CString(specific_object)
	var tmp2 unsafe.Pointer
	if cancellable != nil {
		tmp2 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connection := gi.NewPointerArgument(tmp)
	arg_device := gi.NewPointerArgument(tmp1)
	arg_specific_object := gi.NewStringArgument(c_specific_object)
	arg_cancellable := gi.NewPointerArgument(tmp2)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_connection, arg_device, arg_specific_object, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_specific_object)
}

// nm_client_activate_connection_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v Client) ActivateConnectionFinish(result g.IAsyncResult) (result1 ActiveConnection, err error) {
	iv, err := _I.Get(36, "Client", "activate_connection_finish", 85, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// nm_client_add_and_activate_connection_async
//
// [ partial ] trans: nothing
//
// [ device ] trans: nothing
//
// [ specific_object ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Client) AddAndActivateConnectionAsync(partial IConnection, device IDevice, specific_object string, cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(37, "Client", "add_and_activate_connection_async", 85, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if partial != nil {
		tmp = partial.P_Connection()
	}
	var tmp1 unsafe.Pointer
	if device != nil {
		tmp1 = device.P_Device()
	}
	c_specific_object := gi.CString(specific_object)
	var tmp2 unsafe.Pointer
	if cancellable != nil {
		tmp2 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_partial := gi.NewPointerArgument(tmp)
	arg_device := gi.NewPointerArgument(tmp1)
	arg_specific_object := gi.NewStringArgument(c_specific_object)
	arg_cancellable := gi.NewPointerArgument(tmp2)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_partial, arg_device, arg_specific_object, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_specific_object)
}

// nm_client_add_and_activate_connection_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v Client) AddAndActivateConnectionFinish(result g.IAsyncResult) (result1 ActiveConnection, err error) {
	iv, err := _I.Get(38, "Client", "add_and_activate_connection_finish", 85, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// nm_client_add_connection_async
//
// [ connection ] trans: nothing
//
// [ save_to_disk ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Client) AddConnectionAsync(connection IConnection, save_to_disk bool, cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(39, "Client", "add_connection_async", 85, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_Connection()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connection := gi.NewPointerArgument(tmp)
	arg_save_to_disk := gi.NewBoolArgument(save_to_disk)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_connection, arg_save_to_disk, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// nm_client_add_connection_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v Client) AddConnectionFinish(result g.IAsyncResult) (result1 RemoteConnection, err error) {
	iv, err := _I.Get(40, "Client", "add_connection_finish", 85, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// nm_client_check_connectivity
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Client) CheckConnectivity(cancellable g.ICancellable) (result ConnectivityStateEnum, err error) {
	iv, err := _I.Get(41, "Client", "check_connectivity", 85, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ConnectivityStateEnum(ret.Int())
	return
}

// nm_client_check_connectivity_async
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Client) CheckConnectivityAsync(cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(42, "Client", "check_connectivity_async", 85, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// nm_client_check_connectivity_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v Client) CheckConnectivityFinish(result g.IAsyncResult) (result1 ConnectivityStateEnum, err error) {
	iv, err := _I.Get(43, "Client", "check_connectivity_finish", 85, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ConnectivityStateEnum(ret.Int())
	return
}

// nm_client_checkpoint_adjust_rollback_timeout
//
// [ checkpoint_path ] trans: nothing
//
// [ add_timeout ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Client) CheckpointAdjustRollbackTimeout(checkpoint_path string, add_timeout uint32, cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(44, "Client", "checkpoint_adjust_rollback_timeout", 85, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_checkpoint_path := gi.CString(checkpoint_path)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_checkpoint_path := gi.NewStringArgument(c_checkpoint_path)
	arg_add_timeout := gi.NewUint32Argument(add_timeout)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_checkpoint_path, arg_add_timeout, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_checkpoint_path)
}

// nm_client_checkpoint_adjust_rollback_timeout_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v Client) CheckpointAdjustRollbackTimeoutFinish(result g.IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get(45, "Client", "checkpoint_adjust_rollback_timeout_finish", 85, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// nm_client_checkpoint_create
//
// [ devices ] trans: nothing
//
// [ rollback_timeout ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Client) CheckpointCreate(devices int /*TODO_TYPE isPtr: true, tag: array*/, rollback_timeout uint32, flags CheckpointCreateFlags, cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(46, "Client", "checkpoint_create", 85, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_devices := gi.NewIntArgument(devices) /*TODO*/
	arg_rollback_timeout := gi.NewUint32Argument(rollback_timeout)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_devices, arg_rollback_timeout, arg_flags, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// nm_client_checkpoint_create_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v Client) CheckpointCreateFinish(result g.IAsyncResult) (result1 Checkpoint, err error) {
	iv, err := _I.Get(47, "Client", "checkpoint_create_finish", 85, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// nm_client_checkpoint_destroy
//
// [ checkpoint_path ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Client) CheckpointDestroy(checkpoint_path string, cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(48, "Client", "checkpoint_destroy", 85, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_checkpoint_path := gi.CString(checkpoint_path)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_checkpoint_path := gi.NewStringArgument(c_checkpoint_path)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_checkpoint_path, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_checkpoint_path)
}

// nm_client_checkpoint_destroy_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v Client) CheckpointDestroyFinish(result g.IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get(49, "Client", "checkpoint_destroy_finish", 85, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// nm_client_checkpoint_rollback
//
// [ checkpoint_path ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Client) CheckpointRollback(checkpoint_path string, cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(50, "Client", "checkpoint_rollback", 85, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_checkpoint_path := gi.CString(checkpoint_path)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_checkpoint_path := gi.NewStringArgument(c_checkpoint_path)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_checkpoint_path, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_checkpoint_path)
}

// nm_client_checkpoint_rollback_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v Client) CheckpointRollbackFinish(result g.IAsyncResult) (result1 g.HashTable, err error) {
	iv, err := _I.Get(51, "Client", "checkpoint_rollback_finish", 85, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// nm_client_connectivity_check_get_available
//
// [ result ] trans: nothing
//
func (v Client) ConnectivityCheckGetAvailable() (result bool) {
	iv, err := _I.Get(52, "Client", "connectivity_check_get_available", 85, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_client_connectivity_check_get_enabled
//
// [ result ] trans: nothing
//
func (v Client) ConnectivityCheckGetEnabled() (result bool) {
	iv, err := _I.Get(53, "Client", "connectivity_check_get_enabled", 85, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_client_connectivity_check_set_enabled
//
// [ enabled ] trans: nothing
//
func (v Client) ConnectivityCheckSetEnabled(enabled bool) {
	iv, err := _I.Get(54, "Client", "connectivity_check_set_enabled", 85, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_enabled := gi.NewBoolArgument(enabled)
	args := []gi.Argument{arg_v, arg_enabled}
	iv.Call(args, nil, nil)
}

// nm_client_deactivate_connection
//
// [ active ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Client) DeactivateConnection(active IActiveConnection, cancellable g.ICancellable) (result bool, err error) {
	iv, err := _I.Get(55, "Client", "deactivate_connection", 85, 23, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if active != nil {
		tmp = active.P_ActiveConnection()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_active := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_active, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_client_deactivate_connection_async
//
// [ active ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Client) DeactivateConnectionAsync(active IActiveConnection, cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(56, "Client", "deactivate_connection_async", 85, 24, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if active != nil {
		tmp = active.P_ActiveConnection()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_active := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_active, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// nm_client_deactivate_connection_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v Client) DeactivateConnectionFinish(result g.IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get(57, "Client", "deactivate_connection_finish", 85, 25, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// nm_client_get_activating_connection
//
// [ result ] trans: nothing
//
func (v Client) GetActivatingConnection() (result ActiveConnection) {
	iv, err := _I.Get(58, "Client", "get_activating_connection", 85, 26, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_client_get_active_connections
//
// [ result ] trans: nothing
//
func (v Client) GetActiveConnections() (result g.PtrArray) {
	iv, err := _I.Get(59, "Client", "get_active_connections", 85, 27, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_client_get_all_devices
//
// [ result ] trans: nothing
//
func (v Client) GetAllDevices() (result g.PtrArray) {
	iv, err := _I.Get(60, "Client", "get_all_devices", 85, 28, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_client_get_checkpoints
//
// [ result ] trans: nothing
//
func (v Client) GetCheckpoints() (result g.PtrArray) {
	iv, err := _I.Get(61, "Client", "get_checkpoints", 85, 29, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_client_get_connection_by_id
//
// [ id ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Client) GetConnectionById(id string) (result RemoteConnection) {
	iv, err := _I.Get(62, "Client", "get_connection_by_id", 85, 30, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_id := gi.CString(id)
	arg_v := gi.NewPointerArgument(v.P)
	arg_id := gi.NewStringArgument(c_id)
	args := []gi.Argument{arg_v, arg_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_id)
	result.P = ret.Pointer()
	return
}

// nm_client_get_connection_by_path
//
// [ path ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Client) GetConnectionByPath(path string) (result RemoteConnection) {
	iv, err := _I.Get(63, "Client", "get_connection_by_path", 85, 31, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewStringArgument(c_path)
	args := []gi.Argument{arg_v, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_path)
	result.P = ret.Pointer()
	return
}

// nm_client_get_connection_by_uuid
//
// [ uuid ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Client) GetConnectionByUuid(uuid string) (result RemoteConnection) {
	iv, err := _I.Get(64, "Client", "get_connection_by_uuid", 85, 32, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uuid := gi.CString(uuid)
	arg_v := gi.NewPointerArgument(v.P)
	arg_uuid := gi.NewStringArgument(c_uuid)
	args := []gi.Argument{arg_v, arg_uuid}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_uuid)
	result.P = ret.Pointer()
	return
}

// nm_client_get_connections
//
// [ result ] trans: nothing
//
func (v Client) GetConnections() (result g.PtrArray) {
	iv, err := _I.Get(65, "Client", "get_connections", 85, 33, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_client_get_connectivity
//
// [ result ] trans: nothing
//
func (v Client) GetConnectivity() (result ConnectivityStateEnum) {
	iv, err := _I.Get(66, "Client", "get_connectivity", 85, 34, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ConnectivityStateEnum(ret.Int())
	return
}

// nm_client_get_device_by_iface
//
// [ iface ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Client) GetDeviceByIface(iface string) (result Device) {
	iv, err := _I.Get(67, "Client", "get_device_by_iface", 85, 35, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_iface := gi.CString(iface)
	arg_v := gi.NewPointerArgument(v.P)
	arg_iface := gi.NewStringArgument(c_iface)
	args := []gi.Argument{arg_v, arg_iface}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_iface)
	result.P = ret.Pointer()
	return
}

// nm_client_get_device_by_path
//
// [ object_path ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Client) GetDeviceByPath(object_path string) (result Device) {
	iv, err := _I.Get(68, "Client", "get_device_by_path", 85, 36, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_object_path := gi.CString(object_path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_object_path := gi.NewStringArgument(c_object_path)
	args := []gi.Argument{arg_v, arg_object_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_object_path)
	result.P = ret.Pointer()
	return
}

// nm_client_get_devices
//
// [ result ] trans: nothing
//
func (v Client) GetDevices() (result g.PtrArray) {
	iv, err := _I.Get(69, "Client", "get_devices", 85, 37, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_client_get_dns_configuration
//
// [ result ] trans: nothing
//
func (v Client) GetDnsConfiguration() (result g.PtrArray) {
	iv, err := _I.Get(70, "Client", "get_dns_configuration", 85, 38, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_client_get_dns_mode
//
// [ result ] trans: nothing
//
func (v Client) GetDnsMode() (result string) {
	iv, err := _I.Get(71, "Client", "get_dns_mode", 85, 39, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_client_get_dns_rc_manager
//
// [ result ] trans: nothing
//
func (v Client) GetDnsRcManager() (result string) {
	iv, err := _I.Get(72, "Client", "get_dns_rc_manager", 85, 40, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_client_get_logging
//
// [ level ] trans: nothing
//
// [ domains ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Client) GetLogging(level string, domains string) (result bool, err error) {
	iv, err := _I.Get(73, "Client", "get_logging", 85, 41, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_level := gi.CString(level)
	c_domains := gi.CString(domains)
	arg_v := gi.NewPointerArgument(v.P)
	arg_level := gi.NewStringArgument(c_level)
	arg_domains := gi.NewStringArgument(c_domains)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_level, arg_domains, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_level)
	gi.Free(c_domains)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_client_get_nm_running
//
// [ result ] trans: nothing
//
func (v Client) GetNmRunning() (result bool) {
	iv, err := _I.Get(74, "Client", "get_nm_running", 85, 42, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_client_get_permission_result
//
// [ permission ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Client) GetPermissionResult(permission ClientPermissionEnum) (result ClientPermissionResultEnum) {
	iv, err := _I.Get(75, "Client", "get_permission_result", 85, 43, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_permission := gi.NewIntArgument(int(permission))
	args := []gi.Argument{arg_v, arg_permission}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ClientPermissionResultEnum(ret.Int())
	return
}

// nm_client_get_primary_connection
//
// [ result ] trans: nothing
//
func (v Client) GetPrimaryConnection() (result ActiveConnection) {
	iv, err := _I.Get(76, "Client", "get_primary_connection", 85, 44, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_client_get_startup
//
// [ result ] trans: nothing
//
func (v Client) GetStartup() (result bool) {
	iv, err := _I.Get(77, "Client", "get_startup", 85, 45, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_client_get_state
//
// [ result ] trans: nothing
//
func (v Client) GetState() (result StateEnum) {
	iv, err := _I.Get(78, "Client", "get_state", 85, 46, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = StateEnum(ret.Int())
	return
}

// nm_client_get_version
//
// [ result ] trans: nothing
//
func (v Client) GetVersion() (result string) {
	iv, err := _I.Get(79, "Client", "get_version", 85, 47, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_client_load_connections
//
// [ filenames ] trans: nothing
//
// [ failures ] trans: everything, dir: out
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Client) LoadConnections(filenames gi.CStrArray, cancellable g.ICancellable) (result bool, failures string, err error) {
	iv, err := _I.Get(80, "Client", "load_connections", 85, 48, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_filenames := gi.NewPointerArgument(filenames.P)
	arg_failures := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_filenames, arg_failures, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	failures = outArgs[0].String().Take()
	result = ret.Bool()
	return
}

// nm_client_load_connections_async
//
// [ filenames ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Client) LoadConnectionsAsync(filenames gi.CStrArray, cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(81, "Client", "load_connections_async", 85, 49, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_filenames := gi.NewPointerArgument(filenames.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_filenames, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// nm_client_load_connections_finish
//
// [ failures ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v Client) LoadConnectionsFinish(result g.IAsyncResult) (result1 bool, failures gi.CStrArray, err error) {
	iv, err := _I.Get(82, "Client", "load_connections_finish", 85, 50, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_failures := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_failures, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	failures.P = outArgs[0].Pointer()
	result1 = ret.Bool()
	return
}

// nm_client_networking_get_enabled
//
// [ result ] trans: nothing
//
func (v Client) NetworkingGetEnabled() (result bool) {
	iv, err := _I.Get(83, "Client", "networking_get_enabled", 85, 51, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_client_networking_set_enabled
//
// [ enabled ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Client) NetworkingSetEnabled(enabled bool) (result bool, err error) {
	iv, err := _I.Get(84, "Client", "networking_set_enabled", 85, 52, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_enabled := gi.NewBoolArgument(enabled)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_enabled, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_client_reload_connections
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Client) ReloadConnections(cancellable g.ICancellable) (result bool, err error) {
	iv, err := _I.Get(85, "Client", "reload_connections", 85, 53, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_client_reload_connections_async
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Client) ReloadConnectionsAsync(cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(86, "Client", "reload_connections_async", 85, 54, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// nm_client_reload_connections_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v Client) ReloadConnectionsFinish(result g.IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get(87, "Client", "reload_connections_finish", 85, 55, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// nm_client_save_hostname
//
// [ hostname ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Client) SaveHostname(hostname string, cancellable g.ICancellable) (result bool, err error) {
	iv, err := _I.Get(88, "Client", "save_hostname", 85, 56, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_hostname := gi.CString(hostname)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_hostname := gi.NewStringArgument(c_hostname)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_hostname, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_hostname)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_client_save_hostname_async
//
// [ hostname ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Client) SaveHostnameAsync(hostname string, cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(89, "Client", "save_hostname_async", 85, 57, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_hostname := gi.CString(hostname)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_hostname := gi.NewStringArgument(c_hostname)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_hostname, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_hostname)
}

// nm_client_save_hostname_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v Client) SaveHostnameFinish(result g.IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get(90, "Client", "save_hostname_finish", 85, 58, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// nm_client_set_logging
//
// [ level ] trans: nothing
//
// [ domains ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Client) SetLogging(level string, domains string) (result bool, err error) {
	iv, err := _I.Get(91, "Client", "set_logging", 85, 59, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_level := gi.CString(level)
	c_domains := gi.CString(domains)
	arg_v := gi.NewPointerArgument(v.P)
	arg_level := gi.NewStringArgument(c_level)
	arg_domains := gi.NewStringArgument(c_domains)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_level, arg_domains, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_level)
	gi.Free(c_domains)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_client_wimax_get_enabled
//
// [ result ] trans: nothing
//
func (v Client) WimaxGetEnabled() (result bool) {
	iv, err := _I.Get(92, "Client", "wimax_get_enabled", 85, 60, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_client_wimax_hardware_get_enabled
//
// [ result ] trans: nothing
//
func (v Client) WimaxHardwareGetEnabled() (result bool) {
	iv, err := _I.Get(93, "Client", "wimax_hardware_get_enabled", 85, 61, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_client_wimax_set_enabled
//
// [ enabled ] trans: nothing
//
func (v Client) WimaxSetEnabled(enabled bool) {
	iv, err := _I.Get(94, "Client", "wimax_set_enabled", 85, 62, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_enabled := gi.NewBoolArgument(enabled)
	args := []gi.Argument{arg_v, arg_enabled}
	iv.Call(args, nil, nil)
}

// nm_client_wireless_get_enabled
//
// [ result ] trans: nothing
//
func (v Client) WirelessGetEnabled() (result bool) {
	iv, err := _I.Get(95, "Client", "wireless_get_enabled", 85, 63, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_client_wireless_hardware_get_enabled
//
// [ result ] trans: nothing
//
func (v Client) WirelessHardwareGetEnabled() (result bool) {
	iv, err := _I.Get(96, "Client", "wireless_hardware_get_enabled", 85, 64, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_client_wireless_set_enabled
//
// [ enabled ] trans: nothing
//
func (v Client) WirelessSetEnabled(enabled bool) {
	iv, err := _I.Get(97, "Client", "wireless_set_enabled", 85, 65, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_enabled := gi.NewBoolArgument(enabled)
	args := []gi.Argument{arg_v, arg_enabled}
	iv.Call(args, nil, nil)
}

// nm_client_wwan_get_enabled
//
// [ result ] trans: nothing
//
func (v Client) WwanGetEnabled() (result bool) {
	iv, err := _I.Get(98, "Client", "wwan_get_enabled", 85, 66, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_client_wwan_hardware_get_enabled
//
// [ result ] trans: nothing
//
func (v Client) WwanHardwareGetEnabled() (result bool) {
	iv, err := _I.Get(99, "Client", "wwan_hardware_get_enabled", 85, 67, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_client_wwan_set_enabled
//
// [ enabled ] trans: nothing
//
func (v Client) WwanSetEnabled(enabled bool) {
	iv, err := _I.Get(100, "Client", "wwan_set_enabled", 85, 68, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_enabled := gi.NewBoolArgument(enabled)
	args := []gi.Argument{arg_v, arg_enabled}
	iv.Call(args, nil, nil)
}

// ignore GType struct ClientClass

// Enum ClientError
type ClientErrorEnum int

const (
	ClientErrorFailed               ClientErrorEnum = 0
	ClientErrorManagerNotRunning    ClientErrorEnum = 1
	ClientErrorObjectCreationFailed ClientErrorEnum = 2
)

func ClientErrorGetType() gi.GType {
	ret := _I.GetGType(14, "ClientError")
	return ret
}

// Enum ClientPermission
type ClientPermissionEnum int

const (
	ClientPermissionNone                           ClientPermissionEnum = 0
	ClientPermissionEnableDisableNetwork           ClientPermissionEnum = 1
	ClientPermissionEnableDisableWifi              ClientPermissionEnum = 2
	ClientPermissionEnableDisableWwan              ClientPermissionEnum = 3
	ClientPermissionEnableDisableWimax             ClientPermissionEnum = 4
	ClientPermissionSleepWake                      ClientPermissionEnum = 5
	ClientPermissionNetworkControl                 ClientPermissionEnum = 6
	ClientPermissionWifiShareProtected             ClientPermissionEnum = 7
	ClientPermissionWifiShareOpen                  ClientPermissionEnum = 8
	ClientPermissionSettingsModifySystem           ClientPermissionEnum = 9
	ClientPermissionSettingsModifyOwn              ClientPermissionEnum = 10
	ClientPermissionSettingsModifyHostname         ClientPermissionEnum = 11
	ClientPermissionSettingsModifyGlobalDns        ClientPermissionEnum = 12
	ClientPermissionReload                         ClientPermissionEnum = 13
	ClientPermissionCheckpointRollback             ClientPermissionEnum = 14
	ClientPermissionEnableDisableStatistics        ClientPermissionEnum = 15
	ClientPermissionEnableDisableConnectivityCheck ClientPermissionEnum = 16
	ClientPermissionLast                           ClientPermissionEnum = 16
)

func ClientPermissionGetType() gi.GType {
	ret := _I.GetGType(15, "ClientPermission")
	return ret
}

// Enum ClientPermissionResult
type ClientPermissionResultEnum int

const (
	ClientPermissionResultUnknown ClientPermissionResultEnum = 0
	ClientPermissionResultYes     ClientPermissionResultEnum = 1
	ClientPermissionResultAuth    ClientPermissionResultEnum = 2
	ClientPermissionResultNo      ClientPermissionResultEnum = 3
)

func ClientPermissionResultGetType() gi.GType {
	ret := _I.GetGType(16, "ClientPermissionResult")
	return ret
}

// Interface Connection
type Connection struct {
	ConnectionIfc
	P unsafe.Pointer
}
type ConnectionIfc struct{}
type IConnection interface{ P_Connection() unsafe.Pointer }

func (v Connection) P_Connection() unsafe.Pointer { return v.P }
func ConnectionGetType() gi.GType {
	ret := _I.GetGType(17, "Connection")
	return ret
}

// nm_connection_add_setting
//
// [ setting ] trans: everything
//
func (v *ConnectionIfc) AddSetting(setting ISetting) {
	iv, err := _I.Get(101, "Connection", "add_setting", 90, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if setting != nil {
		tmp = setting.P_Setting()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_setting := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_setting}
	iv.Call(args, nil, nil)
}

// nm_connection_clear_secrets
//
func (v *ConnectionIfc) ClearSecrets() {
	iv, err := _I.Get(102, "Connection", "clear_secrets", 90, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_connection_clear_secrets_with_flags
//
// [ func1 ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *ConnectionIfc) ClearSecretsWithFlags(func1 SettingClearSecretsWithFlagsFn) {
	iv, err := _I.Get(103, "Connection", "clear_secrets_with_flags", 90, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var cId uint
	var funcPtr unsafe.Pointer
	if func1 != nil {
		callableInfo := gi.GetCallableInfo("NM", "SettingClearSecretsWithFlagsFn")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallSettingClearSecretsWithFlagsFn(func1, __result, __args)
		}, gi.ScopeCall, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_func1 := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_func1, arg_user_data}
	iv.Call(args, nil, nil)
	gi.UnregisterFClosure(cId)
}

// nm_connection_clear_settings
//
func (v *ConnectionIfc) ClearSettings() {
	iv, err := _I.Get(104, "Connection", "clear_settings", 90, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_connection_compare
//
// [ b ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) Compare(b IConnection, flags SettingCompareFlagsEnum) (result bool) {
	iv, err := _I.Get(105, "Connection", "compare", 90, 4, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if b != nil {
		tmp = b.P_Connection()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_b := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_b, arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_connection_diff
//
// [ b ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ out_settings ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) Diff(b IConnection, flags SettingCompareFlagsEnum, out_settings g.HashTable) (result bool) {
	iv, err := _I.Get(106, "Connection", "diff", 90, 5, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if b != nil {
		tmp = b.P_Connection()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_b := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_out_settings := gi.NewPointerArgument(out_settings.P)
	args := []gi.Argument{arg_v, arg_b, arg_flags, arg_out_settings}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_connection_dump
//
func (v *ConnectionIfc) Dump() {
	iv, err := _I.Get(107, "Connection", "dump", 90, 6, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_connection_for_each_setting_value
//
// [ func1 ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *ConnectionIfc) ForEachSettingValue(func1 SettingValueIterFn) {
	iv, err := _I.Get(108, "Connection", "for_each_setting_value", 90, 7, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var cId uint
	var funcPtr unsafe.Pointer
	if func1 != nil {
		callableInfo := gi.GetCallableInfo("NM", "SettingValueIterFn")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallSettingValueIterFn(func1, __result, __args)
		}, gi.ScopeCall, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_func1 := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_func1, arg_user_data}
	iv.Call(args, nil, nil)
	gi.UnregisterFClosure(cId)
}

// nm_connection_get_connection_type
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetConnectionType() (result string) {
	iv, err := _I.Get(109, "Connection", "get_connection_type", 90, 8, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_connection_get_id
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetId() (result string) {
	iv, err := _I.Get(110, "Connection", "get_id", 90, 9, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_connection_get_interface_name
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetInterfaceName() (result string) {
	iv, err := _I.Get(111, "Connection", "get_interface_name", 90, 10, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_connection_get_path
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetPath() (result string) {
	iv, err := _I.Get(112, "Connection", "get_path", 90, 11, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_connection_get_setting
//
// [ setting_type ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSetting(setting_type gi.GType) (result Setting) {
	iv, err := _I.Get(113, "Connection", "get_setting", 90, 12, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_setting_type := gi.NewUintArgument(uint(setting_type))
	args := []gi.Argument{arg_v, arg_setting_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_802_1x
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSetting8021x() (result Setting8021x) {
	iv, err := _I.Get(114, "Connection", "get_setting_802_1x", 90, 13, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_adsl
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingAdsl() (result SettingAdsl) {
	iv, err := _I.Get(115, "Connection", "get_setting_adsl", 90, 14, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_bluetooth
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingBluetooth() (result SettingBluetooth) {
	iv, err := _I.Get(116, "Connection", "get_setting_bluetooth", 90, 15, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_bond
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingBond() (result SettingBond) {
	iv, err := _I.Get(117, "Connection", "get_setting_bond", 90, 16, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_bridge
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingBridge() (result SettingBridge) {
	iv, err := _I.Get(118, "Connection", "get_setting_bridge", 90, 17, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_bridge_port
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingBridgePort() (result SettingBridgePort) {
	iv, err := _I.Get(119, "Connection", "get_setting_bridge_port", 90, 18, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_by_name
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingByName(name string) (result Setting) {
	iv, err := _I.Get(120, "Connection", "get_setting_by_name", 90, 19, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_cdma
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingCdma() (result SettingCdma) {
	iv, err := _I.Get(121, "Connection", "get_setting_cdma", 90, 20, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_connection
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingConnection() (result SettingConnection) {
	iv, err := _I.Get(122, "Connection", "get_setting_connection", 90, 21, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_dcb
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingDcb() (result SettingDcb) {
	iv, err := _I.Get(123, "Connection", "get_setting_dcb", 90, 22, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_dummy
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingDummy() (result SettingDummy) {
	iv, err := _I.Get(124, "Connection", "get_setting_dummy", 90, 23, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_generic
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingGeneric() (result SettingGeneric) {
	iv, err := _I.Get(125, "Connection", "get_setting_generic", 90, 24, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_gsm
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingGsm() (result SettingGsm) {
	iv, err := _I.Get(126, "Connection", "get_setting_gsm", 90, 25, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_infiniband
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingInfiniband() (result SettingInfiniband) {
	iv, err := _I.Get(127, "Connection", "get_setting_infiniband", 90, 26, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_ip4_config
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingIp4Config() (result SettingIP4Config) {
	iv, err := _I.Get(128, "Connection", "get_setting_ip4_config", 90, 27, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_ip6_config
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingIp6Config() (result SettingIP6Config) {
	iv, err := _I.Get(129, "Connection", "get_setting_ip6_config", 90, 28, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_ip_tunnel
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingIpTunnel() (result SettingIPTunnel) {
	iv, err := _I.Get(130, "Connection", "get_setting_ip_tunnel", 90, 29, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_macsec
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingMacsec() (result SettingMacsec) {
	iv, err := _I.Get(131, "Connection", "get_setting_macsec", 90, 30, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_macvlan
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingMacvlan() (result SettingMacvlan) {
	iv, err := _I.Get(132, "Connection", "get_setting_macvlan", 90, 31, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_olpc_mesh
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingOlpcMesh() (result SettingOlpcMesh) {
	iv, err := _I.Get(133, "Connection", "get_setting_olpc_mesh", 90, 32, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_ovs_bridge
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingOvsBridge() (result SettingOvsBridge) {
	iv, err := _I.Get(134, "Connection", "get_setting_ovs_bridge", 90, 33, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_ovs_interface
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingOvsInterface() (result SettingOvsInterface) {
	iv, err := _I.Get(135, "Connection", "get_setting_ovs_interface", 90, 34, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_ovs_patch
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingOvsPatch() (result SettingOvsPatch) {
	iv, err := _I.Get(136, "Connection", "get_setting_ovs_patch", 90, 35, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_ovs_port
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingOvsPort() (result SettingOvsPort) {
	iv, err := _I.Get(137, "Connection", "get_setting_ovs_port", 90, 36, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_ppp
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingPpp() (result SettingPpp) {
	iv, err := _I.Get(138, "Connection", "get_setting_ppp", 90, 37, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_pppoe
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingPppoe() (result SettingPppoe) {
	iv, err := _I.Get(139, "Connection", "get_setting_pppoe", 90, 38, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_proxy
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingProxy() (result SettingProxy) {
	iv, err := _I.Get(140, "Connection", "get_setting_proxy", 90, 39, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_serial
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingSerial() (result SettingSerial) {
	iv, err := _I.Get(141, "Connection", "get_setting_serial", 90, 40, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_tc_config
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingTcConfig() (result SettingTCConfig) {
	iv, err := _I.Get(142, "Connection", "get_setting_tc_config", 90, 41, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_team
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingTeam() (result SettingTeam) {
	iv, err := _I.Get(143, "Connection", "get_setting_team", 90, 42, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_team_port
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingTeamPort() (result SettingTeamPort) {
	iv, err := _I.Get(144, "Connection", "get_setting_team_port", 90, 43, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_tun
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingTun() (result SettingTun) {
	iv, err := _I.Get(145, "Connection", "get_setting_tun", 90, 44, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_vlan
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingVlan() (result SettingVlan) {
	iv, err := _I.Get(146, "Connection", "get_setting_vlan", 90, 45, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_vpn
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingVpn() (result SettingVpn) {
	iv, err := _I.Get(147, "Connection", "get_setting_vpn", 90, 46, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_vxlan
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingVxlan() (result SettingVxlan) {
	iv, err := _I.Get(148, "Connection", "get_setting_vxlan", 90, 47, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_wimax
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingWimax() (result SettingWimax) {
	iv, err := _I.Get(149, "Connection", "get_setting_wimax", 90, 48, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_wired
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingWired() (result SettingWired) {
	iv, err := _I.Get(150, "Connection", "get_setting_wired", 90, 49, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_wireless
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingWireless() (result SettingWireless) {
	iv, err := _I.Get(151, "Connection", "get_setting_wireless", 90, 50, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_setting_wireless_security
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetSettingWirelessSecurity() (result SettingWirelessSecurity) {
	iv, err := _I.Get(152, "Connection", "get_setting_wireless_security", 90, 51, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_get_settings
//
// [ out_length ] trans: everything, dir: out
//
// [ result ] trans: container
//
func (v *ConnectionIfc) GetSettings() (result gi.PointerArray) {
	iv, err := _I.Get(153, "Connection", "get_settings", 90, 52, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_out_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_out_length}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var out_length uint32
	_ = out_length
	out_length = outArgs[0].Uint32()
	result = gi.PointerArray{P: ret.Pointer(), Len: int(out_length)}
	return
}

// nm_connection_get_uuid
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) GetUuid() (result string) {
	iv, err := _I.Get(154, "Connection", "get_uuid", 90, 53, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_connection_get_virtual_device_description
//
// [ result ] trans: everything
//
func (v *ConnectionIfc) GetVirtualDeviceDescription() (result string) {
	iv, err := _I.Get(155, "Connection", "get_virtual_device_description", 90, 54, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// nm_connection_is_type
//
// [ type1 ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) IsType(type1 string) (result bool) {
	iv, err := _I.Get(156, "Connection", "is_type", 90, 55, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_type1 := gi.CString(type1)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_type1 := gi.NewStringArgument(c_type1)
	args := []gi.Argument{arg_v, arg_type1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_type1)
	result = ret.Bool()
	return
}

// nm_connection_is_virtual
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) IsVirtual() (result bool) {
	iv, err := _I.Get(157, "Connection", "is_virtual", 90, 56, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_connection_need_secrets
//
// [ hints ] trans: container, dir: out
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) NeedSecrets() (result string, hints int /*TODO_TYPE tag: array*/) {
	iv, err := _I.Get(158, "Connection", "need_secrets", 90, 57, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_hints := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_hints}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	hints = outArgs[0].Int() /*TODO*/
	result = ret.String().Copy()
	return
}

// nm_connection_normalize
//
// [ parameters ] trans: nothing
//
// [ modified ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) Normalize(parameters g.HashTable) (result bool, modified bool, err error) {
	iv, err := _I.Get(159, "Connection", "normalize", 90, 58, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_parameters := gi.NewPointerArgument(parameters.P)
	arg_modified := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_parameters, arg_modified, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	modified = outArgs[0].Bool()
	result = ret.Bool()
	return
}

// nm_connection_remove_setting
//
// [ setting_type ] trans: nothing
//
func (v *ConnectionIfc) RemoveSetting(setting_type gi.GType) {
	iv, err := _I.Get(160, "Connection", "remove_setting", 90, 59, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_setting_type := gi.NewUintArgument(uint(setting_type))
	args := []gi.Argument{arg_v, arg_setting_type}
	iv.Call(args, nil, nil)
}

// nm_connection_replace_settings
//
// [ new_settings ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) ReplaceSettings(new_settings g.Variant) (result bool, err error) {
	iv, err := _I.Get(161, "Connection", "replace_settings", 90, 60, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_new_settings := gi.NewPointerArgument(new_settings.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_new_settings, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_connection_replace_settings_from_connection
//
// [ new_connection ] trans: nothing
//
func (v *ConnectionIfc) ReplaceSettingsFromConnection(new_connection IConnection) {
	iv, err := _I.Get(162, "Connection", "replace_settings_from_connection", 90, 61, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if new_connection != nil {
		tmp = new_connection.P_Connection()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_new_connection := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_new_connection}
	iv.Call(args, nil, nil)
}

// nm_connection_set_path
//
// [ path ] trans: nothing
//
func (v *ConnectionIfc) SetPath(path string) {
	iv, err := _I.Get(163, "Connection", "set_path", 90, 62, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_path := gi.NewStringArgument(c_path)
	args := []gi.Argument{arg_v, arg_path}
	iv.Call(args, nil, nil)
	gi.Free(c_path)
}

// nm_connection_to_dbus
//
// [ flags ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) ToDbus(flags ConnectionSerializationFlags) (result g.Variant) {
	iv, err := _I.Get(164, "Connection", "to_dbus", 90, 63, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_connection_update_secrets
//
// [ setting_name ] trans: nothing
//
// [ secrets ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) UpdateSecrets(setting_name string, secrets g.Variant) (result bool, err error) {
	iv, err := _I.Get(165, "Connection", "update_secrets", 90, 64, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_setting_name := gi.CString(setting_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_setting_name := gi.NewStringArgument(c_setting_name)
	arg_secrets := gi.NewPointerArgument(secrets.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_setting_name, arg_secrets, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_setting_name)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_connection_verify
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) Verify() (result bool, err error) {
	iv, err := _I.Get(166, "Connection", "verify", 90, 65, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_connection_verify_secrets
//
// [ result ] trans: nothing
//
func (v *ConnectionIfc) VerifySecrets() (result bool, err error) {
	iv, err := _I.Get(167, "Connection", "verify_secrets", 90, 66, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// Enum ConnectionError
type ConnectionErrorEnum int

const (
	ConnectionErrorFailed            ConnectionErrorEnum = 0
	ConnectionErrorSettingnotfound   ConnectionErrorEnum = 1
	ConnectionErrorPropertynotfound  ConnectionErrorEnum = 2
	ConnectionErrorPropertynotsecret ConnectionErrorEnum = 3
	ConnectionErrorMissingsetting    ConnectionErrorEnum = 4
	ConnectionErrorInvalidsetting    ConnectionErrorEnum = 5
	ConnectionErrorMissingproperty   ConnectionErrorEnum = 6
	ConnectionErrorInvalidproperty   ConnectionErrorEnum = 7
)

func ConnectionErrorGetType() gi.GType {
	ret := _I.GetGType(18, "ConnectionError")
	return ret
}

// ignore GType struct ConnectionInterface

// Enum ConnectionMultiConnect
type ConnectionMultiConnectEnum int

const (
	ConnectionMultiConnectDefault        ConnectionMultiConnectEnum = 0
	ConnectionMultiConnectSingle         ConnectionMultiConnectEnum = 1
	ConnectionMultiConnectManualMultiple ConnectionMultiConnectEnum = 2
	ConnectionMultiConnectMultiple       ConnectionMultiConnectEnum = 3
)

func ConnectionMultiConnectGetType() gi.GType {
	ret := _I.GetGType(19, "ConnectionMultiConnect")
	return ret
}

// Flags ConnectionSerializationFlags
type ConnectionSerializationFlags int

const (
	ConnectionSerializationFlagsAll         ConnectionSerializationFlags = 0
	ConnectionSerializationFlagsNoSecrets   ConnectionSerializationFlags = 1
	ConnectionSerializationFlagsOnlySecrets ConnectionSerializationFlags = 2
)

func ConnectionSerializationFlagsGetType() gi.GType {
	ret := _I.GetGType(20, "ConnectionSerializationFlags")
	return ret
}

// Enum ConnectivityState
type ConnectivityStateEnum int

const (
	ConnectivityStateUnknown ConnectivityStateEnum = 0
	ConnectivityStateNone    ConnectivityStateEnum = 1
	ConnectivityStatePortal  ConnectivityStateEnum = 2
	ConnectivityStateLimited ConnectivityStateEnum = 3
	ConnectivityStateFull    ConnectivityStateEnum = 4
)

func ConnectivityStateGetType() gi.GType {
	ret := _I.GetGType(21, "ConnectivityState")
	return ret
}

// Enum CryptoError
type CryptoErrorEnum int

const (
	CryptoErrorFailed           CryptoErrorEnum = 0
	CryptoErrorInvalidData      CryptoErrorEnum = 1
	CryptoErrorInvalidPassword  CryptoErrorEnum = 2
	CryptoErrorUnknownCipher    CryptoErrorEnum = 3
	CryptoErrorDecryptionFailed CryptoErrorEnum = 4
	CryptoErrorEncryptionFailed CryptoErrorEnum = 5
)

func CryptoErrorGetType() gi.GType {
	ret := _I.GetGType(22, "CryptoError")
	return ret
}

// Object Device
type Device struct {
	Object
}

func WrapDevice(p unsafe.Pointer) (r Device) { r.P = p; return }

type IDevice interface{ P_Device() unsafe.Pointer }

func (v Device) P_Device() unsafe.Pointer { return v.P }
func DeviceGetType() gi.GType {
	ret := _I.GetGType(23, "Device")
	return ret
}

// nm_device_disambiguate_names
//
// [ devices ] trans: nothing
//
// [ num_devices ] trans: nothing
//
// [ result ] trans: everything
//
func DeviceDisambiguateNames1(devices gi.PointerArray, num_devices int32) (result gi.CStrArray) {
	iv, err := _I.Get(168, "Device", "disambiguate_names", 274, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_devices := gi.NewPointerArgument(devices.P)
	arg_num_devices := gi.NewInt32Argument(num_devices)
	args := []gi.Argument{arg_devices, arg_num_devices}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// nm_device_connection_compatible
//
// [ connection ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Device) ConnectionCompatible(connection IConnection) (result bool, err error) {
	iv, err := _I.Get(169, "Device", "connection_compatible", 274, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_Connection()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connection := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_connection, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_device_connection_valid
//
// [ connection ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Device) ConnectionValid(connection IConnection) (result bool) {
	iv, err := _I.Get(170, "Device", "connection_valid", 274, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_Connection()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connection := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_connection}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_delete
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Device) Delete(cancellable g.ICancellable) (result bool, err error) {
	iv, err := _I.Get(171, "Device", "delete", 274, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_device_delete_async
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Device) DeleteAsync(cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(172, "Device", "delete_async", 274, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// nm_device_delete_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v Device) DeleteFinish(result g.IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get(173, "Device", "delete_finish", 274, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// nm_device_disconnect
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Device) Disconnect(cancellable g.ICancellable) (result bool, err error) {
	iv, err := _I.Get(174, "Device", "disconnect", 274, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_device_disconnect_async
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Device) DisconnectAsync(cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(175, "Device", "disconnect_async", 274, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// nm_device_disconnect_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v Device) DisconnectFinish(result g.IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get(176, "Device", "disconnect_finish", 274, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// nm_device_filter_connections
//
// [ connections ] trans: nothing
//
// [ result ] trans: everything
//
func (v Device) FilterConnections(connections int /*TODO_TYPE isPtr: true, tag: array*/) (result g.PtrArray) {
	iv, err := _I.Get(177, "Device", "filter_connections", 274, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connections := gi.NewIntArgument(connections) /*TODO*/
	args := []gi.Argument{arg_v, arg_connections}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_device_get_active_connection
//
// [ result ] trans: nothing
//
func (v Device) GetActiveConnection() (result ActiveConnection) {
	iv, err := _I.Get(178, "Device", "get_active_connection", 274, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_device_get_applied_connection
//
// [ flags ] trans: nothing
//
// [ version_id ] trans: everything, dir: out
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v Device) GetAppliedConnection(flags uint32, cancellable g.ICancellable) (result Connection, version_id uint64, err error) {
	iv, err := _I.Get(179, "Device", "get_applied_connection", 274, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_flags := gi.NewUint32Argument(flags)
	arg_version_id := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_flags, arg_version_id, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	version_id = outArgs[0].Uint64()
	result.P = ret.Pointer()
	return
}

// nm_device_get_applied_connection_async
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Device) GetAppliedConnectionAsync(flags uint32, cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(180, "Device", "get_applied_connection_async", 274, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_flags := gi.NewUint32Argument(flags)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// nm_device_get_applied_connection_finish
//
// [ result ] trans: nothing
//
// [ version_id ] trans: everything, dir: out
//
// [ result1 ] trans: everything
//
func (v Device) GetAppliedConnectionFinish(result g.IAsyncResult) (result1 Connection, version_id uint64, err error) {
	iv, err := _I.Get(181, "Device", "get_applied_connection_finish", 274, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_version_id := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_result, arg_version_id, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	version_id = outArgs[0].Uint64()
	result1.P = ret.Pointer()
	return
}

// nm_device_get_autoconnect
//
// [ result ] trans: nothing
//
func (v Device) GetAutoconnect() (result bool) {
	iv, err := _I.Get(182, "Device", "get_autoconnect", 274, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_get_available_connections
//
// [ result ] trans: nothing
//
func (v Device) GetAvailableConnections() (result g.PtrArray) {
	iv, err := _I.Get(183, "Device", "get_available_connections", 274, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_device_get_capabilities
//
// [ result ] trans: nothing
//
func (v Device) GetCapabilities() (result DeviceCapabilitiesFlags) {
	iv, err := _I.Get(184, "Device", "get_capabilities", 274, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = DeviceCapabilitiesFlags(ret.Int())
	return
}

// nm_device_get_description
//
// [ result ] trans: nothing
//
func (v Device) GetDescription() (result string) {
	iv, err := _I.Get(185, "Device", "get_description", 274, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_get_device_type
//
// [ result ] trans: nothing
//
func (v Device) GetDeviceType() (result DeviceTypeEnum) {
	iv, err := _I.Get(186, "Device", "get_device_type", 274, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = DeviceTypeEnum(ret.Int())
	return
}

// nm_device_get_dhcp4_config
//
// [ result ] trans: nothing
//
func (v Device) GetDhcp4Config() (result DhcpConfig) {
	iv, err := _I.Get(187, "Device", "get_dhcp4_config", 274, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_device_get_dhcp6_config
//
// [ result ] trans: nothing
//
func (v Device) GetDhcp6Config() (result DhcpConfig) {
	iv, err := _I.Get(188, "Device", "get_dhcp6_config", 274, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_device_get_driver
//
// [ result ] trans: nothing
//
func (v Device) GetDriver() (result string) {
	iv, err := _I.Get(189, "Device", "get_driver", 274, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_get_driver_version
//
// [ result ] trans: nothing
//
func (v Device) GetDriverVersion() (result string) {
	iv, err := _I.Get(190, "Device", "get_driver_version", 274, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_get_firmware_missing
//
// [ result ] trans: nothing
//
func (v Device) GetFirmwareMissing() (result bool) {
	iv, err := _I.Get(191, "Device", "get_firmware_missing", 274, 23, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_get_firmware_version
//
// [ result ] trans: nothing
//
func (v Device) GetFirmwareVersion() (result string) {
	iv, err := _I.Get(192, "Device", "get_firmware_version", 274, 24, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_get_hw_address
//
// [ result ] trans: nothing
//
func (v Device) GetHwAddress() (result string) {
	iv, err := _I.Get(193, "Device", "get_hw_address", 274, 25, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_get_iface
//
// [ result ] trans: nothing
//
func (v Device) GetIface() (result string) {
	iv, err := _I.Get(194, "Device", "get_iface", 274, 26, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_get_ip4_config
//
// [ result ] trans: nothing
//
func (v Device) GetIp4Config() (result IPConfig) {
	iv, err := _I.Get(195, "Device", "get_ip4_config", 274, 27, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_device_get_ip6_config
//
// [ result ] trans: nothing
//
func (v Device) GetIp6Config() (result IPConfig) {
	iv, err := _I.Get(196, "Device", "get_ip6_config", 274, 28, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_device_get_ip_iface
//
// [ result ] trans: nothing
//
func (v Device) GetIpIface() (result string) {
	iv, err := _I.Get(197, "Device", "get_ip_iface", 274, 29, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_get_lldp_neighbors
//
// [ result ] trans: nothing
//
func (v Device) GetLldpNeighbors() (result g.PtrArray) {
	iv, err := _I.Get(198, "Device", "get_lldp_neighbors", 274, 30, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_device_get_managed
//
// [ result ] trans: nothing
//
func (v Device) GetManaged() (result bool) {
	iv, err := _I.Get(199, "Device", "get_managed", 274, 31, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_get_metered
//
// [ result ] trans: nothing
//
func (v Device) GetMetered() (result MeteredEnum) {
	iv, err := _I.Get(200, "Device", "get_metered", 274, 32, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = MeteredEnum(ret.Int())
	return
}

// nm_device_get_mtu
//
// [ result ] trans: nothing
//
func (v Device) GetMtu() (result uint32) {
	iv, err := _I.Get(201, "Device", "get_mtu", 274, 33, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_device_get_nm_plugin_missing
//
// [ result ] trans: nothing
//
func (v Device) GetNmPluginMissing() (result bool) {
	iv, err := _I.Get(202, "Device", "get_nm_plugin_missing", 274, 34, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_get_physical_port_id
//
// [ result ] trans: nothing
//
func (v Device) GetPhysicalPortId() (result string) {
	iv, err := _I.Get(203, "Device", "get_physical_port_id", 274, 35, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_get_product
//
// [ result ] trans: nothing
//
func (v Device) GetProduct() (result string) {
	iv, err := _I.Get(204, "Device", "get_product", 274, 36, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_get_setting_type
//
// [ result ] trans: nothing
//
func (v Device) GetSettingType() (result gi.GType) {
	iv, err := _I.Get(205, "Device", "get_setting_type", 274, 37, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.GType(ret.Uint())
	return
}

// nm_device_get_state
//
// [ result ] trans: nothing
//
func (v Device) GetState() (result DeviceStateEnum) {
	iv, err := _I.Get(206, "Device", "get_state", 274, 38, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = DeviceStateEnum(ret.Int())
	return
}

// nm_device_get_state_reason
//
// [ result ] trans: nothing
//
func (v Device) GetStateReason() (result DeviceStateReasonEnum) {
	iv, err := _I.Get(207, "Device", "get_state_reason", 274, 39, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = DeviceStateReasonEnum(ret.Int())
	return
}

// nm_device_get_type_description
//
// [ result ] trans: nothing
//
func (v Device) GetTypeDescription() (result string) {
	iv, err := _I.Get(208, "Device", "get_type_description", 274, 40, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_get_udi
//
// [ result ] trans: nothing
//
func (v Device) GetUdi() (result string) {
	iv, err := _I.Get(209, "Device", "get_udi", 274, 41, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_get_vendor
//
// [ result ] trans: nothing
//
func (v Device) GetVendor() (result string) {
	iv, err := _I.Get(210, "Device", "get_vendor", 274, 42, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_is_real
//
// [ result ] trans: nothing
//
func (v Device) IsReal() (result bool) {
	iv, err := _I.Get(211, "Device", "is_real", 274, 43, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_is_software
//
// [ result ] trans: nothing
//
func (v Device) IsSoftware() (result bool) {
	iv, err := _I.Get(212, "Device", "is_software", 274, 44, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_reapply
//
// [ connection ] trans: nothing
//
// [ version_id ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Device) Reapply(connection IConnection, version_id uint64, flags uint32, cancellable g.ICancellable) (result bool, err error) {
	iv, err := _I.Get(213, "Device", "reapply", 274, 45, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_Connection()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connection := gi.NewPointerArgument(tmp)
	arg_version_id := gi.NewUint64Argument(version_id)
	arg_flags := gi.NewUint32Argument(flags)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_connection, arg_version_id, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_device_reapply_async
//
// [ connection ] trans: nothing
//
// [ version_id ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Device) ReapplyAsync(connection IConnection, version_id uint64, flags uint32, cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(214, "Device", "reapply_async", 274, 46, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_Connection()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connection := gi.NewPointerArgument(tmp)
	arg_version_id := gi.NewUint64Argument(version_id)
	arg_flags := gi.NewUint32Argument(flags)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_connection, arg_version_id, arg_flags, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// nm_device_reapply_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v Device) ReapplyFinish(result g.IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get(215, "Device", "reapply_finish", 274, 47, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// nm_device_set_autoconnect
//
// [ autoconnect ] trans: nothing
//
func (v Device) SetAutoconnect(autoconnect bool) {
	iv, err := _I.Get(216, "Device", "set_autoconnect", 274, 48, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_autoconnect := gi.NewBoolArgument(autoconnect)
	args := []gi.Argument{arg_v, arg_autoconnect}
	iv.Call(args, nil, nil)
}

// nm_device_set_managed
//
// [ managed ] trans: nothing
//
func (v Device) SetManaged(managed bool) {
	iv, err := _I.Get(217, "Device", "set_managed", 274, 49, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_managed := gi.NewBoolArgument(managed)
	args := []gi.Argument{arg_v, arg_managed}
	iv.Call(args, nil, nil)
}

// Object Device6Lowpan
type Device6Lowpan struct {
	Device
}

func WrapDevice6Lowpan(p unsafe.Pointer) (r Device6Lowpan) { r.P = p; return }

type IDevice6Lowpan interface{ P_Device6Lowpan() unsafe.Pointer }

func (v Device6Lowpan) P_Device6Lowpan() unsafe.Pointer { return v.P }
func Device6LowpanGetType() gi.GType {
	ret := _I.GetGType(24, "Device6Lowpan")
	return ret
}

// nm_device_6lowpan_get_hw_address
//
// [ result ] trans: nothing
//
func (v Device6Lowpan) GetHwAddress() (result string) {
	iv, err := _I.Get(218, "Device6Lowpan", "get_hw_address", 275, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_6lowpan_get_parent
//
// [ result ] trans: nothing
//
func (v Device6Lowpan) GetParent() (result Device) {
	iv, err := _I.Get(219, "Device6Lowpan", "get_parent", 275, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Object DeviceAdsl
type DeviceAdsl struct {
	Device
}

func WrapDeviceAdsl(p unsafe.Pointer) (r DeviceAdsl) { r.P = p; return }

type IDeviceAdsl interface{ P_DeviceAdsl() unsafe.Pointer }

func (v DeviceAdsl) P_DeviceAdsl() unsafe.Pointer { return v.P }
func DeviceAdslGetType() gi.GType {
	ret := _I.GetGType(25, "DeviceAdsl")
	return ret
}

// nm_device_adsl_get_carrier
//
// [ result ] trans: nothing
//
func (v DeviceAdsl) GetCarrier() (result bool) {
	iv, err := _I.Get(220, "DeviceAdsl", "get_carrier", 276, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct DeviceAdslClass

// Object DeviceBond
type DeviceBond struct {
	Device
}

func WrapDeviceBond(p unsafe.Pointer) (r DeviceBond) { r.P = p; return }

type IDeviceBond interface{ P_DeviceBond() unsafe.Pointer }

func (v DeviceBond) P_DeviceBond() unsafe.Pointer { return v.P }
func DeviceBondGetType() gi.GType {
	ret := _I.GetGType(26, "DeviceBond")
	return ret
}

// nm_device_bond_get_carrier
//
// [ result ] trans: nothing
//
func (v DeviceBond) GetCarrier() (result bool) {
	iv, err := _I.Get(221, "DeviceBond", "get_carrier", 278, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_bond_get_hw_address
//
// [ result ] trans: nothing
//
func (v DeviceBond) GetHwAddress() (result string) {
	iv, err := _I.Get(222, "DeviceBond", "get_hw_address", 278, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_bond_get_slaves
//
// [ result ] trans: nothing
//
func (v DeviceBond) GetSlaves() (result g.PtrArray) {
	iv, err := _I.Get(223, "DeviceBond", "get_slaves", 278, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct DeviceBondClass

// Object DeviceBridge
type DeviceBridge struct {
	Device
}

func WrapDeviceBridge(p unsafe.Pointer) (r DeviceBridge) { r.P = p; return }

type IDeviceBridge interface{ P_DeviceBridge() unsafe.Pointer }

func (v DeviceBridge) P_DeviceBridge() unsafe.Pointer { return v.P }
func DeviceBridgeGetType() gi.GType {
	ret := _I.GetGType(27, "DeviceBridge")
	return ret
}

// nm_device_bridge_get_carrier
//
// [ result ] trans: nothing
//
func (v DeviceBridge) GetCarrier() (result bool) {
	iv, err := _I.Get(224, "DeviceBridge", "get_carrier", 280, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_bridge_get_hw_address
//
// [ result ] trans: nothing
//
func (v DeviceBridge) GetHwAddress() (result string) {
	iv, err := _I.Get(225, "DeviceBridge", "get_hw_address", 280, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_bridge_get_slaves
//
// [ result ] trans: nothing
//
func (v DeviceBridge) GetSlaves() (result g.PtrArray) {
	iv, err := _I.Get(226, "DeviceBridge", "get_slaves", 280, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct DeviceBridgeClass

// Object DeviceBt
type DeviceBt struct {
	Device
}

func WrapDeviceBt(p unsafe.Pointer) (r DeviceBt) { r.P = p; return }

type IDeviceBt interface{ P_DeviceBt() unsafe.Pointer }

func (v DeviceBt) P_DeviceBt() unsafe.Pointer { return v.P }
func DeviceBtGetType() gi.GType {
	ret := _I.GetGType(28, "DeviceBt")
	return ret
}

// nm_device_bt_get_capabilities
//
// [ result ] trans: nothing
//
func (v DeviceBt) GetCapabilities() (result BluetoothCapabilitiesFlags) {
	iv, err := _I.Get(227, "DeviceBt", "get_capabilities", 282, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = BluetoothCapabilitiesFlags(ret.Int())
	return
}

// nm_device_bt_get_hw_address
//
// [ result ] trans: nothing
//
func (v DeviceBt) GetHwAddress() (result string) {
	iv, err := _I.Get(228, "DeviceBt", "get_hw_address", 282, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_bt_get_name
//
// [ result ] trans: nothing
//
func (v DeviceBt) GetName() (result string) {
	iv, err := _I.Get(229, "DeviceBt", "get_name", 282, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// ignore GType struct DeviceBtClass

// Flags DeviceCapabilities
type DeviceCapabilitiesFlags int

const (
	DeviceCapabilitiesNone          DeviceCapabilitiesFlags = 0
	DeviceCapabilitiesNmSupported   DeviceCapabilitiesFlags = 1
	DeviceCapabilitiesCarrierDetect DeviceCapabilitiesFlags = 2
	DeviceCapabilitiesIsSoftware    DeviceCapabilitiesFlags = 4
	DeviceCapabilitiesSriov         DeviceCapabilitiesFlags = 8
)

func DeviceCapabilitiesGetType() gi.GType {
	ret := _I.GetGType(29, "DeviceCapabilities")
	return ret
}

// ignore GType struct DeviceClass

// Object DeviceDummy
type DeviceDummy struct {
	Device
}

func WrapDeviceDummy(p unsafe.Pointer) (r DeviceDummy) { r.P = p; return }

type IDeviceDummy interface{ P_DeviceDummy() unsafe.Pointer }

func (v DeviceDummy) P_DeviceDummy() unsafe.Pointer { return v.P }
func DeviceDummyGetType() gi.GType {
	ret := _I.GetGType(30, "DeviceDummy")
	return ret
}

// nm_device_dummy_get_hw_address
//
// [ result ] trans: nothing
//
func (v DeviceDummy) GetHwAddress() (result string) {
	iv, err := _I.Get(230, "DeviceDummy", "get_hw_address", 286, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// ignore GType struct DeviceDummyClass

// Enum DeviceError
type DeviceErrorEnum int

const (
	DeviceErrorFailed                 DeviceErrorEnum = 0
	DeviceErrorCreationfailed         DeviceErrorEnum = 1
	DeviceErrorInvalidconnection      DeviceErrorEnum = 2
	DeviceErrorIncompatibleconnection DeviceErrorEnum = 3
	DeviceErrorNotactive              DeviceErrorEnum = 4
	DeviceErrorNotsoftware            DeviceErrorEnum = 5
	DeviceErrorNotallowed             DeviceErrorEnum = 6
	DeviceErrorSpecificobjectnotfound DeviceErrorEnum = 7
	DeviceErrorVersionidmismatch      DeviceErrorEnum = 8
	DeviceErrorMissingdependencies    DeviceErrorEnum = 9
)

func DeviceErrorGetType() gi.GType {
	ret := _I.GetGType(31, "DeviceError")
	return ret
}

// Object DeviceEthernet
type DeviceEthernet struct {
	Device
}

func WrapDeviceEthernet(p unsafe.Pointer) (r DeviceEthernet) { r.P = p; return }

type IDeviceEthernet interface{ P_DeviceEthernet() unsafe.Pointer }

func (v DeviceEthernet) P_DeviceEthernet() unsafe.Pointer { return v.P }
func DeviceEthernetGetType() gi.GType {
	ret := _I.GetGType(32, "DeviceEthernet")
	return ret
}

// nm_device_ethernet_get_carrier
//
// [ result ] trans: nothing
//
func (v DeviceEthernet) GetCarrier() (result bool) {
	iv, err := _I.Get(231, "DeviceEthernet", "get_carrier", 289, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_ethernet_get_hw_address
//
// [ result ] trans: nothing
//
func (v DeviceEthernet) GetHwAddress() (result string) {
	iv, err := _I.Get(232, "DeviceEthernet", "get_hw_address", 289, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_ethernet_get_permanent_hw_address
//
// [ result ] trans: nothing
//
func (v DeviceEthernet) GetPermanentHwAddress() (result string) {
	iv, err := _I.Get(233, "DeviceEthernet", "get_permanent_hw_address", 289, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_ethernet_get_s390_subchannels
//
// [ result ] trans: nothing
//
func (v DeviceEthernet) GetS390Subchannels() (result gi.CStrArray) {
	iv, err := _I.Get(234, "DeviceEthernet", "get_s390_subchannels", 289, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// nm_device_ethernet_get_speed
//
// [ result ] trans: nothing
//
func (v DeviceEthernet) GetSpeed() (result uint32) {
	iv, err := _I.Get(235, "DeviceEthernet", "get_speed", 289, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// ignore GType struct DeviceEthernetClass

// Object DeviceGeneric
type DeviceGeneric struct {
	Device
}

func WrapDeviceGeneric(p unsafe.Pointer) (r DeviceGeneric) { r.P = p; return }

type IDeviceGeneric interface{ P_DeviceGeneric() unsafe.Pointer }

func (v DeviceGeneric) P_DeviceGeneric() unsafe.Pointer { return v.P }
func DeviceGenericGetType() gi.GType {
	ret := _I.GetGType(33, "DeviceGeneric")
	return ret
}

// nm_device_generic_get_hw_address
//
// [ result ] trans: nothing
//
func (v DeviceGeneric) GetHwAddress() (result string) {
	iv, err := _I.Get(236, "DeviceGeneric", "get_hw_address", 291, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// ignore GType struct DeviceGenericClass

// Object DeviceIPTunnel
type DeviceIPTunnel struct {
	Device
}

func WrapDeviceIPTunnel(p unsafe.Pointer) (r DeviceIPTunnel) { r.P = p; return }

type IDeviceIPTunnel interface{ P_DeviceIPTunnel() unsafe.Pointer }

func (v DeviceIPTunnel) P_DeviceIPTunnel() unsafe.Pointer { return v.P }
func DeviceIPTunnelGetType() gi.GType {
	ret := _I.GetGType(34, "DeviceIPTunnel")
	return ret
}

// nm_device_ip_tunnel_get_encapsulation_limit
//
// [ result ] trans: nothing
//
func (v DeviceIPTunnel) GetEncapsulationLimit() (result uint8) {
	iv, err := _I.Get(237, "DeviceIPTunnel", "get_encapsulation_limit", 293, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint8()
	return
}

// nm_device_ip_tunnel_get_flags
//
// [ result ] trans: nothing
//
func (v DeviceIPTunnel) GetFlags() (result IPTunnelFlags) {
	iv, err := _I.Get(238, "DeviceIPTunnel", "get_flags", 293, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = IPTunnelFlags(ret.Int())
	return
}

// nm_device_ip_tunnel_get_flow_label
//
// [ result ] trans: nothing
//
func (v DeviceIPTunnel) GetFlowLabel() (result uint32) {
	iv, err := _I.Get(239, "DeviceIPTunnel", "get_flow_label", 293, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_device_ip_tunnel_get_input_key
//
// [ result ] trans: nothing
//
func (v DeviceIPTunnel) GetInputKey() (result string) {
	iv, err := _I.Get(240, "DeviceIPTunnel", "get_input_key", 293, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_ip_tunnel_get_local
//
// [ result ] trans: nothing
//
func (v DeviceIPTunnel) GetLocal() (result string) {
	iv, err := _I.Get(241, "DeviceIPTunnel", "get_local", 293, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_ip_tunnel_get_mode
//
// [ result ] trans: nothing
//
func (v DeviceIPTunnel) GetMode() (result IPTunnelModeEnum) {
	iv, err := _I.Get(242, "DeviceIPTunnel", "get_mode", 293, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = IPTunnelModeEnum(ret.Int())
	return
}

// nm_device_ip_tunnel_get_output_key
//
// [ result ] trans: nothing
//
func (v DeviceIPTunnel) GetOutputKey() (result string) {
	iv, err := _I.Get(243, "DeviceIPTunnel", "get_output_key", 293, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_ip_tunnel_get_parent
//
// [ result ] trans: nothing
//
func (v DeviceIPTunnel) GetParent() (result Device) {
	iv, err := _I.Get(244, "DeviceIPTunnel", "get_parent", 293, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_device_ip_tunnel_get_path_mtu_discovery
//
// [ result ] trans: nothing
//
func (v DeviceIPTunnel) GetPathMtuDiscovery() (result bool) {
	iv, err := _I.Get(245, "DeviceIPTunnel", "get_path_mtu_discovery", 293, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_ip_tunnel_get_remote
//
// [ result ] trans: nothing
//
func (v DeviceIPTunnel) GetRemote() (result string) {
	iv, err := _I.Get(246, "DeviceIPTunnel", "get_remote", 293, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_ip_tunnel_get_tos
//
// [ result ] trans: nothing
//
func (v DeviceIPTunnel) GetTos() (result uint8) {
	iv, err := _I.Get(247, "DeviceIPTunnel", "get_tos", 293, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint8()
	return
}

// nm_device_ip_tunnel_get_ttl
//
// [ result ] trans: nothing
//
func (v DeviceIPTunnel) GetTtl() (result uint8) {
	iv, err := _I.Get(248, "DeviceIPTunnel", "get_ttl", 293, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint8()
	return
}

// ignore GType struct DeviceIPTunnelClass

// Object DeviceInfiniband
type DeviceInfiniband struct {
	Device
}

func WrapDeviceInfiniband(p unsafe.Pointer) (r DeviceInfiniband) { r.P = p; return }

type IDeviceInfiniband interface{ P_DeviceInfiniband() unsafe.Pointer }

func (v DeviceInfiniband) P_DeviceInfiniband() unsafe.Pointer { return v.P }
func DeviceInfinibandGetType() gi.GType {
	ret := _I.GetGType(35, "DeviceInfiniband")
	return ret
}

// nm_device_infiniband_get_carrier
//
// [ result ] trans: nothing
//
func (v DeviceInfiniband) GetCarrier() (result bool) {
	iv, err := _I.Get(249, "DeviceInfiniband", "get_carrier", 295, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_infiniband_get_hw_address
//
// [ result ] trans: nothing
//
func (v DeviceInfiniband) GetHwAddress() (result string) {
	iv, err := _I.Get(250, "DeviceInfiniband", "get_hw_address", 295, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// ignore GType struct DeviceInfinibandClass

// Object DeviceMacsec
type DeviceMacsec struct {
	Device
}

func WrapDeviceMacsec(p unsafe.Pointer) (r DeviceMacsec) { r.P = p; return }

type IDeviceMacsec interface{ P_DeviceMacsec() unsafe.Pointer }

func (v DeviceMacsec) P_DeviceMacsec() unsafe.Pointer { return v.P }
func DeviceMacsecGetType() gi.GType {
	ret := _I.GetGType(36, "DeviceMacsec")
	return ret
}

// nm_device_macsec_get_cipher_suite
//
// [ result ] trans: nothing
//
func (v DeviceMacsec) GetCipherSuite() (result uint64) {
	iv, err := _I.Get(251, "DeviceMacsec", "get_cipher_suite", 297, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint64()
	return
}

// nm_device_macsec_get_encoding_sa
//
// [ result ] trans: nothing
//
func (v DeviceMacsec) GetEncodingSa() (result uint8) {
	iv, err := _I.Get(252, "DeviceMacsec", "get_encoding_sa", 297, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint8()
	return
}

// nm_device_macsec_get_encrypt
//
// [ result ] trans: nothing
//
func (v DeviceMacsec) GetEncrypt() (result bool) {
	iv, err := _I.Get(253, "DeviceMacsec", "get_encrypt", 297, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_macsec_get_es
//
// [ result ] trans: nothing
//
func (v DeviceMacsec) GetEs() (result bool) {
	iv, err := _I.Get(254, "DeviceMacsec", "get_es", 297, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_macsec_get_hw_address
//
// [ result ] trans: nothing
//
func (v DeviceMacsec) GetHwAddress() (result string) {
	iv, err := _I.Get(255, "DeviceMacsec", "get_hw_address", 297, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_macsec_get_icv_length
//
// [ result ] trans: nothing
//
func (v DeviceMacsec) GetIcvLength() (result uint8) {
	iv, err := _I.Get(256, "DeviceMacsec", "get_icv_length", 297, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint8()
	return
}

// nm_device_macsec_get_include_sci
//
// [ result ] trans: nothing
//
func (v DeviceMacsec) GetIncludeSci() (result bool) {
	iv, err := _I.Get(257, "DeviceMacsec", "get_include_sci", 297, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_macsec_get_parent
//
// [ result ] trans: nothing
//
func (v DeviceMacsec) GetParent() (result Device) {
	iv, err := _I.Get(258, "DeviceMacsec", "get_parent", 297, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_device_macsec_get_protect
//
// [ result ] trans: nothing
//
func (v DeviceMacsec) GetProtect() (result bool) {
	iv, err := _I.Get(259, "DeviceMacsec", "get_protect", 297, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_macsec_get_replay_protect
//
// [ result ] trans: nothing
//
func (v DeviceMacsec) GetReplayProtect() (result bool) {
	iv, err := _I.Get(260, "DeviceMacsec", "get_replay_protect", 297, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_macsec_get_scb
//
// [ result ] trans: nothing
//
func (v DeviceMacsec) GetScb() (result bool) {
	iv, err := _I.Get(261, "DeviceMacsec", "get_scb", 297, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_macsec_get_sci
//
// [ result ] trans: nothing
//
func (v DeviceMacsec) GetSci() (result uint64) {
	iv, err := _I.Get(262, "DeviceMacsec", "get_sci", 297, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint64()
	return
}

// nm_device_macsec_get_validation
//
// [ result ] trans: nothing
//
func (v DeviceMacsec) GetValidation() (result string) {
	iv, err := _I.Get(263, "DeviceMacsec", "get_validation", 297, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_macsec_get_window
//
// [ result ] trans: nothing
//
func (v DeviceMacsec) GetWindow() (result uint32) {
	iv, err := _I.Get(264, "DeviceMacsec", "get_window", 297, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// ignore GType struct DeviceMacsecClass

// Object DeviceMacvlan
type DeviceMacvlan struct {
	Device
}

func WrapDeviceMacvlan(p unsafe.Pointer) (r DeviceMacvlan) { r.P = p; return }

type IDeviceMacvlan interface{ P_DeviceMacvlan() unsafe.Pointer }

func (v DeviceMacvlan) P_DeviceMacvlan() unsafe.Pointer { return v.P }
func DeviceMacvlanGetType() gi.GType {
	ret := _I.GetGType(37, "DeviceMacvlan")
	return ret
}

// nm_device_macvlan_get_hw_address
//
// [ result ] trans: nothing
//
func (v DeviceMacvlan) GetHwAddress() (result string) {
	iv, err := _I.Get(265, "DeviceMacvlan", "get_hw_address", 299, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_macvlan_get_mode
//
// [ result ] trans: nothing
//
func (v DeviceMacvlan) GetMode() (result string) {
	iv, err := _I.Get(266, "DeviceMacvlan", "get_mode", 299, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_macvlan_get_no_promisc
//
// [ result ] trans: nothing
//
func (v DeviceMacvlan) GetNoPromisc() (result bool) {
	iv, err := _I.Get(267, "DeviceMacvlan", "get_no_promisc", 299, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_macvlan_get_parent
//
// [ result ] trans: nothing
//
func (v DeviceMacvlan) GetParent() (result Device) {
	iv, err := _I.Get(268, "DeviceMacvlan", "get_parent", 299, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_device_macvlan_get_tap
//
// [ result ] trans: nothing
//
func (v DeviceMacvlan) GetTap() (result bool) {
	iv, err := _I.Get(269, "DeviceMacvlan", "get_tap", 299, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct DeviceMacvlanClass

// Object DeviceModem
type DeviceModem struct {
	Device
}

func WrapDeviceModem(p unsafe.Pointer) (r DeviceModem) { r.P = p; return }

type IDeviceModem interface{ P_DeviceModem() unsafe.Pointer }

func (v DeviceModem) P_DeviceModem() unsafe.Pointer { return v.P }
func DeviceModemGetType() gi.GType {
	ret := _I.GetGType(38, "DeviceModem")
	return ret
}

// nm_device_modem_get_current_capabilities
//
// [ result ] trans: nothing
//
func (v DeviceModem) GetCurrentCapabilities() (result DeviceModemCapabilitiesFlags) {
	iv, err := _I.Get(270, "DeviceModem", "get_current_capabilities", 301, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = DeviceModemCapabilitiesFlags(ret.Int())
	return
}

// nm_device_modem_get_modem_capabilities
//
// [ result ] trans: nothing
//
func (v DeviceModem) GetModemCapabilities() (result DeviceModemCapabilitiesFlags) {
	iv, err := _I.Get(271, "DeviceModem", "get_modem_capabilities", 301, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = DeviceModemCapabilitiesFlags(ret.Int())
	return
}

// Flags DeviceModemCapabilities
type DeviceModemCapabilitiesFlags int

const (
	DeviceModemCapabilitiesNone     DeviceModemCapabilitiesFlags = 0
	DeviceModemCapabilitiesPots     DeviceModemCapabilitiesFlags = 1
	DeviceModemCapabilitiesCdmaEvdo DeviceModemCapabilitiesFlags = 2
	DeviceModemCapabilitiesGsmUmts  DeviceModemCapabilitiesFlags = 4
	DeviceModemCapabilitiesLte      DeviceModemCapabilitiesFlags = 8
)

func DeviceModemCapabilitiesGetType() gi.GType {
	ret := _I.GetGType(39, "DeviceModemCapabilities")
	return ret
}

// ignore GType struct DeviceModemClass

// Object DeviceOlpcMesh
type DeviceOlpcMesh struct {
	Device
}

func WrapDeviceOlpcMesh(p unsafe.Pointer) (r DeviceOlpcMesh) { r.P = p; return }

type IDeviceOlpcMesh interface{ P_DeviceOlpcMesh() unsafe.Pointer }

func (v DeviceOlpcMesh) P_DeviceOlpcMesh() unsafe.Pointer { return v.P }
func DeviceOlpcMeshGetType() gi.GType {
	ret := _I.GetGType(40, "DeviceOlpcMesh")
	return ret
}

// nm_device_olpc_mesh_get_active_channel
//
// [ result ] trans: nothing
//
func (v DeviceOlpcMesh) GetActiveChannel() (result uint32) {
	iv, err := _I.Get(272, "DeviceOlpcMesh", "get_active_channel", 304, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_device_olpc_mesh_get_companion
//
// [ result ] trans: nothing
//
func (v DeviceOlpcMesh) GetCompanion() (result DeviceWifi) {
	iv, err := _I.Get(273, "DeviceOlpcMesh", "get_companion", 304, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_device_olpc_mesh_get_hw_address
//
// [ result ] trans: nothing
//
func (v DeviceOlpcMesh) GetHwAddress() (result string) {
	iv, err := _I.Get(274, "DeviceOlpcMesh", "get_hw_address", 304, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// ignore GType struct DeviceOlpcMeshClass

// Object DeviceOvsBridge
type DeviceOvsBridge struct {
	Device
}

func WrapDeviceOvsBridge(p unsafe.Pointer) (r DeviceOvsBridge) { r.P = p; return }

type IDeviceOvsBridge interface{ P_DeviceOvsBridge() unsafe.Pointer }

func (v DeviceOvsBridge) P_DeviceOvsBridge() unsafe.Pointer { return v.P }
func DeviceOvsBridgeGetType() gi.GType {
	ret := _I.GetGType(41, "DeviceOvsBridge")
	return ret
}

// nm_device_ovs_bridge_get_slaves
//
// [ result ] trans: nothing
//
func (v DeviceOvsBridge) GetSlaves() (result g.PtrArray) {
	iv, err := _I.Get(275, "DeviceOvsBridge", "get_slaves", 306, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct DeviceOvsBridgeClass

// Object DeviceOvsInterface
type DeviceOvsInterface struct {
	Device
}

func WrapDeviceOvsInterface(p unsafe.Pointer) (r DeviceOvsInterface) { r.P = p; return }

type IDeviceOvsInterface interface{ P_DeviceOvsInterface() unsafe.Pointer }

func (v DeviceOvsInterface) P_DeviceOvsInterface() unsafe.Pointer { return v.P }
func DeviceOvsInterfaceGetType() gi.GType {
	ret := _I.GetGType(42, "DeviceOvsInterface")
	return ret
}

// ignore GType struct DeviceOvsInterfaceClass

// Object DeviceOvsPort
type DeviceOvsPort struct {
	Device
}

func WrapDeviceOvsPort(p unsafe.Pointer) (r DeviceOvsPort) { r.P = p; return }

type IDeviceOvsPort interface{ P_DeviceOvsPort() unsafe.Pointer }

func (v DeviceOvsPort) P_DeviceOvsPort() unsafe.Pointer { return v.P }
func DeviceOvsPortGetType() gi.GType {
	ret := _I.GetGType(43, "DeviceOvsPort")
	return ret
}

// nm_device_ovs_port_get_slaves
//
// [ result ] trans: nothing
//
func (v DeviceOvsPort) GetSlaves() (result g.PtrArray) {
	iv, err := _I.Get(276, "DeviceOvsPort", "get_slaves", 310, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct DeviceOvsPortClass

// Object DevicePpp
type DevicePpp struct {
	Device
}

func WrapDevicePpp(p unsafe.Pointer) (r DevicePpp) { r.P = p; return }

type IDevicePpp interface{ P_DevicePpp() unsafe.Pointer }

func (v DevicePpp) P_DevicePpp() unsafe.Pointer { return v.P }
func DevicePppGetType() gi.GType {
	ret := _I.GetGType(44, "DevicePpp")
	return ret
}

// ignore GType struct DevicePppClass

// Enum DeviceState
type DeviceStateEnum int

const (
	DeviceStateUnknown      DeviceStateEnum = 0
	DeviceStateUnmanaged    DeviceStateEnum = 10
	DeviceStateUnavailable  DeviceStateEnum = 20
	DeviceStateDisconnected DeviceStateEnum = 30
	DeviceStatePrepare      DeviceStateEnum = 40
	DeviceStateConfig       DeviceStateEnum = 50
	DeviceStateNeedAuth     DeviceStateEnum = 60
	DeviceStateIpConfig     DeviceStateEnum = 70
	DeviceStateIpCheck      DeviceStateEnum = 80
	DeviceStateSecondaries  DeviceStateEnum = 90
	DeviceStateActivated    DeviceStateEnum = 100
	DeviceStateDeactivating DeviceStateEnum = 110
	DeviceStateFailed       DeviceStateEnum = 120
)

func DeviceStateGetType() gi.GType {
	ret := _I.GetGType(45, "DeviceState")
	return ret
}

// Enum DeviceStateReason
type DeviceStateReasonEnum int

const (
	DeviceStateReasonNone                        DeviceStateReasonEnum = 0
	DeviceStateReasonUnknown                     DeviceStateReasonEnum = 1
	DeviceStateReasonNowManaged                  DeviceStateReasonEnum = 2
	DeviceStateReasonNowUnmanaged                DeviceStateReasonEnum = 3
	DeviceStateReasonConfigFailed                DeviceStateReasonEnum = 4
	DeviceStateReasonIpConfigUnavailable         DeviceStateReasonEnum = 5
	DeviceStateReasonIpConfigExpired             DeviceStateReasonEnum = 6
	DeviceStateReasonNoSecrets                   DeviceStateReasonEnum = 7
	DeviceStateReasonSupplicantDisconnect        DeviceStateReasonEnum = 8
	DeviceStateReasonSupplicantConfigFailed      DeviceStateReasonEnum = 9
	DeviceStateReasonSupplicantFailed            DeviceStateReasonEnum = 10
	DeviceStateReasonSupplicantTimeout           DeviceStateReasonEnum = 11
	DeviceStateReasonPppStartFailed              DeviceStateReasonEnum = 12
	DeviceStateReasonPppDisconnect               DeviceStateReasonEnum = 13
	DeviceStateReasonPppFailed                   DeviceStateReasonEnum = 14
	DeviceStateReasonDhcpStartFailed             DeviceStateReasonEnum = 15
	DeviceStateReasonDhcpError                   DeviceStateReasonEnum = 16
	DeviceStateReasonDhcpFailed                  DeviceStateReasonEnum = 17
	DeviceStateReasonSharedStartFailed           DeviceStateReasonEnum = 18
	DeviceStateReasonSharedFailed                DeviceStateReasonEnum = 19
	DeviceStateReasonAutoipStartFailed           DeviceStateReasonEnum = 20
	DeviceStateReasonAutoipError                 DeviceStateReasonEnum = 21
	DeviceStateReasonAutoipFailed                DeviceStateReasonEnum = 22
	DeviceStateReasonModemBusy                   DeviceStateReasonEnum = 23
	DeviceStateReasonModemNoDialTone             DeviceStateReasonEnum = 24
	DeviceStateReasonModemNoCarrier              DeviceStateReasonEnum = 25
	DeviceStateReasonModemDialTimeout            DeviceStateReasonEnum = 26
	DeviceStateReasonModemDialFailed             DeviceStateReasonEnum = 27
	DeviceStateReasonModemInitFailed             DeviceStateReasonEnum = 28
	DeviceStateReasonGsmApnFailed                DeviceStateReasonEnum = 29
	DeviceStateReasonGsmRegistrationNotSearching DeviceStateReasonEnum = 30
	DeviceStateReasonGsmRegistrationDenied       DeviceStateReasonEnum = 31
	DeviceStateReasonGsmRegistrationTimeout      DeviceStateReasonEnum = 32
	DeviceStateReasonGsmRegistrationFailed       DeviceStateReasonEnum = 33
	DeviceStateReasonGsmPinCheckFailed           DeviceStateReasonEnum = 34
	DeviceStateReasonFirmwareMissing             DeviceStateReasonEnum = 35
	DeviceStateReasonRemoved                     DeviceStateReasonEnum = 36
	DeviceStateReasonSleeping                    DeviceStateReasonEnum = 37
	DeviceStateReasonConnectionRemoved           DeviceStateReasonEnum = 38
	DeviceStateReasonUserRequested               DeviceStateReasonEnum = 39
	DeviceStateReasonCarrier                     DeviceStateReasonEnum = 40
	DeviceStateReasonConnectionAssumed           DeviceStateReasonEnum = 41
	DeviceStateReasonSupplicantAvailable         DeviceStateReasonEnum = 42
	DeviceStateReasonModemNotFound               DeviceStateReasonEnum = 43
	DeviceStateReasonBtFailed                    DeviceStateReasonEnum = 44
	DeviceStateReasonGsmSimNotInserted           DeviceStateReasonEnum = 45
	DeviceStateReasonGsmSimPinRequired           DeviceStateReasonEnum = 46
	DeviceStateReasonGsmSimPukRequired           DeviceStateReasonEnum = 47
	DeviceStateReasonGsmSimWrong                 DeviceStateReasonEnum = 48
	DeviceStateReasonInfinibandMode              DeviceStateReasonEnum = 49
	DeviceStateReasonDependencyFailed            DeviceStateReasonEnum = 50
	DeviceStateReasonBr2684Failed                DeviceStateReasonEnum = 51
	DeviceStateReasonModemManagerUnavailable     DeviceStateReasonEnum = 52
	DeviceStateReasonSsidNotFound                DeviceStateReasonEnum = 53
	DeviceStateReasonSecondaryConnectionFailed   DeviceStateReasonEnum = 54
	DeviceStateReasonDcbFcoeFailed               DeviceStateReasonEnum = 55
	DeviceStateReasonTeamdControlFailed          DeviceStateReasonEnum = 56
	DeviceStateReasonModemFailed                 DeviceStateReasonEnum = 57
	DeviceStateReasonModemAvailable              DeviceStateReasonEnum = 58
	DeviceStateReasonSimPinIncorrect             DeviceStateReasonEnum = 59
	DeviceStateReasonNewActivation               DeviceStateReasonEnum = 60
	DeviceStateReasonParentChanged               DeviceStateReasonEnum = 61
	DeviceStateReasonParentManagedChanged        DeviceStateReasonEnum = 62
	DeviceStateReasonOvsdbFailed                 DeviceStateReasonEnum = 63
	DeviceStateReasonIpAddressDuplicate          DeviceStateReasonEnum = 64
	DeviceStateReasonIpMethodUnsupported         DeviceStateReasonEnum = 65
	DeviceStateReasonSriovConfigurationFailed    DeviceStateReasonEnum = 66
)

func DeviceStateReasonGetType() gi.GType {
	ret := _I.GetGType(46, "DeviceStateReason")
	return ret
}

// Object DeviceTeam
type DeviceTeam struct {
	Device
}

func WrapDeviceTeam(p unsafe.Pointer) (r DeviceTeam) { r.P = p; return }

type IDeviceTeam interface{ P_DeviceTeam() unsafe.Pointer }

func (v DeviceTeam) P_DeviceTeam() unsafe.Pointer { return v.P }
func DeviceTeamGetType() gi.GType {
	ret := _I.GetGType(47, "DeviceTeam")
	return ret
}

// nm_device_team_get_carrier
//
// [ result ] trans: nothing
//
func (v DeviceTeam) GetCarrier() (result bool) {
	iv, err := _I.Get(277, "DeviceTeam", "get_carrier", 316, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_team_get_config
//
// [ result ] trans: nothing
//
func (v DeviceTeam) GetConfig() (result string) {
	iv, err := _I.Get(278, "DeviceTeam", "get_config", 316, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_team_get_hw_address
//
// [ result ] trans: nothing
//
func (v DeviceTeam) GetHwAddress() (result string) {
	iv, err := _I.Get(279, "DeviceTeam", "get_hw_address", 316, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_team_get_slaves
//
// [ result ] trans: nothing
//
func (v DeviceTeam) GetSlaves() (result g.PtrArray) {
	iv, err := _I.Get(280, "DeviceTeam", "get_slaves", 316, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct DeviceTeamClass

// Object DeviceTun
type DeviceTun struct {
	Device
}

func WrapDeviceTun(p unsafe.Pointer) (r DeviceTun) { r.P = p; return }

type IDeviceTun interface{ P_DeviceTun() unsafe.Pointer }

func (v DeviceTun) P_DeviceTun() unsafe.Pointer { return v.P }
func DeviceTunGetType() gi.GType {
	ret := _I.GetGType(48, "DeviceTun")
	return ret
}

// nm_device_tun_get_group
//
// [ result ] trans: nothing
//
func (v DeviceTun) GetGroup() (result int64) {
	iv, err := _I.Get(281, "DeviceTun", "get_group", 318, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int64()
	return
}

// nm_device_tun_get_hw_address
//
// [ result ] trans: nothing
//
func (v DeviceTun) GetHwAddress() (result string) {
	iv, err := _I.Get(282, "DeviceTun", "get_hw_address", 318, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_tun_get_mode
//
// [ result ] trans: nothing
//
func (v DeviceTun) GetMode() (result string) {
	iv, err := _I.Get(283, "DeviceTun", "get_mode", 318, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_tun_get_multi_queue
//
// [ result ] trans: nothing
//
func (v DeviceTun) GetMultiQueue() (result bool) {
	iv, err := _I.Get(284, "DeviceTun", "get_multi_queue", 318, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_tun_get_no_pi
//
// [ result ] trans: nothing
//
func (v DeviceTun) GetNoPi() (result bool) {
	iv, err := _I.Get(285, "DeviceTun", "get_no_pi", 318, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_tun_get_owner
//
// [ result ] trans: nothing
//
func (v DeviceTun) GetOwner() (result int64) {
	iv, err := _I.Get(286, "DeviceTun", "get_owner", 318, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int64()
	return
}

// nm_device_tun_get_vnet_hdr
//
// [ result ] trans: nothing
//
func (v DeviceTun) GetVnetHdr() (result bool) {
	iv, err := _I.Get(287, "DeviceTun", "get_vnet_hdr", 318, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct DeviceTunClass

// Enum DeviceType
type DeviceTypeEnum int

const (
	DeviceTypeUnknown      DeviceTypeEnum = 0
	DeviceTypeEthernet     DeviceTypeEnum = 1
	DeviceTypeWifi         DeviceTypeEnum = 2
	DeviceTypeUnused1      DeviceTypeEnum = 3
	DeviceTypeUnused2      DeviceTypeEnum = 4
	DeviceTypeBt           DeviceTypeEnum = 5
	DeviceTypeOlpcMesh     DeviceTypeEnum = 6
	DeviceTypeWimax        DeviceTypeEnum = 7
	DeviceTypeModem        DeviceTypeEnum = 8
	DeviceTypeInfiniband   DeviceTypeEnum = 9
	DeviceTypeBond         DeviceTypeEnum = 10
	DeviceTypeVlan         DeviceTypeEnum = 11
	DeviceTypeAdsl         DeviceTypeEnum = 12
	DeviceTypeBridge       DeviceTypeEnum = 13
	DeviceTypeGeneric      DeviceTypeEnum = 14
	DeviceTypeTeam         DeviceTypeEnum = 15
	DeviceTypeTun          DeviceTypeEnum = 16
	DeviceTypeIpTunnel     DeviceTypeEnum = 17
	DeviceTypeMacvlan      DeviceTypeEnum = 18
	DeviceTypeVxlan        DeviceTypeEnum = 19
	DeviceTypeVeth         DeviceTypeEnum = 20
	DeviceTypeMacsec       DeviceTypeEnum = 21
	DeviceTypeDummy        DeviceTypeEnum = 22
	DeviceTypePpp          DeviceTypeEnum = 23
	DeviceTypeOvsInterface DeviceTypeEnum = 24
	DeviceTypeOvsPort      DeviceTypeEnum = 25
	DeviceTypeOvsBridge    DeviceTypeEnum = 26
	DeviceTypeWpan         DeviceTypeEnum = 27
	DeviceType6lowpan      DeviceTypeEnum = 28
	DeviceTypeWireguard    DeviceTypeEnum = 29
)

func DeviceTypeGetType() gi.GType {
	ret := _I.GetGType(49, "DeviceType")
	return ret
}

// Object DeviceVlan
type DeviceVlan struct {
	Device
}

func WrapDeviceVlan(p unsafe.Pointer) (r DeviceVlan) { r.P = p; return }

type IDeviceVlan interface{ P_DeviceVlan() unsafe.Pointer }

func (v DeviceVlan) P_DeviceVlan() unsafe.Pointer { return v.P }
func DeviceVlanGetType() gi.GType {
	ret := _I.GetGType(50, "DeviceVlan")
	return ret
}

// nm_device_vlan_get_carrier
//
// [ result ] trans: nothing
//
func (v DeviceVlan) GetCarrier() (result bool) {
	iv, err := _I.Get(288, "DeviceVlan", "get_carrier", 321, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_vlan_get_hw_address
//
// [ result ] trans: nothing
//
func (v DeviceVlan) GetHwAddress() (result string) {
	iv, err := _I.Get(289, "DeviceVlan", "get_hw_address", 321, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_vlan_get_parent
//
// [ result ] trans: nothing
//
func (v DeviceVlan) GetParent() (result Device) {
	iv, err := _I.Get(290, "DeviceVlan", "get_parent", 321, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_device_vlan_get_vlan_id
//
// [ result ] trans: nothing
//
func (v DeviceVlan) GetVlanId() (result uint32) {
	iv, err := _I.Get(291, "DeviceVlan", "get_vlan_id", 321, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// ignore GType struct DeviceVlanClass

// Object DeviceVxlan
type DeviceVxlan struct {
	Device
}

func WrapDeviceVxlan(p unsafe.Pointer) (r DeviceVxlan) { r.P = p; return }

type IDeviceVxlan interface{ P_DeviceVxlan() unsafe.Pointer }

func (v DeviceVxlan) P_DeviceVxlan() unsafe.Pointer { return v.P }
func DeviceVxlanGetType() gi.GType {
	ret := _I.GetGType(51, "DeviceVxlan")
	return ret
}

// nm_device_vxlan_get_ageing
//
// [ result ] trans: nothing
//
func (v DeviceVxlan) GetAgeing() (result uint32) {
	iv, err := _I.Get(292, "DeviceVxlan", "get_ageing", 323, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_device_vxlan_get_carrier
//
// [ result ] trans: nothing
//
func (v DeviceVxlan) GetCarrier() (result bool) {
	iv, err := _I.Get(293, "DeviceVxlan", "get_carrier", 323, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_vxlan_get_dst_port
//
// [ result ] trans: nothing
//
func (v DeviceVxlan) GetDstPort() (result uint32) {
	iv, err := _I.Get(294, "DeviceVxlan", "get_dst_port", 323, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_device_vxlan_get_group
//
// [ result ] trans: nothing
//
func (v DeviceVxlan) GetGroup() (result string) {
	iv, err := _I.Get(295, "DeviceVxlan", "get_group", 323, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_vxlan_get_hw_address
//
// [ result ] trans: nothing
//
func (v DeviceVxlan) GetHwAddress() (result string) {
	iv, err := _I.Get(296, "DeviceVxlan", "get_hw_address", 323, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_vxlan_get_id
//
// [ result ] trans: nothing
//
func (v DeviceVxlan) GetId() (result uint32) {
	iv, err := _I.Get(297, "DeviceVxlan", "get_id", 323, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_device_vxlan_get_l2miss
//
// [ result ] trans: nothing
//
func (v DeviceVxlan) GetL2miss() (result bool) {
	iv, err := _I.Get(298, "DeviceVxlan", "get_l2miss", 323, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_vxlan_get_l3miss
//
// [ result ] trans: nothing
//
func (v DeviceVxlan) GetL3miss() (result bool) {
	iv, err := _I.Get(299, "DeviceVxlan", "get_l3miss", 323, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_vxlan_get_learning
//
// [ result ] trans: nothing
//
func (v DeviceVxlan) GetLearning() (result bool) {
	iv, err := _I.Get(300, "DeviceVxlan", "get_learning", 323, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_vxlan_get_limit
//
// [ result ] trans: nothing
//
func (v DeviceVxlan) GetLimit() (result uint32) {
	iv, err := _I.Get(301, "DeviceVxlan", "get_limit", 323, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_device_vxlan_get_local
//
// [ result ] trans: nothing
//
func (v DeviceVxlan) GetLocal() (result string) {
	iv, err := _I.Get(302, "DeviceVxlan", "get_local", 323, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_vxlan_get_parent
//
// [ result ] trans: nothing
//
func (v DeviceVxlan) GetParent() (result Device) {
	iv, err := _I.Get(303, "DeviceVxlan", "get_parent", 323, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_device_vxlan_get_proxy
//
// [ result ] trans: nothing
//
func (v DeviceVxlan) GetProxy() (result bool) {
	iv, err := _I.Get(304, "DeviceVxlan", "get_proxy", 323, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_vxlan_get_rsc
//
// [ result ] trans: nothing
//
func (v DeviceVxlan) GetRsc() (result bool) {
	iv, err := _I.Get(305, "DeviceVxlan", "get_rsc", 323, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_device_vxlan_get_src_port_max
//
// [ result ] trans: nothing
//
func (v DeviceVxlan) GetSrcPortMax() (result uint32) {
	iv, err := _I.Get(306, "DeviceVxlan", "get_src_port_max", 323, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_device_vxlan_get_src_port_min
//
// [ result ] trans: nothing
//
func (v DeviceVxlan) GetSrcPortMin() (result uint32) {
	iv, err := _I.Get(307, "DeviceVxlan", "get_src_port_min", 323, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_device_vxlan_get_tos
//
// [ result ] trans: nothing
//
func (v DeviceVxlan) GetTos() (result uint32) {
	iv, err := _I.Get(308, "DeviceVxlan", "get_tos", 323, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_device_vxlan_get_ttl
//
// [ result ] trans: nothing
//
func (v DeviceVxlan) GetTtl() (result uint32) {
	iv, err := _I.Get(309, "DeviceVxlan", "get_ttl", 323, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// ignore GType struct DeviceVxlanClass

// Object DeviceWifi
type DeviceWifi struct {
	Device
}

func WrapDeviceWifi(p unsafe.Pointer) (r DeviceWifi) { r.P = p; return }

type IDeviceWifi interface{ P_DeviceWifi() unsafe.Pointer }

func (v DeviceWifi) P_DeviceWifi() unsafe.Pointer { return v.P }
func DeviceWifiGetType() gi.GType {
	ret := _I.GetGType(52, "DeviceWifi")
	return ret
}

// nm_device_wifi_get_access_point_by_path
//
// [ path ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DeviceWifi) GetAccessPointByPath(path string) (result AccessPoint) {
	iv, err := _I.Get(310, "DeviceWifi", "get_access_point_by_path", 325, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewStringArgument(c_path)
	args := []gi.Argument{arg_v, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_path)
	result.P = ret.Pointer()
	return
}

// nm_device_wifi_get_access_points
//
// [ result ] trans: nothing
//
func (v DeviceWifi) GetAccessPoints() (result g.PtrArray) {
	iv, err := _I.Get(311, "DeviceWifi", "get_access_points", 325, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_device_wifi_get_active_access_point
//
// [ result ] trans: nothing
//
func (v DeviceWifi) GetActiveAccessPoint() (result AccessPoint) {
	iv, err := _I.Get(312, "DeviceWifi", "get_active_access_point", 325, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_device_wifi_get_bitrate
//
// [ result ] trans: nothing
//
func (v DeviceWifi) GetBitrate() (result uint32) {
	iv, err := _I.Get(313, "DeviceWifi", "get_bitrate", 325, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_device_wifi_get_capabilities
//
// [ result ] trans: nothing
//
func (v DeviceWifi) GetCapabilities() (result DeviceWifiCapabilitiesFlags) {
	iv, err := _I.Get(314, "DeviceWifi", "get_capabilities", 325, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = DeviceWifiCapabilitiesFlags(ret.Int())
	return
}

// nm_device_wifi_get_hw_address
//
// [ result ] trans: nothing
//
func (v DeviceWifi) GetHwAddress() (result string) {
	iv, err := _I.Get(315, "DeviceWifi", "get_hw_address", 325, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_wifi_get_last_scan
//
// [ result ] trans: nothing
//
func (v DeviceWifi) GetLastScan() (result int64) {
	iv, err := _I.Get(316, "DeviceWifi", "get_last_scan", 325, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int64()
	return
}

// nm_device_wifi_get_mode
//
// [ result ] trans: nothing
//
func (v DeviceWifi) GetMode() (result NM80211ModeEnum) {
	iv, err := _I.Get(317, "DeviceWifi", "get_mode", 325, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = NM80211ModeEnum(ret.Int())
	return
}

// nm_device_wifi_get_permanent_hw_address
//
// [ result ] trans: nothing
//
func (v DeviceWifi) GetPermanentHwAddress() (result string) {
	iv, err := _I.Get(318, "DeviceWifi", "get_permanent_hw_address", 325, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_device_wifi_request_scan
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DeviceWifi) RequestScan(cancellable g.ICancellable) (result bool, err error) {
	iv, err := _I.Get(319, "DeviceWifi", "request_scan", 325, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_device_wifi_request_scan_async
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v DeviceWifi) RequestScanAsync(cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(320, "DeviceWifi", "request_scan_async", 325, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// nm_device_wifi_request_scan_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v DeviceWifi) RequestScanFinish(result g.IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get(321, "DeviceWifi", "request_scan_finish", 325, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// nm_device_wifi_request_scan_options
//
// [ options ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DeviceWifi) RequestScanOptions(options g.Variant, cancellable g.ICancellable) (result bool, err error) {
	iv, err := _I.Get(322, "DeviceWifi", "request_scan_options", 325, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_options := gi.NewPointerArgument(options.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_options, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_device_wifi_request_scan_options_async
//
// [ options ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v DeviceWifi) RequestScanOptionsAsync(options g.Variant, cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(323, "DeviceWifi", "request_scan_options_async", 325, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_options := gi.NewPointerArgument(options.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_options, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// Flags DeviceWifiCapabilities
type DeviceWifiCapabilitiesFlags int

const (
	DeviceWifiCapabilitiesNone         DeviceWifiCapabilitiesFlags = 0
	DeviceWifiCapabilitiesCipherWep40  DeviceWifiCapabilitiesFlags = 1
	DeviceWifiCapabilitiesCipherWep104 DeviceWifiCapabilitiesFlags = 2
	DeviceWifiCapabilitiesCipherTkip   DeviceWifiCapabilitiesFlags = 4
	DeviceWifiCapabilitiesCipherCcmp   DeviceWifiCapabilitiesFlags = 8
	DeviceWifiCapabilitiesWpa          DeviceWifiCapabilitiesFlags = 16
	DeviceWifiCapabilitiesRsn          DeviceWifiCapabilitiesFlags = 32
	DeviceWifiCapabilitiesAp           DeviceWifiCapabilitiesFlags = 64
	DeviceWifiCapabilitiesAdhoc        DeviceWifiCapabilitiesFlags = 128
	DeviceWifiCapabilitiesFreqValid    DeviceWifiCapabilitiesFlags = 256
	DeviceWifiCapabilitiesFreq2ghz     DeviceWifiCapabilitiesFlags = 512
	DeviceWifiCapabilitiesFreq5ghz     DeviceWifiCapabilitiesFlags = 1024
)

func DeviceWifiCapabilitiesGetType() gi.GType {
	ret := _I.GetGType(53, "DeviceWifiCapabilities")
	return ret
}

// ignore GType struct DeviceWifiClass

// Object DeviceWimax
type DeviceWimax struct {
	Device
}

func WrapDeviceWimax(p unsafe.Pointer) (r DeviceWimax) { r.P = p; return }

type IDeviceWimax interface{ P_DeviceWimax() unsafe.Pointer }

func (v DeviceWimax) P_DeviceWimax() unsafe.Pointer { return v.P }
func DeviceWimaxGetType() gi.GType {
	ret := _I.GetGType(54, "DeviceWimax")
	return ret
}

// Deprecated
//
// nm_device_wimax_get_active_nsp
//
// [ result ] trans: everything
//
func (v DeviceWimax) GetActiveNsp() (result WimaxNsp) {
	iv, err := _I.Get(324, "DeviceWimax", "get_active_nsp", 328, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// nm_device_wimax_get_bsid
//
// [ result ] trans: nothing
//
func (v DeviceWimax) GetBsid() (result string) {
	iv, err := _I.Get(325, "DeviceWimax", "get_bsid", 328, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Deprecated
//
// nm_device_wimax_get_center_frequency
//
// [ result ] trans: nothing
//
func (v DeviceWimax) GetCenterFrequency() (result uint32) {
	iv, err := _I.Get(326, "DeviceWimax", "get_center_frequency", 328, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// Deprecated
//
// nm_device_wimax_get_cinr
//
// [ result ] trans: nothing
//
func (v DeviceWimax) GetCinr() (result int32) {
	iv, err := _I.Get(327, "DeviceWimax", "get_cinr", 328, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// Deprecated
//
// nm_device_wimax_get_hw_address
//
// [ result ] trans: nothing
//
func (v DeviceWimax) GetHwAddress() (result string) {
	iv, err := _I.Get(328, "DeviceWimax", "get_hw_address", 328, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Deprecated
//
// nm_device_wimax_get_nsp_by_path
//
// [ path ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DeviceWimax) GetNspByPath(path string) (result WimaxNsp) {
	iv, err := _I.Get(329, "DeviceWimax", "get_nsp_by_path", 328, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewStringArgument(c_path)
	args := []gi.Argument{arg_v, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_path)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// nm_device_wimax_get_nsps
//
// [ result ] trans: nothing
//
func (v DeviceWimax) GetNsps() (result g.PtrArray) {
	iv, err := _I.Get(330, "DeviceWimax", "get_nsps", 328, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// nm_device_wimax_get_rssi
//
// [ result ] trans: nothing
//
func (v DeviceWimax) GetRssi() (result int32) {
	iv, err := _I.Get(331, "DeviceWimax", "get_rssi", 328, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// Deprecated
//
// nm_device_wimax_get_tx_power
//
// [ result ] trans: nothing
//
func (v DeviceWimax) GetTxPower() (result int32) {
	iv, err := _I.Get(332, "DeviceWimax", "get_tx_power", 328, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// ignore GType struct DeviceWimaxClass

// Object DeviceWireGuard
type DeviceWireGuard struct {
	Device
}

func WrapDeviceWireGuard(p unsafe.Pointer) (r DeviceWireGuard) { r.P = p; return }

type IDeviceWireGuard interface{ P_DeviceWireGuard() unsafe.Pointer }

func (v DeviceWireGuard) P_DeviceWireGuard() unsafe.Pointer { return v.P }
func DeviceWireGuardGetType() gi.GType {
	ret := _I.GetGType(55, "DeviceWireGuard")
	return ret
}

// nm_device_wireguard_get_fwmark
//
// [ result ] trans: nothing
//
func (v DeviceWireGuard) GetFwmark() (result uint32) {
	iv, err := _I.Get(333, "DeviceWireGuard", "get_fwmark", 330, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_device_wireguard_get_listen_port
//
// [ result ] trans: nothing
//
func (v DeviceWireGuard) GetListenPort() (result uint16) {
	iv, err := _I.Get(334, "DeviceWireGuard", "get_listen_port", 330, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint16()
	return
}

// nm_device_wireguard_get_public_key
//
// [ result ] trans: nothing
//
func (v DeviceWireGuard) GetPublicKey() (result g.Bytes) {
	iv, err := _I.Get(335, "DeviceWireGuard", "get_public_key", 330, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct DeviceWireGuardClass

// Object DeviceWpan
type DeviceWpan struct {
	Device
}

func WrapDeviceWpan(p unsafe.Pointer) (r DeviceWpan) { r.P = p; return }

type IDeviceWpan interface{ P_DeviceWpan() unsafe.Pointer }

func (v DeviceWpan) P_DeviceWpan() unsafe.Pointer { return v.P }
func DeviceWpanGetType() gi.GType {
	ret := _I.GetGType(56, "DeviceWpan")
	return ret
}

// nm_device_wpan_get_hw_address
//
// [ result ] trans: nothing
//
func (v DeviceWpan) GetHwAddress() (result string) {
	iv, err := _I.Get(336, "DeviceWpan", "get_hw_address", 332, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Object DhcpConfig
type DhcpConfig struct {
	Object
}

func WrapDhcpConfig(p unsafe.Pointer) (r DhcpConfig) { r.P = p; return }

type IDhcpConfig interface{ P_DhcpConfig() unsafe.Pointer }

func (v DhcpConfig) P_DhcpConfig() unsafe.Pointer { return v.P }
func DhcpConfigGetType() gi.GType {
	ret := _I.GetGType(57, "DhcpConfig")
	return ret
}

// nm_dhcp_config_get_family
//
// [ result ] trans: nothing
//
func (v DhcpConfig) GetFamily() (result int32) {
	iv, err := _I.Get(337, "DhcpConfig", "get_family", 333, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_dhcp_config_get_one_option
//
// [ option ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DhcpConfig) GetOneOption(option string) (result string) {
	iv, err := _I.Get(338, "DhcpConfig", "get_one_option", 333, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_option := gi.CString(option)
	arg_v := gi.NewPointerArgument(v.P)
	arg_option := gi.NewStringArgument(c_option)
	args := []gi.Argument{arg_v, arg_option}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_option)
	result = ret.String().Copy()
	return
}

// nm_dhcp_config_get_options
//
// [ result ] trans: nothing
//
func (v DhcpConfig) GetOptions() (result g.HashTable) {
	iv, err := _I.Get(339, "DhcpConfig", "get_options", 333, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct DhcpConfigClass

// Struct DnsEntry
type DnsEntry struct {
	P unsafe.Pointer
}

func DnsEntryGetType() gi.GType {
	ret := _I.GetGType(58, "DnsEntry")
	return ret
}

// nm_dns_entry_get_domains
//
// [ result ] trans: nothing
//
func (v DnsEntry) GetDomains() (result gi.CStrArray) {
	iv, err := _I.Get(340, "DnsEntry", "get_domains", 335, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// nm_dns_entry_get_interface
//
// [ result ] trans: nothing
//
func (v DnsEntry) GetInterface() (result string) {
	iv, err := _I.Get(341, "DnsEntry", "get_interface", 335, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_dns_entry_get_nameservers
//
// [ result ] trans: nothing
//
func (v DnsEntry) GetNameservers() (result gi.CStrArray) {
	iv, err := _I.Get(342, "DnsEntry", "get_nameservers", 335, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// nm_dns_entry_get_priority
//
// [ result ] trans: nothing
//
func (v DnsEntry) GetPriority() (result int32) {
	iv, err := _I.Get(343, "DnsEntry", "get_priority", 335, 3, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_dns_entry_get_vpn
//
// [ result ] trans: nothing
//
func (v DnsEntry) GetVpn() (result bool) {
	iv, err := _I.Get(344, "DnsEntry", "get_vpn", 335, 4, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_dns_entry_unref
//
func (v DnsEntry) Unref() {
	iv, err := _I.Get(345, "DnsEntry", "unref", 335, 5, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Struct IPAddress
type IPAddress struct {
	P unsafe.Pointer
}

func IPAddressGetType() gi.GType {
	ret := _I.GetGType(59, "IPAddress")
	return ret
}

// nm_ip_address_new
//
// [ family ] trans: nothing
//
// [ addr ] trans: nothing
//
// [ prefix ] trans: nothing
//
// [ result ] trans: everything
//
func NewIPAddress(family int32, addr string, prefix uint32) (result IPAddress, err error) {
	iv, err := _I.Get(346, "IPAddress", "new", 388, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_addr := gi.CString(addr)
	arg_family := gi.NewInt32Argument(family)
	arg_addr := gi.NewStringArgument(c_addr)
	arg_prefix := gi.NewUint32Argument(prefix)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_family, arg_addr, arg_prefix, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_addr)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_ip_address_new_binary
//
// [ family ] trans: nothing
//
// [ addr ] trans: nothing
//
// [ prefix ] trans: nothing
//
// [ result ] trans: everything
//
func NewIPAddressBinary(family int32, addr unsafe.Pointer, prefix uint32) (result IPAddress, err error) {
	iv, err := _I.Get(347, "IPAddress", "new_binary", 388, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_family := gi.NewInt32Argument(family)
	arg_addr := gi.NewPointerArgument(addr)
	arg_prefix := gi.NewUint32Argument(prefix)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_family, arg_addr, arg_prefix, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_ip_address_dup
//
// [ result ] trans: everything
//
func (v IPAddress) Dup() (result IPAddress) {
	iv, err := _I.Get(348, "IPAddress", "dup", 388, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_ip_address_equal
//
// [ other ] trans: nothing
//
// [ result ] trans: nothing
//
func (v IPAddress) Equal(other IPAddress) (result bool) {
	iv, err := _I.Get(349, "IPAddress", "equal", 388, 3, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_other := gi.NewPointerArgument(other.P)
	args := []gi.Argument{arg_v, arg_other}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_ip_address_get_address
//
// [ result ] trans: nothing
//
func (v IPAddress) GetAddress() (result string) {
	iv, err := _I.Get(350, "IPAddress", "get_address", 388, 4, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_ip_address_get_attribute
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v IPAddress) GetAttribute(name string) (result g.Variant) {
	iv, err := _I.Get(351, "IPAddress", "get_attribute", 388, 5, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// nm_ip_address_get_attribute_names
//
// [ result ] trans: everything
//
func (v IPAddress) GetAttributeNames() (result gi.CStrArray) {
	iv, err := _I.Get(352, "IPAddress", "get_attribute_names", 388, 6, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// nm_ip_address_get_family
//
// [ result ] trans: nothing
//
func (v IPAddress) GetFamily() (result int32) {
	iv, err := _I.Get(353, "IPAddress", "get_family", 388, 7, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_ip_address_get_prefix
//
// [ result ] trans: nothing
//
func (v IPAddress) GetPrefix() (result uint32) {
	iv, err := _I.Get(354, "IPAddress", "get_prefix", 388, 8, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_ip_address_ref
//
func (v IPAddress) Ref() {
	iv, err := _I.Get(355, "IPAddress", "ref", 388, 9, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_ip_address_set_address
//
// [ addr ] trans: nothing
//
func (v IPAddress) SetAddress(addr string) {
	iv, err := _I.Get(356, "IPAddress", "set_address", 388, 10, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_addr := gi.CString(addr)
	arg_v := gi.NewPointerArgument(v.P)
	arg_addr := gi.NewStringArgument(c_addr)
	args := []gi.Argument{arg_v, arg_addr}
	iv.Call(args, nil, nil)
	gi.Free(c_addr)
}

// nm_ip_address_set_attribute
//
// [ name ] trans: nothing
//
// [ value ] trans: nothing
//
func (v IPAddress) SetAttribute(name string, value g.Variant) {
	iv, err := _I.Get(357, "IPAddress", "set_attribute", 388, 11, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_name, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// nm_ip_address_set_prefix
//
// [ prefix ] trans: nothing
//
func (v IPAddress) SetPrefix(prefix uint32) {
	iv, err := _I.Get(358, "IPAddress", "set_prefix", 388, 12, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_prefix := gi.NewUint32Argument(prefix)
	args := []gi.Argument{arg_v, arg_prefix}
	iv.Call(args, nil, nil)
}

// nm_ip_address_unref
//
func (v IPAddress) Unref() {
	iv, err := _I.Get(359, "IPAddress", "unref", 388, 13, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Object IPConfig
type IPConfig struct {
	Object
}

func WrapIPConfig(p unsafe.Pointer) (r IPConfig) { r.P = p; return }

type IIPConfig interface{ P_IPConfig() unsafe.Pointer }

func (v IPConfig) P_IPConfig() unsafe.Pointer { return v.P }
func IPConfigGetType() gi.GType {
	ret := _I.GetGType(60, "IPConfig")
	return ret
}

// nm_ip_config_get_addresses
//
// [ result ] trans: nothing
//
func (v IPConfig) GetAddresses() (result g.PtrArray) {
	iv, err := _I.Get(360, "IPConfig", "get_addresses", 389, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_ip_config_get_domains
//
// [ result ] trans: nothing
//
func (v IPConfig) GetDomains() (result gi.CStrArray) {
	iv, err := _I.Get(361, "IPConfig", "get_domains", 389, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// nm_ip_config_get_family
//
// [ result ] trans: nothing
//
func (v IPConfig) GetFamily() (result int32) {
	iv, err := _I.Get(362, "IPConfig", "get_family", 389, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_ip_config_get_gateway
//
// [ result ] trans: nothing
//
func (v IPConfig) GetGateway() (result string) {
	iv, err := _I.Get(363, "IPConfig", "get_gateway", 389, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_ip_config_get_nameservers
//
// [ result ] trans: nothing
//
func (v IPConfig) GetNameservers() (result gi.CStrArray) {
	iv, err := _I.Get(364, "IPConfig", "get_nameservers", 389, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// nm_ip_config_get_routes
//
// [ result ] trans: nothing
//
func (v IPConfig) GetRoutes() (result g.PtrArray) {
	iv, err := _I.Get(365, "IPConfig", "get_routes", 389, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_ip_config_get_searches
//
// [ result ] trans: nothing
//
func (v IPConfig) GetSearches() (result gi.CStrArray) {
	iv, err := _I.Get(366, "IPConfig", "get_searches", 389, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// nm_ip_config_get_wins_servers
//
// [ result ] trans: nothing
//
func (v IPConfig) GetWinsServers() (result gi.CStrArray) {
	iv, err := _I.Get(367, "IPConfig", "get_wins_servers", 389, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// ignore GType struct IPConfigClass

// Struct IPRoute
type IPRoute struct {
	P unsafe.Pointer
}

func IPRouteGetType() gi.GType {
	ret := _I.GetGType(61, "IPRoute")
	return ret
}

// nm_ip_route_new
//
// [ family ] trans: nothing
//
// [ dest ] trans: nothing
//
// [ prefix ] trans: nothing
//
// [ next_hop ] trans: nothing
//
// [ metric ] trans: nothing
//
// [ result ] trans: everything
//
func NewIPRoute(family int32, dest string, prefix uint32, next_hop string, metric int64) (result IPRoute, err error) {
	iv, err := _I.Get(368, "IPRoute", "new", 391, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_dest := gi.CString(dest)
	c_next_hop := gi.CString(next_hop)
	arg_family := gi.NewInt32Argument(family)
	arg_dest := gi.NewStringArgument(c_dest)
	arg_prefix := gi.NewUint32Argument(prefix)
	arg_next_hop := gi.NewStringArgument(c_next_hop)
	arg_metric := gi.NewInt64Argument(metric)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_family, arg_dest, arg_prefix, arg_next_hop, arg_metric, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_dest)
	gi.Free(c_next_hop)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_ip_route_new_binary
//
// [ family ] trans: nothing
//
// [ dest ] trans: nothing
//
// [ prefix ] trans: nothing
//
// [ next_hop ] trans: nothing
//
// [ metric ] trans: nothing
//
// [ result ] trans: everything
//
func NewIPRouteBinary(family int32, dest unsafe.Pointer, prefix uint32, next_hop unsafe.Pointer, metric int64) (result IPRoute, err error) {
	iv, err := _I.Get(369, "IPRoute", "new_binary", 391, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_family := gi.NewInt32Argument(family)
	arg_dest := gi.NewPointerArgument(dest)
	arg_prefix := gi.NewUint32Argument(prefix)
	arg_next_hop := gi.NewPointerArgument(next_hop)
	arg_metric := gi.NewInt64Argument(metric)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_family, arg_dest, arg_prefix, arg_next_hop, arg_metric, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_ip_route_dup
//
// [ result ] trans: everything
//
func (v IPRoute) Dup() (result IPRoute) {
	iv, err := _I.Get(370, "IPRoute", "dup", 391, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_ip_route_equal
//
// [ other ] trans: nothing
//
// [ result ] trans: nothing
//
func (v IPRoute) Equal(other IPRoute) (result bool) {
	iv, err := _I.Get(371, "IPRoute", "equal", 391, 3, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_other := gi.NewPointerArgument(other.P)
	args := []gi.Argument{arg_v, arg_other}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_ip_route_equal_full
//
// [ other ] trans: nothing
//
// [ cmp_flags ] trans: nothing
//
// [ result ] trans: nothing
//
func (v IPRoute) EqualFull(other IPRoute, cmp_flags uint32) (result bool) {
	iv, err := _I.Get(372, "IPRoute", "equal_full", 391, 4, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_other := gi.NewPointerArgument(other.P)
	arg_cmp_flags := gi.NewUint32Argument(cmp_flags)
	args := []gi.Argument{arg_v, arg_other, arg_cmp_flags}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_ip_route_get_attribute
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v IPRoute) GetAttribute(name string) (result g.Variant) {
	iv, err := _I.Get(373, "IPRoute", "get_attribute", 391, 5, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// nm_ip_route_get_attribute_names
//
// [ result ] trans: everything
//
func (v IPRoute) GetAttributeNames() (result gi.CStrArray) {
	iv, err := _I.Get(374, "IPRoute", "get_attribute_names", 391, 6, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// nm_ip_route_get_dest
//
// [ result ] trans: nothing
//
func (v IPRoute) GetDest() (result string) {
	iv, err := _I.Get(375, "IPRoute", "get_dest", 391, 7, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_ip_route_get_family
//
// [ result ] trans: nothing
//
func (v IPRoute) GetFamily() (result int32) {
	iv, err := _I.Get(376, "IPRoute", "get_family", 391, 8, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_ip_route_get_metric
//
// [ result ] trans: nothing
//
func (v IPRoute) GetMetric() (result int64) {
	iv, err := _I.Get(377, "IPRoute", "get_metric", 391, 9, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int64()
	return
}

// nm_ip_route_get_next_hop
//
// [ result ] trans: nothing
//
func (v IPRoute) GetNextHop() (result string) {
	iv, err := _I.Get(378, "IPRoute", "get_next_hop", 391, 10, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_ip_route_get_prefix
//
// [ result ] trans: nothing
//
func (v IPRoute) GetPrefix() (result uint32) {
	iv, err := _I.Get(379, "IPRoute", "get_prefix", 391, 11, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_ip_route_ref
//
func (v IPRoute) Ref() {
	iv, err := _I.Get(380, "IPRoute", "ref", 391, 12, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_ip_route_set_attribute
//
// [ name ] trans: nothing
//
// [ value ] trans: nothing
//
func (v IPRoute) SetAttribute(name string, value g.Variant) {
	iv, err := _I.Get(381, "IPRoute", "set_attribute", 391, 13, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_name, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// nm_ip_route_set_dest
//
// [ dest ] trans: nothing
//
func (v IPRoute) SetDest(dest string) {
	iv, err := _I.Get(382, "IPRoute", "set_dest", 391, 14, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_dest := gi.CString(dest)
	arg_v := gi.NewPointerArgument(v.P)
	arg_dest := gi.NewStringArgument(c_dest)
	args := []gi.Argument{arg_v, arg_dest}
	iv.Call(args, nil, nil)
	gi.Free(c_dest)
}

// nm_ip_route_set_metric
//
// [ metric ] trans: nothing
//
func (v IPRoute) SetMetric(metric int64) {
	iv, err := _I.Get(383, "IPRoute", "set_metric", 391, 15, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_metric := gi.NewInt64Argument(metric)
	args := []gi.Argument{arg_v, arg_metric}
	iv.Call(args, nil, nil)
}

// nm_ip_route_set_next_hop
//
// [ next_hop ] trans: nothing
//
func (v IPRoute) SetNextHop(next_hop string) {
	iv, err := _I.Get(384, "IPRoute", "set_next_hop", 391, 16, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_next_hop := gi.CString(next_hop)
	arg_v := gi.NewPointerArgument(v.P)
	arg_next_hop := gi.NewStringArgument(c_next_hop)
	args := []gi.Argument{arg_v, arg_next_hop}
	iv.Call(args, nil, nil)
	gi.Free(c_next_hop)
}

// nm_ip_route_set_prefix
//
// [ prefix ] trans: nothing
//
func (v IPRoute) SetPrefix(prefix uint32) {
	iv, err := _I.Get(385, "IPRoute", "set_prefix", 391, 17, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_prefix := gi.NewUint32Argument(prefix)
	args := []gi.Argument{arg_v, arg_prefix}
	iv.Call(args, nil, nil)
}

// nm_ip_route_unref
//
func (v IPRoute) Unref() {
	iv, err := _I.Get(386, "IPRoute", "unref", 391, 18, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_ip_route_attribute_validate
//
// [ name ] trans: nothing
//
// [ value ] trans: nothing
//
// [ family ] trans: nothing
//
// [ known ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func IPRouteAttributeValidate1(name string, value g.Variant, family int32) (result bool, known bool, err error) {
	iv, err := _I.Get(387, "IPRoute", "attribute_validate", 391, 19, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	c_name := gi.CString(name)
	arg_name := gi.NewStringArgument(c_name)
	arg_value := gi.NewPointerArgument(value.P)
	arg_family := gi.NewInt32Argument(family)
	arg_known := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_name, arg_value, arg_family, arg_known, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_name)
	err = gi.ToError(outArgs[1].Pointer())
	known = outArgs[0].Bool()
	result = ret.Bool()
	return
}

// nm_ip_route_get_variant_attribute_spec
//
// [ result ] trans: nothing
//
func IPRouteGetVariantAttributeSpec1() (result VariantAttributeSpec) {
	iv, err := _I.Get(388, "IPRoute", "get_variant_attribute_spec", 391, 20, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Flags IPTunnelFlags
type IPTunnelFlags int

const (
	IPTunnelFlagsNone                IPTunnelFlags = 0
	IPTunnelFlagsIp6IgnEncapLimit    IPTunnelFlags = 1
	IPTunnelFlagsIp6UseOrigTclass    IPTunnelFlags = 2
	IPTunnelFlagsIp6UseOrigFlowlabel IPTunnelFlags = 4
	IPTunnelFlagsIp6Mip6Dev          IPTunnelFlags = 8
	IPTunnelFlagsIp6RcvDscpCopy      IPTunnelFlags = 16
	IPTunnelFlagsIp6UseOrigFwmark    IPTunnelFlags = 32
)

func IPTunnelFlagsGetType() gi.GType {
	ret := _I.GetGType(62, "IPTunnelFlags")
	return ret
}

// Enum IPTunnelMode
type IPTunnelModeEnum int

const (
	IPTunnelModeUnknown   IPTunnelModeEnum = 0
	IPTunnelModeIpip      IPTunnelModeEnum = 1
	IPTunnelModeGre       IPTunnelModeEnum = 2
	IPTunnelModeSit       IPTunnelModeEnum = 3
	IPTunnelModeIsatap    IPTunnelModeEnum = 4
	IPTunnelModeVti       IPTunnelModeEnum = 5
	IPTunnelModeIp6ip6    IPTunnelModeEnum = 6
	IPTunnelModeIpip6     IPTunnelModeEnum = 7
	IPTunnelModeIp6gre    IPTunnelModeEnum = 8
	IPTunnelModeVti6      IPTunnelModeEnum = 9
	IPTunnelModeGretap    IPTunnelModeEnum = 10
	IPTunnelModeIp6gretap IPTunnelModeEnum = 11
)

func IPTunnelModeGetType() gi.GType {
	ret := _I.GetGType(63, "IPTunnelMode")
	return ret
}

// Struct LldpNeighbor
type LldpNeighbor struct {
	P unsafe.Pointer
}

func LldpNeighborGetType() gi.GType {
	ret := _I.GetGType(64, "LldpNeighbor")
	return ret
}

// nm_lldp_neighbor_new
//
// [ result ] trans: everything
//
func NewLldpNeighbor() (result LldpNeighbor) {
	iv, err := _I.Get(389, "LldpNeighbor", "new", 435, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_lldp_neighbor_get_attr_names
//
// [ result ] trans: everything
//
func (v LldpNeighbor) GetAttrNames() (result gi.CStrArray) {
	iv, err := _I.Get(390, "LldpNeighbor", "get_attr_names", 435, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// nm_lldp_neighbor_get_attr_string_value
//
// [ name ] trans: nothing
//
// [ out_value ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v LldpNeighbor) GetAttrStringValue(name string) (result bool, out_value string) {
	iv, err := _I.Get(391, "LldpNeighbor", "get_attr_string_value", 435, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_out_value := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_name, arg_out_value}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_name)
	out_value = outArgs[0].String().Copy()
	result = ret.Bool()
	return
}

// nm_lldp_neighbor_get_attr_type
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v LldpNeighbor) GetAttrType(name string) (result g.VariantType) {
	iv, err := _I.Get(392, "LldpNeighbor", "get_attr_type", 435, 3, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// nm_lldp_neighbor_get_attr_uint_value
//
// [ name ] trans: nothing
//
// [ out_value ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v LldpNeighbor) GetAttrUintValue(name string) (result bool, out_value uint32) {
	iv, err := _I.Get(393, "LldpNeighbor", "get_attr_uint_value", 435, 4, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_out_value := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_name, arg_out_value}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_name)
	out_value = outArgs[0].Uint32()
	result = ret.Bool()
	return
}

// nm_lldp_neighbor_ref
//
func (v LldpNeighbor) Ref() {
	iv, err := _I.Get(394, "LldpNeighbor", "ref", 435, 5, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_lldp_neighbor_unref
//
func (v LldpNeighbor) Unref() {
	iv, err := _I.Get(395, "LldpNeighbor", "unref", 435, 6, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Enum ManagerError
type ManagerErrorEnum int

const (
	ManagerErrorFailed                   ManagerErrorEnum = 0
	ManagerErrorPermissiondenied         ManagerErrorEnum = 1
	ManagerErrorUnknownconnection        ManagerErrorEnum = 2
	ManagerErrorUnknowndevice            ManagerErrorEnum = 3
	ManagerErrorConnectionnotavailable   ManagerErrorEnum = 4
	ManagerErrorConnectionnotactive      ManagerErrorEnum = 5
	ManagerErrorConnectionalreadyactive  ManagerErrorEnum = 6
	ManagerErrorDependencyfailed         ManagerErrorEnum = 7
	ManagerErrorAlreadyasleeporawake     ManagerErrorEnum = 8
	ManagerErrorAlreadyenabledordisabled ManagerErrorEnum = 9
	ManagerErrorUnknownloglevel          ManagerErrorEnum = 10
	ManagerErrorUnknownlogdomain         ManagerErrorEnum = 11
	ManagerErrorInvalidarguments         ManagerErrorEnum = 12
	ManagerErrorMissingplugin            ManagerErrorEnum = 13
)

func ManagerErrorGetType() gi.GType {
	ret := _I.GetGType(65, "ManagerError")
	return ret
}

// Enum Metered
type MeteredEnum int

const (
	MeteredUnknown  MeteredEnum = 0
	MeteredYes      MeteredEnum = 1
	MeteredNo       MeteredEnum = 2
	MeteredGuessYes MeteredEnum = 3
	MeteredGuessNo  MeteredEnum = 4
)

func MeteredGetType() gi.GType {
	ret := _I.GetGType(66, "Metered")
	return ret
}

// Object Object
type Object struct {
	g.AsyncInitableIfc
	g.InitableIfc
	g.Object
}

func WrapObject(p unsafe.Pointer) (r Object) { r.P = p; return }

type IObject interface{ P_Object() unsafe.Pointer }

func (v Object) P_Object() unsafe.Pointer        { return v.P }
func (v Object) P_AsyncInitable() unsafe.Pointer { return v.P }
func (v Object) P_Initable() unsafe.Pointer      { return v.P }
func ObjectGetType() gi.GType {
	ret := _I.GetGType(67, "Object")
	return ret
}

// nm_object_get_path
//
// [ result ] trans: nothing
//
func (v Object) GetPath() (result string) {
	iv, err := _I.Get(396, "Object", "get_path", 445, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// ignore GType struct ObjectClass

// Object RemoteConnection
type RemoteConnection struct {
	ConnectionIfc
	Object
}

func WrapRemoteConnection(p unsafe.Pointer) (r RemoteConnection) { r.P = p; return }

type IRemoteConnection interface{ P_RemoteConnection() unsafe.Pointer }

func (v RemoteConnection) P_RemoteConnection() unsafe.Pointer { return v.P }
func (v RemoteConnection) P_Connection() unsafe.Pointer       { return v.P }
func RemoteConnectionGetType() gi.GType {
	ret := _I.GetGType(68, "RemoteConnection")
	return ret
}

// nm_remote_connection_commit_changes
//
// [ save_to_disk ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v RemoteConnection) CommitChanges(save_to_disk bool, cancellable g.ICancellable) (result bool, err error) {
	iv, err := _I.Get(397, "RemoteConnection", "commit_changes", 453, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_save_to_disk := gi.NewBoolArgument(save_to_disk)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_save_to_disk, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_remote_connection_commit_changes_async
//
// [ save_to_disk ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v RemoteConnection) CommitChangesAsync(save_to_disk bool, cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(398, "RemoteConnection", "commit_changes_async", 453, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_save_to_disk := gi.NewBoolArgument(save_to_disk)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_save_to_disk, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// nm_remote_connection_commit_changes_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v RemoteConnection) CommitChangesFinish(result g.IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get(399, "RemoteConnection", "commit_changes_finish", 453, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// nm_remote_connection_delete
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v RemoteConnection) Delete(cancellable g.ICancellable) (result bool, err error) {
	iv, err := _I.Get(400, "RemoteConnection", "delete", 453, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_remote_connection_delete_async
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v RemoteConnection) DeleteAsync(cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(401, "RemoteConnection", "delete_async", 453, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// nm_remote_connection_delete_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v RemoteConnection) DeleteFinish(result g.IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get(402, "RemoteConnection", "delete_finish", 453, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// nm_remote_connection_get_filename
//
// [ result ] trans: nothing
//
func (v RemoteConnection) GetFilename() (result string) {
	iv, err := _I.Get(403, "RemoteConnection", "get_filename", 453, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_remote_connection_get_flags
//
// [ result ] trans: nothing
//
func (v RemoteConnection) GetFlags() (result SettingsConnectionFlags) {
	iv, err := _I.Get(404, "RemoteConnection", "get_flags", 453, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingsConnectionFlags(ret.Int())
	return
}

// nm_remote_connection_get_secrets
//
// [ setting_name ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v RemoteConnection) GetSecrets(setting_name string, cancellable g.ICancellable) (result g.Variant, err error) {
	iv, err := _I.Get(405, "RemoteConnection", "get_secrets", 453, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_setting_name := gi.CString(setting_name)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting_name := gi.NewStringArgument(c_setting_name)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_setting_name, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_setting_name)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_remote_connection_get_secrets_async
//
// [ setting_name ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v RemoteConnection) GetSecretsAsync(setting_name string, cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(406, "RemoteConnection", "get_secrets_async", 453, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_setting_name := gi.CString(setting_name)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_setting_name := gi.NewStringArgument(c_setting_name)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_setting_name, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_setting_name)
}

// nm_remote_connection_get_secrets_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v RemoteConnection) GetSecretsFinish(result g.IAsyncResult) (result1 g.Variant, err error) {
	iv, err := _I.Get(407, "RemoteConnection", "get_secrets_finish", 453, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// nm_remote_connection_get_unsaved
//
// [ result ] trans: nothing
//
func (v RemoteConnection) GetUnsaved() (result bool) {
	iv, err := _I.Get(408, "RemoteConnection", "get_unsaved", 453, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_remote_connection_get_visible
//
// [ result ] trans: nothing
//
func (v RemoteConnection) GetVisible() (result bool) {
	iv, err := _I.Get(409, "RemoteConnection", "get_visible", 453, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_remote_connection_save
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v RemoteConnection) Save(cancellable g.ICancellable) (result bool, err error) {
	iv, err := _I.Get(410, "RemoteConnection", "save", 453, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_remote_connection_save_async
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v RemoteConnection) SaveAsync(cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(411, "RemoteConnection", "save_async", 453, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// nm_remote_connection_save_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v RemoteConnection) SaveFinish(result g.IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get(412, "RemoteConnection", "save_finish", 453, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// nm_remote_connection_update2
//
// [ settings ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ args ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v RemoteConnection) Update2(settings g.Variant, flags SettingsUpdate2Flags, args g.Variant, cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(413, "RemoteConnection", "update2", 453, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_settings := gi.NewPointerArgument(settings.P)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_args := gi.NewPointerArgument(args.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args1 := []gi.Argument{arg_v, arg_settings, arg_flags, arg_args, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args1, nil, nil)
}

// nm_remote_connection_update2_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v RemoteConnection) Update2Finish(result g.IAsyncResult) (result1 g.Variant, err error) {
	iv, err := _I.Get(414, "RemoteConnection", "update2_finish", 453, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// ignore GType struct RemoteConnectionClass

// Enum RollbackResult
type RollbackResultEnum int

const (
	RollbackResultOk                 RollbackResultEnum = 0
	RollbackResultErrNoDevice        RollbackResultEnum = 1
	RollbackResultErrDeviceUnmanaged RollbackResultEnum = 2
	RollbackResultErrFailed          RollbackResultEnum = 3
)

func RollbackResultGetType() gi.GType {
	ret := _I.GetGType(69, "RollbackResult")
	return ret
}

// Flags SecretAgentCapabilities
type SecretAgentCapabilitiesFlags int

const (
	SecretAgentCapabilitiesNone     SecretAgentCapabilitiesFlags = 0
	SecretAgentCapabilitiesVpnHints SecretAgentCapabilitiesFlags = 1
	SecretAgentCapabilitiesLast     SecretAgentCapabilitiesFlags = 1
)

func SecretAgentCapabilitiesGetType() gi.GType {
	ret := _I.GetGType(70, "SecretAgentCapabilities")
	return ret
}

// Enum SecretAgentError
type SecretAgentErrorEnum int

const (
	SecretAgentErrorFailed            SecretAgentErrorEnum = 0
	SecretAgentErrorPermissiondenied  SecretAgentErrorEnum = 1
	SecretAgentErrorInvalidconnection SecretAgentErrorEnum = 2
	SecretAgentErrorUsercanceled      SecretAgentErrorEnum = 3
	SecretAgentErrorAgentcanceled     SecretAgentErrorEnum = 4
	SecretAgentErrorNosecrets         SecretAgentErrorEnum = 5
)

func SecretAgentErrorGetType() gi.GType {
	ret := _I.GetGType(71, "SecretAgentError")
	return ret
}

// Flags SecretAgentGetSecretsFlags
type SecretAgentGetSecretsFlags int

const (
	SecretAgentGetSecretsFlagsNone             SecretAgentGetSecretsFlags = 0
	SecretAgentGetSecretsFlagsAllowInteraction SecretAgentGetSecretsFlags = 1
	SecretAgentGetSecretsFlagsRequestNew       SecretAgentGetSecretsFlags = 2
	SecretAgentGetSecretsFlagsUserRequested    SecretAgentGetSecretsFlags = 4
	SecretAgentGetSecretsFlagsWpsPbcActive     SecretAgentGetSecretsFlags = 8
	SecretAgentGetSecretsFlagsOnlySystem       SecretAgentGetSecretsFlags = 2147483648
	SecretAgentGetSecretsFlagsNoErrors         SecretAgentGetSecretsFlags = 1073741824
)

func SecretAgentGetSecretsFlagsGetType() gi.GType {
	ret := _I.GetGType(72, "SecretAgentGetSecretsFlags")
	return ret
}

// Object SecretAgentOld
type SecretAgentOld struct {
	g.AsyncInitableIfc
	g.InitableIfc
	g.Object
}

func WrapSecretAgentOld(p unsafe.Pointer) (r SecretAgentOld) { r.P = p; return }

type ISecretAgentOld interface{ P_SecretAgentOld() unsafe.Pointer }

func (v SecretAgentOld) P_SecretAgentOld() unsafe.Pointer { return v.P }
func (v SecretAgentOld) P_AsyncInitable() unsafe.Pointer  { return v.P }
func (v SecretAgentOld) P_Initable() unsafe.Pointer       { return v.P }
func SecretAgentOldGetType() gi.GType {
	ret := _I.GetGType(73, "SecretAgentOld")
	return ret
}

// nm_secret_agent_old_delete_secrets
//
// [ connection ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v SecretAgentOld) DeleteSecrets(connection IConnection, callback SecretAgentOldDeleteSecretsFunc) {
	iv, err := _I.Get(415, "SecretAgentOld", "delete_secrets", 954, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_Connection()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("NM", "SecretAgentOldDeleteSecretsFunc")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallSecretAgentOldDeleteSecretsFunc(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connection := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_connection, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// nm_secret_agent_old_get_registered
//
// [ result ] trans: nothing
//
func (v SecretAgentOld) GetRegistered() (result bool) {
	iv, err := _I.Get(416, "SecretAgentOld", "get_registered", 954, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_secret_agent_old_get_secrets
//
// [ connection ] trans: nothing
//
// [ setting_name ] trans: nothing
//
// [ hints ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v SecretAgentOld) GetSecrets(connection IConnection, setting_name string, hints gi.CStrArray, flags SecretAgentGetSecretsFlags, callback SecretAgentOldGetSecretsFunc) {
	iv, err := _I.Get(417, "SecretAgentOld", "get_secrets", 954, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_Connection()
	}
	c_setting_name := gi.CString(setting_name)
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("NM", "SecretAgentOldGetSecretsFunc")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallSecretAgentOldGetSecretsFunc(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connection := gi.NewPointerArgument(tmp)
	arg_setting_name := gi.NewStringArgument(c_setting_name)
	arg_hints := gi.NewPointerArgument(hints.P)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_connection, arg_setting_name, arg_hints, arg_flags, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_setting_name)
}

// nm_secret_agent_old_register
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SecretAgentOld) Register(cancellable g.ICancellable) (result bool, err error) {
	iv, err := _I.Get(418, "SecretAgentOld", "register", 954, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_secret_agent_old_register_async
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v SecretAgentOld) RegisterAsync(cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(419, "SecretAgentOld", "register_async", 954, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// nm_secret_agent_old_register_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v SecretAgentOld) RegisterFinish(result g.IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get(420, "SecretAgentOld", "register_finish", 954, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// nm_secret_agent_old_save_secrets
//
// [ connection ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v SecretAgentOld) SaveSecrets(connection IConnection, callback SecretAgentOldSaveSecretsFunc) {
	iv, err := _I.Get(421, "SecretAgentOld", "save_secrets", 954, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_Connection()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("NM", "SecretAgentOldSaveSecretsFunc")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallSecretAgentOldSaveSecretsFunc(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connection := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_connection, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// nm_secret_agent_old_unregister
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SecretAgentOld) Unregister(cancellable g.ICancellable) (result bool, err error) {
	iv, err := _I.Get(422, "SecretAgentOld", "unregister", 954, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_secret_agent_old_unregister_async
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v SecretAgentOld) UnregisterAsync(cancellable g.ICancellable, callback g.AsyncReadyCallback) {
	iv, err := _I.Get(423, "SecretAgentOld", "unregister_async", 954, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			g.CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// nm_secret_agent_old_unregister_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v SecretAgentOld) UnregisterFinish(result g.IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get(424, "SecretAgentOld", "unregister_finish", 954, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// ignore GType struct SecretAgentOldClass

type SecretAgentOldDeleteSecretsFunc func(agent SecretAgentOld, connection Connection) (error error)

func CallSecretAgentOldDeleteSecretsFunc(fn SecretAgentOldDeleteSecretsFunc, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	agent := WrapSecretAgentOld(*(*unsafe.Pointer)(args[0]))
	connection := Connection{P: *(*unsafe.Pointer)(args[1])}
	error := fn(agent, connection)
	_ = error
}

type SecretAgentOldGetSecretsFunc func(agent SecretAgentOld, connection Connection, secrets g.Variant) (error error)

func CallSecretAgentOldGetSecretsFunc(fn SecretAgentOldGetSecretsFunc, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	agent := WrapSecretAgentOld(*(*unsafe.Pointer)(args[0]))
	connection := Connection{P: *(*unsafe.Pointer)(args[1])}
	secrets := g.Variant{P: *(*unsafe.Pointer)(args[2])}
	error := fn(agent, connection, secrets)
	_ = error
}

type SecretAgentOldSaveSecretsFunc func(agent SecretAgentOld, connection Connection) (error error)

func CallSecretAgentOldSaveSecretsFunc(fn SecretAgentOldSaveSecretsFunc, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	agent := WrapSecretAgentOld(*(*unsafe.Pointer)(args[0]))
	connection := Connection{P: *(*unsafe.Pointer)(args[1])}
	error := fn(agent, connection)
	_ = error
}

// Object Setting
type Setting struct {
	g.Object
}

func WrapSetting(p unsafe.Pointer) (r Setting) { r.P = p; return }

type ISetting interface{ P_Setting() unsafe.Pointer }

func (v Setting) P_Setting() unsafe.Pointer { return v.P }
func SettingGetType() gi.GType {
	ret := _I.GetGType(74, "Setting")
	return ret
}

// nm_setting_lookup_type
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func SettingLookupType1(name string) (result gi.GType) {
	iv, err := _I.Get(425, "Setting", "lookup_type", 959, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result = gi.GType(ret.Uint())
	return
}

// nm_setting_compare
//
// [ b ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Setting) Compare(b ISetting, flags SettingCompareFlagsEnum) (result bool) {
	iv, err := _I.Get(426, "Setting", "compare", 959, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if b != nil {
		tmp = b.P_Setting()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_b := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_b, arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_diff
//
// [ b ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ invert_results ] trans: nothing
//
// [ results ] trans: everything, dir: inout
//
// [ result ] trans: nothing
//
func (v Setting) Diff(b ISetting, flags SettingCompareFlagsEnum, invert_results bool, results int /*TODO:DIR_INOUT*/) (result bool) {
	iv, err := _I.Get(427, "Setting", "diff", 959, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if b != nil {
		tmp = b.P_Setting()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_b := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_invert_results := gi.NewBoolArgument(invert_results)
	args := []gi.Argument{arg_v, arg_b, arg_flags, arg_invert_results}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	result = ret.Bool()
	return
}

// nm_setting_duplicate
//
// [ result ] trans: everything
//
func (v Setting) Duplicate() (result Setting) {
	iv, err := _I.Get(428, "Setting", "duplicate", 959, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_enumerate_values
//
// [ func1 ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Setting) EnumerateValues(func1 SettingValueIterFn) {
	iv, err := _I.Get(429, "Setting", "enumerate_values", 959, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var cId uint
	var funcPtr unsafe.Pointer
	if func1 != nil {
		callableInfo := gi.GetCallableInfo("NM", "SettingValueIterFn")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallSettingValueIterFn(func1, __result, __args)
		}, gi.ScopeCall, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_func1, arg_user_data}
	iv.Call(args, nil, nil)
	gi.UnregisterFClosure(cId)
}

// nm_setting_get_dbus_property_type
//
// [ property_name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Setting) GetDbusPropertyType(property_name string) (result g.VariantType) {
	iv, err := _I.Get(430, "Setting", "get_dbus_property_type", 959, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_property_name := gi.CString(property_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_property_name := gi.NewStringArgument(c_property_name)
	args := []gi.Argument{arg_v, arg_property_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_property_name)
	result.P = ret.Pointer()
	return
}

// nm_setting_get_name
//
// [ result ] trans: nothing
//
func (v Setting) GetName() (result string) {
	iv, err := _I.Get(431, "Setting", "get_name", 959, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// denied function Setting.GetSecretFlags

// nm_setting_set_secret_flags
//
// [ secret_name ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Setting) SetSecretFlags(secret_name string, flags SettingSecretFlags) (result bool, err error) {
	iv, err := _I.Get(433, "Setting", "set_secret_flags", 959, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_secret_name := gi.CString(secret_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_secret_name := gi.NewStringArgument(c_secret_name)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_secret_name, arg_flags, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_secret_name)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_setting_to_string
//
// [ result ] trans: everything
//
func (v Setting) ToString() (result string) {
	iv, err := _I.Get(434, "Setting", "to_string", 959, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// nm_setting_verify
//
// [ connection ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Setting) Verify(connection IConnection) (result bool, err error) {
	iv, err := _I.Get(435, "Setting", "verify", 959, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_Connection()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connection := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_connection, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_setting_verify_secrets
//
// [ connection ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Setting) VerifySecrets(connection IConnection) (result bool, err error) {
	iv, err := _I.Get(436, "Setting", "verify_secrets", 959, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_Connection()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connection := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_connection, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// Object Setting6Lowpan
type Setting6Lowpan struct {
	Setting
}

func WrapSetting6Lowpan(p unsafe.Pointer) (r Setting6Lowpan) { r.P = p; return }

type ISetting6Lowpan interface{ P_Setting6Lowpan() unsafe.Pointer }

func (v Setting6Lowpan) P_Setting6Lowpan() unsafe.Pointer { return v.P }
func Setting6LowpanGetType() gi.GType {
	ret := _I.GetGType(75, "Setting6Lowpan")
	return ret
}

// nm_setting_6lowpan_new
//
// [ result ] trans: everything
//
func NewSetting6Lowpan() (result Setting6Lowpan) {
	iv, err := _I.Get(437, "Setting6Lowpan", "new", 960, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_6lowpan_get_parent
//
// [ result ] trans: nothing
//
func (v Setting6Lowpan) GetParent() (result string) {
	iv, err := _I.Get(438, "Setting6Lowpan", "get_parent", 960, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// ignore GType struct Setting6LowpanClass

// Object Setting8021x
type Setting8021x struct {
	Setting
}

func WrapSetting8021x(p unsafe.Pointer) (r Setting8021x) { r.P = p; return }

type ISetting8021x interface{ P_Setting8021x() unsafe.Pointer }

func (v Setting8021x) P_Setting8021x() unsafe.Pointer { return v.P }
func Setting8021xGetType() gi.GType {
	ret := _I.GetGType(76, "Setting8021x")
	return ret
}

// nm_setting_802_1x_new
//
// [ result ] trans: everything
//
func NewSetting8021x() (result Setting8021x) {
	iv, err := _I.Get(439, "Setting8021x", "new", 962, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_802_1x_check_cert_scheme
//
// [ pdata ] trans: nothing
//
// [ length ] trans: nothing
//
// [ result ] trans: nothing
//
func Setting8021xCheckCertScheme1(pdata unsafe.Pointer, length uint64) (result Setting8021xCKSchemeEnum, err error) {
	iv, err := _I.Get(440, "Setting8021x", "check_cert_scheme", 962, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_pdata := gi.NewPointerArgument(pdata)
	arg_length := gi.NewUint64Argument(length)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_pdata, arg_length, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = Setting8021xCKSchemeEnum(ret.Int())
	return
}

// nm_setting_802_1x_add_altsubject_match
//
// [ altsubject_match ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Setting8021x) AddAltsubjectMatch(altsubject_match string) (result bool) {
	iv, err := _I.Get(441, "Setting8021x", "add_altsubject_match", 962, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_altsubject_match := gi.CString(altsubject_match)
	arg_v := gi.NewPointerArgument(v.P)
	arg_altsubject_match := gi.NewStringArgument(c_altsubject_match)
	args := []gi.Argument{arg_v, arg_altsubject_match}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_altsubject_match)
	result = ret.Bool()
	return
}

// nm_setting_802_1x_add_eap_method
//
// [ eap ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Setting8021x) AddEapMethod(eap string) (result bool) {
	iv, err := _I.Get(442, "Setting8021x", "add_eap_method", 962, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_eap := gi.CString(eap)
	arg_v := gi.NewPointerArgument(v.P)
	arg_eap := gi.NewStringArgument(c_eap)
	args := []gi.Argument{arg_v, arg_eap}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_eap)
	result = ret.Bool()
	return
}

// nm_setting_802_1x_add_phase2_altsubject_match
//
// [ phase2_altsubject_match ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Setting8021x) AddPhase2AltsubjectMatch(phase2_altsubject_match string) (result bool) {
	iv, err := _I.Get(443, "Setting8021x", "add_phase2_altsubject_match", 962, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_phase2_altsubject_match := gi.CString(phase2_altsubject_match)
	arg_v := gi.NewPointerArgument(v.P)
	arg_phase2_altsubject_match := gi.NewStringArgument(c_phase2_altsubject_match)
	args := []gi.Argument{arg_v, arg_phase2_altsubject_match}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_phase2_altsubject_match)
	result = ret.Bool()
	return
}

// nm_setting_802_1x_clear_altsubject_matches
//
func (v Setting8021x) ClearAltsubjectMatches() {
	iv, err := _I.Get(444, "Setting8021x", "clear_altsubject_matches", 962, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_setting_802_1x_clear_eap_methods
//
func (v Setting8021x) ClearEapMethods() {
	iv, err := _I.Get(445, "Setting8021x", "clear_eap_methods", 962, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_setting_802_1x_clear_phase2_altsubject_matches
//
func (v Setting8021x) ClearPhase2AltsubjectMatches() {
	iv, err := _I.Get(446, "Setting8021x", "clear_phase2_altsubject_matches", 962, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_setting_802_1x_get_altsubject_match
//
// [ i ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetAltsubjectMatch(i uint32) (result string) {
	iv, err := _I.Get(447, "Setting8021x", "get_altsubject_match", 962, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_i := gi.NewUint32Argument(i)
	args := []gi.Argument{arg_v, arg_i}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_anonymous_identity
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetAnonymousIdentity() (result string) {
	iv, err := _I.Get(448, "Setting8021x", "get_anonymous_identity", 962, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_auth_timeout
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetAuthTimeout() (result int32) {
	iv, err := _I.Get(449, "Setting8021x", "get_auth_timeout", 962, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_802_1x_get_ca_cert_blob
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetCaCertBlob() (result g.Bytes) {
	iv, err := _I.Get(450, "Setting8021x", "get_ca_cert_blob", 962, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_802_1x_get_ca_cert_password
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetCaCertPassword() (result string) {
	iv, err := _I.Get(451, "Setting8021x", "get_ca_cert_password", 962, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_ca_cert_password_flags
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetCaCertPasswordFlags() (result SettingSecretFlags) {
	iv, err := _I.Get(452, "Setting8021x", "get_ca_cert_password_flags", 962, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingSecretFlags(ret.Int())
	return
}

// nm_setting_802_1x_get_ca_cert_path
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetCaCertPath() (result string) {
	iv, err := _I.Get(453, "Setting8021x", "get_ca_cert_path", 962, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_ca_cert_scheme
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetCaCertScheme() (result Setting8021xCKSchemeEnum) {
	iv, err := _I.Get(454, "Setting8021x", "get_ca_cert_scheme", 962, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = Setting8021xCKSchemeEnum(ret.Int())
	return
}

// nm_setting_802_1x_get_ca_cert_uri
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetCaCertUri() (result string) {
	iv, err := _I.Get(455, "Setting8021x", "get_ca_cert_uri", 962, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_ca_path
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetCaPath() (result string) {
	iv, err := _I.Get(456, "Setting8021x", "get_ca_path", 962, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_client_cert_blob
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetClientCertBlob() (result g.Bytes) {
	iv, err := _I.Get(457, "Setting8021x", "get_client_cert_blob", 962, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_802_1x_get_client_cert_password
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetClientCertPassword() (result string) {
	iv, err := _I.Get(458, "Setting8021x", "get_client_cert_password", 962, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_client_cert_password_flags
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetClientCertPasswordFlags() (result SettingSecretFlags) {
	iv, err := _I.Get(459, "Setting8021x", "get_client_cert_password_flags", 962, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingSecretFlags(ret.Int())
	return
}

// nm_setting_802_1x_get_client_cert_path
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetClientCertPath() (result string) {
	iv, err := _I.Get(460, "Setting8021x", "get_client_cert_path", 962, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_client_cert_scheme
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetClientCertScheme() (result Setting8021xCKSchemeEnum) {
	iv, err := _I.Get(461, "Setting8021x", "get_client_cert_scheme", 962, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = Setting8021xCKSchemeEnum(ret.Int())
	return
}

// nm_setting_802_1x_get_client_cert_uri
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetClientCertUri() (result string) {
	iv, err := _I.Get(462, "Setting8021x", "get_client_cert_uri", 962, 23, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_domain_suffix_match
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetDomainSuffixMatch() (result string) {
	iv, err := _I.Get(463, "Setting8021x", "get_domain_suffix_match", 962, 24, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_eap_method
//
// [ i ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetEapMethod(i uint32) (result string) {
	iv, err := _I.Get(464, "Setting8021x", "get_eap_method", 962, 25, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_i := gi.NewUint32Argument(i)
	args := []gi.Argument{arg_v, arg_i}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_identity
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetIdentity() (result string) {
	iv, err := _I.Get(465, "Setting8021x", "get_identity", 962, 26, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_num_altsubject_matches
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetNumAltsubjectMatches() (result uint32) {
	iv, err := _I.Get(466, "Setting8021x", "get_num_altsubject_matches", 962, 27, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_802_1x_get_num_eap_methods
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetNumEapMethods() (result uint32) {
	iv, err := _I.Get(467, "Setting8021x", "get_num_eap_methods", 962, 28, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_802_1x_get_num_phase2_altsubject_matches
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetNumPhase2AltsubjectMatches() (result uint32) {
	iv, err := _I.Get(468, "Setting8021x", "get_num_phase2_altsubject_matches", 962, 29, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_802_1x_get_pac_file
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPacFile() (result string) {
	iv, err := _I.Get(469, "Setting8021x", "get_pac_file", 962, 30, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_password
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPassword() (result string) {
	iv, err := _I.Get(470, "Setting8021x", "get_password", 962, 31, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_password_flags
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPasswordFlags() (result SettingSecretFlags) {
	iv, err := _I.Get(471, "Setting8021x", "get_password_flags", 962, 32, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingSecretFlags(ret.Int())
	return
}

// nm_setting_802_1x_get_password_raw
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPasswordRaw() (result g.Bytes) {
	iv, err := _I.Get(472, "Setting8021x", "get_password_raw", 962, 33, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_802_1x_get_password_raw_flags
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPasswordRawFlags() (result SettingSecretFlags) {
	iv, err := _I.Get(473, "Setting8021x", "get_password_raw_flags", 962, 34, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingSecretFlags(ret.Int())
	return
}

// nm_setting_802_1x_get_phase1_auth_flags
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase1AuthFlags() (result Setting8021xAuthFlags) {
	iv, err := _I.Get(474, "Setting8021x", "get_phase1_auth_flags", 962, 35, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = Setting8021xAuthFlags(ret.Int())
	return
}

// nm_setting_802_1x_get_phase1_fast_provisioning
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase1FastProvisioning() (result string) {
	iv, err := _I.Get(475, "Setting8021x", "get_phase1_fast_provisioning", 962, 36, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_phase1_peaplabel
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase1Peaplabel() (result string) {
	iv, err := _I.Get(476, "Setting8021x", "get_phase1_peaplabel", 962, 37, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_phase1_peapver
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase1Peapver() (result string) {
	iv, err := _I.Get(477, "Setting8021x", "get_phase1_peapver", 962, 38, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_phase2_altsubject_match
//
// [ i ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2AltsubjectMatch(i uint32) (result string) {
	iv, err := _I.Get(478, "Setting8021x", "get_phase2_altsubject_match", 962, 39, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_i := gi.NewUint32Argument(i)
	args := []gi.Argument{arg_v, arg_i}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_phase2_auth
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2Auth() (result string) {
	iv, err := _I.Get(479, "Setting8021x", "get_phase2_auth", 962, 40, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_phase2_autheap
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2Autheap() (result string) {
	iv, err := _I.Get(480, "Setting8021x", "get_phase2_autheap", 962, 41, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_phase2_ca_cert_blob
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2CaCertBlob() (result g.Bytes) {
	iv, err := _I.Get(481, "Setting8021x", "get_phase2_ca_cert_blob", 962, 42, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_802_1x_get_phase2_ca_cert_password
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2CaCertPassword() (result string) {
	iv, err := _I.Get(482, "Setting8021x", "get_phase2_ca_cert_password", 962, 43, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_phase2_ca_cert_password_flags
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2CaCertPasswordFlags() (result SettingSecretFlags) {
	iv, err := _I.Get(483, "Setting8021x", "get_phase2_ca_cert_password_flags", 962, 44, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingSecretFlags(ret.Int())
	return
}

// nm_setting_802_1x_get_phase2_ca_cert_path
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2CaCertPath() (result string) {
	iv, err := _I.Get(484, "Setting8021x", "get_phase2_ca_cert_path", 962, 45, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_phase2_ca_cert_scheme
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2CaCertScheme() (result Setting8021xCKSchemeEnum) {
	iv, err := _I.Get(485, "Setting8021x", "get_phase2_ca_cert_scheme", 962, 46, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = Setting8021xCKSchemeEnum(ret.Int())
	return
}

// nm_setting_802_1x_get_phase2_ca_cert_uri
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2CaCertUri() (result string) {
	iv, err := _I.Get(486, "Setting8021x", "get_phase2_ca_cert_uri", 962, 47, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_phase2_ca_path
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2CaPath() (result string) {
	iv, err := _I.Get(487, "Setting8021x", "get_phase2_ca_path", 962, 48, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_phase2_client_cert_blob
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2ClientCertBlob() (result g.Bytes) {
	iv, err := _I.Get(488, "Setting8021x", "get_phase2_client_cert_blob", 962, 49, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_802_1x_get_phase2_client_cert_password
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2ClientCertPassword() (result string) {
	iv, err := _I.Get(489, "Setting8021x", "get_phase2_client_cert_password", 962, 50, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_phase2_client_cert_password_flags
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2ClientCertPasswordFlags() (result SettingSecretFlags) {
	iv, err := _I.Get(490, "Setting8021x", "get_phase2_client_cert_password_flags", 962, 51, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingSecretFlags(ret.Int())
	return
}

// nm_setting_802_1x_get_phase2_client_cert_path
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2ClientCertPath() (result string) {
	iv, err := _I.Get(491, "Setting8021x", "get_phase2_client_cert_path", 962, 52, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_phase2_client_cert_scheme
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2ClientCertScheme() (result Setting8021xCKSchemeEnum) {
	iv, err := _I.Get(492, "Setting8021x", "get_phase2_client_cert_scheme", 962, 53, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = Setting8021xCKSchemeEnum(ret.Int())
	return
}

// nm_setting_802_1x_get_phase2_client_cert_uri
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2ClientCertUri() (result string) {
	iv, err := _I.Get(493, "Setting8021x", "get_phase2_client_cert_uri", 962, 54, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_phase2_domain_suffix_match
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2DomainSuffixMatch() (result string) {
	iv, err := _I.Get(494, "Setting8021x", "get_phase2_domain_suffix_match", 962, 55, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_phase2_private_key_blob
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2PrivateKeyBlob() (result g.Bytes) {
	iv, err := _I.Get(495, "Setting8021x", "get_phase2_private_key_blob", 962, 56, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_802_1x_get_phase2_private_key_format
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2PrivateKeyFormat() (result Setting8021xCKFormatEnum) {
	iv, err := _I.Get(496, "Setting8021x", "get_phase2_private_key_format", 962, 57, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = Setting8021xCKFormatEnum(ret.Int())
	return
}

// nm_setting_802_1x_get_phase2_private_key_password
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2PrivateKeyPassword() (result string) {
	iv, err := _I.Get(497, "Setting8021x", "get_phase2_private_key_password", 962, 58, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_phase2_private_key_password_flags
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2PrivateKeyPasswordFlags() (result SettingSecretFlags) {
	iv, err := _I.Get(498, "Setting8021x", "get_phase2_private_key_password_flags", 962, 59, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingSecretFlags(ret.Int())
	return
}

// nm_setting_802_1x_get_phase2_private_key_path
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2PrivateKeyPath() (result string) {
	iv, err := _I.Get(499, "Setting8021x", "get_phase2_private_key_path", 962, 60, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_phase2_private_key_scheme
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2PrivateKeyScheme() (result Setting8021xCKSchemeEnum) {
	iv, err := _I.Get(500, "Setting8021x", "get_phase2_private_key_scheme", 962, 61, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = Setting8021xCKSchemeEnum(ret.Int())
	return
}

// nm_setting_802_1x_get_phase2_private_key_uri
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2PrivateKeyUri() (result string) {
	iv, err := _I.Get(501, "Setting8021x", "get_phase2_private_key_uri", 962, 62, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_phase2_subject_match
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPhase2SubjectMatch() (result string) {
	iv, err := _I.Get(502, "Setting8021x", "get_phase2_subject_match", 962, 63, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_pin
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPin() (result string) {
	iv, err := _I.Get(503, "Setting8021x", "get_pin", 962, 64, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_pin_flags
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPinFlags() (result SettingSecretFlags) {
	iv, err := _I.Get(504, "Setting8021x", "get_pin_flags", 962, 65, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingSecretFlags(ret.Int())
	return
}

// nm_setting_802_1x_get_private_key_blob
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPrivateKeyBlob() (result g.Bytes) {
	iv, err := _I.Get(505, "Setting8021x", "get_private_key_blob", 962, 66, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_802_1x_get_private_key_format
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPrivateKeyFormat() (result Setting8021xCKFormatEnum) {
	iv, err := _I.Get(506, "Setting8021x", "get_private_key_format", 962, 67, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = Setting8021xCKFormatEnum(ret.Int())
	return
}

// nm_setting_802_1x_get_private_key_password
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPrivateKeyPassword() (result string) {
	iv, err := _I.Get(507, "Setting8021x", "get_private_key_password", 962, 68, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_private_key_password_flags
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPrivateKeyPasswordFlags() (result SettingSecretFlags) {
	iv, err := _I.Get(508, "Setting8021x", "get_private_key_password_flags", 962, 69, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingSecretFlags(ret.Int())
	return
}

// nm_setting_802_1x_get_private_key_path
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPrivateKeyPath() (result string) {
	iv, err := _I.Get(509, "Setting8021x", "get_private_key_path", 962, 70, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_private_key_scheme
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPrivateKeyScheme() (result Setting8021xCKSchemeEnum) {
	iv, err := _I.Get(510, "Setting8021x", "get_private_key_scheme", 962, 71, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = Setting8021xCKSchemeEnum(ret.Int())
	return
}

// nm_setting_802_1x_get_private_key_uri
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetPrivateKeyUri() (result string) {
	iv, err := _I.Get(511, "Setting8021x", "get_private_key_uri", 962, 72, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_subject_match
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetSubjectMatch() (result string) {
	iv, err := _I.Get(512, "Setting8021x", "get_subject_match", 962, 73, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_802_1x_get_system_ca_certs
//
// [ result ] trans: nothing
//
func (v Setting8021x) GetSystemCaCerts() (result bool) {
	iv, err := _I.Get(513, "Setting8021x", "get_system_ca_certs", 962, 74, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_802_1x_remove_altsubject_match
//
// [ i ] trans: nothing
//
func (v Setting8021x) RemoveAltsubjectMatch(i uint32) {
	iv, err := _I.Get(514, "Setting8021x", "remove_altsubject_match", 962, 75, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_i := gi.NewUint32Argument(i)
	args := []gi.Argument{arg_v, arg_i}
	iv.Call(args, nil, nil)
}

// nm_setting_802_1x_remove_altsubject_match_by_value
//
// [ altsubject_match ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Setting8021x) RemoveAltsubjectMatchByValue(altsubject_match string) (result bool) {
	iv, err := _I.Get(515, "Setting8021x", "remove_altsubject_match_by_value", 962, 76, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_altsubject_match := gi.CString(altsubject_match)
	arg_v := gi.NewPointerArgument(v.P)
	arg_altsubject_match := gi.NewStringArgument(c_altsubject_match)
	args := []gi.Argument{arg_v, arg_altsubject_match}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_altsubject_match)
	result = ret.Bool()
	return
}

// nm_setting_802_1x_remove_eap_method
//
// [ i ] trans: nothing
//
func (v Setting8021x) RemoveEapMethod(i uint32) {
	iv, err := _I.Get(516, "Setting8021x", "remove_eap_method", 962, 77, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_i := gi.NewUint32Argument(i)
	args := []gi.Argument{arg_v, arg_i}
	iv.Call(args, nil, nil)
}

// nm_setting_802_1x_remove_eap_method_by_value
//
// [ eap ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Setting8021x) RemoveEapMethodByValue(eap string) (result bool) {
	iv, err := _I.Get(517, "Setting8021x", "remove_eap_method_by_value", 962, 78, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_eap := gi.CString(eap)
	arg_v := gi.NewPointerArgument(v.P)
	arg_eap := gi.NewStringArgument(c_eap)
	args := []gi.Argument{arg_v, arg_eap}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_eap)
	result = ret.Bool()
	return
}

// nm_setting_802_1x_remove_phase2_altsubject_match
//
// [ i ] trans: nothing
//
func (v Setting8021x) RemovePhase2AltsubjectMatch(i uint32) {
	iv, err := _I.Get(518, "Setting8021x", "remove_phase2_altsubject_match", 962, 79, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_i := gi.NewUint32Argument(i)
	args := []gi.Argument{arg_v, arg_i}
	iv.Call(args, nil, nil)
}

// nm_setting_802_1x_remove_phase2_altsubject_match_by_value
//
// [ phase2_altsubject_match ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Setting8021x) RemovePhase2AltsubjectMatchByValue(phase2_altsubject_match string) (result bool) {
	iv, err := _I.Get(519, "Setting8021x", "remove_phase2_altsubject_match_by_value", 962, 80, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_phase2_altsubject_match := gi.CString(phase2_altsubject_match)
	arg_v := gi.NewPointerArgument(v.P)
	arg_phase2_altsubject_match := gi.NewStringArgument(c_phase2_altsubject_match)
	args := []gi.Argument{arg_v, arg_phase2_altsubject_match}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_phase2_altsubject_match)
	result = ret.Bool()
	return
}

// denied function Setting8021x.SetCaCert

// denied function Setting8021x.SetClientCert

// denied function Setting8021x.SetPhase2CaCert

// denied function Setting8021x.SetPhase2ClientCert

// denied function Setting8021x.SetPhase2PrivateKey

// denied function Setting8021x.SetPrivateKey

// Flags Setting8021xAuthFlags
type Setting8021xAuthFlags int

const (
	Setting8021xAuthFlagsNone         Setting8021xAuthFlags = 0
	Setting8021xAuthFlagsTls10Disable Setting8021xAuthFlags = 1
	Setting8021xAuthFlagsTls11Disable Setting8021xAuthFlags = 2
	Setting8021xAuthFlagsTls12Disable Setting8021xAuthFlags = 4
	Setting8021xAuthFlagsAll          Setting8021xAuthFlags = 7
)

func Setting8021xAuthFlagsGetType() gi.GType {
	ret := _I.GetGType(77, "Setting8021xAuthFlags")
	return ret
}

// Enum Setting8021xCKFormat
type Setting8021xCKFormatEnum int

const (
	Setting8021xCKFormatUnknown Setting8021xCKFormatEnum = 0
	Setting8021xCKFormatX509    Setting8021xCKFormatEnum = 1
	Setting8021xCKFormatRawKey  Setting8021xCKFormatEnum = 2
	Setting8021xCKFormatPkcs12  Setting8021xCKFormatEnum = 3
)

func Setting8021xCKFormatGetType() gi.GType {
	ret := _I.GetGType(78, "Setting8021xCKFormat")
	return ret
}

// Enum Setting8021xCKScheme
type Setting8021xCKSchemeEnum int

const (
	Setting8021xCKSchemeUnknown Setting8021xCKSchemeEnum = 0
	Setting8021xCKSchemeBlob    Setting8021xCKSchemeEnum = 1
	Setting8021xCKSchemePath    Setting8021xCKSchemeEnum = 2
	Setting8021xCKSchemePkcs11  Setting8021xCKSchemeEnum = 3
)

func Setting8021xCKSchemeGetType() gi.GType {
	ret := _I.GetGType(79, "Setting8021xCKScheme")
	return ret
}

// ignore GType struct Setting8021xClass

// Object SettingAdsl
type SettingAdsl struct {
	Setting
}

func WrapSettingAdsl(p unsafe.Pointer) (r SettingAdsl) { r.P = p; return }

type ISettingAdsl interface{ P_SettingAdsl() unsafe.Pointer }

func (v SettingAdsl) P_SettingAdsl() unsafe.Pointer { return v.P }
func SettingAdslGetType() gi.GType {
	ret := _I.GetGType(80, "SettingAdsl")
	return ret
}

// nm_setting_adsl_new
//
// [ result ] trans: everything
//
func NewSettingAdsl() (result SettingAdsl) {
	iv, err := _I.Get(526, "SettingAdsl", "new", 967, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_adsl_get_encapsulation
//
// [ result ] trans: nothing
//
func (v SettingAdsl) GetEncapsulation() (result string) {
	iv, err := _I.Get(527, "SettingAdsl", "get_encapsulation", 967, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_adsl_get_password
//
// [ result ] trans: nothing
//
func (v SettingAdsl) GetPassword() (result string) {
	iv, err := _I.Get(528, "SettingAdsl", "get_password", 967, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_adsl_get_password_flags
//
// [ result ] trans: nothing
//
func (v SettingAdsl) GetPasswordFlags() (result SettingSecretFlags) {
	iv, err := _I.Get(529, "SettingAdsl", "get_password_flags", 967, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingSecretFlags(ret.Int())
	return
}

// nm_setting_adsl_get_protocol
//
// [ result ] trans: nothing
//
func (v SettingAdsl) GetProtocol() (result string) {
	iv, err := _I.Get(530, "SettingAdsl", "get_protocol", 967, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_adsl_get_username
//
// [ result ] trans: nothing
//
func (v SettingAdsl) GetUsername() (result string) {
	iv, err := _I.Get(531, "SettingAdsl", "get_username", 967, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_adsl_get_vci
//
// [ result ] trans: nothing
//
func (v SettingAdsl) GetVci() (result uint32) {
	iv, err := _I.Get(532, "SettingAdsl", "get_vci", 967, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_adsl_get_vpi
//
// [ result ] trans: nothing
//
func (v SettingAdsl) GetVpi() (result uint32) {
	iv, err := _I.Get(533, "SettingAdsl", "get_vpi", 967, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// ignore GType struct SettingAdslClass

// Object SettingBluetooth
type SettingBluetooth struct {
	Setting
}

func WrapSettingBluetooth(p unsafe.Pointer) (r SettingBluetooth) { r.P = p; return }

type ISettingBluetooth interface{ P_SettingBluetooth() unsafe.Pointer }

func (v SettingBluetooth) P_SettingBluetooth() unsafe.Pointer { return v.P }
func SettingBluetoothGetType() gi.GType {
	ret := _I.GetGType(81, "SettingBluetooth")
	return ret
}

// nm_setting_bluetooth_new
//
// [ result ] trans: everything
//
func NewSettingBluetooth() (result SettingBluetooth) {
	iv, err := _I.Get(534, "SettingBluetooth", "new", 969, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_bluetooth_get_bdaddr
//
// [ result ] trans: nothing
//
func (v SettingBluetooth) GetBdaddr() (result string) {
	iv, err := _I.Get(535, "SettingBluetooth", "get_bdaddr", 969, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_bluetooth_get_connection_type
//
// [ result ] trans: nothing
//
func (v SettingBluetooth) GetConnectionType() (result string) {
	iv, err := _I.Get(536, "SettingBluetooth", "get_connection_type", 969, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// ignore GType struct SettingBluetoothClass

// Object SettingBond
type SettingBond struct {
	Setting
}

func WrapSettingBond(p unsafe.Pointer) (r SettingBond) { r.P = p; return }

type ISettingBond interface{ P_SettingBond() unsafe.Pointer }

func (v SettingBond) P_SettingBond() unsafe.Pointer { return v.P }
func SettingBondGetType() gi.GType {
	ret := _I.GetGType(82, "SettingBond")
	return ret
}

// nm_setting_bond_new
//
// [ result ] trans: everything
//
func NewSettingBond() (result SettingBond) {
	iv, err := _I.Get(537, "SettingBond", "new", 971, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_bond_validate_option
//
// [ name ] trans: nothing
//
// [ value ] trans: nothing
//
// [ result ] trans: nothing
//
func SettingBondValidateOption1(name string, value string) (result bool) {
	iv, err := _I.Get(538, "SettingBond", "validate_option", 971, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	c_value := gi.CString(value)
	arg_name := gi.NewStringArgument(c_name)
	arg_value := gi.NewStringArgument(c_value)
	args := []gi.Argument{arg_name, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	gi.Free(c_value)
	result = ret.Bool()
	return
}

// nm_setting_bond_add_option
//
// [ name ] trans: nothing
//
// [ value ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingBond) AddOption(name string, value string) (result bool) {
	iv, err := _I.Get(539, "SettingBond", "add_option", 971, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	c_value := gi.CString(value)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_value := gi.NewStringArgument(c_value)
	args := []gi.Argument{arg_v, arg_name, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	gi.Free(c_value)
	result = ret.Bool()
	return
}

// nm_setting_bond_get_num_options
//
// [ result ] trans: nothing
//
func (v SettingBond) GetNumOptions() (result uint32) {
	iv, err := _I.Get(540, "SettingBond", "get_num_options", 971, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_bond_get_option
//
// [ idx ] trans: nothing
//
// [ out_name ] trans: nothing, dir: out
//
// [ out_value ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v SettingBond) GetOption(idx uint32) (result bool, out_name string, out_value string) {
	iv, err := _I.Get(541, "SettingBond", "get_option", 971, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	arg_out_name := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_out_value := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_idx, arg_out_name, arg_out_value}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	out_name = outArgs[0].String().Copy()
	out_value = outArgs[1].String().Copy()
	result = ret.Bool()
	return
}

// nm_setting_bond_get_option_by_name
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingBond) GetOptionByName(name string) (result string) {
	iv, err := _I.Get(542, "SettingBond", "get_option_by_name", 971, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result = ret.String().Copy()
	return
}

// nm_setting_bond_get_option_default
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingBond) GetOptionDefault(name string) (result string) {
	iv, err := _I.Get(543, "SettingBond", "get_option_default", 971, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result = ret.String().Copy()
	return
}

// nm_setting_bond_get_valid_options
//
// [ result ] trans: nothing
//
func (v SettingBond) GetValidOptions() (result gi.CStrArray) {
	iv, err := _I.Get(544, "SettingBond", "get_valid_options", 971, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// nm_setting_bond_remove_option
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingBond) RemoveOption(name string) (result bool) {
	iv, err := _I.Get(545, "SettingBond", "remove_option", 971, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result = ret.Bool()
	return
}

// ignore GType struct SettingBondClass

// Object SettingBridge
type SettingBridge struct {
	Setting
}

func WrapSettingBridge(p unsafe.Pointer) (r SettingBridge) { r.P = p; return }

type ISettingBridge interface{ P_SettingBridge() unsafe.Pointer }

func (v SettingBridge) P_SettingBridge() unsafe.Pointer { return v.P }
func SettingBridgeGetType() gi.GType {
	ret := _I.GetGType(83, "SettingBridge")
	return ret
}

// nm_setting_bridge_new
//
// [ result ] trans: everything
//
func NewSettingBridge() (result SettingBridge) {
	iv, err := _I.Get(546, "SettingBridge", "new", 973, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_bridge_get_ageing_time
//
// [ result ] trans: nothing
//
func (v SettingBridge) GetAgeingTime() (result uint32) {
	iv, err := _I.Get(547, "SettingBridge", "get_ageing_time", 973, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_bridge_get_forward_delay
//
// [ result ] trans: nothing
//
func (v SettingBridge) GetForwardDelay() (result uint16) {
	iv, err := _I.Get(548, "SettingBridge", "get_forward_delay", 973, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint16()
	return
}

// nm_setting_bridge_get_group_forward_mask
//
// [ result ] trans: nothing
//
func (v SettingBridge) GetGroupForwardMask() (result uint16) {
	iv, err := _I.Get(549, "SettingBridge", "get_group_forward_mask", 973, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint16()
	return
}

// nm_setting_bridge_get_hello_time
//
// [ result ] trans: nothing
//
func (v SettingBridge) GetHelloTime() (result uint16) {
	iv, err := _I.Get(550, "SettingBridge", "get_hello_time", 973, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint16()
	return
}

// nm_setting_bridge_get_mac_address
//
// [ result ] trans: nothing
//
func (v SettingBridge) GetMacAddress() (result string) {
	iv, err := _I.Get(551, "SettingBridge", "get_mac_address", 973, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_bridge_get_max_age
//
// [ result ] trans: nothing
//
func (v SettingBridge) GetMaxAge() (result uint16) {
	iv, err := _I.Get(552, "SettingBridge", "get_max_age", 973, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint16()
	return
}

// nm_setting_bridge_get_multicast_snooping
//
// [ result ] trans: nothing
//
func (v SettingBridge) GetMulticastSnooping() (result bool) {
	iv, err := _I.Get(553, "SettingBridge", "get_multicast_snooping", 973, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_bridge_get_priority
//
// [ result ] trans: nothing
//
func (v SettingBridge) GetPriority() (result uint16) {
	iv, err := _I.Get(554, "SettingBridge", "get_priority", 973, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint16()
	return
}

// nm_setting_bridge_get_stp
//
// [ result ] trans: nothing
//
func (v SettingBridge) GetStp() (result bool) {
	iv, err := _I.Get(555, "SettingBridge", "get_stp", 973, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct SettingBridgeClass

// Object SettingBridgePort
type SettingBridgePort struct {
	Setting
}

func WrapSettingBridgePort(p unsafe.Pointer) (r SettingBridgePort) { r.P = p; return }

type ISettingBridgePort interface{ P_SettingBridgePort() unsafe.Pointer }

func (v SettingBridgePort) P_SettingBridgePort() unsafe.Pointer { return v.P }
func SettingBridgePortGetType() gi.GType {
	ret := _I.GetGType(84, "SettingBridgePort")
	return ret
}

// nm_setting_bridge_port_new
//
// [ result ] trans: everything
//
func NewSettingBridgePort() (result SettingBridgePort) {
	iv, err := _I.Get(556, "SettingBridgePort", "new", 975, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_bridge_port_get_hairpin_mode
//
// [ result ] trans: nothing
//
func (v SettingBridgePort) GetHairpinMode() (result bool) {
	iv, err := _I.Get(557, "SettingBridgePort", "get_hairpin_mode", 975, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_bridge_port_get_path_cost
//
// [ result ] trans: nothing
//
func (v SettingBridgePort) GetPathCost() (result uint16) {
	iv, err := _I.Get(558, "SettingBridgePort", "get_path_cost", 975, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint16()
	return
}

// nm_setting_bridge_port_get_priority
//
// [ result ] trans: nothing
//
func (v SettingBridgePort) GetPriority() (result uint16) {
	iv, err := _I.Get(559, "SettingBridgePort", "get_priority", 975, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint16()
	return
}

// ignore GType struct SettingBridgePortClass

// Object SettingCdma
type SettingCdma struct {
	Setting
}

func WrapSettingCdma(p unsafe.Pointer) (r SettingCdma) { r.P = p; return }

type ISettingCdma interface{ P_SettingCdma() unsafe.Pointer }

func (v SettingCdma) P_SettingCdma() unsafe.Pointer { return v.P }
func SettingCdmaGetType() gi.GType {
	ret := _I.GetGType(85, "SettingCdma")
	return ret
}

// nm_setting_cdma_new
//
// [ result ] trans: everything
//
func NewSettingCdma() (result SettingCdma) {
	iv, err := _I.Get(560, "SettingCdma", "new", 977, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_cdma_get_mtu
//
// [ result ] trans: nothing
//
func (v SettingCdma) GetMtu() (result uint32) {
	iv, err := _I.Get(561, "SettingCdma", "get_mtu", 977, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_cdma_get_number
//
// [ result ] trans: nothing
//
func (v SettingCdma) GetNumber() (result string) {
	iv, err := _I.Get(562, "SettingCdma", "get_number", 977, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_cdma_get_password
//
// [ result ] trans: nothing
//
func (v SettingCdma) GetPassword() (result string) {
	iv, err := _I.Get(563, "SettingCdma", "get_password", 977, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_cdma_get_password_flags
//
// [ result ] trans: nothing
//
func (v SettingCdma) GetPasswordFlags() (result SettingSecretFlags) {
	iv, err := _I.Get(564, "SettingCdma", "get_password_flags", 977, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingSecretFlags(ret.Int())
	return
}

// nm_setting_cdma_get_username
//
// [ result ] trans: nothing
//
func (v SettingCdma) GetUsername() (result string) {
	iv, err := _I.Get(565, "SettingCdma", "get_username", 977, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// ignore GType struct SettingCdmaClass

// ignore GType struct SettingClass

type SettingClearSecretsWithFlagsFn func(setting Setting, secret string, flags SettingSecretFlags) (result bool)

func CallSettingClearSecretsWithFlagsFn(fn SettingClearSecretsWithFlagsFn, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	setting := WrapSetting(*(*unsafe.Pointer)(args[0]))
	secret := gi.GoString(*(*unsafe.Pointer)(args[1]))
	flags := *(*SettingSecretFlags)(args[2])
	fnRet := fn(setting, secret, flags)
	*(*int32)(result) = int32(gi.Bool2Int(fnRet))
}

// Enum SettingCompareFlags
type SettingCompareFlagsEnum int

const (
	SettingCompareFlagsExact                   SettingCompareFlagsEnum = 0
	SettingCompareFlagsFuzzy                   SettingCompareFlagsEnum = 1
	SettingCompareFlagsIgnoreId                SettingCompareFlagsEnum = 2
	SettingCompareFlagsIgnoreSecrets           SettingCompareFlagsEnum = 4
	SettingCompareFlagsIgnoreAgentOwnedSecrets SettingCompareFlagsEnum = 8
	SettingCompareFlagsIgnoreNotSavedSecrets   SettingCompareFlagsEnum = 16
	SettingCompareFlagsDiffResultWithDefault   SettingCompareFlagsEnum = 32
	SettingCompareFlagsDiffResultNoDefault     SettingCompareFlagsEnum = 64
	SettingCompareFlagsIgnoreTimestamp         SettingCompareFlagsEnum = 128
)

func SettingCompareFlagsGetType() gi.GType {
	ret := _I.GetGType(86, "SettingCompareFlags")
	return ret
}

// Object SettingConnection
type SettingConnection struct {
	Setting
}

func WrapSettingConnection(p unsafe.Pointer) (r SettingConnection) { r.P = p; return }

type ISettingConnection interface{ P_SettingConnection() unsafe.Pointer }

func (v SettingConnection) P_SettingConnection() unsafe.Pointer { return v.P }
func SettingConnectionGetType() gi.GType {
	ret := _I.GetGType(87, "SettingConnection")
	return ret
}

// nm_setting_connection_new
//
// [ result ] trans: everything
//
func NewSettingConnection() (result SettingConnection) {
	iv, err := _I.Get(566, "SettingConnection", "new", 982, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_connection_add_permission
//
// [ ptype ] trans: nothing
//
// [ pitem ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingConnection) AddPermission(ptype string, pitem string, detail string) (result bool) {
	iv, err := _I.Get(567, "SettingConnection", "add_permission", 982, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_ptype := gi.CString(ptype)
	c_pitem := gi.CString(pitem)
	c_detail := gi.CString(detail)
	arg_v := gi.NewPointerArgument(v.P)
	arg_ptype := gi.NewStringArgument(c_ptype)
	arg_pitem := gi.NewStringArgument(c_pitem)
	arg_detail := gi.NewStringArgument(c_detail)
	args := []gi.Argument{arg_v, arg_ptype, arg_pitem, arg_detail}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_ptype)
	gi.Free(c_pitem)
	gi.Free(c_detail)
	result = ret.Bool()
	return
}

// nm_setting_connection_add_secondary
//
// [ sec_uuid ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingConnection) AddSecondary(sec_uuid string) (result bool) {
	iv, err := _I.Get(568, "SettingConnection", "add_secondary", 982, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_sec_uuid := gi.CString(sec_uuid)
	arg_v := gi.NewPointerArgument(v.P)
	arg_sec_uuid := gi.NewStringArgument(c_sec_uuid)
	args := []gi.Argument{arg_v, arg_sec_uuid}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_sec_uuid)
	result = ret.Bool()
	return
}

// nm_setting_connection_get_auth_retries
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetAuthRetries() (result int32) {
	iv, err := _I.Get(569, "SettingConnection", "get_auth_retries", 982, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_connection_get_autoconnect
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetAutoconnect() (result bool) {
	iv, err := _I.Get(570, "SettingConnection", "get_autoconnect", 982, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_connection_get_autoconnect_priority
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetAutoconnectPriority() (result int32) {
	iv, err := _I.Get(571, "SettingConnection", "get_autoconnect_priority", 982, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_connection_get_autoconnect_retries
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetAutoconnectRetries() (result int32) {
	iv, err := _I.Get(572, "SettingConnection", "get_autoconnect_retries", 982, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_connection_get_autoconnect_slaves
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetAutoconnectSlaves() (result SettingConnectionAutoconnectSlavesEnum) {
	iv, err := _I.Get(573, "SettingConnection", "get_autoconnect_slaves", 982, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingConnectionAutoconnectSlavesEnum(ret.Int())
	return
}

// nm_setting_connection_get_connection_type
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetConnectionType() (result string) {
	iv, err := _I.Get(574, "SettingConnection", "get_connection_type", 982, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_connection_get_gateway_ping_timeout
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetGatewayPingTimeout() (result uint32) {
	iv, err := _I.Get(575, "SettingConnection", "get_gateway_ping_timeout", 982, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_connection_get_id
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetId() (result string) {
	iv, err := _I.Get(576, "SettingConnection", "get_id", 982, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_connection_get_interface_name
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetInterfaceName() (result string) {
	iv, err := _I.Get(577, "SettingConnection", "get_interface_name", 982, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_connection_get_lldp
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetLldp() (result SettingConnectionLldpEnum) {
	iv, err := _I.Get(578, "SettingConnection", "get_lldp", 982, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingConnectionLldpEnum(ret.Int())
	return
}

// nm_setting_connection_get_llmnr
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetLlmnr() (result SettingConnectionLlmnrEnum) {
	iv, err := _I.Get(579, "SettingConnection", "get_llmnr", 982, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingConnectionLlmnrEnum(ret.Int())
	return
}

// nm_setting_connection_get_master
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetMaster() (result string) {
	iv, err := _I.Get(580, "SettingConnection", "get_master", 982, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_connection_get_mdns
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetMdns() (result SettingConnectionMdnsEnum) {
	iv, err := _I.Get(581, "SettingConnection", "get_mdns", 982, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingConnectionMdnsEnum(ret.Int())
	return
}

// nm_setting_connection_get_metered
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetMetered() (result MeteredEnum) {
	iv, err := _I.Get(582, "SettingConnection", "get_metered", 982, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = MeteredEnum(ret.Int())
	return
}

// nm_setting_connection_get_multi_connect
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetMultiConnect() (result ConnectionMultiConnectEnum) {
	iv, err := _I.Get(583, "SettingConnection", "get_multi_connect", 982, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ConnectionMultiConnectEnum(ret.Int())
	return
}

// nm_setting_connection_get_num_permissions
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetNumPermissions() (result uint32) {
	iv, err := _I.Get(584, "SettingConnection", "get_num_permissions", 982, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_connection_get_num_secondaries
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetNumSecondaries() (result uint32) {
	iv, err := _I.Get(585, "SettingConnection", "get_num_secondaries", 982, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_connection_get_permission
//
// [ idx ] trans: nothing
//
// [ out_ptype ] trans: nothing
//
// [ out_pitem ] trans: nothing
//
// [ out_detail ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetPermission(idx uint32, out_ptype string, out_pitem string, out_detail string) (result bool) {
	iv, err := _I.Get(586, "SettingConnection", "get_permission", 982, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_out_ptype := gi.CString(out_ptype)
	c_out_pitem := gi.CString(out_pitem)
	c_out_detail := gi.CString(out_detail)
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	arg_out_ptype := gi.NewStringArgument(c_out_ptype)
	arg_out_pitem := gi.NewStringArgument(c_out_pitem)
	arg_out_detail := gi.NewStringArgument(c_out_detail)
	args := []gi.Argument{arg_v, arg_idx, arg_out_ptype, arg_out_pitem, arg_out_detail}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_out_ptype)
	gi.Free(c_out_pitem)
	gi.Free(c_out_detail)
	result = ret.Bool()
	return
}

// nm_setting_connection_get_read_only
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetReadOnly() (result bool) {
	iv, err := _I.Get(587, "SettingConnection", "get_read_only", 982, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_connection_get_secondary
//
// [ idx ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetSecondary(idx uint32) (result string) {
	iv, err := _I.Get(588, "SettingConnection", "get_secondary", 982, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_connection_get_slave_type
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetSlaveType() (result string) {
	iv, err := _I.Get(589, "SettingConnection", "get_slave_type", 982, 23, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_connection_get_stable_id
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetStableId() (result string) {
	iv, err := _I.Get(590, "SettingConnection", "get_stable_id", 982, 24, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_connection_get_timestamp
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetTimestamp() (result uint64) {
	iv, err := _I.Get(591, "SettingConnection", "get_timestamp", 982, 25, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint64()
	return
}

// nm_setting_connection_get_uuid
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetUuid() (result string) {
	iv, err := _I.Get(592, "SettingConnection", "get_uuid", 982, 26, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_connection_get_zone
//
// [ result ] trans: nothing
//
func (v SettingConnection) GetZone() (result string) {
	iv, err := _I.Get(593, "SettingConnection", "get_zone", 982, 27, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_connection_is_slave_type
//
// [ type1 ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingConnection) IsSlaveType(type1 string) (result bool) {
	iv, err := _I.Get(594, "SettingConnection", "is_slave_type", 982, 28, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_type1 := gi.CString(type1)
	arg_v := gi.NewPointerArgument(v.P)
	arg_type1 := gi.NewStringArgument(c_type1)
	args := []gi.Argument{arg_v, arg_type1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_type1)
	result = ret.Bool()
	return
}

// nm_setting_connection_permissions_user_allowed
//
// [ uname ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingConnection) PermissionsUserAllowed(uname string) (result bool) {
	iv, err := _I.Get(595, "SettingConnection", "permissions_user_allowed", 982, 29, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uname := gi.CString(uname)
	arg_v := gi.NewPointerArgument(v.P)
	arg_uname := gi.NewStringArgument(c_uname)
	args := []gi.Argument{arg_v, arg_uname}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_uname)
	result = ret.Bool()
	return
}

// nm_setting_connection_remove_permission
//
// [ idx ] trans: nothing
//
func (v SettingConnection) RemovePermission(idx uint32) {
	iv, err := _I.Get(596, "SettingConnection", "remove_permission", 982, 30, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	iv.Call(args, nil, nil)
}

// nm_setting_connection_remove_permission_by_value
//
// [ ptype ] trans: nothing
//
// [ pitem ] trans: nothing
//
// [ detail ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingConnection) RemovePermissionByValue(ptype string, pitem string, detail string) (result bool) {
	iv, err := _I.Get(597, "SettingConnection", "remove_permission_by_value", 982, 31, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_ptype := gi.CString(ptype)
	c_pitem := gi.CString(pitem)
	c_detail := gi.CString(detail)
	arg_v := gi.NewPointerArgument(v.P)
	arg_ptype := gi.NewStringArgument(c_ptype)
	arg_pitem := gi.NewStringArgument(c_pitem)
	arg_detail := gi.NewStringArgument(c_detail)
	args := []gi.Argument{arg_v, arg_ptype, arg_pitem, arg_detail}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_ptype)
	gi.Free(c_pitem)
	gi.Free(c_detail)
	result = ret.Bool()
	return
}

// nm_setting_connection_remove_secondary
//
// [ idx ] trans: nothing
//
func (v SettingConnection) RemoveSecondary(idx uint32) {
	iv, err := _I.Get(598, "SettingConnection", "remove_secondary", 982, 32, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	iv.Call(args, nil, nil)
}

// nm_setting_connection_remove_secondary_by_value
//
// [ sec_uuid ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingConnection) RemoveSecondaryByValue(sec_uuid string) (result bool) {
	iv, err := _I.Get(599, "SettingConnection", "remove_secondary_by_value", 982, 33, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_sec_uuid := gi.CString(sec_uuid)
	arg_v := gi.NewPointerArgument(v.P)
	arg_sec_uuid := gi.NewStringArgument(c_sec_uuid)
	args := []gi.Argument{arg_v, arg_sec_uuid}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_sec_uuid)
	result = ret.Bool()
	return
}

// Enum SettingConnectionAutoconnectSlaves
type SettingConnectionAutoconnectSlavesEnum int

const (
	SettingConnectionAutoconnectSlavesDefault SettingConnectionAutoconnectSlavesEnum = -1
	SettingConnectionAutoconnectSlavesNo      SettingConnectionAutoconnectSlavesEnum = 0
	SettingConnectionAutoconnectSlavesYes     SettingConnectionAutoconnectSlavesEnum = 1
)

func SettingConnectionAutoconnectSlavesGetType() gi.GType {
	ret := _I.GetGType(88, "SettingConnectionAutoconnectSlaves")
	return ret
}

// ignore GType struct SettingConnectionClass

// Enum SettingConnectionLldp
type SettingConnectionLldpEnum int

const (
	SettingConnectionLldpDefault  SettingConnectionLldpEnum = -1
	SettingConnectionLldpDisable  SettingConnectionLldpEnum = 0
	SettingConnectionLldpEnableRx SettingConnectionLldpEnum = 1
)

func SettingConnectionLldpGetType() gi.GType {
	ret := _I.GetGType(89, "SettingConnectionLldp")
	return ret
}

// Enum SettingConnectionLlmnr
type SettingConnectionLlmnrEnum int

const (
	SettingConnectionLlmnrDefault SettingConnectionLlmnrEnum = -1
	SettingConnectionLlmnrNo      SettingConnectionLlmnrEnum = 0
	SettingConnectionLlmnrResolve SettingConnectionLlmnrEnum = 1
	SettingConnectionLlmnrYes     SettingConnectionLlmnrEnum = 2
)

func SettingConnectionLlmnrGetType() gi.GType {
	ret := _I.GetGType(90, "SettingConnectionLlmnr")
	return ret
}

// Enum SettingConnectionMdns
type SettingConnectionMdnsEnum int

const (
	SettingConnectionMdnsDefault SettingConnectionMdnsEnum = -1
	SettingConnectionMdnsNo      SettingConnectionMdnsEnum = 0
	SettingConnectionMdnsResolve SettingConnectionMdnsEnum = 1
	SettingConnectionMdnsYes     SettingConnectionMdnsEnum = 2
)

func SettingConnectionMdnsGetType() gi.GType {
	ret := _I.GetGType(91, "SettingConnectionMdns")
	return ret
}

// Object SettingDcb
type SettingDcb struct {
	Setting
}

func WrapSettingDcb(p unsafe.Pointer) (r SettingDcb) { r.P = p; return }

type ISettingDcb interface{ P_SettingDcb() unsafe.Pointer }

func (v SettingDcb) P_SettingDcb() unsafe.Pointer { return v.P }
func SettingDcbGetType() gi.GType {
	ret := _I.GetGType(92, "SettingDcb")
	return ret
}

// nm_setting_dcb_new
//
// [ result ] trans: everything
//
func NewSettingDcb() (result SettingDcb) {
	iv, err := _I.Get(600, "SettingDcb", "new", 988, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_dcb_get_app_fcoe_flags
//
// [ result ] trans: nothing
//
func (v SettingDcb) GetAppFcoeFlags() (result SettingDcbFlags) {
	iv, err := _I.Get(601, "SettingDcb", "get_app_fcoe_flags", 988, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingDcbFlags(ret.Int())
	return
}

// nm_setting_dcb_get_app_fcoe_mode
//
// [ result ] trans: nothing
//
func (v SettingDcb) GetAppFcoeMode() (result string) {
	iv, err := _I.Get(602, "SettingDcb", "get_app_fcoe_mode", 988, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_dcb_get_app_fcoe_priority
//
// [ result ] trans: nothing
//
func (v SettingDcb) GetAppFcoePriority() (result int32) {
	iv, err := _I.Get(603, "SettingDcb", "get_app_fcoe_priority", 988, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_dcb_get_app_fip_flags
//
// [ result ] trans: nothing
//
func (v SettingDcb) GetAppFipFlags() (result SettingDcbFlags) {
	iv, err := _I.Get(604, "SettingDcb", "get_app_fip_flags", 988, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingDcbFlags(ret.Int())
	return
}

// nm_setting_dcb_get_app_fip_priority
//
// [ result ] trans: nothing
//
func (v SettingDcb) GetAppFipPriority() (result int32) {
	iv, err := _I.Get(605, "SettingDcb", "get_app_fip_priority", 988, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_dcb_get_app_iscsi_flags
//
// [ result ] trans: nothing
//
func (v SettingDcb) GetAppIscsiFlags() (result SettingDcbFlags) {
	iv, err := _I.Get(606, "SettingDcb", "get_app_iscsi_flags", 988, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingDcbFlags(ret.Int())
	return
}

// nm_setting_dcb_get_app_iscsi_priority
//
// [ result ] trans: nothing
//
func (v SettingDcb) GetAppIscsiPriority() (result int32) {
	iv, err := _I.Get(607, "SettingDcb", "get_app_iscsi_priority", 988, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_dcb_get_priority_bandwidth
//
// [ user_priority ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingDcb) GetPriorityBandwidth(user_priority uint32) (result uint32) {
	iv, err := _I.Get(608, "SettingDcb", "get_priority_bandwidth", 988, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_user_priority := gi.NewUint32Argument(user_priority)
	args := []gi.Argument{arg_v, arg_user_priority}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_dcb_get_priority_flow_control
//
// [ user_priority ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingDcb) GetPriorityFlowControl(user_priority uint32) (result bool) {
	iv, err := _I.Get(609, "SettingDcb", "get_priority_flow_control", 988, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_user_priority := gi.NewUint32Argument(user_priority)
	args := []gi.Argument{arg_v, arg_user_priority}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_dcb_get_priority_flow_control_flags
//
// [ result ] trans: nothing
//
func (v SettingDcb) GetPriorityFlowControlFlags() (result SettingDcbFlags) {
	iv, err := _I.Get(610, "SettingDcb", "get_priority_flow_control_flags", 988, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingDcbFlags(ret.Int())
	return
}

// nm_setting_dcb_get_priority_group_bandwidth
//
// [ group_id ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingDcb) GetPriorityGroupBandwidth(group_id uint32) (result uint32) {
	iv, err := _I.Get(611, "SettingDcb", "get_priority_group_bandwidth", 988, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_group_id := gi.NewUint32Argument(group_id)
	args := []gi.Argument{arg_v, arg_group_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_dcb_get_priority_group_flags
//
// [ result ] trans: nothing
//
func (v SettingDcb) GetPriorityGroupFlags() (result SettingDcbFlags) {
	iv, err := _I.Get(612, "SettingDcb", "get_priority_group_flags", 988, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingDcbFlags(ret.Int())
	return
}

// nm_setting_dcb_get_priority_group_id
//
// [ user_priority ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingDcb) GetPriorityGroupId(user_priority uint32) (result uint32) {
	iv, err := _I.Get(613, "SettingDcb", "get_priority_group_id", 988, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_user_priority := gi.NewUint32Argument(user_priority)
	args := []gi.Argument{arg_v, arg_user_priority}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_dcb_get_priority_strict_bandwidth
//
// [ user_priority ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingDcb) GetPriorityStrictBandwidth(user_priority uint32) (result bool) {
	iv, err := _I.Get(614, "SettingDcb", "get_priority_strict_bandwidth", 988, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_user_priority := gi.NewUint32Argument(user_priority)
	args := []gi.Argument{arg_v, arg_user_priority}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_dcb_get_priority_traffic_class
//
// [ user_priority ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingDcb) GetPriorityTrafficClass(user_priority uint32) (result uint32) {
	iv, err := _I.Get(615, "SettingDcb", "get_priority_traffic_class", 988, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_user_priority := gi.NewUint32Argument(user_priority)
	args := []gi.Argument{arg_v, arg_user_priority}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_dcb_set_priority_bandwidth
//
// [ user_priority ] trans: nothing
//
// [ bandwidth_percent ] trans: nothing
//
func (v SettingDcb) SetPriorityBandwidth(user_priority uint32, bandwidth_percent uint32) {
	iv, err := _I.Get(616, "SettingDcb", "set_priority_bandwidth", 988, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_user_priority := gi.NewUint32Argument(user_priority)
	arg_bandwidth_percent := gi.NewUint32Argument(bandwidth_percent)
	args := []gi.Argument{arg_v, arg_user_priority, arg_bandwidth_percent}
	iv.Call(args, nil, nil)
}

// nm_setting_dcb_set_priority_flow_control
//
// [ user_priority ] trans: nothing
//
// [ enabled ] trans: nothing
//
func (v SettingDcb) SetPriorityFlowControl(user_priority uint32, enabled bool) {
	iv, err := _I.Get(617, "SettingDcb", "set_priority_flow_control", 988, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_user_priority := gi.NewUint32Argument(user_priority)
	arg_enabled := gi.NewBoolArgument(enabled)
	args := []gi.Argument{arg_v, arg_user_priority, arg_enabled}
	iv.Call(args, nil, nil)
}

// nm_setting_dcb_set_priority_group_bandwidth
//
// [ group_id ] trans: nothing
//
// [ bandwidth_percent ] trans: nothing
//
func (v SettingDcb) SetPriorityGroupBandwidth(group_id uint32, bandwidth_percent uint32) {
	iv, err := _I.Get(618, "SettingDcb", "set_priority_group_bandwidth", 988, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_group_id := gi.NewUint32Argument(group_id)
	arg_bandwidth_percent := gi.NewUint32Argument(bandwidth_percent)
	args := []gi.Argument{arg_v, arg_group_id, arg_bandwidth_percent}
	iv.Call(args, nil, nil)
}

// nm_setting_dcb_set_priority_group_id
//
// [ user_priority ] trans: nothing
//
// [ group_id ] trans: nothing
//
func (v SettingDcb) SetPriorityGroupId(user_priority uint32, group_id uint32) {
	iv, err := _I.Get(619, "SettingDcb", "set_priority_group_id", 988, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_user_priority := gi.NewUint32Argument(user_priority)
	arg_group_id := gi.NewUint32Argument(group_id)
	args := []gi.Argument{arg_v, arg_user_priority, arg_group_id}
	iv.Call(args, nil, nil)
}

// nm_setting_dcb_set_priority_strict_bandwidth
//
// [ user_priority ] trans: nothing
//
// [ strict ] trans: nothing
//
func (v SettingDcb) SetPriorityStrictBandwidth(user_priority uint32, strict bool) {
	iv, err := _I.Get(620, "SettingDcb", "set_priority_strict_bandwidth", 988, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_user_priority := gi.NewUint32Argument(user_priority)
	arg_strict := gi.NewBoolArgument(strict)
	args := []gi.Argument{arg_v, arg_user_priority, arg_strict}
	iv.Call(args, nil, nil)
}

// nm_setting_dcb_set_priority_traffic_class
//
// [ user_priority ] trans: nothing
//
// [ traffic_class ] trans: nothing
//
func (v SettingDcb) SetPriorityTrafficClass(user_priority uint32, traffic_class uint32) {
	iv, err := _I.Get(621, "SettingDcb", "set_priority_traffic_class", 988, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_user_priority := gi.NewUint32Argument(user_priority)
	arg_traffic_class := gi.NewUint32Argument(traffic_class)
	args := []gi.Argument{arg_v, arg_user_priority, arg_traffic_class}
	iv.Call(args, nil, nil)
}

// ignore GType struct SettingDcbClass

// Flags SettingDcbFlags
type SettingDcbFlags int

const (
	SettingDcbFlagsNone      SettingDcbFlags = 0
	SettingDcbFlagsEnable    SettingDcbFlags = 1
	SettingDcbFlagsAdvertise SettingDcbFlags = 2
	SettingDcbFlagsWilling   SettingDcbFlags = 4
)

func SettingDcbFlagsGetType() gi.GType {
	ret := _I.GetGType(93, "SettingDcbFlags")
	return ret
}

// Enum SettingDiffResult
type SettingDiffResultEnum int

const (
	SettingDiffResultUnknown    SettingDiffResultEnum = 0
	SettingDiffResultInA        SettingDiffResultEnum = 1
	SettingDiffResultInB        SettingDiffResultEnum = 2
	SettingDiffResultInADefault SettingDiffResultEnum = 4
	SettingDiffResultInBDefault SettingDiffResultEnum = 4
)

func SettingDiffResultGetType() gi.GType {
	ret := _I.GetGType(94, "SettingDiffResult")
	return ret
}

// Object SettingDummy
type SettingDummy struct {
	Setting
}

func WrapSettingDummy(p unsafe.Pointer) (r SettingDummy) { r.P = p; return }

type ISettingDummy interface{ P_SettingDummy() unsafe.Pointer }

func (v SettingDummy) P_SettingDummy() unsafe.Pointer { return v.P }
func SettingDummyGetType() gi.GType {
	ret := _I.GetGType(95, "SettingDummy")
	return ret
}

// nm_setting_dummy_new
//
// [ result ] trans: everything
//
func NewSettingDummy() (result SettingDummy) {
	iv, err := _I.Get(622, "SettingDummy", "new", 992, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct SettingDummyClass

// Object SettingEthtool
type SettingEthtool struct {
	Setting
}

func WrapSettingEthtool(p unsafe.Pointer) (r SettingEthtool) { r.P = p; return }

type ISettingEthtool interface{ P_SettingEthtool() unsafe.Pointer }

func (v SettingEthtool) P_SettingEthtool() unsafe.Pointer { return v.P }
func SettingEthtoolGetType() gi.GType {
	ret := _I.GetGType(96, "SettingEthtool")
	return ret
}

// nm_setting_ethtool_new
//
// [ result ] trans: everything
//
func NewSettingEthtool() (result SettingEthtool) {
	iv, err := _I.Get(623, "SettingEthtool", "new", 994, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_ethtool_clear_features
//
func (v SettingEthtool) ClearFeatures() {
	iv, err := _I.Get(624, "SettingEthtool", "clear_features", 994, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_setting_ethtool_get_feature
//
// [ optname ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingEthtool) GetFeature(optname string) (result TernaryEnum) {
	iv, err := _I.Get(625, "SettingEthtool", "get_feature", 994, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_optname := gi.CString(optname)
	arg_v := gi.NewPointerArgument(v.P)
	arg_optname := gi.NewStringArgument(c_optname)
	args := []gi.Argument{arg_v, arg_optname}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_optname)
	result = TernaryEnum(ret.Int())
	return
}

// nm_setting_ethtool_set_feature
//
// [ optname ] trans: nothing
//
// [ value ] trans: nothing
//
func (v SettingEthtool) SetFeature(optname string, value TernaryEnum) {
	iv, err := _I.Get(626, "SettingEthtool", "set_feature", 994, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_optname := gi.CString(optname)
	arg_v := gi.NewPointerArgument(v.P)
	arg_optname := gi.NewStringArgument(c_optname)
	arg_value := gi.NewIntArgument(int(value))
	args := []gi.Argument{arg_v, arg_optname, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_optname)
}

// ignore GType struct SettingEthtoolClass

// Object SettingGeneric
type SettingGeneric struct {
	Setting
}

func WrapSettingGeneric(p unsafe.Pointer) (r SettingGeneric) { r.P = p; return }

type ISettingGeneric interface{ P_SettingGeneric() unsafe.Pointer }

func (v SettingGeneric) P_SettingGeneric() unsafe.Pointer { return v.P }
func SettingGenericGetType() gi.GType {
	ret := _I.GetGType(97, "SettingGeneric")
	return ret
}

// nm_setting_generic_new
//
// [ result ] trans: everything
//
func NewSettingGeneric() (result SettingGeneric) {
	iv, err := _I.Get(627, "SettingGeneric", "new", 996, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct SettingGenericClass

// Object SettingGsm
type SettingGsm struct {
	Setting
}

func WrapSettingGsm(p unsafe.Pointer) (r SettingGsm) { r.P = p; return }

type ISettingGsm interface{ P_SettingGsm() unsafe.Pointer }

func (v SettingGsm) P_SettingGsm() unsafe.Pointer { return v.P }
func SettingGsmGetType() gi.GType {
	ret := _I.GetGType(98, "SettingGsm")
	return ret
}

// nm_setting_gsm_new
//
// [ result ] trans: everything
//
func NewSettingGsm() (result SettingGsm) {
	iv, err := _I.Get(628, "SettingGsm", "new", 998, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_gsm_get_apn
//
// [ result ] trans: nothing
//
func (v SettingGsm) GetApn() (result string) {
	iv, err := _I.Get(629, "SettingGsm", "get_apn", 998, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_gsm_get_device_id
//
// [ result ] trans: nothing
//
func (v SettingGsm) GetDeviceId() (result string) {
	iv, err := _I.Get(630, "SettingGsm", "get_device_id", 998, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_gsm_get_home_only
//
// [ result ] trans: nothing
//
func (v SettingGsm) GetHomeOnly() (result bool) {
	iv, err := _I.Get(631, "SettingGsm", "get_home_only", 998, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_gsm_get_mtu
//
// [ result ] trans: nothing
//
func (v SettingGsm) GetMtu() (result uint32) {
	iv, err := _I.Get(632, "SettingGsm", "get_mtu", 998, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_gsm_get_network_id
//
// [ result ] trans: nothing
//
func (v SettingGsm) GetNetworkId() (result string) {
	iv, err := _I.Get(633, "SettingGsm", "get_network_id", 998, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_gsm_get_number
//
// [ result ] trans: nothing
//
func (v SettingGsm) GetNumber() (result string) {
	iv, err := _I.Get(634, "SettingGsm", "get_number", 998, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_gsm_get_password
//
// [ result ] trans: nothing
//
func (v SettingGsm) GetPassword() (result string) {
	iv, err := _I.Get(635, "SettingGsm", "get_password", 998, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_gsm_get_password_flags
//
// [ result ] trans: nothing
//
func (v SettingGsm) GetPasswordFlags() (result SettingSecretFlags) {
	iv, err := _I.Get(636, "SettingGsm", "get_password_flags", 998, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingSecretFlags(ret.Int())
	return
}

// nm_setting_gsm_get_pin
//
// [ result ] trans: nothing
//
func (v SettingGsm) GetPin() (result string) {
	iv, err := _I.Get(637, "SettingGsm", "get_pin", 998, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_gsm_get_pin_flags
//
// [ result ] trans: nothing
//
func (v SettingGsm) GetPinFlags() (result SettingSecretFlags) {
	iv, err := _I.Get(638, "SettingGsm", "get_pin_flags", 998, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingSecretFlags(ret.Int())
	return
}

// nm_setting_gsm_get_sim_id
//
// [ result ] trans: nothing
//
func (v SettingGsm) GetSimId() (result string) {
	iv, err := _I.Get(639, "SettingGsm", "get_sim_id", 998, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_gsm_get_sim_operator_id
//
// [ result ] trans: nothing
//
func (v SettingGsm) GetSimOperatorId() (result string) {
	iv, err := _I.Get(640, "SettingGsm", "get_sim_operator_id", 998, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_gsm_get_username
//
// [ result ] trans: nothing
//
func (v SettingGsm) GetUsername() (result string) {
	iv, err := _I.Get(641, "SettingGsm", "get_username", 998, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// ignore GType struct SettingGsmClass

// Object SettingIP4Config
type SettingIP4Config struct {
	SettingIPConfig
}

func WrapSettingIP4Config(p unsafe.Pointer) (r SettingIP4Config) { r.P = p; return }

type ISettingIP4Config interface{ P_SettingIP4Config() unsafe.Pointer }

func (v SettingIP4Config) P_SettingIP4Config() unsafe.Pointer { return v.P }
func SettingIP4ConfigGetType() gi.GType {
	ret := _I.GetGType(99, "SettingIP4Config")
	return ret
}

// nm_setting_ip4_config_new
//
// [ result ] trans: everything
//
func NewSettingIP4Config() (result SettingIP4Config) {
	iv, err := _I.Get(642, "SettingIP4Config", "new", 1000, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_ip4_config_get_dhcp_client_id
//
// [ result ] trans: nothing
//
func (v SettingIP4Config) GetDhcpClientId() (result string) {
	iv, err := _I.Get(643, "SettingIP4Config", "get_dhcp_client_id", 1000, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_ip4_config_get_dhcp_fqdn
//
// [ result ] trans: nothing
//
func (v SettingIP4Config) GetDhcpFqdn() (result string) {
	iv, err := _I.Get(644, "SettingIP4Config", "get_dhcp_fqdn", 1000, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// ignore GType struct SettingIP4ConfigClass

// Object SettingIP6Config
type SettingIP6Config struct {
	SettingIPConfig
}

func WrapSettingIP6Config(p unsafe.Pointer) (r SettingIP6Config) { r.P = p; return }

type ISettingIP6Config interface{ P_SettingIP6Config() unsafe.Pointer }

func (v SettingIP6Config) P_SettingIP6Config() unsafe.Pointer { return v.P }
func SettingIP6ConfigGetType() gi.GType {
	ret := _I.GetGType(100, "SettingIP6Config")
	return ret
}

// nm_setting_ip6_config_new
//
// [ result ] trans: everything
//
func NewSettingIP6Config() (result SettingIP6Config) {
	iv, err := _I.Get(645, "SettingIP6Config", "new", 1002, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_ip6_config_get_addr_gen_mode
//
// [ result ] trans: nothing
//
func (v SettingIP6Config) GetAddrGenMode() (result SettingIP6ConfigAddrGenModeEnum) {
	iv, err := _I.Get(646, "SettingIP6Config", "get_addr_gen_mode", 1002, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingIP6ConfigAddrGenModeEnum(ret.Int())
	return
}

// nm_setting_ip6_config_get_dhcp_duid
//
// [ result ] trans: nothing
//
func (v SettingIP6Config) GetDhcpDuid() (result string) {
	iv, err := _I.Get(647, "SettingIP6Config", "get_dhcp_duid", 1002, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_ip6_config_get_ip6_privacy
//
// [ result ] trans: nothing
//
func (v SettingIP6Config) GetIp6Privacy() (result SettingIP6ConfigPrivacyEnum) {
	iv, err := _I.Get(648, "SettingIP6Config", "get_ip6_privacy", 1002, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingIP6ConfigPrivacyEnum(ret.Int())
	return
}

// nm_setting_ip6_config_get_token
//
// [ result ] trans: nothing
//
func (v SettingIP6Config) GetToken() (result string) {
	iv, err := _I.Get(649, "SettingIP6Config", "get_token", 1002, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Enum SettingIP6ConfigAddrGenMode
type SettingIP6ConfigAddrGenModeEnum int

const (
	SettingIP6ConfigAddrGenModeEui64         SettingIP6ConfigAddrGenModeEnum = 0
	SettingIP6ConfigAddrGenModeStablePrivacy SettingIP6ConfigAddrGenModeEnum = 1
)

func SettingIP6ConfigAddrGenModeGetType() gi.GType {
	ret := _I.GetGType(101, "SettingIP6ConfigAddrGenMode")
	return ret
}

// ignore GType struct SettingIP6ConfigClass

// Enum SettingIP6ConfigPrivacy
type SettingIP6ConfigPrivacyEnum int

const (
	SettingIP6ConfigPrivacyUnknown          SettingIP6ConfigPrivacyEnum = -1
	SettingIP6ConfigPrivacyDisabled         SettingIP6ConfigPrivacyEnum = 0
	SettingIP6ConfigPrivacyPreferPublicAddr SettingIP6ConfigPrivacyEnum = 1
	SettingIP6ConfigPrivacyPreferTempAddr   SettingIP6ConfigPrivacyEnum = 2
)

func SettingIP6ConfigPrivacyGetType() gi.GType {
	ret := _I.GetGType(102, "SettingIP6ConfigPrivacy")
	return ret
}

// Object SettingIPConfig
type SettingIPConfig struct {
	Setting
}

func WrapSettingIPConfig(p unsafe.Pointer) (r SettingIPConfig) { r.P = p; return }

type ISettingIPConfig interface{ P_SettingIPConfig() unsafe.Pointer }

func (v SettingIPConfig) P_SettingIPConfig() unsafe.Pointer { return v.P }
func SettingIPConfigGetType() gi.GType {
	ret := _I.GetGType(103, "SettingIPConfig")
	return ret
}

// nm_setting_ip_config_add_address
//
// [ address ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) AddAddress(address IPAddress) (result bool) {
	iv, err := _I.Get(650, "SettingIPConfig", "add_address", 1006, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_address := gi.NewPointerArgument(address.P)
	args := []gi.Argument{arg_v, arg_address}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ip_config_add_dns
//
// [ dns ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) AddDns(dns string) (result bool) {
	iv, err := _I.Get(651, "SettingIPConfig", "add_dns", 1006, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_dns := gi.CString(dns)
	arg_v := gi.NewPointerArgument(v.P)
	arg_dns := gi.NewStringArgument(c_dns)
	args := []gi.Argument{arg_v, arg_dns}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_dns)
	result = ret.Bool()
	return
}

// nm_setting_ip_config_add_dns_option
//
// [ dns_option ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) AddDnsOption(dns_option string) (result bool) {
	iv, err := _I.Get(652, "SettingIPConfig", "add_dns_option", 1006, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_dns_option := gi.CString(dns_option)
	arg_v := gi.NewPointerArgument(v.P)
	arg_dns_option := gi.NewStringArgument(c_dns_option)
	args := []gi.Argument{arg_v, arg_dns_option}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_dns_option)
	result = ret.Bool()
	return
}

// nm_setting_ip_config_add_dns_search
//
// [ dns_search ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) AddDnsSearch(dns_search string) (result bool) {
	iv, err := _I.Get(653, "SettingIPConfig", "add_dns_search", 1006, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_dns_search := gi.CString(dns_search)
	arg_v := gi.NewPointerArgument(v.P)
	arg_dns_search := gi.NewStringArgument(c_dns_search)
	args := []gi.Argument{arg_v, arg_dns_search}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_dns_search)
	result = ret.Bool()
	return
}

// nm_setting_ip_config_add_route
//
// [ route ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) AddRoute(route IPRoute) (result bool) {
	iv, err := _I.Get(654, "SettingIPConfig", "add_route", 1006, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_route := gi.NewPointerArgument(route.P)
	args := []gi.Argument{arg_v, arg_route}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ip_config_clear_addresses
//
func (v SettingIPConfig) ClearAddresses() {
	iv, err := _I.Get(655, "SettingIPConfig", "clear_addresses", 1006, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_setting_ip_config_clear_dns
//
func (v SettingIPConfig) ClearDns() {
	iv, err := _I.Get(656, "SettingIPConfig", "clear_dns", 1006, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_setting_ip_config_clear_dns_options
//
// [ is_set ] trans: nothing
//
func (v SettingIPConfig) ClearDnsOptions(is_set bool) {
	iv, err := _I.Get(657, "SettingIPConfig", "clear_dns_options", 1006, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_is_set := gi.NewBoolArgument(is_set)
	args := []gi.Argument{arg_v, arg_is_set}
	iv.Call(args, nil, nil)
}

// nm_setting_ip_config_clear_dns_searches
//
func (v SettingIPConfig) ClearDnsSearches() {
	iv, err := _I.Get(658, "SettingIPConfig", "clear_dns_searches", 1006, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_setting_ip_config_clear_routes
//
func (v SettingIPConfig) ClearRoutes() {
	iv, err := _I.Get(659, "SettingIPConfig", "clear_routes", 1006, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_setting_ip_config_get_address
//
// [ idx ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetAddress(idx int32) (result IPAddress) {
	iv, err := _I.Get(660, "SettingIPConfig", "get_address", 1006, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewInt32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_ip_config_get_dad_timeout
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetDadTimeout() (result int32) {
	iv, err := _I.Get(661, "SettingIPConfig", "get_dad_timeout", 1006, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_ip_config_get_dhcp_hostname
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetDhcpHostname() (result string) {
	iv, err := _I.Get(662, "SettingIPConfig", "get_dhcp_hostname", 1006, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_ip_config_get_dhcp_send_hostname
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetDhcpSendHostname() (result bool) {
	iv, err := _I.Get(663, "SettingIPConfig", "get_dhcp_send_hostname", 1006, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ip_config_get_dhcp_timeout
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetDhcpTimeout() (result int32) {
	iv, err := _I.Get(664, "SettingIPConfig", "get_dhcp_timeout", 1006, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_ip_config_get_dns
//
// [ idx ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetDns(idx int32) (result string) {
	iv, err := _I.Get(665, "SettingIPConfig", "get_dns", 1006, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewInt32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_ip_config_get_dns_option
//
// [ idx ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetDnsOption(idx uint32) (result string) {
	iv, err := _I.Get(666, "SettingIPConfig", "get_dns_option", 1006, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_ip_config_get_dns_priority
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetDnsPriority() (result int32) {
	iv, err := _I.Get(667, "SettingIPConfig", "get_dns_priority", 1006, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_ip_config_get_dns_search
//
// [ idx ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetDnsSearch(idx int32) (result string) {
	iv, err := _I.Get(668, "SettingIPConfig", "get_dns_search", 1006, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewInt32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_ip_config_get_gateway
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetGateway() (result string) {
	iv, err := _I.Get(669, "SettingIPConfig", "get_gateway", 1006, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_ip_config_get_ignore_auto_dns
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetIgnoreAutoDns() (result bool) {
	iv, err := _I.Get(670, "SettingIPConfig", "get_ignore_auto_dns", 1006, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ip_config_get_ignore_auto_routes
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetIgnoreAutoRoutes() (result bool) {
	iv, err := _I.Get(671, "SettingIPConfig", "get_ignore_auto_routes", 1006, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ip_config_get_may_fail
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetMayFail() (result bool) {
	iv, err := _I.Get(672, "SettingIPConfig", "get_may_fail", 1006, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ip_config_get_method
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetMethod() (result string) {
	iv, err := _I.Get(673, "SettingIPConfig", "get_method", 1006, 23, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_ip_config_get_never_default
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetNeverDefault() (result bool) {
	iv, err := _I.Get(674, "SettingIPConfig", "get_never_default", 1006, 24, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ip_config_get_num_addresses
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetNumAddresses() (result uint32) {
	iv, err := _I.Get(675, "SettingIPConfig", "get_num_addresses", 1006, 25, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_ip_config_get_num_dns
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetNumDns() (result uint32) {
	iv, err := _I.Get(676, "SettingIPConfig", "get_num_dns", 1006, 26, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_ip_config_get_num_dns_options
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetNumDnsOptions() (result uint32) {
	iv, err := _I.Get(677, "SettingIPConfig", "get_num_dns_options", 1006, 27, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_ip_config_get_num_dns_searches
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetNumDnsSearches() (result uint32) {
	iv, err := _I.Get(678, "SettingIPConfig", "get_num_dns_searches", 1006, 28, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_ip_config_get_num_routes
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetNumRoutes() (result uint32) {
	iv, err := _I.Get(679, "SettingIPConfig", "get_num_routes", 1006, 29, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_ip_config_get_route
//
// [ idx ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetRoute(idx int32) (result IPRoute) {
	iv, err := _I.Get(680, "SettingIPConfig", "get_route", 1006, 30, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewInt32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_ip_config_get_route_metric
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetRouteMetric() (result int64) {
	iv, err := _I.Get(681, "SettingIPConfig", "get_route_metric", 1006, 31, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int64()
	return
}

// nm_setting_ip_config_get_route_table
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) GetRouteTable() (result uint32) {
	iv, err := _I.Get(682, "SettingIPConfig", "get_route_table", 1006, 32, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_ip_config_has_dns_options
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) HasDnsOptions() (result bool) {
	iv, err := _I.Get(683, "SettingIPConfig", "has_dns_options", 1006, 33, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ip_config_next_valid_dns_option
//
// [ idx ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) NextValidDnsOption(idx uint32) (result int32) {
	iv, err := _I.Get(684, "SettingIPConfig", "next_valid_dns_option", 1006, 34, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_ip_config_remove_address
//
// [ idx ] trans: nothing
//
func (v SettingIPConfig) RemoveAddress(idx int32) {
	iv, err := _I.Get(685, "SettingIPConfig", "remove_address", 1006, 35, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewInt32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	iv.Call(args, nil, nil)
}

// nm_setting_ip_config_remove_address_by_value
//
// [ address ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) RemoveAddressByValue(address IPAddress) (result bool) {
	iv, err := _I.Get(686, "SettingIPConfig", "remove_address_by_value", 1006, 36, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_address := gi.NewPointerArgument(address.P)
	args := []gi.Argument{arg_v, arg_address}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ip_config_remove_dns
//
// [ idx ] trans: nothing
//
func (v SettingIPConfig) RemoveDns(idx int32) {
	iv, err := _I.Get(687, "SettingIPConfig", "remove_dns", 1006, 37, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewInt32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	iv.Call(args, nil, nil)
}

// nm_setting_ip_config_remove_dns_by_value
//
// [ dns ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) RemoveDnsByValue(dns string) (result bool) {
	iv, err := _I.Get(688, "SettingIPConfig", "remove_dns_by_value", 1006, 38, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_dns := gi.CString(dns)
	arg_v := gi.NewPointerArgument(v.P)
	arg_dns := gi.NewStringArgument(c_dns)
	args := []gi.Argument{arg_v, arg_dns}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_dns)
	result = ret.Bool()
	return
}

// nm_setting_ip_config_remove_dns_option
//
// [ idx ] trans: nothing
//
func (v SettingIPConfig) RemoveDnsOption(idx int32) {
	iv, err := _I.Get(689, "SettingIPConfig", "remove_dns_option", 1006, 39, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewInt32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	iv.Call(args, nil, nil)
}

// nm_setting_ip_config_remove_dns_option_by_value
//
// [ dns_option ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) RemoveDnsOptionByValue(dns_option string) (result bool) {
	iv, err := _I.Get(690, "SettingIPConfig", "remove_dns_option_by_value", 1006, 40, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_dns_option := gi.CString(dns_option)
	arg_v := gi.NewPointerArgument(v.P)
	arg_dns_option := gi.NewStringArgument(c_dns_option)
	args := []gi.Argument{arg_v, arg_dns_option}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_dns_option)
	result = ret.Bool()
	return
}

// nm_setting_ip_config_remove_dns_search
//
// [ idx ] trans: nothing
//
func (v SettingIPConfig) RemoveDnsSearch(idx int32) {
	iv, err := _I.Get(691, "SettingIPConfig", "remove_dns_search", 1006, 41, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewInt32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	iv.Call(args, nil, nil)
}

// nm_setting_ip_config_remove_dns_search_by_value
//
// [ dns_search ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) RemoveDnsSearchByValue(dns_search string) (result bool) {
	iv, err := _I.Get(692, "SettingIPConfig", "remove_dns_search_by_value", 1006, 42, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_dns_search := gi.CString(dns_search)
	arg_v := gi.NewPointerArgument(v.P)
	arg_dns_search := gi.NewStringArgument(c_dns_search)
	args := []gi.Argument{arg_v, arg_dns_search}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_dns_search)
	result = ret.Bool()
	return
}

// nm_setting_ip_config_remove_route
//
// [ idx ] trans: nothing
//
func (v SettingIPConfig) RemoveRoute(idx int32) {
	iv, err := _I.Get(693, "SettingIPConfig", "remove_route", 1006, 43, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewInt32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	iv.Call(args, nil, nil)
}

// nm_setting_ip_config_remove_route_by_value
//
// [ route ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingIPConfig) RemoveRouteByValue(route IPRoute) (result bool) {
	iv, err := _I.Get(694, "SettingIPConfig", "remove_route_by_value", 1006, 44, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_route := gi.NewPointerArgument(route.P)
	args := []gi.Argument{arg_v, arg_route}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct SettingIPConfigClass

// Object SettingIPTunnel
type SettingIPTunnel struct {
	Setting
}

func WrapSettingIPTunnel(p unsafe.Pointer) (r SettingIPTunnel) { r.P = p; return }

type ISettingIPTunnel interface{ P_SettingIPTunnel() unsafe.Pointer }

func (v SettingIPTunnel) P_SettingIPTunnel() unsafe.Pointer { return v.P }
func SettingIPTunnelGetType() gi.GType {
	ret := _I.GetGType(104, "SettingIPTunnel")
	return ret
}

// nm_setting_ip_tunnel_new
//
// [ result ] trans: everything
//
func NewSettingIPTunnel() (result SettingIPTunnel) {
	iv, err := _I.Get(695, "SettingIPTunnel", "new", 1008, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_ip_tunnel_get_encapsulation_limit
//
// [ result ] trans: nothing
//
func (v SettingIPTunnel) GetEncapsulationLimit() (result uint32) {
	iv, err := _I.Get(696, "SettingIPTunnel", "get_encapsulation_limit", 1008, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_ip_tunnel_get_flags
//
// [ result ] trans: nothing
//
func (v SettingIPTunnel) GetFlags() (result IPTunnelFlags) {
	iv, err := _I.Get(697, "SettingIPTunnel", "get_flags", 1008, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = IPTunnelFlags(ret.Int())
	return
}

// nm_setting_ip_tunnel_get_flow_label
//
// [ result ] trans: nothing
//
func (v SettingIPTunnel) GetFlowLabel() (result uint32) {
	iv, err := _I.Get(698, "SettingIPTunnel", "get_flow_label", 1008, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_ip_tunnel_get_input_key
//
// [ result ] trans: nothing
//
func (v SettingIPTunnel) GetInputKey() (result string) {
	iv, err := _I.Get(699, "SettingIPTunnel", "get_input_key", 1008, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_ip_tunnel_get_local
//
// [ result ] trans: nothing
//
func (v SettingIPTunnel) GetLocal() (result string) {
	iv, err := _I.Get(700, "SettingIPTunnel", "get_local", 1008, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_ip_tunnel_get_mode
//
// [ result ] trans: nothing
//
func (v SettingIPTunnel) GetMode() (result IPTunnelModeEnum) {
	iv, err := _I.Get(701, "SettingIPTunnel", "get_mode", 1008, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = IPTunnelModeEnum(ret.Int())
	return
}

// nm_setting_ip_tunnel_get_mtu
//
// [ result ] trans: nothing
//
func (v SettingIPTunnel) GetMtu() (result uint32) {
	iv, err := _I.Get(702, "SettingIPTunnel", "get_mtu", 1008, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_ip_tunnel_get_output_key
//
// [ result ] trans: nothing
//
func (v SettingIPTunnel) GetOutputKey() (result string) {
	iv, err := _I.Get(703, "SettingIPTunnel", "get_output_key", 1008, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_ip_tunnel_get_parent
//
// [ result ] trans: nothing
//
func (v SettingIPTunnel) GetParent() (result string) {
	iv, err := _I.Get(704, "SettingIPTunnel", "get_parent", 1008, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_ip_tunnel_get_path_mtu_discovery
//
// [ result ] trans: nothing
//
func (v SettingIPTunnel) GetPathMtuDiscovery() (result bool) {
	iv, err := _I.Get(705, "SettingIPTunnel", "get_path_mtu_discovery", 1008, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ip_tunnel_get_remote
//
// [ result ] trans: nothing
//
func (v SettingIPTunnel) GetRemote() (result string) {
	iv, err := _I.Get(706, "SettingIPTunnel", "get_remote", 1008, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_ip_tunnel_get_tos
//
// [ result ] trans: nothing
//
func (v SettingIPTunnel) GetTos() (result uint32) {
	iv, err := _I.Get(707, "SettingIPTunnel", "get_tos", 1008, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_ip_tunnel_get_ttl
//
// [ result ] trans: nothing
//
func (v SettingIPTunnel) GetTtl() (result uint32) {
	iv, err := _I.Get(708, "SettingIPTunnel", "get_ttl", 1008, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// ignore GType struct SettingIPTunnelClass

// Object SettingInfiniband
type SettingInfiniband struct {
	Setting
}

func WrapSettingInfiniband(p unsafe.Pointer) (r SettingInfiniband) { r.P = p; return }

type ISettingInfiniband interface{ P_SettingInfiniband() unsafe.Pointer }

func (v SettingInfiniband) P_SettingInfiniband() unsafe.Pointer { return v.P }
func SettingInfinibandGetType() gi.GType {
	ret := _I.GetGType(105, "SettingInfiniband")
	return ret
}

// nm_setting_infiniband_new
//
// [ result ] trans: everything
//
func NewSettingInfiniband() (result SettingInfiniband) {
	iv, err := _I.Get(709, "SettingInfiniband", "new", 1010, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_infiniband_get_mac_address
//
// [ result ] trans: nothing
//
func (v SettingInfiniband) GetMacAddress() (result string) {
	iv, err := _I.Get(710, "SettingInfiniband", "get_mac_address", 1010, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_infiniband_get_mtu
//
// [ result ] trans: nothing
//
func (v SettingInfiniband) GetMtu() (result uint32) {
	iv, err := _I.Get(711, "SettingInfiniband", "get_mtu", 1010, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_infiniband_get_p_key
//
// [ result ] trans: nothing
//
func (v SettingInfiniband) GetPKey() (result int32) {
	iv, err := _I.Get(712, "SettingInfiniband", "get_p_key", 1010, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_infiniband_get_parent
//
// [ result ] trans: nothing
//
func (v SettingInfiniband) GetParent() (result string) {
	iv, err := _I.Get(713, "SettingInfiniband", "get_parent", 1010, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_infiniband_get_transport_mode
//
// [ result ] trans: nothing
//
func (v SettingInfiniband) GetTransportMode() (result string) {
	iv, err := _I.Get(714, "SettingInfiniband", "get_transport_mode", 1010, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_infiniband_get_virtual_interface_name
//
// [ result ] trans: nothing
//
func (v SettingInfiniband) GetVirtualInterfaceName() (result string) {
	iv, err := _I.Get(715, "SettingInfiniband", "get_virtual_interface_name", 1010, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// ignore GType struct SettingInfinibandClass

// Enum SettingMacRandomization
type SettingMacRandomizationEnum int

const (
	SettingMacRandomizationDefault SettingMacRandomizationEnum = 0
	SettingMacRandomizationNever   SettingMacRandomizationEnum = 1
	SettingMacRandomizationAlways  SettingMacRandomizationEnum = 2
)

func SettingMacRandomizationGetType() gi.GType {
	ret := _I.GetGType(106, "SettingMacRandomization")
	return ret
}

// Object SettingMacsec
type SettingMacsec struct {
	Setting
}

func WrapSettingMacsec(p unsafe.Pointer) (r SettingMacsec) { r.P = p; return }

type ISettingMacsec interface{ P_SettingMacsec() unsafe.Pointer }

func (v SettingMacsec) P_SettingMacsec() unsafe.Pointer { return v.P }
func SettingMacsecGetType() gi.GType {
	ret := _I.GetGType(107, "SettingMacsec")
	return ret
}

// nm_setting_macsec_new
//
// [ result ] trans: everything
//
func NewSettingMacsec() (result SettingMacsec) {
	iv, err := _I.Get(716, "SettingMacsec", "new", 1013, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_macsec_get_encrypt
//
// [ result ] trans: nothing
//
func (v SettingMacsec) GetEncrypt() (result bool) {
	iv, err := _I.Get(717, "SettingMacsec", "get_encrypt", 1013, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_macsec_get_mka_cak
//
// [ result ] trans: nothing
//
func (v SettingMacsec) GetMkaCak() (result string) {
	iv, err := _I.Get(718, "SettingMacsec", "get_mka_cak", 1013, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_macsec_get_mka_cak_flags
//
// [ result ] trans: nothing
//
func (v SettingMacsec) GetMkaCakFlags() (result SettingSecretFlags) {
	iv, err := _I.Get(719, "SettingMacsec", "get_mka_cak_flags", 1013, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingSecretFlags(ret.Int())
	return
}

// nm_setting_macsec_get_mka_ckn
//
// [ result ] trans: nothing
//
func (v SettingMacsec) GetMkaCkn() (result string) {
	iv, err := _I.Get(720, "SettingMacsec", "get_mka_ckn", 1013, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_macsec_get_mode
//
// [ result ] trans: nothing
//
func (v SettingMacsec) GetMode() (result SettingMacsecModeEnum) {
	iv, err := _I.Get(721, "SettingMacsec", "get_mode", 1013, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingMacsecModeEnum(ret.Int())
	return
}

// nm_setting_macsec_get_parent
//
// [ result ] trans: nothing
//
func (v SettingMacsec) GetParent() (result string) {
	iv, err := _I.Get(722, "SettingMacsec", "get_parent", 1013, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_macsec_get_port
//
// [ result ] trans: nothing
//
func (v SettingMacsec) GetPort() (result int32) {
	iv, err := _I.Get(723, "SettingMacsec", "get_port", 1013, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_macsec_get_send_sci
//
// [ result ] trans: nothing
//
func (v SettingMacsec) GetSendSci() (result bool) {
	iv, err := _I.Get(724, "SettingMacsec", "get_send_sci", 1013, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_macsec_get_validation
//
// [ result ] trans: nothing
//
func (v SettingMacsec) GetValidation() (result SettingMacsecValidationEnum) {
	iv, err := _I.Get(725, "SettingMacsec", "get_validation", 1013, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingMacsecValidationEnum(ret.Int())
	return
}

// ignore GType struct SettingMacsecClass

// Enum SettingMacsecMode
type SettingMacsecModeEnum int

const (
	SettingMacsecModePsk SettingMacsecModeEnum = 0
	SettingMacsecModeEap SettingMacsecModeEnum = 1
)

func SettingMacsecModeGetType() gi.GType {
	ret := _I.GetGType(108, "SettingMacsecMode")
	return ret
}

// Enum SettingMacsecValidation
type SettingMacsecValidationEnum int

const (
	SettingMacsecValidationDisable SettingMacsecValidationEnum = 0
	SettingMacsecValidationCheck   SettingMacsecValidationEnum = 1
	SettingMacsecValidationStrict  SettingMacsecValidationEnum = 2
)

func SettingMacsecValidationGetType() gi.GType {
	ret := _I.GetGType(109, "SettingMacsecValidation")
	return ret
}

// Object SettingMacvlan
type SettingMacvlan struct {
	Setting
}

func WrapSettingMacvlan(p unsafe.Pointer) (r SettingMacvlan) { r.P = p; return }

type ISettingMacvlan interface{ P_SettingMacvlan() unsafe.Pointer }

func (v SettingMacvlan) P_SettingMacvlan() unsafe.Pointer { return v.P }
func SettingMacvlanGetType() gi.GType {
	ret := _I.GetGType(110, "SettingMacvlan")
	return ret
}

// nm_setting_macvlan_new
//
// [ result ] trans: everything
//
func NewSettingMacvlan() (result SettingMacvlan) {
	iv, err := _I.Get(726, "SettingMacvlan", "new", 1017, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_macvlan_get_mode
//
// [ result ] trans: nothing
//
func (v SettingMacvlan) GetMode() (result SettingMacvlanModeEnum) {
	iv, err := _I.Get(727, "SettingMacvlan", "get_mode", 1017, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingMacvlanModeEnum(ret.Int())
	return
}

// nm_setting_macvlan_get_parent
//
// [ result ] trans: nothing
//
func (v SettingMacvlan) GetParent() (result string) {
	iv, err := _I.Get(728, "SettingMacvlan", "get_parent", 1017, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_macvlan_get_promiscuous
//
// [ result ] trans: nothing
//
func (v SettingMacvlan) GetPromiscuous() (result bool) {
	iv, err := _I.Get(729, "SettingMacvlan", "get_promiscuous", 1017, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_macvlan_get_tap
//
// [ result ] trans: nothing
//
func (v SettingMacvlan) GetTap() (result bool) {
	iv, err := _I.Get(730, "SettingMacvlan", "get_tap", 1017, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct SettingMacvlanClass

// Enum SettingMacvlanMode
type SettingMacvlanModeEnum int

const (
	SettingMacvlanModeUnknown  SettingMacvlanModeEnum = 0
	SettingMacvlanModeVepa     SettingMacvlanModeEnum = 1
	SettingMacvlanModeBridge   SettingMacvlanModeEnum = 2
	SettingMacvlanModePrivate  SettingMacvlanModeEnum = 3
	SettingMacvlanModePassthru SettingMacvlanModeEnum = 4
	SettingMacvlanModeSource   SettingMacvlanModeEnum = 5
)

func SettingMacvlanModeGetType() gi.GType {
	ret := _I.GetGType(111, "SettingMacvlanMode")
	return ret
}

// Object SettingMatch
type SettingMatch struct {
	Setting
}

func WrapSettingMatch(p unsafe.Pointer) (r SettingMatch) { r.P = p; return }

type ISettingMatch interface{ P_SettingMatch() unsafe.Pointer }

func (v SettingMatch) P_SettingMatch() unsafe.Pointer { return v.P }
func SettingMatchGetType() gi.GType {
	ret := _I.GetGType(112, "SettingMatch")
	return ret
}

// nm_setting_match_new
//
// [ result ] trans: everything
//
func NewSettingMatch() (result SettingMatch) {
	iv, err := _I.Get(731, "SettingMatch", "new", 1020, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_match_add_interface_name
//
// [ interface_name ] trans: nothing
//
func (v SettingMatch) AddInterfaceName(interface_name string) {
	iv, err := _I.Get(732, "SettingMatch", "add_interface_name", 1020, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_interface_name := gi.CString(interface_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_interface_name := gi.NewStringArgument(c_interface_name)
	args := []gi.Argument{arg_v, arg_interface_name}
	iv.Call(args, nil, nil)
	gi.Free(c_interface_name)
}

// nm_setting_match_clear_interface_names
//
func (v SettingMatch) ClearInterfaceNames() {
	iv, err := _I.Get(733, "SettingMatch", "clear_interface_names", 1020, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_setting_match_get_interface_name
//
// [ idx ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingMatch) GetInterfaceName(idx int32) (result string) {
	iv, err := _I.Get(734, "SettingMatch", "get_interface_name", 1020, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewInt32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_match_get_interface_names
//
// [ length ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingMatch) GetInterfaceNames(length uint32) (result gi.CStrArray) {
	iv, err := _I.Get(735, "SettingMatch", "get_interface_names", 1020, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_length := gi.NewUint32Argument(length)
	args := []gi.Argument{arg_v, arg_length}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// nm_setting_match_get_num_interface_names
//
// [ result ] trans: nothing
//
func (v SettingMatch) GetNumInterfaceNames() (result uint32) {
	iv, err := _I.Get(736, "SettingMatch", "get_num_interface_names", 1020, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_match_remove_interface_name
//
// [ idx ] trans: nothing
//
func (v SettingMatch) RemoveInterfaceName(idx int32) {
	iv, err := _I.Get(737, "SettingMatch", "remove_interface_name", 1020, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewInt32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	iv.Call(args, nil, nil)
}

// nm_setting_match_remove_interface_name_by_value
//
// [ interface_name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingMatch) RemoveInterfaceNameByValue(interface_name string) (result bool) {
	iv, err := _I.Get(738, "SettingMatch", "remove_interface_name_by_value", 1020, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_interface_name := gi.CString(interface_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_interface_name := gi.NewStringArgument(c_interface_name)
	args := []gi.Argument{arg_v, arg_interface_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_interface_name)
	result = ret.Bool()
	return
}

// ignore GType struct SettingMatchClass

// Object SettingOlpcMesh
type SettingOlpcMesh struct {
	Setting
}

func WrapSettingOlpcMesh(p unsafe.Pointer) (r SettingOlpcMesh) { r.P = p; return }

type ISettingOlpcMesh interface{ P_SettingOlpcMesh() unsafe.Pointer }

func (v SettingOlpcMesh) P_SettingOlpcMesh() unsafe.Pointer { return v.P }
func SettingOlpcMeshGetType() gi.GType {
	ret := _I.GetGType(113, "SettingOlpcMesh")
	return ret
}

// nm_setting_olpc_mesh_new
//
// [ result ] trans: everything
//
func NewSettingOlpcMesh() (result SettingOlpcMesh) {
	iv, err := _I.Get(739, "SettingOlpcMesh", "new", 1022, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_olpc_mesh_get_channel
//
// [ result ] trans: nothing
//
func (v SettingOlpcMesh) GetChannel() (result uint32) {
	iv, err := _I.Get(740, "SettingOlpcMesh", "get_channel", 1022, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_olpc_mesh_get_dhcp_anycast_address
//
// [ result ] trans: nothing
//
func (v SettingOlpcMesh) GetDhcpAnycastAddress() (result string) {
	iv, err := _I.Get(741, "SettingOlpcMesh", "get_dhcp_anycast_address", 1022, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_olpc_mesh_get_ssid
//
// [ result ] trans: nothing
//
func (v SettingOlpcMesh) GetSsid() (result g.Bytes) {
	iv, err := _I.Get(742, "SettingOlpcMesh", "get_ssid", 1022, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct SettingOlpcMeshClass

// Object SettingOvsBridge
type SettingOvsBridge struct {
	Setting
}

func WrapSettingOvsBridge(p unsafe.Pointer) (r SettingOvsBridge) { r.P = p; return }

type ISettingOvsBridge interface{ P_SettingOvsBridge() unsafe.Pointer }

func (v SettingOvsBridge) P_SettingOvsBridge() unsafe.Pointer { return v.P }
func SettingOvsBridgeGetType() gi.GType {
	ret := _I.GetGType(114, "SettingOvsBridge")
	return ret
}

// nm_setting_ovs_bridge_new
//
// [ result ] trans: everything
//
func NewSettingOvsBridge() (result SettingOvsBridge) {
	iv, err := _I.Get(743, "SettingOvsBridge", "new", 1024, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_ovs_bridge_get_fail_mode
//
// [ result ] trans: nothing
//
func (v SettingOvsBridge) GetFailMode() (result string) {
	iv, err := _I.Get(744, "SettingOvsBridge", "get_fail_mode", 1024, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_ovs_bridge_get_mcast_snooping_enable
//
// [ result ] trans: nothing
//
func (v SettingOvsBridge) GetMcastSnoopingEnable() (result bool) {
	iv, err := _I.Get(745, "SettingOvsBridge", "get_mcast_snooping_enable", 1024, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ovs_bridge_get_rstp_enable
//
// [ result ] trans: nothing
//
func (v SettingOvsBridge) GetRstpEnable() (result bool) {
	iv, err := _I.Get(746, "SettingOvsBridge", "get_rstp_enable", 1024, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ovs_bridge_get_stp_enable
//
// [ result ] trans: nothing
//
func (v SettingOvsBridge) GetStpEnable() (result bool) {
	iv, err := _I.Get(747, "SettingOvsBridge", "get_stp_enable", 1024, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct SettingOvsBridgeClass

// Object SettingOvsInterface
type SettingOvsInterface struct {
	Setting
}

func WrapSettingOvsInterface(p unsafe.Pointer) (r SettingOvsInterface) { r.P = p; return }

type ISettingOvsInterface interface{ P_SettingOvsInterface() unsafe.Pointer }

func (v SettingOvsInterface) P_SettingOvsInterface() unsafe.Pointer { return v.P }
func SettingOvsInterfaceGetType() gi.GType {
	ret := _I.GetGType(115, "SettingOvsInterface")
	return ret
}

// nm_setting_ovs_interface_new
//
// [ result ] trans: everything
//
func NewSettingOvsInterface() (result SettingOvsInterface) {
	iv, err := _I.Get(748, "SettingOvsInterface", "new", 1026, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_ovs_interface_get_interface_type
//
// [ result ] trans: nothing
//
func (v SettingOvsInterface) GetInterfaceType() (result string) {
	iv, err := _I.Get(749, "SettingOvsInterface", "get_interface_type", 1026, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// ignore GType struct SettingOvsInterfaceClass

// Object SettingOvsPatch
type SettingOvsPatch struct {
	Setting
}

func WrapSettingOvsPatch(p unsafe.Pointer) (r SettingOvsPatch) { r.P = p; return }

type ISettingOvsPatch interface{ P_SettingOvsPatch() unsafe.Pointer }

func (v SettingOvsPatch) P_SettingOvsPatch() unsafe.Pointer { return v.P }
func SettingOvsPatchGetType() gi.GType {
	ret := _I.GetGType(116, "SettingOvsPatch")
	return ret
}

// nm_setting_ovs_patch_new
//
// [ result ] trans: everything
//
func NewSettingOvsPatch() (result SettingOvsPatch) {
	iv, err := _I.Get(750, "SettingOvsPatch", "new", 1028, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_ovs_patch_get_peer
//
// [ result ] trans: nothing
//
func (v SettingOvsPatch) GetPeer() (result string) {
	iv, err := _I.Get(751, "SettingOvsPatch", "get_peer", 1028, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// ignore GType struct SettingOvsPatchClass

// Object SettingOvsPort
type SettingOvsPort struct {
	Setting
}

func WrapSettingOvsPort(p unsafe.Pointer) (r SettingOvsPort) { r.P = p; return }

type ISettingOvsPort interface{ P_SettingOvsPort() unsafe.Pointer }

func (v SettingOvsPort) P_SettingOvsPort() unsafe.Pointer { return v.P }
func SettingOvsPortGetType() gi.GType {
	ret := _I.GetGType(117, "SettingOvsPort")
	return ret
}

// nm_setting_ovs_port_new
//
// [ result ] trans: everything
//
func NewSettingOvsPort() (result SettingOvsPort) {
	iv, err := _I.Get(752, "SettingOvsPort", "new", 1030, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_ovs_port_get_bond_downdelay
//
// [ result ] trans: nothing
//
func (v SettingOvsPort) GetBondDowndelay() (result uint32) {
	iv, err := _I.Get(753, "SettingOvsPort", "get_bond_downdelay", 1030, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_ovs_port_get_bond_mode
//
// [ result ] trans: nothing
//
func (v SettingOvsPort) GetBondMode() (result string) {
	iv, err := _I.Get(754, "SettingOvsPort", "get_bond_mode", 1030, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_ovs_port_get_bond_updelay
//
// [ result ] trans: nothing
//
func (v SettingOvsPort) GetBondUpdelay() (result uint32) {
	iv, err := _I.Get(755, "SettingOvsPort", "get_bond_updelay", 1030, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_ovs_port_get_lacp
//
// [ result ] trans: nothing
//
func (v SettingOvsPort) GetLacp() (result string) {
	iv, err := _I.Get(756, "SettingOvsPort", "get_lacp", 1030, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_ovs_port_get_tag
//
// [ result ] trans: nothing
//
func (v SettingOvsPort) GetTag() (result uint32) {
	iv, err := _I.Get(757, "SettingOvsPort", "get_tag", 1030, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_ovs_port_get_vlan_mode
//
// [ result ] trans: nothing
//
func (v SettingOvsPort) GetVlanMode() (result string) {
	iv, err := _I.Get(758, "SettingOvsPort", "get_vlan_mode", 1030, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// ignore GType struct SettingOvsPortClass

// Object SettingPpp
type SettingPpp struct {
	Setting
}

func WrapSettingPpp(p unsafe.Pointer) (r SettingPpp) { r.P = p; return }

type ISettingPpp interface{ P_SettingPpp() unsafe.Pointer }

func (v SettingPpp) P_SettingPpp() unsafe.Pointer { return v.P }
func SettingPppGetType() gi.GType {
	ret := _I.GetGType(118, "SettingPpp")
	return ret
}

// nm_setting_ppp_new
//
// [ result ] trans: everything
//
func NewSettingPpp() (result SettingPpp) {
	iv, err := _I.Get(759, "SettingPpp", "new", 1032, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_ppp_get_baud
//
// [ result ] trans: nothing
//
func (v SettingPpp) GetBaud() (result uint32) {
	iv, err := _I.Get(760, "SettingPpp", "get_baud", 1032, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_ppp_get_crtscts
//
// [ result ] trans: nothing
//
func (v SettingPpp) GetCrtscts() (result bool) {
	iv, err := _I.Get(761, "SettingPpp", "get_crtscts", 1032, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ppp_get_lcp_echo_failure
//
// [ result ] trans: nothing
//
func (v SettingPpp) GetLcpEchoFailure() (result uint32) {
	iv, err := _I.Get(762, "SettingPpp", "get_lcp_echo_failure", 1032, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_ppp_get_lcp_echo_interval
//
// [ result ] trans: nothing
//
func (v SettingPpp) GetLcpEchoInterval() (result uint32) {
	iv, err := _I.Get(763, "SettingPpp", "get_lcp_echo_interval", 1032, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_ppp_get_mppe_stateful
//
// [ result ] trans: nothing
//
func (v SettingPpp) GetMppeStateful() (result bool) {
	iv, err := _I.Get(764, "SettingPpp", "get_mppe_stateful", 1032, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ppp_get_mru
//
// [ result ] trans: nothing
//
func (v SettingPpp) GetMru() (result uint32) {
	iv, err := _I.Get(765, "SettingPpp", "get_mru", 1032, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_ppp_get_mtu
//
// [ result ] trans: nothing
//
func (v SettingPpp) GetMtu() (result uint32) {
	iv, err := _I.Get(766, "SettingPpp", "get_mtu", 1032, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_ppp_get_no_vj_comp
//
// [ result ] trans: nothing
//
func (v SettingPpp) GetNoVjComp() (result bool) {
	iv, err := _I.Get(767, "SettingPpp", "get_no_vj_comp", 1032, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ppp_get_noauth
//
// [ result ] trans: nothing
//
func (v SettingPpp) GetNoauth() (result bool) {
	iv, err := _I.Get(768, "SettingPpp", "get_noauth", 1032, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ppp_get_nobsdcomp
//
// [ result ] trans: nothing
//
func (v SettingPpp) GetNobsdcomp() (result bool) {
	iv, err := _I.Get(769, "SettingPpp", "get_nobsdcomp", 1032, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ppp_get_nodeflate
//
// [ result ] trans: nothing
//
func (v SettingPpp) GetNodeflate() (result bool) {
	iv, err := _I.Get(770, "SettingPpp", "get_nodeflate", 1032, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ppp_get_refuse_chap
//
// [ result ] trans: nothing
//
func (v SettingPpp) GetRefuseChap() (result bool) {
	iv, err := _I.Get(771, "SettingPpp", "get_refuse_chap", 1032, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ppp_get_refuse_eap
//
// [ result ] trans: nothing
//
func (v SettingPpp) GetRefuseEap() (result bool) {
	iv, err := _I.Get(772, "SettingPpp", "get_refuse_eap", 1032, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ppp_get_refuse_mschap
//
// [ result ] trans: nothing
//
func (v SettingPpp) GetRefuseMschap() (result bool) {
	iv, err := _I.Get(773, "SettingPpp", "get_refuse_mschap", 1032, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ppp_get_refuse_mschapv2
//
// [ result ] trans: nothing
//
func (v SettingPpp) GetRefuseMschapv2() (result bool) {
	iv, err := _I.Get(774, "SettingPpp", "get_refuse_mschapv2", 1032, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ppp_get_refuse_pap
//
// [ result ] trans: nothing
//
func (v SettingPpp) GetRefusePap() (result bool) {
	iv, err := _I.Get(775, "SettingPpp", "get_refuse_pap", 1032, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ppp_get_require_mppe
//
// [ result ] trans: nothing
//
func (v SettingPpp) GetRequireMppe() (result bool) {
	iv, err := _I.Get(776, "SettingPpp", "get_require_mppe", 1032, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_ppp_get_require_mppe_128
//
// [ result ] trans: nothing
//
func (v SettingPpp) GetRequireMppe128() (result bool) {
	iv, err := _I.Get(777, "SettingPpp", "get_require_mppe_128", 1032, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct SettingPppClass

// Object SettingPppoe
type SettingPppoe struct {
	Setting
}

func WrapSettingPppoe(p unsafe.Pointer) (r SettingPppoe) { r.P = p; return }

type ISettingPppoe interface{ P_SettingPppoe() unsafe.Pointer }

func (v SettingPppoe) P_SettingPppoe() unsafe.Pointer { return v.P }
func SettingPppoeGetType() gi.GType {
	ret := _I.GetGType(119, "SettingPppoe")
	return ret
}

// nm_setting_pppoe_new
//
// [ result ] trans: everything
//
func NewSettingPppoe() (result SettingPppoe) {
	iv, err := _I.Get(778, "SettingPppoe", "new", 1034, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_pppoe_get_parent
//
// [ result ] trans: nothing
//
func (v SettingPppoe) GetParent() (result string) {
	iv, err := _I.Get(779, "SettingPppoe", "get_parent", 1034, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_pppoe_get_password
//
// [ result ] trans: nothing
//
func (v SettingPppoe) GetPassword() (result string) {
	iv, err := _I.Get(780, "SettingPppoe", "get_password", 1034, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_pppoe_get_password_flags
//
// [ result ] trans: nothing
//
func (v SettingPppoe) GetPasswordFlags() (result SettingSecretFlags) {
	iv, err := _I.Get(781, "SettingPppoe", "get_password_flags", 1034, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingSecretFlags(ret.Int())
	return
}

// nm_setting_pppoe_get_service
//
// [ result ] trans: nothing
//
func (v SettingPppoe) GetService() (result string) {
	iv, err := _I.Get(782, "SettingPppoe", "get_service", 1034, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_pppoe_get_username
//
// [ result ] trans: nothing
//
func (v SettingPppoe) GetUsername() (result string) {
	iv, err := _I.Get(783, "SettingPppoe", "get_username", 1034, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// ignore GType struct SettingPppoeClass

// Object SettingProxy
type SettingProxy struct {
	Setting
}

func WrapSettingProxy(p unsafe.Pointer) (r SettingProxy) { r.P = p; return }

type ISettingProxy interface{ P_SettingProxy() unsafe.Pointer }

func (v SettingProxy) P_SettingProxy() unsafe.Pointer { return v.P }
func SettingProxyGetType() gi.GType {
	ret := _I.GetGType(120, "SettingProxy")
	return ret
}

// nm_setting_proxy_new
//
// [ result ] trans: everything
//
func NewSettingProxy() (result SettingProxy) {
	iv, err := _I.Get(784, "SettingProxy", "new", 1036, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_proxy_get_browser_only
//
// [ result ] trans: nothing
//
func (v SettingProxy) GetBrowserOnly() (result bool) {
	iv, err := _I.Get(785, "SettingProxy", "get_browser_only", 1036, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_proxy_get_method
//
// [ result ] trans: nothing
//
func (v SettingProxy) GetMethod() (result SettingProxyMethodEnum) {
	iv, err := _I.Get(786, "SettingProxy", "get_method", 1036, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingProxyMethodEnum(ret.Int())
	return
}

// nm_setting_proxy_get_pac_script
//
// [ result ] trans: nothing
//
func (v SettingProxy) GetPacScript() (result string) {
	iv, err := _I.Get(787, "SettingProxy", "get_pac_script", 1036, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_proxy_get_pac_url
//
// [ result ] trans: nothing
//
func (v SettingProxy) GetPacUrl() (result string) {
	iv, err := _I.Get(788, "SettingProxy", "get_pac_url", 1036, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// ignore GType struct SettingProxyClass

// Enum SettingProxyMethod
type SettingProxyMethodEnum int

const (
	SettingProxyMethodNone SettingProxyMethodEnum = 0
	SettingProxyMethodAuto SettingProxyMethodEnum = 1
)

func SettingProxyMethodGetType() gi.GType {
	ret := _I.GetGType(121, "SettingProxyMethod")
	return ret
}

// Flags SettingSecretFlags
type SettingSecretFlags int

const (
	SettingSecretFlagsNone        SettingSecretFlags = 0
	SettingSecretFlagsAgentOwned  SettingSecretFlags = 1
	SettingSecretFlagsNotSaved    SettingSecretFlags = 2
	SettingSecretFlagsNotRequired SettingSecretFlags = 4
)

func SettingSecretFlagsGetType() gi.GType {
	ret := _I.GetGType(122, "SettingSecretFlags")
	return ret
}

// Object SettingSerial
type SettingSerial struct {
	Setting
}

func WrapSettingSerial(p unsafe.Pointer) (r SettingSerial) { r.P = p; return }

type ISettingSerial interface{ P_SettingSerial() unsafe.Pointer }

func (v SettingSerial) P_SettingSerial() unsafe.Pointer { return v.P }
func SettingSerialGetType() gi.GType {
	ret := _I.GetGType(123, "SettingSerial")
	return ret
}

// nm_setting_serial_new
//
// [ result ] trans: everything
//
func NewSettingSerial() (result SettingSerial) {
	iv, err := _I.Get(789, "SettingSerial", "new", 1040, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_serial_get_baud
//
// [ result ] trans: nothing
//
func (v SettingSerial) GetBaud() (result uint32) {
	iv, err := _I.Get(790, "SettingSerial", "get_baud", 1040, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_serial_get_bits
//
// [ result ] trans: nothing
//
func (v SettingSerial) GetBits() (result uint32) {
	iv, err := _I.Get(791, "SettingSerial", "get_bits", 1040, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_serial_get_parity
//
// [ result ] trans: nothing
//
func (v SettingSerial) GetParity() (result SettingSerialParityEnum) {
	iv, err := _I.Get(792, "SettingSerial", "get_parity", 1040, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingSerialParityEnum(ret.Int())
	return
}

// nm_setting_serial_get_send_delay
//
// [ result ] trans: nothing
//
func (v SettingSerial) GetSendDelay() (result uint64) {
	iv, err := _I.Get(793, "SettingSerial", "get_send_delay", 1040, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint64()
	return
}

// nm_setting_serial_get_stopbits
//
// [ result ] trans: nothing
//
func (v SettingSerial) GetStopbits() (result uint32) {
	iv, err := _I.Get(794, "SettingSerial", "get_stopbits", 1040, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// ignore GType struct SettingSerialClass

// Enum SettingSerialParity
type SettingSerialParityEnum int

const (
	SettingSerialParityNone SettingSerialParityEnum = 0
	SettingSerialParityEven SettingSerialParityEnum = 1
	SettingSerialParityOdd  SettingSerialParityEnum = 2
)

func SettingSerialParityGetType() gi.GType {
	ret := _I.GetGType(124, "SettingSerialParity")
	return ret
}

// Object SettingSriov
type SettingSriov struct {
	Setting
}

func WrapSettingSriov(p unsafe.Pointer) (r SettingSriov) { r.P = p; return }

type ISettingSriov interface{ P_SettingSriov() unsafe.Pointer }

func (v SettingSriov) P_SettingSriov() unsafe.Pointer { return v.P }
func SettingSriovGetType() gi.GType {
	ret := _I.GetGType(125, "SettingSriov")
	return ret
}

// nm_setting_sriov_new
//
// [ result ] trans: everything
//
func NewSettingSriov() (result SettingSriov) {
	iv, err := _I.Get(795, "SettingSriov", "new", 1043, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_sriov_add_vf
//
// [ vf ] trans: nothing
//
func (v SettingSriov) AddVf(vf SriovVF) {
	iv, err := _I.Get(796, "SettingSriov", "add_vf", 1043, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_vf := gi.NewPointerArgument(vf.P)
	args := []gi.Argument{arg_v, arg_vf}
	iv.Call(args, nil, nil)
}

// nm_setting_sriov_clear_vfs
//
func (v SettingSriov) ClearVfs() {
	iv, err := _I.Get(797, "SettingSriov", "clear_vfs", 1043, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_setting_sriov_get_autoprobe_drivers
//
// [ result ] trans: nothing
//
func (v SettingSriov) GetAutoprobeDrivers() (result TernaryEnum) {
	iv, err := _I.Get(798, "SettingSriov", "get_autoprobe_drivers", 1043, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = TernaryEnum(ret.Int())
	return
}

// nm_setting_sriov_get_num_vfs
//
// [ result ] trans: nothing
//
func (v SettingSriov) GetNumVfs() (result uint32) {
	iv, err := _I.Get(799, "SettingSriov", "get_num_vfs", 1043, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_sriov_get_total_vfs
//
// [ result ] trans: nothing
//
func (v SettingSriov) GetTotalVfs() (result uint32) {
	iv, err := _I.Get(800, "SettingSriov", "get_total_vfs", 1043, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_sriov_get_vf
//
// [ idx ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingSriov) GetVf(idx uint32) (result SriovVF) {
	iv, err := _I.Get(801, "SettingSriov", "get_vf", 1043, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_sriov_remove_vf
//
// [ idx ] trans: nothing
//
func (v SettingSriov) RemoveVf(idx uint32) {
	iv, err := _I.Get(802, "SettingSriov", "remove_vf", 1043, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	iv.Call(args, nil, nil)
}

// nm_setting_sriov_remove_vf_by_index
//
// [ index ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingSriov) RemoveVfByIndex(index uint32) (result bool) {
	iv, err := _I.Get(803, "SettingSriov", "remove_vf_by_index", 1043, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_index := gi.NewUint32Argument(index)
	args := []gi.Argument{arg_v, arg_index}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct SettingSriovClass

// Object SettingTCConfig
type SettingTCConfig struct {
	Setting
}

func WrapSettingTCConfig(p unsafe.Pointer) (r SettingTCConfig) { r.P = p; return }

type ISettingTCConfig interface{ P_SettingTCConfig() unsafe.Pointer }

func (v SettingTCConfig) P_SettingTCConfig() unsafe.Pointer { return v.P }
func SettingTCConfigGetType() gi.GType {
	ret := _I.GetGType(126, "SettingTCConfig")
	return ret
}

// nm_setting_tc_config_new
//
// [ result ] trans: everything
//
func NewSettingTCConfig() (result SettingTCConfig) {
	iv, err := _I.Get(804, "SettingTCConfig", "new", 1045, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_tc_config_add_qdisc
//
// [ qdisc ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingTCConfig) AddQdisc(qdisc TCQdisc) (result bool) {
	iv, err := _I.Get(805, "SettingTCConfig", "add_qdisc", 1045, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_qdisc := gi.NewPointerArgument(qdisc.P)
	args := []gi.Argument{arg_v, arg_qdisc}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_tc_config_add_tfilter
//
// [ tfilter ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingTCConfig) AddTfilter(tfilter TCTfilter) (result bool) {
	iv, err := _I.Get(806, "SettingTCConfig", "add_tfilter", 1045, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tfilter := gi.NewPointerArgument(tfilter.P)
	args := []gi.Argument{arg_v, arg_tfilter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_tc_config_clear_qdiscs
//
func (v SettingTCConfig) ClearQdiscs() {
	iv, err := _I.Get(807, "SettingTCConfig", "clear_qdiscs", 1045, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_setting_tc_config_clear_tfilters
//
func (v SettingTCConfig) ClearTfilters() {
	iv, err := _I.Get(808, "SettingTCConfig", "clear_tfilters", 1045, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_setting_tc_config_get_num_qdiscs
//
// [ result ] trans: nothing
//
func (v SettingTCConfig) GetNumQdiscs() (result uint32) {
	iv, err := _I.Get(809, "SettingTCConfig", "get_num_qdiscs", 1045, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_tc_config_get_num_tfilters
//
// [ result ] trans: nothing
//
func (v SettingTCConfig) GetNumTfilters() (result uint32) {
	iv, err := _I.Get(810, "SettingTCConfig", "get_num_tfilters", 1045, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_tc_config_get_qdisc
//
// [ idx ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingTCConfig) GetQdisc(idx uint32) (result TCQdisc) {
	iv, err := _I.Get(811, "SettingTCConfig", "get_qdisc", 1045, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_tc_config_get_tfilter
//
// [ idx ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingTCConfig) GetTfilter(idx uint32) (result TCTfilter) {
	iv, err := _I.Get(812, "SettingTCConfig", "get_tfilter", 1045, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_tc_config_remove_qdisc
//
// [ idx ] trans: nothing
//
func (v SettingTCConfig) RemoveQdisc(idx uint32) {
	iv, err := _I.Get(813, "SettingTCConfig", "remove_qdisc", 1045, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	iv.Call(args, nil, nil)
}

// nm_setting_tc_config_remove_qdisc_by_value
//
// [ qdisc ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingTCConfig) RemoveQdiscByValue(qdisc TCQdisc) (result bool) {
	iv, err := _I.Get(814, "SettingTCConfig", "remove_qdisc_by_value", 1045, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_qdisc := gi.NewPointerArgument(qdisc.P)
	args := []gi.Argument{arg_v, arg_qdisc}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_tc_config_remove_tfilter
//
// [ idx ] trans: nothing
//
func (v SettingTCConfig) RemoveTfilter(idx uint32) {
	iv, err := _I.Get(815, "SettingTCConfig", "remove_tfilter", 1045, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	iv.Call(args, nil, nil)
}

// nm_setting_tc_config_remove_tfilter_by_value
//
// [ tfilter ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingTCConfig) RemoveTfilterByValue(tfilter TCTfilter) (result bool) {
	iv, err := _I.Get(816, "SettingTCConfig", "remove_tfilter_by_value", 1045, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tfilter := gi.NewPointerArgument(tfilter.P)
	args := []gi.Argument{arg_v, arg_tfilter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct SettingTCConfigClass

// Object SettingTeam
type SettingTeam struct {
	Setting
}

func WrapSettingTeam(p unsafe.Pointer) (r SettingTeam) { r.P = p; return }

type ISettingTeam interface{ P_SettingTeam() unsafe.Pointer }

func (v SettingTeam) P_SettingTeam() unsafe.Pointer { return v.P }
func SettingTeamGetType() gi.GType {
	ret := _I.GetGType(127, "SettingTeam")
	return ret
}

// nm_setting_team_new
//
// [ result ] trans: everything
//
func NewSettingTeam() (result SettingTeam) {
	iv, err := _I.Get(817, "SettingTeam", "new", 1047, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_team_add_link_watcher
//
// [ link_watcher ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingTeam) AddLinkWatcher(link_watcher TeamLinkWatcher) (result bool) {
	iv, err := _I.Get(818, "SettingTeam", "add_link_watcher", 1047, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_link_watcher := gi.NewPointerArgument(link_watcher.P)
	args := []gi.Argument{arg_v, arg_link_watcher}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_team_add_runner_tx_hash
//
// [ txhash ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingTeam) AddRunnerTxHash(txhash string) (result bool) {
	iv, err := _I.Get(819, "SettingTeam", "add_runner_tx_hash", 1047, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_txhash := gi.CString(txhash)
	arg_v := gi.NewPointerArgument(v.P)
	arg_txhash := gi.NewStringArgument(c_txhash)
	args := []gi.Argument{arg_v, arg_txhash}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_txhash)
	result = ret.Bool()
	return
}

// nm_setting_team_clear_link_watchers
//
func (v SettingTeam) ClearLinkWatchers() {
	iv, err := _I.Get(820, "SettingTeam", "clear_link_watchers", 1047, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_setting_team_get_config
//
// [ result ] trans: nothing
//
func (v SettingTeam) GetConfig() (result string) {
	iv, err := _I.Get(821, "SettingTeam", "get_config", 1047, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_team_get_link_watcher
//
// [ idx ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingTeam) GetLinkWatcher(idx uint32) (result TeamLinkWatcher) {
	iv, err := _I.Get(822, "SettingTeam", "get_link_watcher", 1047, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_team_get_mcast_rejoin_count
//
// [ result ] trans: nothing
//
func (v SettingTeam) GetMcastRejoinCount() (result int32) {
	iv, err := _I.Get(823, "SettingTeam", "get_mcast_rejoin_count", 1047, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_team_get_mcast_rejoin_interval
//
// [ result ] trans: nothing
//
func (v SettingTeam) GetMcastRejoinInterval() (result int32) {
	iv, err := _I.Get(824, "SettingTeam", "get_mcast_rejoin_interval", 1047, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_team_get_notify_peers_count
//
// [ result ] trans: nothing
//
func (v SettingTeam) GetNotifyPeersCount() (result int32) {
	iv, err := _I.Get(825, "SettingTeam", "get_notify_peers_count", 1047, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_team_get_notify_peers_interval
//
// [ result ] trans: nothing
//
func (v SettingTeam) GetNotifyPeersInterval() (result int32) {
	iv, err := _I.Get(826, "SettingTeam", "get_notify_peers_interval", 1047, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_team_get_num_link_watchers
//
// [ result ] trans: nothing
//
func (v SettingTeam) GetNumLinkWatchers() (result uint32) {
	iv, err := _I.Get(827, "SettingTeam", "get_num_link_watchers", 1047, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_team_get_num_runner_tx_hash
//
// [ result ] trans: nothing
//
func (v SettingTeam) GetNumRunnerTxHash() (result uint32) {
	iv, err := _I.Get(828, "SettingTeam", "get_num_runner_tx_hash", 1047, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_team_get_runner
//
// [ result ] trans: nothing
//
func (v SettingTeam) GetRunner() (result string) {
	iv, err := _I.Get(829, "SettingTeam", "get_runner", 1047, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_team_get_runner_active
//
// [ result ] trans: nothing
//
func (v SettingTeam) GetRunnerActive() (result bool) {
	iv, err := _I.Get(830, "SettingTeam", "get_runner_active", 1047, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_team_get_runner_agg_select_policy
//
// [ result ] trans: nothing
//
func (v SettingTeam) GetRunnerAggSelectPolicy() (result string) {
	iv, err := _I.Get(831, "SettingTeam", "get_runner_agg_select_policy", 1047, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_team_get_runner_fast_rate
//
// [ result ] trans: nothing
//
func (v SettingTeam) GetRunnerFastRate() (result bool) {
	iv, err := _I.Get(832, "SettingTeam", "get_runner_fast_rate", 1047, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_team_get_runner_hwaddr_policy
//
// [ result ] trans: nothing
//
func (v SettingTeam) GetRunnerHwaddrPolicy() (result string) {
	iv, err := _I.Get(833, "SettingTeam", "get_runner_hwaddr_policy", 1047, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_team_get_runner_min_ports
//
// [ result ] trans: nothing
//
func (v SettingTeam) GetRunnerMinPorts() (result int32) {
	iv, err := _I.Get(834, "SettingTeam", "get_runner_min_ports", 1047, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_team_get_runner_sys_prio
//
// [ result ] trans: nothing
//
func (v SettingTeam) GetRunnerSysPrio() (result int32) {
	iv, err := _I.Get(835, "SettingTeam", "get_runner_sys_prio", 1047, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_team_get_runner_tx_balancer
//
// [ result ] trans: nothing
//
func (v SettingTeam) GetRunnerTxBalancer() (result string) {
	iv, err := _I.Get(836, "SettingTeam", "get_runner_tx_balancer", 1047, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_team_get_runner_tx_balancer_interval
//
// [ result ] trans: nothing
//
func (v SettingTeam) GetRunnerTxBalancerInterval() (result int32) {
	iv, err := _I.Get(837, "SettingTeam", "get_runner_tx_balancer_interval", 1047, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_team_get_runner_tx_hash
//
// [ idx ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingTeam) GetRunnerTxHash(idx uint32) (result string) {
	iv, err := _I.Get(838, "SettingTeam", "get_runner_tx_hash", 1047, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_team_remove_link_watcher
//
// [ idx ] trans: nothing
//
func (v SettingTeam) RemoveLinkWatcher(idx uint32) {
	iv, err := _I.Get(839, "SettingTeam", "remove_link_watcher", 1047, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	iv.Call(args, nil, nil)
}

// nm_setting_team_remove_link_watcher_by_value
//
// [ link_watcher ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingTeam) RemoveLinkWatcherByValue(link_watcher TeamLinkWatcher) (result bool) {
	iv, err := _I.Get(840, "SettingTeam", "remove_link_watcher_by_value", 1047, 23, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_link_watcher := gi.NewPointerArgument(link_watcher.P)
	args := []gi.Argument{arg_v, arg_link_watcher}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_team_remove_runner_tx_hash
//
// [ idx ] trans: nothing
//
func (v SettingTeam) RemoveRunnerTxHash(idx uint32) {
	iv, err := _I.Get(841, "SettingTeam", "remove_runner_tx_hash", 1047, 24, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	iv.Call(args, nil, nil)
}

// nm_setting_team_remove_runner_tx_hash_by_value
//
// [ txhash ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingTeam) RemoveRunnerTxHashByValue(txhash string) (result bool) {
	iv, err := _I.Get(842, "SettingTeam", "remove_runner_tx_hash_by_value", 1047, 25, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_txhash := gi.CString(txhash)
	arg_v := gi.NewPointerArgument(v.P)
	arg_txhash := gi.NewStringArgument(c_txhash)
	args := []gi.Argument{arg_v, arg_txhash}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_txhash)
	result = ret.Bool()
	return
}

// ignore GType struct SettingTeamClass

// Object SettingTeamPort
type SettingTeamPort struct {
	Setting
}

func WrapSettingTeamPort(p unsafe.Pointer) (r SettingTeamPort) { r.P = p; return }

type ISettingTeamPort interface{ P_SettingTeamPort() unsafe.Pointer }

func (v SettingTeamPort) P_SettingTeamPort() unsafe.Pointer { return v.P }
func SettingTeamPortGetType() gi.GType {
	ret := _I.GetGType(128, "SettingTeamPort")
	return ret
}

// nm_setting_team_port_new
//
// [ result ] trans: everything
//
func NewSettingTeamPort() (result SettingTeamPort) {
	iv, err := _I.Get(843, "SettingTeamPort", "new", 1049, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_team_port_add_link_watcher
//
// [ link_watcher ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingTeamPort) AddLinkWatcher(link_watcher TeamLinkWatcher) (result bool) {
	iv, err := _I.Get(844, "SettingTeamPort", "add_link_watcher", 1049, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_link_watcher := gi.NewPointerArgument(link_watcher.P)
	args := []gi.Argument{arg_v, arg_link_watcher}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_team_port_clear_link_watchers
//
func (v SettingTeamPort) ClearLinkWatchers() {
	iv, err := _I.Get(845, "SettingTeamPort", "clear_link_watchers", 1049, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_setting_team_port_get_config
//
// [ result ] trans: nothing
//
func (v SettingTeamPort) GetConfig() (result string) {
	iv, err := _I.Get(846, "SettingTeamPort", "get_config", 1049, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_team_port_get_lacp_key
//
// [ result ] trans: nothing
//
func (v SettingTeamPort) GetLacpKey() (result int32) {
	iv, err := _I.Get(847, "SettingTeamPort", "get_lacp_key", 1049, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_team_port_get_lacp_prio
//
// [ result ] trans: nothing
//
func (v SettingTeamPort) GetLacpPrio() (result int32) {
	iv, err := _I.Get(848, "SettingTeamPort", "get_lacp_prio", 1049, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_team_port_get_link_watcher
//
// [ idx ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingTeamPort) GetLinkWatcher(idx uint32) (result TeamLinkWatcher) {
	iv, err := _I.Get(849, "SettingTeamPort", "get_link_watcher", 1049, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_team_port_get_num_link_watchers
//
// [ result ] trans: nothing
//
func (v SettingTeamPort) GetNumLinkWatchers() (result uint32) {
	iv, err := _I.Get(850, "SettingTeamPort", "get_num_link_watchers", 1049, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_team_port_get_prio
//
// [ result ] trans: nothing
//
func (v SettingTeamPort) GetPrio() (result int32) {
	iv, err := _I.Get(851, "SettingTeamPort", "get_prio", 1049, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_team_port_get_queue_id
//
// [ result ] trans: nothing
//
func (v SettingTeamPort) GetQueueId() (result int32) {
	iv, err := _I.Get(852, "SettingTeamPort", "get_queue_id", 1049, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_team_port_get_sticky
//
// [ result ] trans: nothing
//
func (v SettingTeamPort) GetSticky() (result bool) {
	iv, err := _I.Get(853, "SettingTeamPort", "get_sticky", 1049, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_team_port_remove_link_watcher
//
// [ idx ] trans: nothing
//
func (v SettingTeamPort) RemoveLinkWatcher(idx uint32) {
	iv, err := _I.Get(854, "SettingTeamPort", "remove_link_watcher", 1049, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	iv.Call(args, nil, nil)
}

// nm_setting_team_port_remove_link_watcher_by_value
//
// [ link_watcher ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingTeamPort) RemoveLinkWatcherByValue(link_watcher TeamLinkWatcher) (result bool) {
	iv, err := _I.Get(855, "SettingTeamPort", "remove_link_watcher_by_value", 1049, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_link_watcher := gi.NewPointerArgument(link_watcher.P)
	args := []gi.Argument{arg_v, arg_link_watcher}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct SettingTeamPortClass

// Object SettingTun
type SettingTun struct {
	Setting
}

func WrapSettingTun(p unsafe.Pointer) (r SettingTun) { r.P = p; return }

type ISettingTun interface{ P_SettingTun() unsafe.Pointer }

func (v SettingTun) P_SettingTun() unsafe.Pointer { return v.P }
func SettingTunGetType() gi.GType {
	ret := _I.GetGType(129, "SettingTun")
	return ret
}

// nm_setting_tun_new
//
// [ result ] trans: everything
//
func NewSettingTun() (result SettingTun) {
	iv, err := _I.Get(856, "SettingTun", "new", 1051, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_tun_get_group
//
// [ result ] trans: nothing
//
func (v SettingTun) GetGroup() (result string) {
	iv, err := _I.Get(857, "SettingTun", "get_group", 1051, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_tun_get_mode
//
// [ result ] trans: nothing
//
func (v SettingTun) GetMode() (result SettingTunModeEnum) {
	iv, err := _I.Get(858, "SettingTun", "get_mode", 1051, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingTunModeEnum(ret.Int())
	return
}

// nm_setting_tun_get_multi_queue
//
// [ result ] trans: nothing
//
func (v SettingTun) GetMultiQueue() (result bool) {
	iv, err := _I.Get(859, "SettingTun", "get_multi_queue", 1051, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_tun_get_owner
//
// [ result ] trans: nothing
//
func (v SettingTun) GetOwner() (result string) {
	iv, err := _I.Get(860, "SettingTun", "get_owner", 1051, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_tun_get_pi
//
// [ result ] trans: nothing
//
func (v SettingTun) GetPi() (result bool) {
	iv, err := _I.Get(861, "SettingTun", "get_pi", 1051, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_tun_get_vnet_hdr
//
// [ result ] trans: nothing
//
func (v SettingTun) GetVnetHdr() (result bool) {
	iv, err := _I.Get(862, "SettingTun", "get_vnet_hdr", 1051, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct SettingTunClass

// Enum SettingTunMode
type SettingTunModeEnum int

const (
	SettingTunModeUnknown SettingTunModeEnum = 0
	SettingTunModeTun     SettingTunModeEnum = 1
	SettingTunModeTap     SettingTunModeEnum = 2
)

func SettingTunModeGetType() gi.GType {
	ret := _I.GetGType(130, "SettingTunMode")
	return ret
}

// Object SettingUser
type SettingUser struct {
	Setting
}

func WrapSettingUser(p unsafe.Pointer) (r SettingUser) { r.P = p; return }

type ISettingUser interface{ P_SettingUser() unsafe.Pointer }

func (v SettingUser) P_SettingUser() unsafe.Pointer { return v.P }
func SettingUserGetType() gi.GType {
	ret := _I.GetGType(131, "SettingUser")
	return ret
}

// nm_setting_user_new
//
// [ result ] trans: everything
//
func NewSettingUser() (result SettingUser) {
	iv, err := _I.Get(863, "SettingUser", "new", 1054, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_user_check_key
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func SettingUserCheckKey1(key string) (result bool, err error) {
	iv, err := _I.Get(864, "SettingUser", "check_key", 1054, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_key := gi.CString(key)
	arg_key := gi.NewStringArgument(c_key)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_key, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_key)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_setting_user_check_val
//
// [ val ] trans: nothing
//
// [ result ] trans: nothing
//
func SettingUserCheckVal1(val string) (result bool, err error) {
	iv, err := _I.Get(865, "SettingUser", "check_val", 1054, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_val := gi.CString(val)
	arg_val := gi.NewStringArgument(c_val)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_val, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_val)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_setting_user_get_data
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingUser) GetData(key string) (result string) {
	iv, err := _I.Get(866, "SettingUser", "get_data", 1054, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.String().Copy()
	return
}

// nm_setting_user_get_keys
//
// [ out_len ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v SettingUser) GetKeys() (result gi.CStrArray) {
	iv, err := _I.Get(867, "SettingUser", "get_keys", 1054, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_out_len := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_out_len}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var out_len uint32
	_ = out_len
	out_len = outArgs[0].Uint32()
	result = gi.CStrArray{P: ret.Pointer(), Len: int(out_len)}
	return
}

// nm_setting_user_set_data
//
// [ key ] trans: nothing
//
// [ val ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingUser) SetData(key string, val string) (result bool, err error) {
	iv, err := _I.Get(868, "SettingUser", "set_data", 1054, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_key := gi.CString(key)
	c_val := gi.CString(val)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_val := gi.NewStringArgument(c_val)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_key, arg_val, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_key)
	gi.Free(c_val)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// ignore GType struct SettingUserClass

type SettingValueIterFn func(setting Setting, key string, value g.Value, flags g.ParamFlags)

func CallSettingValueIterFn(fn SettingValueIterFn, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	setting := WrapSetting(*(*unsafe.Pointer)(args[0]))
	key := gi.GoString(*(*unsafe.Pointer)(args[1]))
	value := g.Value{P: *(*unsafe.Pointer)(args[2])}
	flags := *(*g.ParamFlags)(args[3])
	fn(setting, key, value, flags)
}

// Object SettingVlan
type SettingVlan struct {
	Setting
}

func WrapSettingVlan(p unsafe.Pointer) (r SettingVlan) { r.P = p; return }

type ISettingVlan interface{ P_SettingVlan() unsafe.Pointer }

func (v SettingVlan) P_SettingVlan() unsafe.Pointer { return v.P }
func SettingVlanGetType() gi.GType {
	ret := _I.GetGType(132, "SettingVlan")
	return ret
}

// nm_setting_vlan_new
//
// [ result ] trans: everything
//
func NewSettingVlan() (result SettingVlan) {
	iv, err := _I.Get(869, "SettingVlan", "new", 1057, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_vlan_add_priority
//
// [ map1 ] trans: nothing
//
// [ from ] trans: nothing
//
// [ to ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingVlan) AddPriority(map1 VlanPriorityMapEnum, from uint32, to uint32) (result bool) {
	iv, err := _I.Get(870, "SettingVlan", "add_priority", 1057, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_map1 := gi.NewIntArgument(int(map1))
	arg_from := gi.NewUint32Argument(from)
	arg_to := gi.NewUint32Argument(to)
	args := []gi.Argument{arg_v, arg_map1, arg_from, arg_to}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_vlan_add_priority_str
//
// [ map1 ] trans: nothing
//
// [ str ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingVlan) AddPriorityStr(map1 VlanPriorityMapEnum, str string) (result bool) {
	iv, err := _I.Get(871, "SettingVlan", "add_priority_str", 1057, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_str := gi.CString(str)
	arg_v := gi.NewPointerArgument(v.P)
	arg_map1 := gi.NewIntArgument(int(map1))
	arg_str := gi.NewStringArgument(c_str)
	args := []gi.Argument{arg_v, arg_map1, arg_str}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_str)
	result = ret.Bool()
	return
}

// nm_setting_vlan_clear_priorities
//
// [ map1 ] trans: nothing
//
func (v SettingVlan) ClearPriorities(map1 VlanPriorityMapEnum) {
	iv, err := _I.Get(872, "SettingVlan", "clear_priorities", 1057, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_map1 := gi.NewIntArgument(int(map1))
	args := []gi.Argument{arg_v, arg_map1}
	iv.Call(args, nil, nil)
}

// nm_setting_vlan_get_flags
//
// [ result ] trans: nothing
//
func (v SettingVlan) GetFlags() (result uint32) {
	iv, err := _I.Get(873, "SettingVlan", "get_flags", 1057, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_vlan_get_id
//
// [ result ] trans: nothing
//
func (v SettingVlan) GetId() (result uint32) {
	iv, err := _I.Get(874, "SettingVlan", "get_id", 1057, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_vlan_get_num_priorities
//
// [ map1 ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingVlan) GetNumPriorities(map1 VlanPriorityMapEnum) (result int32) {
	iv, err := _I.Get(875, "SettingVlan", "get_num_priorities", 1057, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_map1 := gi.NewIntArgument(int(map1))
	args := []gi.Argument{arg_v, arg_map1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_setting_vlan_get_parent
//
// [ result ] trans: nothing
//
func (v SettingVlan) GetParent() (result string) {
	iv, err := _I.Get(876, "SettingVlan", "get_parent", 1057, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_vlan_get_priority
//
// [ map1 ] trans: nothing
//
// [ idx ] trans: nothing
//
// [ out_from ] trans: everything, dir: out
//
// [ out_to ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v SettingVlan) GetPriority(map1 VlanPriorityMapEnum, idx uint32) (result bool, out_from uint32, out_to uint32) {
	iv, err := _I.Get(877, "SettingVlan", "get_priority", 1057, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_map1 := gi.NewIntArgument(int(map1))
	arg_idx := gi.NewUint32Argument(idx)
	arg_out_from := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_out_to := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_map1, arg_idx, arg_out_from, arg_out_to}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	out_from = outArgs[0].Uint32()
	out_to = outArgs[1].Uint32()
	result = ret.Bool()
	return
}

// nm_setting_vlan_remove_priority
//
// [ map1 ] trans: nothing
//
// [ idx ] trans: nothing
//
func (v SettingVlan) RemovePriority(map1 VlanPriorityMapEnum, idx uint32) {
	iv, err := _I.Get(878, "SettingVlan", "remove_priority", 1057, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_map1 := gi.NewIntArgument(int(map1))
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_map1, arg_idx}
	iv.Call(args, nil, nil)
}

// nm_setting_vlan_remove_priority_by_value
//
// [ map1 ] trans: nothing
//
// [ from ] trans: nothing
//
// [ to ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingVlan) RemovePriorityByValue(map1 VlanPriorityMapEnum, from uint32, to uint32) (result bool) {
	iv, err := _I.Get(879, "SettingVlan", "remove_priority_by_value", 1057, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_map1 := gi.NewIntArgument(int(map1))
	arg_from := gi.NewUint32Argument(from)
	arg_to := gi.NewUint32Argument(to)
	args := []gi.Argument{arg_v, arg_map1, arg_from, arg_to}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_vlan_remove_priority_str_by_value
//
// [ map1 ] trans: nothing
//
// [ str ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingVlan) RemovePriorityStrByValue(map1 VlanPriorityMapEnum, str string) (result bool) {
	iv, err := _I.Get(880, "SettingVlan", "remove_priority_str_by_value", 1057, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_str := gi.CString(str)
	arg_v := gi.NewPointerArgument(v.P)
	arg_map1 := gi.NewIntArgument(int(map1))
	arg_str := gi.NewStringArgument(c_str)
	args := []gi.Argument{arg_v, arg_map1, arg_str}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_str)
	result = ret.Bool()
	return
}

// ignore GType struct SettingVlanClass

// Object SettingVpn
type SettingVpn struct {
	Setting
}

func WrapSettingVpn(p unsafe.Pointer) (r SettingVpn) { r.P = p; return }

type ISettingVpn interface{ P_SettingVpn() unsafe.Pointer }

func (v SettingVpn) P_SettingVpn() unsafe.Pointer { return v.P }
func SettingVpnGetType() gi.GType {
	ret := _I.GetGType(133, "SettingVpn")
	return ret
}

// nm_setting_vpn_new
//
// [ result ] trans: everything
//
func NewSettingVpn() (result SettingVpn) {
	iv, err := _I.Get(881, "SettingVpn", "new", 1059, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_vpn_add_data_item
//
// [ key ] trans: nothing
//
// [ item ] trans: nothing
//
func (v SettingVpn) AddDataItem(key string, item string) {
	iv, err := _I.Get(882, "SettingVpn", "add_data_item", 1059, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	c_item := gi.CString(item)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_item := gi.NewStringArgument(c_item)
	args := []gi.Argument{arg_v, arg_key, arg_item}
	iv.Call(args, nil, nil)
	gi.Free(c_key)
	gi.Free(c_item)
}

// nm_setting_vpn_add_secret
//
// [ key ] trans: nothing
//
// [ secret ] trans: nothing
//
func (v SettingVpn) AddSecret(key string, secret string) {
	iv, err := _I.Get(883, "SettingVpn", "add_secret", 1059, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	c_secret := gi.CString(secret)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_secret := gi.NewStringArgument(c_secret)
	args := []gi.Argument{arg_v, arg_key, arg_secret}
	iv.Call(args, nil, nil)
	gi.Free(c_key)
	gi.Free(c_secret)
}

// nm_setting_vpn_foreach_data_item
//
// [ func1 ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v SettingVpn) ForeachDataItem(func1 VpnIterFunc) {
	iv, err := _I.Get(884, "SettingVpn", "foreach_data_item", 1059, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var cId uint
	var funcPtr unsafe.Pointer
	if func1 != nil {
		callableInfo := gi.GetCallableInfo("NM", "VpnIterFunc")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallVpnIterFunc(func1, __result, __args)
		}, gi.ScopeCall, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_func1, arg_user_data}
	iv.Call(args, nil, nil)
	gi.UnregisterFClosure(cId)
}

// nm_setting_vpn_foreach_secret
//
// [ func1 ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v SettingVpn) ForeachSecret(func1 VpnIterFunc) {
	iv, err := _I.Get(885, "SettingVpn", "foreach_secret", 1059, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var cId uint
	var funcPtr unsafe.Pointer
	if func1 != nil {
		callableInfo := gi.GetCallableInfo("NM", "VpnIterFunc")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallVpnIterFunc(func1, __result, __args)
		}, gi.ScopeCall, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_func1, arg_user_data}
	iv.Call(args, nil, nil)
	gi.UnregisterFClosure(cId)
}

// nm_setting_vpn_get_data_item
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingVpn) GetDataItem(key string) (result string) {
	iv, err := _I.Get(886, "SettingVpn", "get_data_item", 1059, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.String().Copy()
	return
}

// nm_setting_vpn_get_data_keys
//
// [ out_length ] trans: everything, dir: out
//
// [ result ] trans: container
//
func (v SettingVpn) GetDataKeys() (result gi.CStrArray) {
	iv, err := _I.Get(887, "SettingVpn", "get_data_keys", 1059, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_out_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_out_length}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var out_length uint32
	_ = out_length
	out_length = outArgs[0].Uint32()
	result = gi.CStrArray{P: ret.Pointer(), Len: int(out_length)}
	return
}

// nm_setting_vpn_get_num_data_items
//
// [ result ] trans: nothing
//
func (v SettingVpn) GetNumDataItems() (result uint32) {
	iv, err := _I.Get(888, "SettingVpn", "get_num_data_items", 1059, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_vpn_get_num_secrets
//
// [ result ] trans: nothing
//
func (v SettingVpn) GetNumSecrets() (result uint32) {
	iv, err := _I.Get(889, "SettingVpn", "get_num_secrets", 1059, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_vpn_get_persistent
//
// [ result ] trans: nothing
//
func (v SettingVpn) GetPersistent() (result bool) {
	iv, err := _I.Get(890, "SettingVpn", "get_persistent", 1059, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_vpn_get_secret
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingVpn) GetSecret(key string) (result string) {
	iv, err := _I.Get(891, "SettingVpn", "get_secret", 1059, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.String().Copy()
	return
}

// nm_setting_vpn_get_secret_keys
//
// [ out_length ] trans: everything, dir: out
//
// [ result ] trans: container
//
func (v SettingVpn) GetSecretKeys() (result gi.CStrArray) {
	iv, err := _I.Get(892, "SettingVpn", "get_secret_keys", 1059, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_out_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_out_length}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var out_length uint32
	_ = out_length
	out_length = outArgs[0].Uint32()
	result = gi.CStrArray{P: ret.Pointer(), Len: int(out_length)}
	return
}

// nm_setting_vpn_get_service_type
//
// [ result ] trans: nothing
//
func (v SettingVpn) GetServiceType() (result string) {
	iv, err := _I.Get(893, "SettingVpn", "get_service_type", 1059, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_vpn_get_timeout
//
// [ result ] trans: nothing
//
func (v SettingVpn) GetTimeout() (result uint32) {
	iv, err := _I.Get(894, "SettingVpn", "get_timeout", 1059, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_vpn_get_user_name
//
// [ result ] trans: nothing
//
func (v SettingVpn) GetUserName() (result string) {
	iv, err := _I.Get(895, "SettingVpn", "get_user_name", 1059, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_vpn_remove_data_item
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingVpn) RemoveDataItem(key string) (result bool) {
	iv, err := _I.Get(896, "SettingVpn", "remove_data_item", 1059, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Bool()
	return
}

// nm_setting_vpn_remove_secret
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingVpn) RemoveSecret(key string) (result bool) {
	iv, err := _I.Get(897, "SettingVpn", "remove_secret", 1059, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Bool()
	return
}

// ignore GType struct SettingVpnClass

// Object SettingVxlan
type SettingVxlan struct {
	Setting
}

func WrapSettingVxlan(p unsafe.Pointer) (r SettingVxlan) { r.P = p; return }

type ISettingVxlan interface{ P_SettingVxlan() unsafe.Pointer }

func (v SettingVxlan) P_SettingVxlan() unsafe.Pointer { return v.P }
func SettingVxlanGetType() gi.GType {
	ret := _I.GetGType(134, "SettingVxlan")
	return ret
}

// nm_setting_vxlan_new
//
// [ result ] trans: everything
//
func NewSettingVxlan() (result SettingVxlan) {
	iv, err := _I.Get(898, "SettingVxlan", "new", 1061, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_vxlan_get_ageing
//
// [ result ] trans: nothing
//
func (v SettingVxlan) GetAgeing() (result uint32) {
	iv, err := _I.Get(899, "SettingVxlan", "get_ageing", 1061, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_vxlan_get_destination_port
//
// [ result ] trans: nothing
//
func (v SettingVxlan) GetDestinationPort() (result uint32) {
	iv, err := _I.Get(900, "SettingVxlan", "get_destination_port", 1061, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_vxlan_get_id
//
// [ result ] trans: nothing
//
func (v SettingVxlan) GetId() (result uint32) {
	iv, err := _I.Get(901, "SettingVxlan", "get_id", 1061, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_vxlan_get_l2_miss
//
// [ result ] trans: nothing
//
func (v SettingVxlan) GetL2Miss() (result bool) {
	iv, err := _I.Get(902, "SettingVxlan", "get_l2_miss", 1061, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_vxlan_get_l3_miss
//
// [ result ] trans: nothing
//
func (v SettingVxlan) GetL3Miss() (result bool) {
	iv, err := _I.Get(903, "SettingVxlan", "get_l3_miss", 1061, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_vxlan_get_learning
//
// [ result ] trans: nothing
//
func (v SettingVxlan) GetLearning() (result bool) {
	iv, err := _I.Get(904, "SettingVxlan", "get_learning", 1061, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_vxlan_get_limit
//
// [ result ] trans: nothing
//
func (v SettingVxlan) GetLimit() (result uint32) {
	iv, err := _I.Get(905, "SettingVxlan", "get_limit", 1061, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_vxlan_get_local
//
// [ result ] trans: nothing
//
func (v SettingVxlan) GetLocal() (result string) {
	iv, err := _I.Get(906, "SettingVxlan", "get_local", 1061, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_vxlan_get_parent
//
// [ result ] trans: nothing
//
func (v SettingVxlan) GetParent() (result string) {
	iv, err := _I.Get(907, "SettingVxlan", "get_parent", 1061, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_vxlan_get_proxy
//
// [ result ] trans: nothing
//
func (v SettingVxlan) GetProxy() (result bool) {
	iv, err := _I.Get(908, "SettingVxlan", "get_proxy", 1061, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_vxlan_get_remote
//
// [ result ] trans: nothing
//
func (v SettingVxlan) GetRemote() (result string) {
	iv, err := _I.Get(909, "SettingVxlan", "get_remote", 1061, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_vxlan_get_rsc
//
// [ result ] trans: nothing
//
func (v SettingVxlan) GetRsc() (result bool) {
	iv, err := _I.Get(910, "SettingVxlan", "get_rsc", 1061, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_vxlan_get_source_port_max
//
// [ result ] trans: nothing
//
func (v SettingVxlan) GetSourcePortMax() (result uint32) {
	iv, err := _I.Get(911, "SettingVxlan", "get_source_port_max", 1061, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_vxlan_get_source_port_min
//
// [ result ] trans: nothing
//
func (v SettingVxlan) GetSourcePortMin() (result uint32) {
	iv, err := _I.Get(912, "SettingVxlan", "get_source_port_min", 1061, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_vxlan_get_tos
//
// [ result ] trans: nothing
//
func (v SettingVxlan) GetTos() (result uint32) {
	iv, err := _I.Get(913, "SettingVxlan", "get_tos", 1061, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_vxlan_get_ttl
//
// [ result ] trans: nothing
//
func (v SettingVxlan) GetTtl() (result uint32) {
	iv, err := _I.Get(914, "SettingVxlan", "get_ttl", 1061, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// ignore GType struct SettingVxlanClass

// Object SettingWimax
type SettingWimax struct {
	Setting
}

func WrapSettingWimax(p unsafe.Pointer) (r SettingWimax) { r.P = p; return }

type ISettingWimax interface{ P_SettingWimax() unsafe.Pointer }

func (v SettingWimax) P_SettingWimax() unsafe.Pointer { return v.P }
func SettingWimaxGetType() gi.GType {
	ret := _I.GetGType(135, "SettingWimax")
	return ret
}

// Deprecated
//
// nm_setting_wimax_new
//
// [ result ] trans: everything
//
func NewSettingWimax() (result SettingWimax) {
	iv, err := _I.Get(915, "SettingWimax", "new", 1063, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// nm_setting_wimax_get_mac_address
//
// [ result ] trans: nothing
//
func (v SettingWimax) GetMacAddress() (result string) {
	iv, err := _I.Get(916, "SettingWimax", "get_mac_address", 1063, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// Deprecated
//
// nm_setting_wimax_get_network_name
//
// [ result ] trans: nothing
//
func (v SettingWimax) GetNetworkName() (result string) {
	iv, err := _I.Get(917, "SettingWimax", "get_network_name", 1063, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// ignore GType struct SettingWimaxClass

// Object SettingWired
type SettingWired struct {
	Setting
}

func WrapSettingWired(p unsafe.Pointer) (r SettingWired) { r.P = p; return }

type ISettingWired interface{ P_SettingWired() unsafe.Pointer }

func (v SettingWired) P_SettingWired() unsafe.Pointer { return v.P }
func SettingWiredGetType() gi.GType {
	ret := _I.GetGType(136, "SettingWired")
	return ret
}

// nm_setting_wired_new
//
// [ result ] trans: everything
//
func NewSettingWired() (result SettingWired) {
	iv, err := _I.Get(918, "SettingWired", "new", 1065, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_wired_add_mac_blacklist_item
//
// [ mac ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingWired) AddMacBlacklistItem(mac string) (result bool) {
	iv, err := _I.Get(919, "SettingWired", "add_mac_blacklist_item", 1065, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_mac := gi.CString(mac)
	arg_v := gi.NewPointerArgument(v.P)
	arg_mac := gi.NewStringArgument(c_mac)
	args := []gi.Argument{arg_v, arg_mac}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_mac)
	result = ret.Bool()
	return
}

// nm_setting_wired_add_s390_option
//
// [ key ] trans: nothing
//
// [ value ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingWired) AddS390Option(key string, value string) (result bool) {
	iv, err := _I.Get(920, "SettingWired", "add_s390_option", 1065, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	c_value := gi.CString(value)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_value := gi.NewStringArgument(c_value)
	args := []gi.Argument{arg_v, arg_key, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	gi.Free(c_value)
	result = ret.Bool()
	return
}

// nm_setting_wired_clear_mac_blacklist_items
//
func (v SettingWired) ClearMacBlacklistItems() {
	iv, err := _I.Get(921, "SettingWired", "clear_mac_blacklist_items", 1065, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_setting_wired_get_auto_negotiate
//
// [ result ] trans: nothing
//
func (v SettingWired) GetAutoNegotiate() (result bool) {
	iv, err := _I.Get(922, "SettingWired", "get_auto_negotiate", 1065, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_wired_get_cloned_mac_address
//
// [ result ] trans: nothing
//
func (v SettingWired) GetClonedMacAddress() (result string) {
	iv, err := _I.Get(923, "SettingWired", "get_cloned_mac_address", 1065, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wired_get_duplex
//
// [ result ] trans: nothing
//
func (v SettingWired) GetDuplex() (result string) {
	iv, err := _I.Get(924, "SettingWired", "get_duplex", 1065, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wired_get_generate_mac_address_mask
//
// [ result ] trans: nothing
//
func (v SettingWired) GetGenerateMacAddressMask() (result string) {
	iv, err := _I.Get(925, "SettingWired", "get_generate_mac_address_mask", 1065, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wired_get_mac_address
//
// [ result ] trans: nothing
//
func (v SettingWired) GetMacAddress() (result string) {
	iv, err := _I.Get(926, "SettingWired", "get_mac_address", 1065, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wired_get_mac_address_blacklist
//
// [ result ] trans: nothing
//
func (v SettingWired) GetMacAddressBlacklist() (result gi.CStrArray) {
	iv, err := _I.Get(927, "SettingWired", "get_mac_address_blacklist", 1065, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// nm_setting_wired_get_mac_blacklist_item
//
// [ idx ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingWired) GetMacBlacklistItem(idx uint32) (result string) {
	iv, err := _I.Get(928, "SettingWired", "get_mac_blacklist_item", 1065, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wired_get_mtu
//
// [ result ] trans: nothing
//
func (v SettingWired) GetMtu() (result uint32) {
	iv, err := _I.Get(929, "SettingWired", "get_mtu", 1065, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_wired_get_num_mac_blacklist_items
//
// [ result ] trans: nothing
//
func (v SettingWired) GetNumMacBlacklistItems() (result uint32) {
	iv, err := _I.Get(930, "SettingWired", "get_num_mac_blacklist_items", 1065, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_wired_get_num_s390_options
//
// [ result ] trans: nothing
//
func (v SettingWired) GetNumS390Options() (result uint32) {
	iv, err := _I.Get(931, "SettingWired", "get_num_s390_options", 1065, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_wired_get_port
//
// [ result ] trans: nothing
//
func (v SettingWired) GetPort() (result string) {
	iv, err := _I.Get(932, "SettingWired", "get_port", 1065, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wired_get_s390_nettype
//
// [ result ] trans: nothing
//
func (v SettingWired) GetS390Nettype() (result string) {
	iv, err := _I.Get(933, "SettingWired", "get_s390_nettype", 1065, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wired_get_s390_option
//
// [ idx ] trans: nothing
//
// [ out_key ] trans: nothing, dir: out
//
// [ out_value ] trans: nothing, dir: out
//
// [ result ] trans: nothing
//
func (v SettingWired) GetS390Option(idx uint32) (result bool, out_key string, out_value string) {
	iv, err := _I.Get(934, "SettingWired", "get_s390_option", 1065, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	arg_out_key := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_out_value := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_idx, arg_out_key, arg_out_value}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	out_key = outArgs[0].String().Copy()
	out_value = outArgs[1].String().Copy()
	result = ret.Bool()
	return
}

// nm_setting_wired_get_s390_option_by_key
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingWired) GetS390OptionByKey(key string) (result string) {
	iv, err := _I.Get(935, "SettingWired", "get_s390_option_by_key", 1065, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.String().Copy()
	return
}

// nm_setting_wired_get_s390_subchannels
//
// [ result ] trans: nothing
//
func (v SettingWired) GetS390Subchannels() (result gi.CStrArray) {
	iv, err := _I.Get(936, "SettingWired", "get_s390_subchannels", 1065, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// nm_setting_wired_get_speed
//
// [ result ] trans: nothing
//
func (v SettingWired) GetSpeed() (result uint32) {
	iv, err := _I.Get(937, "SettingWired", "get_speed", 1065, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_wired_get_valid_s390_options
//
// [ result ] trans: nothing
//
func (v SettingWired) GetValidS390Options() (result gi.CStrArray) {
	iv, err := _I.Get(938, "SettingWired", "get_valid_s390_options", 1065, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// nm_setting_wired_get_wake_on_lan
//
// [ result ] trans: nothing
//
func (v SettingWired) GetWakeOnLan() (result SettingWiredWakeOnLanFlags) {
	iv, err := _I.Get(939, "SettingWired", "get_wake_on_lan", 1065, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingWiredWakeOnLanFlags(ret.Int())
	return
}

// nm_setting_wired_get_wake_on_lan_password
//
// [ result ] trans: nothing
//
func (v SettingWired) GetWakeOnLanPassword() (result string) {
	iv, err := _I.Get(940, "SettingWired", "get_wake_on_lan_password", 1065, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wired_remove_mac_blacklist_item
//
// [ idx ] trans: nothing
//
func (v SettingWired) RemoveMacBlacklistItem(idx uint32) {
	iv, err := _I.Get(941, "SettingWired", "remove_mac_blacklist_item", 1065, 23, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	iv.Call(args, nil, nil)
}

// nm_setting_wired_remove_mac_blacklist_item_by_value
//
// [ mac ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingWired) RemoveMacBlacklistItemByValue(mac string) (result bool) {
	iv, err := _I.Get(942, "SettingWired", "remove_mac_blacklist_item_by_value", 1065, 24, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_mac := gi.CString(mac)
	arg_v := gi.NewPointerArgument(v.P)
	arg_mac := gi.NewStringArgument(c_mac)
	args := []gi.Argument{arg_v, arg_mac}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_mac)
	result = ret.Bool()
	return
}

// nm_setting_wired_remove_s390_option
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingWired) RemoveS390Option(key string) (result bool) {
	iv, err := _I.Get(943, "SettingWired", "remove_s390_option", 1065, 25, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Bool()
	return
}

// ignore GType struct SettingWiredClass

// Flags SettingWiredWakeOnLan
type SettingWiredWakeOnLanFlags int

const (
	SettingWiredWakeOnLanPhy       SettingWiredWakeOnLanFlags = 2
	SettingWiredWakeOnLanUnicast   SettingWiredWakeOnLanFlags = 4
	SettingWiredWakeOnLanMulticast SettingWiredWakeOnLanFlags = 8
	SettingWiredWakeOnLanBroadcast SettingWiredWakeOnLanFlags = 16
	SettingWiredWakeOnLanArp       SettingWiredWakeOnLanFlags = 32
	SettingWiredWakeOnLanMagic     SettingWiredWakeOnLanFlags = 64
	SettingWiredWakeOnLanDefault   SettingWiredWakeOnLanFlags = 1
	SettingWiredWakeOnLanIgnore    SettingWiredWakeOnLanFlags = 32768
)

func SettingWiredWakeOnLanGetType() gi.GType {
	ret := _I.GetGType(137, "SettingWiredWakeOnLan")
	return ret
}

// Object SettingWireless
type SettingWireless struct {
	Setting
}

func WrapSettingWireless(p unsafe.Pointer) (r SettingWireless) { r.P = p; return }

type ISettingWireless interface{ P_SettingWireless() unsafe.Pointer }

func (v SettingWireless) P_SettingWireless() unsafe.Pointer { return v.P }
func SettingWirelessGetType() gi.GType {
	ret := _I.GetGType(138, "SettingWireless")
	return ret
}

// nm_setting_wireless_new
//
// [ result ] trans: everything
//
func NewSettingWireless() (result SettingWireless) {
	iv, err := _I.Get(944, "SettingWireless", "new", 1068, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_wireless_add_mac_blacklist_item
//
// [ mac ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingWireless) AddMacBlacklistItem(mac string) (result bool) {
	iv, err := _I.Get(945, "SettingWireless", "add_mac_blacklist_item", 1068, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_mac := gi.CString(mac)
	arg_v := gi.NewPointerArgument(v.P)
	arg_mac := gi.NewStringArgument(c_mac)
	args := []gi.Argument{arg_v, arg_mac}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_mac)
	result = ret.Bool()
	return
}

// nm_setting_wireless_add_seen_bssid
//
// [ bssid ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingWireless) AddSeenBssid(bssid string) (result bool) {
	iv, err := _I.Get(946, "SettingWireless", "add_seen_bssid", 1068, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_bssid := gi.CString(bssid)
	arg_v := gi.NewPointerArgument(v.P)
	arg_bssid := gi.NewStringArgument(c_bssid)
	args := []gi.Argument{arg_v, arg_bssid}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_bssid)
	result = ret.Bool()
	return
}

// nm_setting_wireless_ap_security_compatible
//
// [ s_wireless_sec ] trans: nothing
//
// [ ap_flags ] trans: nothing
//
// [ ap_wpa ] trans: nothing
//
// [ ap_rsn ] trans: nothing
//
// [ ap_mode ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingWireless) ApSecurityCompatible(s_wireless_sec ISettingWirelessSecurity, ap_flags NM80211ApFlags, ap_wpa NM80211ApSecurityFlags, ap_rsn NM80211ApSecurityFlags, ap_mode NM80211ModeEnum) (result bool) {
	iv, err := _I.Get(947, "SettingWireless", "ap_security_compatible", 1068, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if s_wireless_sec != nil {
		tmp = s_wireless_sec.P_SettingWirelessSecurity()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_s_wireless_sec := gi.NewPointerArgument(tmp)
	arg_ap_flags := gi.NewIntArgument(int(ap_flags))
	arg_ap_wpa := gi.NewIntArgument(int(ap_wpa))
	arg_ap_rsn := gi.NewIntArgument(int(ap_rsn))
	arg_ap_mode := gi.NewIntArgument(int(ap_mode))
	args := []gi.Argument{arg_v, arg_s_wireless_sec, arg_ap_flags, arg_ap_wpa, arg_ap_rsn, arg_ap_mode}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_wireless_clear_mac_blacklist_items
//
func (v SettingWireless) ClearMacBlacklistItems() {
	iv, err := _I.Get(948, "SettingWireless", "clear_mac_blacklist_items", 1068, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_setting_wireless_get_band
//
// [ result ] trans: nothing
//
func (v SettingWireless) GetBand() (result string) {
	iv, err := _I.Get(949, "SettingWireless", "get_band", 1068, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wireless_get_bssid
//
// [ result ] trans: nothing
//
func (v SettingWireless) GetBssid() (result string) {
	iv, err := _I.Get(950, "SettingWireless", "get_bssid", 1068, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wireless_get_channel
//
// [ result ] trans: nothing
//
func (v SettingWireless) GetChannel() (result uint32) {
	iv, err := _I.Get(951, "SettingWireless", "get_channel", 1068, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_wireless_get_cloned_mac_address
//
// [ result ] trans: nothing
//
func (v SettingWireless) GetClonedMacAddress() (result string) {
	iv, err := _I.Get(952, "SettingWireless", "get_cloned_mac_address", 1068, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wireless_get_generate_mac_address_mask
//
// [ result ] trans: nothing
//
func (v SettingWireless) GetGenerateMacAddressMask() (result string) {
	iv, err := _I.Get(953, "SettingWireless", "get_generate_mac_address_mask", 1068, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wireless_get_hidden
//
// [ result ] trans: nothing
//
func (v SettingWireless) GetHidden() (result bool) {
	iv, err := _I.Get(954, "SettingWireless", "get_hidden", 1068, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_setting_wireless_get_mac_address
//
// [ result ] trans: nothing
//
func (v SettingWireless) GetMacAddress() (result string) {
	iv, err := _I.Get(955, "SettingWireless", "get_mac_address", 1068, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wireless_get_mac_address_blacklist
//
// [ result ] trans: nothing
//
func (v SettingWireless) GetMacAddressBlacklist() (result gi.CStrArray) {
	iv, err := _I.Get(956, "SettingWireless", "get_mac_address_blacklist", 1068, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// nm_setting_wireless_get_mac_address_randomization
//
// [ result ] trans: nothing
//
func (v SettingWireless) GetMacAddressRandomization() (result SettingMacRandomizationEnum) {
	iv, err := _I.Get(957, "SettingWireless", "get_mac_address_randomization", 1068, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingMacRandomizationEnum(ret.Int())
	return
}

// nm_setting_wireless_get_mac_blacklist_item
//
// [ idx ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingWireless) GetMacBlacklistItem(idx uint32) (result string) {
	iv, err := _I.Get(958, "SettingWireless", "get_mac_blacklist_item", 1068, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wireless_get_mode
//
// [ result ] trans: nothing
//
func (v SettingWireless) GetMode() (result string) {
	iv, err := _I.Get(959, "SettingWireless", "get_mode", 1068, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wireless_get_mtu
//
// [ result ] trans: nothing
//
func (v SettingWireless) GetMtu() (result uint32) {
	iv, err := _I.Get(960, "SettingWireless", "get_mtu", 1068, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_wireless_get_num_mac_blacklist_items
//
// [ result ] trans: nothing
//
func (v SettingWireless) GetNumMacBlacklistItems() (result uint32) {
	iv, err := _I.Get(961, "SettingWireless", "get_num_mac_blacklist_items", 1068, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_wireless_get_num_seen_bssids
//
// [ result ] trans: nothing
//
func (v SettingWireless) GetNumSeenBssids() (result uint32) {
	iv, err := _I.Get(962, "SettingWireless", "get_num_seen_bssids", 1068, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_wireless_get_powersave
//
// [ result ] trans: nothing
//
func (v SettingWireless) GetPowersave() (result uint32) {
	iv, err := _I.Get(963, "SettingWireless", "get_powersave", 1068, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_wireless_get_rate
//
// [ result ] trans: nothing
//
func (v SettingWireless) GetRate() (result uint32) {
	iv, err := _I.Get(964, "SettingWireless", "get_rate", 1068, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_wireless_get_seen_bssid
//
// [ i ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingWireless) GetSeenBssid(i uint32) (result string) {
	iv, err := _I.Get(965, "SettingWireless", "get_seen_bssid", 1068, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_i := gi.NewUint32Argument(i)
	args := []gi.Argument{arg_v, arg_i}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wireless_get_ssid
//
// [ result ] trans: nothing
//
func (v SettingWireless) GetSsid() (result g.Bytes) {
	iv, err := _I.Get(966, "SettingWireless", "get_ssid", 1068, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_wireless_get_tx_power
//
// [ result ] trans: nothing
//
func (v SettingWireless) GetTxPower() (result uint32) {
	iv, err := _I.Get(967, "SettingWireless", "get_tx_power", 1068, 23, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_wireless_get_wake_on_wlan
//
// [ result ] trans: nothing
//
func (v SettingWireless) GetWakeOnWlan() (result SettingWirelessWakeOnWLanFlags) {
	iv, err := _I.Get(968, "SettingWireless", "get_wake_on_wlan", 1068, 24, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingWirelessWakeOnWLanFlags(ret.Int())
	return
}

// nm_setting_wireless_remove_mac_blacklist_item
//
// [ idx ] trans: nothing
//
func (v SettingWireless) RemoveMacBlacklistItem(idx uint32) {
	iv, err := _I.Get(969, "SettingWireless", "remove_mac_blacklist_item", 1068, 25, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	iv.Call(args, nil, nil)
}

// nm_setting_wireless_remove_mac_blacklist_item_by_value
//
// [ mac ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingWireless) RemoveMacBlacklistItemByValue(mac string) (result bool) {
	iv, err := _I.Get(970, "SettingWireless", "remove_mac_blacklist_item_by_value", 1068, 26, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_mac := gi.CString(mac)
	arg_v := gi.NewPointerArgument(v.P)
	arg_mac := gi.NewStringArgument(c_mac)
	args := []gi.Argument{arg_v, arg_mac}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_mac)
	result = ret.Bool()
	return
}

// ignore GType struct SettingWirelessClass

// Enum SettingWirelessPowersave
type SettingWirelessPowersaveEnum int

const (
	SettingWirelessPowersaveDefault SettingWirelessPowersaveEnum = 0
	SettingWirelessPowersaveIgnore  SettingWirelessPowersaveEnum = 1
	SettingWirelessPowersaveDisable SettingWirelessPowersaveEnum = 2
	SettingWirelessPowersaveEnable  SettingWirelessPowersaveEnum = 3
)

func SettingWirelessPowersaveGetType() gi.GType {
	ret := _I.GetGType(139, "SettingWirelessPowersave")
	return ret
}

// Object SettingWirelessSecurity
type SettingWirelessSecurity struct {
	Setting
}

func WrapSettingWirelessSecurity(p unsafe.Pointer) (r SettingWirelessSecurity) { r.P = p; return }

type ISettingWirelessSecurity interface{ P_SettingWirelessSecurity() unsafe.Pointer }

func (v SettingWirelessSecurity) P_SettingWirelessSecurity() unsafe.Pointer { return v.P }
func SettingWirelessSecurityGetType() gi.GType {
	ret := _I.GetGType(140, "SettingWirelessSecurity")
	return ret
}

// nm_setting_wireless_security_new
//
// [ result ] trans: everything
//
func NewSettingWirelessSecurity() (result SettingWirelessSecurity) {
	iv, err := _I.Get(971, "SettingWirelessSecurity", "new", 1071, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_wireless_security_add_group
//
// [ group ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) AddGroup(group string) (result bool) {
	iv, err := _I.Get(972, "SettingWirelessSecurity", "add_group", 1071, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_group := gi.CString(group)
	arg_v := gi.NewPointerArgument(v.P)
	arg_group := gi.NewStringArgument(c_group)
	args := []gi.Argument{arg_v, arg_group}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_group)
	result = ret.Bool()
	return
}

// nm_setting_wireless_security_add_pairwise
//
// [ pairwise ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) AddPairwise(pairwise string) (result bool) {
	iv, err := _I.Get(973, "SettingWirelessSecurity", "add_pairwise", 1071, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_pairwise := gi.CString(pairwise)
	arg_v := gi.NewPointerArgument(v.P)
	arg_pairwise := gi.NewStringArgument(c_pairwise)
	args := []gi.Argument{arg_v, arg_pairwise}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_pairwise)
	result = ret.Bool()
	return
}

// nm_setting_wireless_security_add_proto
//
// [ proto ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) AddProto(proto string) (result bool) {
	iv, err := _I.Get(974, "SettingWirelessSecurity", "add_proto", 1071, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_proto := gi.CString(proto)
	arg_v := gi.NewPointerArgument(v.P)
	arg_proto := gi.NewStringArgument(c_proto)
	args := []gi.Argument{arg_v, arg_proto}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_proto)
	result = ret.Bool()
	return
}

// nm_setting_wireless_security_clear_groups
//
func (v SettingWirelessSecurity) ClearGroups() {
	iv, err := _I.Get(975, "SettingWirelessSecurity", "clear_groups", 1071, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_setting_wireless_security_clear_pairwise
//
func (v SettingWirelessSecurity) ClearPairwise() {
	iv, err := _I.Get(976, "SettingWirelessSecurity", "clear_pairwise", 1071, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_setting_wireless_security_clear_protos
//
func (v SettingWirelessSecurity) ClearProtos() {
	iv, err := _I.Get(977, "SettingWirelessSecurity", "clear_protos", 1071, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_setting_wireless_security_get_auth_alg
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) GetAuthAlg() (result string) {
	iv, err := _I.Get(978, "SettingWirelessSecurity", "get_auth_alg", 1071, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wireless_security_get_fils
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) GetFils() (result SettingWirelessSecurityFilsEnum) {
	iv, err := _I.Get(979, "SettingWirelessSecurity", "get_fils", 1071, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingWirelessSecurityFilsEnum(ret.Int())
	return
}

// nm_setting_wireless_security_get_group
//
// [ i ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) GetGroup(i uint32) (result string) {
	iv, err := _I.Get(980, "SettingWirelessSecurity", "get_group", 1071, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_i := gi.NewUint32Argument(i)
	args := []gi.Argument{arg_v, arg_i}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wireless_security_get_key_mgmt
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) GetKeyMgmt() (result string) {
	iv, err := _I.Get(981, "SettingWirelessSecurity", "get_key_mgmt", 1071, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wireless_security_get_leap_password
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) GetLeapPassword() (result string) {
	iv, err := _I.Get(982, "SettingWirelessSecurity", "get_leap_password", 1071, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wireless_security_get_leap_password_flags
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) GetLeapPasswordFlags() (result SettingSecretFlags) {
	iv, err := _I.Get(983, "SettingWirelessSecurity", "get_leap_password_flags", 1071, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingSecretFlags(ret.Int())
	return
}

// nm_setting_wireless_security_get_leap_username
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) GetLeapUsername() (result string) {
	iv, err := _I.Get(984, "SettingWirelessSecurity", "get_leap_username", 1071, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wireless_security_get_num_groups
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) GetNumGroups() (result uint32) {
	iv, err := _I.Get(985, "SettingWirelessSecurity", "get_num_groups", 1071, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_wireless_security_get_num_pairwise
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) GetNumPairwise() (result uint32) {
	iv, err := _I.Get(986, "SettingWirelessSecurity", "get_num_pairwise", 1071, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_wireless_security_get_num_protos
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) GetNumProtos() (result uint32) {
	iv, err := _I.Get(987, "SettingWirelessSecurity", "get_num_protos", 1071, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_wireless_security_get_pairwise
//
// [ i ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) GetPairwise(i uint32) (result string) {
	iv, err := _I.Get(988, "SettingWirelessSecurity", "get_pairwise", 1071, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_i := gi.NewUint32Argument(i)
	args := []gi.Argument{arg_v, arg_i}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wireless_security_get_pmf
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) GetPmf() (result SettingWirelessSecurityPmfEnum) {
	iv, err := _I.Get(989, "SettingWirelessSecurity", "get_pmf", 1071, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingWirelessSecurityPmfEnum(ret.Int())
	return
}

// nm_setting_wireless_security_get_proto
//
// [ i ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) GetProto(i uint32) (result string) {
	iv, err := _I.Get(990, "SettingWirelessSecurity", "get_proto", 1071, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_i := gi.NewUint32Argument(i)
	args := []gi.Argument{arg_v, arg_i}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wireless_security_get_psk
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) GetPsk() (result string) {
	iv, err := _I.Get(991, "SettingWirelessSecurity", "get_psk", 1071, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wireless_security_get_psk_flags
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) GetPskFlags() (result SettingSecretFlags) {
	iv, err := _I.Get(992, "SettingWirelessSecurity", "get_psk_flags", 1071, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingSecretFlags(ret.Int())
	return
}

// nm_setting_wireless_security_get_wep_key
//
// [ idx ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) GetWepKey(idx uint32) (result string) {
	iv, err := _I.Get(993, "SettingWirelessSecurity", "get_wep_key", 1071, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	args := []gi.Argument{arg_v, arg_idx}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wireless_security_get_wep_key_flags
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) GetWepKeyFlags() (result SettingSecretFlags) {
	iv, err := _I.Get(994, "SettingWirelessSecurity", "get_wep_key_flags", 1071, 23, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingSecretFlags(ret.Int())
	return
}

// nm_setting_wireless_security_get_wep_key_type
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) GetWepKeyType() (result WepKeyTypeEnum) {
	iv, err := _I.Get(995, "SettingWirelessSecurity", "get_wep_key_type", 1071, 24, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = WepKeyTypeEnum(ret.Int())
	return
}

// nm_setting_wireless_security_get_wep_tx_keyidx
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) GetWepTxKeyidx() (result uint32) {
	iv, err := _I.Get(996, "SettingWirelessSecurity", "get_wep_tx_keyidx", 1071, 25, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_setting_wireless_security_get_wps_method
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) GetWpsMethod() (result SettingWirelessSecurityWpsMethodEnum) {
	iv, err := _I.Get(997, "SettingWirelessSecurity", "get_wps_method", 1071, 26, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SettingWirelessSecurityWpsMethodEnum(ret.Int())
	return
}

// nm_setting_wireless_security_remove_group
//
// [ i ] trans: nothing
//
func (v SettingWirelessSecurity) RemoveGroup(i uint32) {
	iv, err := _I.Get(998, "SettingWirelessSecurity", "remove_group", 1071, 27, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_i := gi.NewUint32Argument(i)
	args := []gi.Argument{arg_v, arg_i}
	iv.Call(args, nil, nil)
}

// nm_setting_wireless_security_remove_group_by_value
//
// [ group ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) RemoveGroupByValue(group string) (result bool) {
	iv, err := _I.Get(999, "SettingWirelessSecurity", "remove_group_by_value", 1071, 28, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_group := gi.CString(group)
	arg_v := gi.NewPointerArgument(v.P)
	arg_group := gi.NewStringArgument(c_group)
	args := []gi.Argument{arg_v, arg_group}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_group)
	result = ret.Bool()
	return
}

// nm_setting_wireless_security_remove_pairwise
//
// [ i ] trans: nothing
//
func (v SettingWirelessSecurity) RemovePairwise(i uint32) {
	iv, err := _I.Get(1000, "SettingWirelessSecurity", "remove_pairwise", 1071, 29, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_i := gi.NewUint32Argument(i)
	args := []gi.Argument{arg_v, arg_i}
	iv.Call(args, nil, nil)
}

// nm_setting_wireless_security_remove_pairwise_by_value
//
// [ pairwise ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) RemovePairwiseByValue(pairwise string) (result bool) {
	iv, err := _I.Get(1001, "SettingWirelessSecurity", "remove_pairwise_by_value", 1071, 30, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_pairwise := gi.CString(pairwise)
	arg_v := gi.NewPointerArgument(v.P)
	arg_pairwise := gi.NewStringArgument(c_pairwise)
	args := []gi.Argument{arg_v, arg_pairwise}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_pairwise)
	result = ret.Bool()
	return
}

// nm_setting_wireless_security_remove_proto
//
// [ i ] trans: nothing
//
func (v SettingWirelessSecurity) RemoveProto(i uint32) {
	iv, err := _I.Get(1002, "SettingWirelessSecurity", "remove_proto", 1071, 31, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_i := gi.NewUint32Argument(i)
	args := []gi.Argument{arg_v, arg_i}
	iv.Call(args, nil, nil)
}

// nm_setting_wireless_security_remove_proto_by_value
//
// [ proto ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingWirelessSecurity) RemoveProtoByValue(proto string) (result bool) {
	iv, err := _I.Get(1003, "SettingWirelessSecurity", "remove_proto_by_value", 1071, 32, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_proto := gi.CString(proto)
	arg_v := gi.NewPointerArgument(v.P)
	arg_proto := gi.NewStringArgument(c_proto)
	args := []gi.Argument{arg_v, arg_proto}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_proto)
	result = ret.Bool()
	return
}

// nm_setting_wireless_security_set_wep_key
//
// [ idx ] trans: nothing
//
// [ key ] trans: nothing
//
func (v SettingWirelessSecurity) SetWepKey(idx uint32, key string) {
	iv, err := _I.Get(1004, "SettingWirelessSecurity", "set_wep_key", 1071, 33, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_idx := gi.NewUint32Argument(idx)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_idx, arg_key}
	iv.Call(args, nil, nil)
	gi.Free(c_key)
}

// ignore GType struct SettingWirelessSecurityClass

// Enum SettingWirelessSecurityFils
type SettingWirelessSecurityFilsEnum int

const (
	SettingWirelessSecurityFilsDefault  SettingWirelessSecurityFilsEnum = 0
	SettingWirelessSecurityFilsDisable  SettingWirelessSecurityFilsEnum = 1
	SettingWirelessSecurityFilsOptional SettingWirelessSecurityFilsEnum = 2
	SettingWirelessSecurityFilsRequired SettingWirelessSecurityFilsEnum = 3
)

func SettingWirelessSecurityFilsGetType() gi.GType {
	ret := _I.GetGType(141, "SettingWirelessSecurityFils")
	return ret
}

// Enum SettingWirelessSecurityPmf
type SettingWirelessSecurityPmfEnum int

const (
	SettingWirelessSecurityPmfDefault  SettingWirelessSecurityPmfEnum = 0
	SettingWirelessSecurityPmfDisable  SettingWirelessSecurityPmfEnum = 1
	SettingWirelessSecurityPmfOptional SettingWirelessSecurityPmfEnum = 2
	SettingWirelessSecurityPmfRequired SettingWirelessSecurityPmfEnum = 3
)

func SettingWirelessSecurityPmfGetType() gi.GType {
	ret := _I.GetGType(142, "SettingWirelessSecurityPmf")
	return ret
}

// Enum SettingWirelessSecurityWpsMethod
type SettingWirelessSecurityWpsMethodEnum int

const (
	SettingWirelessSecurityWpsMethodDefault  SettingWirelessSecurityWpsMethodEnum = 0
	SettingWirelessSecurityWpsMethodDisabled SettingWirelessSecurityWpsMethodEnum = 1
	SettingWirelessSecurityWpsMethodAuto     SettingWirelessSecurityWpsMethodEnum = 2
	SettingWirelessSecurityWpsMethodPbc      SettingWirelessSecurityWpsMethodEnum = 4
	SettingWirelessSecurityWpsMethodPin      SettingWirelessSecurityWpsMethodEnum = 8
)

func SettingWirelessSecurityWpsMethodGetType() gi.GType {
	ret := _I.GetGType(143, "SettingWirelessSecurityWpsMethod")
	return ret
}

// Flags SettingWirelessWakeOnWLan
type SettingWirelessWakeOnWLanFlags int

const (
	SettingWirelessWakeOnWLanAny                SettingWirelessWakeOnWLanFlags = 2
	SettingWirelessWakeOnWLanDisconnect         SettingWirelessWakeOnWLanFlags = 4
	SettingWirelessWakeOnWLanMagic              SettingWirelessWakeOnWLanFlags = 8
	SettingWirelessWakeOnWLanGtkRekeyFailure    SettingWirelessWakeOnWLanFlags = 16
	SettingWirelessWakeOnWLanEapIdentityRequest SettingWirelessWakeOnWLanFlags = 32
	SettingWirelessWakeOnWLan4wayHandshake      SettingWirelessWakeOnWLanFlags = 64
	SettingWirelessWakeOnWLanRfkillRelease      SettingWirelessWakeOnWLanFlags = 128
	SettingWirelessWakeOnWLanTcp                SettingWirelessWakeOnWLanFlags = 256
	SettingWirelessWakeOnWLanDefault            SettingWirelessWakeOnWLanFlags = 1
	SettingWirelessWakeOnWLanIgnore             SettingWirelessWakeOnWLanFlags = 32768
)

func SettingWirelessWakeOnWLanGetType() gi.GType {
	ret := _I.GetGType(144, "SettingWirelessWakeOnWLan")
	return ret
}

// Object SettingWpan
type SettingWpan struct {
	Setting
}

func WrapSettingWpan(p unsafe.Pointer) (r SettingWpan) { r.P = p; return }

type ISettingWpan interface{ P_SettingWpan() unsafe.Pointer }

func (v SettingWpan) P_SettingWpan() unsafe.Pointer { return v.P }
func SettingWpanGetType() gi.GType {
	ret := _I.GetGType(145, "SettingWpan")
	return ret
}

// nm_setting_wpan_new
//
// [ result ] trans: everything
//
func NewSettingWpan() (result SettingWpan) {
	iv, err := _I.Get(1005, "SettingWpan", "new", 1077, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_setting_wpan_get_mac_address
//
// [ result ] trans: nothing
//
func (v SettingWpan) GetMacAddress() (result string) {
	iv, err := _I.Get(1006, "SettingWpan", "get_mac_address", 1077, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_setting_wpan_get_pan_id
//
// [ result ] trans: nothing
//
func (v SettingWpan) GetPanId() (result uint16) {
	iv, err := _I.Get(1007, "SettingWpan", "get_pan_id", 1077, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint16()
	return
}

// nm_setting_wpan_get_short_address
//
// [ result ] trans: nothing
//
func (v SettingWpan) GetShortAddress() (result uint16) {
	iv, err := _I.Get(1008, "SettingWpan", "get_short_address", 1077, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint16()
	return
}

// ignore GType struct SettingWpanClass

// Flags SettingsConnectionFlags
type SettingsConnectionFlags int

const (
	SettingsConnectionFlagsNone        SettingsConnectionFlags = 0
	SettingsConnectionFlagsUnsaved     SettingsConnectionFlags = 1
	SettingsConnectionFlagsNmGenerated SettingsConnectionFlags = 2
	SettingsConnectionFlagsVolatile    SettingsConnectionFlags = 4
)

func SettingsConnectionFlagsGetType() gi.GType {
	ret := _I.GetGType(146, "SettingsConnectionFlags")
	return ret
}

// Enum SettingsError
type SettingsErrorEnum int

const (
	SettingsErrorFailed             SettingsErrorEnum = 0
	SettingsErrorPermissiondenied   SettingsErrorEnum = 1
	SettingsErrorNotsupported       SettingsErrorEnum = 2
	SettingsErrorInvalidconnection  SettingsErrorEnum = 3
	SettingsErrorReadonlyconnection SettingsErrorEnum = 4
	SettingsErrorUuidexists         SettingsErrorEnum = 5
	SettingsErrorInvalidhostname    SettingsErrorEnum = 6
	SettingsErrorInvalidarguments   SettingsErrorEnum = 7
)

func SettingsErrorGetType() gi.GType {
	ret := _I.GetGType(147, "SettingsError")
	return ret
}

// Flags SettingsUpdate2Flags
type SettingsUpdate2Flags int

const (
	SettingsUpdate2FlagsNone             SettingsUpdate2Flags = 0
	SettingsUpdate2FlagsToDisk           SettingsUpdate2Flags = 1
	SettingsUpdate2FlagsInMemory         SettingsUpdate2Flags = 2
	SettingsUpdate2FlagsInMemoryDetached SettingsUpdate2Flags = 4
	SettingsUpdate2FlagsInMemoryOnly     SettingsUpdate2Flags = 8
	SettingsUpdate2FlagsVolatile         SettingsUpdate2Flags = 16
	SettingsUpdate2FlagsBlockAutoconnect SettingsUpdate2Flags = 32
)

func SettingsUpdate2FlagsGetType() gi.GType {
	ret := _I.GetGType(148, "SettingsUpdate2Flags")
	return ret
}

// Object SimpleConnection
type SimpleConnection struct {
	ConnectionIfc
	g.Object
}

func WrapSimpleConnection(p unsafe.Pointer) (r SimpleConnection) { r.P = p; return }

type ISimpleConnection interface{ P_SimpleConnection() unsafe.Pointer }

func (v SimpleConnection) P_SimpleConnection() unsafe.Pointer { return v.P }
func (v SimpleConnection) P_Connection() unsafe.Pointer       { return v.P }
func SimpleConnectionGetType() gi.GType {
	ret := _I.GetGType(149, "SimpleConnection")
	return ret
}

// nm_simple_connection_new
//
// [ result ] trans: everything
//
func SimpleConnectionNew1() (result Connection) {
	iv, err := _I.Get(1009, "SimpleConnection", "new", 1082, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_simple_connection_new_clone
//
// [ connection ] trans: nothing
//
// [ result ] trans: everything
//
func SimpleConnectionNewClone1(connection IConnection) (result Connection) {
	iv, err := _I.Get(1010, "SimpleConnection", "new_clone", 1082, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_Connection()
	}
	arg_connection := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_connection}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_simple_connection_new_from_dbus
//
// [ dict ] trans: nothing
//
// [ result ] trans: everything
//
func SimpleConnectionNewFromDbus1(dict g.Variant) (result Connection, err error) {
	iv, err := _I.Get(1011, "SimpleConnection", "new_from_dbus", 1082, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_dict := gi.NewPointerArgument(dict.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_dict, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// ignore GType struct SimpleConnectionClass

// Struct SriovVF
type SriovVF struct {
	P unsafe.Pointer
}

func SriovVFGetType() gi.GType {
	ret := _I.GetGType(150, "SriovVF")
	return ret
}

// nm_sriov_vf_new
//
// [ index ] trans: nothing
//
// [ result ] trans: everything
//
func NewSriovVF(index uint32) (result SriovVF) {
	iv, err := _I.Get(1012, "SriovVF", "new", 1084, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_index := gi.NewUint32Argument(index)
	args := []gi.Argument{arg_index}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_sriov_vf_add_vlan
//
// [ vlan_id ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SriovVF) AddVlan(vlan_id uint32) (result bool) {
	iv, err := _I.Get(1013, "SriovVF", "add_vlan", 1084, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_vlan_id := gi.NewUint32Argument(vlan_id)
	args := []gi.Argument{arg_v, arg_vlan_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_sriov_vf_dup
//
// [ result ] trans: everything
//
func (v SriovVF) Dup() (result SriovVF) {
	iv, err := _I.Get(1014, "SriovVF", "dup", 1084, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_sriov_vf_equal
//
// [ other ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SriovVF) Equal(other SriovVF) (result bool) {
	iv, err := _I.Get(1015, "SriovVF", "equal", 1084, 3, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_other := gi.NewPointerArgument(other.P)
	args := []gi.Argument{arg_v, arg_other}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_sriov_vf_get_attribute
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SriovVF) GetAttribute(name string) (result g.Variant) {
	iv, err := _I.Get(1016, "SriovVF", "get_attribute", 1084, 4, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// nm_sriov_vf_get_attribute_names
//
// [ result ] trans: container
//
func (v SriovVF) GetAttributeNames() (result gi.CStrArray) {
	iv, err := _I.Get(1017, "SriovVF", "get_attribute_names", 1084, 5, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// nm_sriov_vf_get_index
//
// [ result ] trans: nothing
//
func (v SriovVF) GetIndex() (result uint32) {
	iv, err := _I.Get(1018, "SriovVF", "get_index", 1084, 6, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_sriov_vf_get_vlan_ids
//
// [ length ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v SriovVF) GetVlanIds() (result uint32, length uint32) {
	iv, err := _I.Get(1019, "SriovVF", "get_vlan_ids", 1084, 7, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_length}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	length = outArgs[0].Uint32()
	result = ret.Uint32()
	return
}

// nm_sriov_vf_get_vlan_protocol
//
// [ vlan_id ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SriovVF) GetVlanProtocol(vlan_id uint32) (result SriovVFVlanProtocolEnum) {
	iv, err := _I.Get(1020, "SriovVF", "get_vlan_protocol", 1084, 8, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_vlan_id := gi.NewUint32Argument(vlan_id)
	args := []gi.Argument{arg_v, arg_vlan_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SriovVFVlanProtocolEnum(ret.Int())
	return
}

// nm_sriov_vf_get_vlan_qos
//
// [ vlan_id ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SriovVF) GetVlanQos(vlan_id uint32) (result uint32) {
	iv, err := _I.Get(1021, "SriovVF", "get_vlan_qos", 1084, 9, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_vlan_id := gi.NewUint32Argument(vlan_id)
	args := []gi.Argument{arg_v, arg_vlan_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_sriov_vf_ref
//
func (v SriovVF) Ref() {
	iv, err := _I.Get(1022, "SriovVF", "ref", 1084, 10, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_sriov_vf_remove_vlan
//
// [ vlan_id ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SriovVF) RemoveVlan(vlan_id uint32) (result bool) {
	iv, err := _I.Get(1023, "SriovVF", "remove_vlan", 1084, 11, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_vlan_id := gi.NewUint32Argument(vlan_id)
	args := []gi.Argument{arg_v, arg_vlan_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_sriov_vf_set_attribute
//
// [ name ] trans: nothing
//
// [ value ] trans: nothing
//
func (v SriovVF) SetAttribute(name string, value g.Variant) {
	iv, err := _I.Get(1024, "SriovVF", "set_attribute", 1084, 12, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_name, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// nm_sriov_vf_set_vlan_protocol
//
// [ vlan_id ] trans: nothing
//
// [ protocol ] trans: nothing
//
func (v SriovVF) SetVlanProtocol(vlan_id uint32, protocol SriovVFVlanProtocolEnum) {
	iv, err := _I.Get(1025, "SriovVF", "set_vlan_protocol", 1084, 13, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_vlan_id := gi.NewUint32Argument(vlan_id)
	arg_protocol := gi.NewIntArgument(int(protocol))
	args := []gi.Argument{arg_v, arg_vlan_id, arg_protocol}
	iv.Call(args, nil, nil)
}

// nm_sriov_vf_set_vlan_qos
//
// [ vlan_id ] trans: nothing
//
// [ qos ] trans: nothing
//
func (v SriovVF) SetVlanQos(vlan_id uint32, qos uint32) {
	iv, err := _I.Get(1026, "SriovVF", "set_vlan_qos", 1084, 14, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_vlan_id := gi.NewUint32Argument(vlan_id)
	arg_qos := gi.NewUint32Argument(qos)
	args := []gi.Argument{arg_v, arg_vlan_id, arg_qos}
	iv.Call(args, nil, nil)
}

// nm_sriov_vf_unref
//
func (v SriovVF) Unref() {
	iv, err := _I.Get(1027, "SriovVF", "unref", 1084, 15, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_sriov_vf_attribute_validate
//
// [ name ] trans: nothing
//
// [ value ] trans: nothing
//
// [ known ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func SriovVFAttributeValidate1(name string, value g.Variant) (result bool, known bool, err error) {
	iv, err := _I.Get(1028, "SriovVF", "attribute_validate", 1084, 16, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	c_name := gi.CString(name)
	arg_name := gi.NewStringArgument(c_name)
	arg_value := gi.NewPointerArgument(value.P)
	arg_known := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_name, arg_value, arg_known, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_name)
	err = gi.ToError(outArgs[1].Pointer())
	known = outArgs[0].Bool()
	result = ret.Bool()
	return
}

// Enum SriovVFVlanProtocol
type SriovVFVlanProtocolEnum int

const (
	SriovVFVlanProtocol1q  SriovVFVlanProtocolEnum = 0
	SriovVFVlanProtocol1ad SriovVFVlanProtocolEnum = 1
)

func SriovVFVlanProtocolGetType() gi.GType {
	ret := _I.GetGType(151, "SriovVFVlanProtocol")
	return ret
}

// Enum State
type StateEnum int

const (
	StateUnknown         StateEnum = 0
	StateAsleep          StateEnum = 10
	StateDisconnected    StateEnum = 20
	StateDisconnecting   StateEnum = 30
	StateConnecting      StateEnum = 40
	StateConnectedLocal  StateEnum = 50
	StateConnectedSite   StateEnum = 60
	StateConnectedGlobal StateEnum = 70
)

func StateGetType() gi.GType {
	ret := _I.GetGType(152, "State")
	return ret
}

// Struct TCAction
type TCAction struct {
	P unsafe.Pointer
}

func TCActionGetType() gi.GType {
	ret := _I.GetGType(153, "TCAction")
	return ret
}

// nm_tc_action_new
//
// [ kind ] trans: nothing
//
// [ result ] trans: everything
//
func NewTCAction(kind string) (result TCAction, err error) {
	iv, err := _I.Get(1029, "TCAction", "new", 1087, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_kind := gi.CString(kind)
	arg_kind := gi.NewStringArgument(c_kind)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_kind, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_kind)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_tc_action_dup
//
// [ result ] trans: everything
//
func (v TCAction) Dup() (result TCAction) {
	iv, err := _I.Get(1030, "TCAction", "dup", 1087, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_tc_action_equal
//
// [ other ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TCAction) Equal(other TCAction) (result bool) {
	iv, err := _I.Get(1031, "TCAction", "equal", 1087, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_other := gi.NewPointerArgument(other.P)
	args := []gi.Argument{arg_v, arg_other}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_tc_action_get_attribute
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TCAction) GetAttribute(name string) (result g.Variant) {
	iv, err := _I.Get(1032, "TCAction", "get_attribute", 1087, 3, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// nm_tc_action_get_attribute_names
//
// [ result ] trans: everything
//
func (v TCAction) GetAttributeNames() (result gi.CStrArray) {
	iv, err := _I.Get(1033, "TCAction", "get_attribute_names", 1087, 4, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// nm_tc_action_get_kind
//
// [ result ] trans: nothing
//
func (v TCAction) GetKind() (result string) {
	iv, err := _I.Get(1034, "TCAction", "get_kind", 1087, 5, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_tc_action_ref
//
func (v TCAction) Ref() {
	iv, err := _I.Get(1035, "TCAction", "ref", 1087, 6, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_tc_action_set_attribute
//
// [ name ] trans: nothing
//
// [ value ] trans: nothing
//
func (v TCAction) SetAttribute(name string, value g.Variant) {
	iv, err := _I.Get(1036, "TCAction", "set_attribute", 1087, 7, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_name, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// nm_tc_action_unref
//
func (v TCAction) Unref() {
	iv, err := _I.Get(1037, "TCAction", "unref", 1087, 8, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Struct TCQdisc
type TCQdisc struct {
	P unsafe.Pointer
}

func TCQdiscGetType() gi.GType {
	ret := _I.GetGType(154, "TCQdisc")
	return ret
}

// nm_tc_qdisc_new
//
// [ kind ] trans: nothing
//
// [ parent ] trans: nothing
//
// [ result ] trans: everything
//
func NewTCQdisc(kind string, parent uint32) (result TCQdisc, err error) {
	iv, err := _I.Get(1038, "TCQdisc", "new", 1088, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_kind := gi.CString(kind)
	arg_kind := gi.NewStringArgument(c_kind)
	arg_parent := gi.NewUint32Argument(parent)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_kind, arg_parent, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_kind)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_tc_qdisc_dup
//
// [ result ] trans: everything
//
func (v TCQdisc) Dup() (result TCQdisc) {
	iv, err := _I.Get(1039, "TCQdisc", "dup", 1088, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_tc_qdisc_equal
//
// [ other ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TCQdisc) Equal(other TCQdisc) (result bool) {
	iv, err := _I.Get(1040, "TCQdisc", "equal", 1088, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_other := gi.NewPointerArgument(other.P)
	args := []gi.Argument{arg_v, arg_other}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_tc_qdisc_get_handle
//
// [ result ] trans: nothing
//
func (v TCQdisc) GetHandle() (result uint32) {
	iv, err := _I.Get(1041, "TCQdisc", "get_handle", 1088, 3, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_tc_qdisc_get_kind
//
// [ result ] trans: nothing
//
func (v TCQdisc) GetKind() (result string) {
	iv, err := _I.Get(1042, "TCQdisc", "get_kind", 1088, 4, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_tc_qdisc_get_parent
//
// [ result ] trans: nothing
//
func (v TCQdisc) GetParent() (result uint32) {
	iv, err := _I.Get(1043, "TCQdisc", "get_parent", 1088, 5, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_tc_qdisc_ref
//
func (v TCQdisc) Ref() {
	iv, err := _I.Get(1044, "TCQdisc", "ref", 1088, 6, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_tc_qdisc_set_handle
//
// [ handle ] trans: nothing
//
func (v TCQdisc) SetHandle(handle uint32) {
	iv, err := _I.Get(1045, "TCQdisc", "set_handle", 1088, 7, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_handle := gi.NewUint32Argument(handle)
	args := []gi.Argument{arg_v, arg_handle}
	iv.Call(args, nil, nil)
}

// nm_tc_qdisc_unref
//
func (v TCQdisc) Unref() {
	iv, err := _I.Get(1046, "TCQdisc", "unref", 1088, 8, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Struct TCTfilter
type TCTfilter struct {
	P unsafe.Pointer
}

func TCTfilterGetType() gi.GType {
	ret := _I.GetGType(155, "TCTfilter")
	return ret
}

// nm_tc_tfilter_new
//
// [ kind ] trans: nothing
//
// [ parent ] trans: nothing
//
// [ result ] trans: everything
//
func NewTCTfilter(kind string, parent uint32) (result TCTfilter, err error) {
	iv, err := _I.Get(1047, "TCTfilter", "new", 1089, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_kind := gi.CString(kind)
	arg_kind := gi.NewStringArgument(c_kind)
	arg_parent := gi.NewUint32Argument(parent)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_kind, arg_parent, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_kind)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_tc_tfilter_dup
//
// [ result ] trans: everything
//
func (v TCTfilter) Dup() (result TCTfilter) {
	iv, err := _I.Get(1048, "TCTfilter", "dup", 1089, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_tc_tfilter_equal
//
// [ other ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TCTfilter) Equal(other TCTfilter) (result bool) {
	iv, err := _I.Get(1049, "TCTfilter", "equal", 1089, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_other := gi.NewPointerArgument(other.P)
	args := []gi.Argument{arg_v, arg_other}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_tc_tfilter_get_action
//
// [ result ] trans: everything
//
func (v TCTfilter) GetAction() (result TCAction) {
	iv, err := _I.Get(1050, "TCTfilter", "get_action", 1089, 3, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_tc_tfilter_get_handle
//
// [ result ] trans: nothing
//
func (v TCTfilter) GetHandle() (result uint32) {
	iv, err := _I.Get(1051, "TCTfilter", "get_handle", 1089, 4, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_tc_tfilter_get_kind
//
// [ result ] trans: nothing
//
func (v TCTfilter) GetKind() (result string) {
	iv, err := _I.Get(1052, "TCTfilter", "get_kind", 1089, 5, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_tc_tfilter_get_parent
//
// [ result ] trans: nothing
//
func (v TCTfilter) GetParent() (result uint32) {
	iv, err := _I.Get(1053, "TCTfilter", "get_parent", 1089, 6, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_tc_tfilter_ref
//
func (v TCTfilter) Ref() {
	iv, err := _I.Get(1054, "TCTfilter", "ref", 1089, 7, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_tc_tfilter_set_action
//
// [ action ] trans: nothing
//
func (v TCTfilter) SetAction(action TCAction) {
	iv, err := _I.Get(1055, "TCTfilter", "set_action", 1089, 8, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_action := gi.NewPointerArgument(action.P)
	args := []gi.Argument{arg_v, arg_action}
	iv.Call(args, nil, nil)
}

// nm_tc_tfilter_set_handle
//
// [ handle ] trans: nothing
//
func (v TCTfilter) SetHandle(handle uint32) {
	iv, err := _I.Get(1056, "TCTfilter", "set_handle", 1089, 9, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_handle := gi.NewUint32Argument(handle)
	args := []gi.Argument{arg_v, arg_handle}
	iv.Call(args, nil, nil)
}

// nm_tc_tfilter_unref
//
func (v TCTfilter) Unref() {
	iv, err := _I.Get(1057, "TCTfilter", "unref", 1089, 10, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Struct TeamLinkWatcher
type TeamLinkWatcher struct {
	P unsafe.Pointer
}

func TeamLinkWatcherGetType() gi.GType {
	ret := _I.GetGType(156, "TeamLinkWatcher")
	return ret
}

// nm_team_link_watcher_new_arp_ping
//
// [ init_wait ] trans: nothing
//
// [ interval ] trans: nothing
//
// [ missed_max ] trans: nothing
//
// [ target_host ] trans: nothing
//
// [ source_host ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: everything
//
func NewTeamLinkWatcherArpPing(init_wait int32, interval int32, missed_max int32, target_host string, source_host string, flags TeamLinkWatcherArpPingFlags) (result TeamLinkWatcher, err error) {
	iv, err := _I.Get(1058, "TeamLinkWatcher", "new_arp_ping", 1093, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_target_host := gi.CString(target_host)
	c_source_host := gi.CString(source_host)
	arg_init_wait := gi.NewInt32Argument(init_wait)
	arg_interval := gi.NewInt32Argument(interval)
	arg_missed_max := gi.NewInt32Argument(missed_max)
	arg_target_host := gi.NewStringArgument(c_target_host)
	arg_source_host := gi.NewStringArgument(c_source_host)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_init_wait, arg_interval, arg_missed_max, arg_target_host, arg_source_host, arg_flags, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_target_host)
	gi.Free(c_source_host)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_team_link_watcher_new_ethtool
//
// [ delay_up ] trans: nothing
//
// [ delay_down ] trans: nothing
//
// [ result ] trans: everything
//
func NewTeamLinkWatcherEthtool(delay_up int32, delay_down int32) (result TeamLinkWatcher, err error) {
	iv, err := _I.Get(1059, "TeamLinkWatcher", "new_ethtool", 1093, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_delay_up := gi.NewInt32Argument(delay_up)
	arg_delay_down := gi.NewInt32Argument(delay_down)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_delay_up, arg_delay_down, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_team_link_watcher_new_nsna_ping
//
// [ init_wait ] trans: nothing
//
// [ interval ] trans: nothing
//
// [ missed_max ] trans: nothing
//
// [ target_host ] trans: nothing
//
// [ result ] trans: everything
//
func NewTeamLinkWatcherNsnaPing(init_wait int32, interval int32, missed_max int32, target_host string) (result TeamLinkWatcher, err error) {
	iv, err := _I.Get(1060, "TeamLinkWatcher", "new_nsna_ping", 1093, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_target_host := gi.CString(target_host)
	arg_init_wait := gi.NewInt32Argument(init_wait)
	arg_interval := gi.NewInt32Argument(interval)
	arg_missed_max := gi.NewInt32Argument(missed_max)
	arg_target_host := gi.NewStringArgument(c_target_host)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_init_wait, arg_interval, arg_missed_max, arg_target_host, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_target_host)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_team_link_watcher_dup
//
// [ result ] trans: everything
//
func (v TeamLinkWatcher) Dup() (result TeamLinkWatcher) {
	iv, err := _I.Get(1061, "TeamLinkWatcher", "dup", 1093, 3, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_team_link_watcher_equal
//
// [ other ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TeamLinkWatcher) Equal(other TeamLinkWatcher) (result bool) {
	iv, err := _I.Get(1062, "TeamLinkWatcher", "equal", 1093, 4, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_other := gi.NewPointerArgument(other.P)
	args := []gi.Argument{arg_v, arg_other}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_team_link_watcher_get_delay_down
//
// [ result ] trans: nothing
//
func (v TeamLinkWatcher) GetDelayDown() (result int32) {
	iv, err := _I.Get(1063, "TeamLinkWatcher", "get_delay_down", 1093, 5, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_team_link_watcher_get_delay_up
//
// [ result ] trans: nothing
//
func (v TeamLinkWatcher) GetDelayUp() (result int32) {
	iv, err := _I.Get(1064, "TeamLinkWatcher", "get_delay_up", 1093, 6, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_team_link_watcher_get_flags
//
// [ result ] trans: nothing
//
func (v TeamLinkWatcher) GetFlags() (result TeamLinkWatcherArpPingFlags) {
	iv, err := _I.Get(1065, "TeamLinkWatcher", "get_flags", 1093, 7, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = TeamLinkWatcherArpPingFlags(ret.Int())
	return
}

// nm_team_link_watcher_get_init_wait
//
// [ result ] trans: nothing
//
func (v TeamLinkWatcher) GetInitWait() (result int32) {
	iv, err := _I.Get(1066, "TeamLinkWatcher", "get_init_wait", 1093, 8, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_team_link_watcher_get_interval
//
// [ result ] trans: nothing
//
func (v TeamLinkWatcher) GetInterval() (result int32) {
	iv, err := _I.Get(1067, "TeamLinkWatcher", "get_interval", 1093, 9, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_team_link_watcher_get_missed_max
//
// [ result ] trans: nothing
//
func (v TeamLinkWatcher) GetMissedMax() (result int32) {
	iv, err := _I.Get(1068, "TeamLinkWatcher", "get_missed_max", 1093, 10, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// nm_team_link_watcher_get_name
//
// [ result ] trans: nothing
//
func (v TeamLinkWatcher) GetName() (result string) {
	iv, err := _I.Get(1069, "TeamLinkWatcher", "get_name", 1093, 11, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_team_link_watcher_get_source_host
//
// [ result ] trans: nothing
//
func (v TeamLinkWatcher) GetSourceHost() (result string) {
	iv, err := _I.Get(1070, "TeamLinkWatcher", "get_source_host", 1093, 12, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_team_link_watcher_get_target_host
//
// [ result ] trans: nothing
//
func (v TeamLinkWatcher) GetTargetHost() (result string) {
	iv, err := _I.Get(1071, "TeamLinkWatcher", "get_target_host", 1093, 13, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_team_link_watcher_ref
//
func (v TeamLinkWatcher) Ref() {
	iv, err := _I.Get(1072, "TeamLinkWatcher", "ref", 1093, 14, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// nm_team_link_watcher_unref
//
func (v TeamLinkWatcher) Unref() {
	iv, err := _I.Get(1073, "TeamLinkWatcher", "unref", 1093, 15, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Flags TeamLinkWatcherArpPingFlags
type TeamLinkWatcherArpPingFlags int

const (
	TeamLinkWatcherArpPingFlagsValidateActive   TeamLinkWatcherArpPingFlags = 2
	TeamLinkWatcherArpPingFlagsValidateInactive TeamLinkWatcherArpPingFlags = 4
	TeamLinkWatcherArpPingFlagsSendAlways       TeamLinkWatcherArpPingFlags = 8
)

func TeamLinkWatcherArpPingFlagsGetType() gi.GType {
	ret := _I.GetGType(157, "TeamLinkWatcherArpPingFlags")
	return ret
}

// Enum Ternary
type TernaryEnum int

const (
	TernaryDefault TernaryEnum = -1
	TernaryFalse   TernaryEnum = 0
	TernaryTrue    TernaryEnum = 1
)

func TernaryGetType() gi.GType {
	ret := _I.GetGType(158, "Ternary")
	return ret
}

type UtilsCheckFilePredicate func(filename string, stat unsafe.Pointer) (result bool)

func CallUtilsCheckFilePredicate(fn UtilsCheckFilePredicate, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	filename := gi.GoString(*(*unsafe.Pointer)(args[0]))
	stat := *(*unsafe.Pointer)(args[1])
	fnRet := fn(filename, stat)
	*(*int32)(result) = int32(gi.Bool2Int(fnRet))
}

type UtilsFileSearchInPathsPredicate func(filename string) (result bool)

func CallUtilsFileSearchInPathsPredicate(fn UtilsFileSearchInPathsPredicate, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	filename := gi.GoString(*(*unsafe.Pointer)(args[0]))
	fnRet := fn(filename)
	*(*int32)(result) = int32(gi.Bool2Int(fnRet))
}

// Enum UtilsSecurityType
type UtilsSecurityTypeEnum int

const (
	UtilsSecurityTypeInvalid        UtilsSecurityTypeEnum = 0
	UtilsSecurityTypeNone           UtilsSecurityTypeEnum = 1
	UtilsSecurityTypeStaticWep      UtilsSecurityTypeEnum = 2
	UtilsSecurityTypeLeap           UtilsSecurityTypeEnum = 3
	UtilsSecurityTypeDynamicWep     UtilsSecurityTypeEnum = 4
	UtilsSecurityTypeWpaPsk         UtilsSecurityTypeEnum = 5
	UtilsSecurityTypeWpaEnterprise  UtilsSecurityTypeEnum = 6
	UtilsSecurityTypeWpa2Psk        UtilsSecurityTypeEnum = 7
	UtilsSecurityTypeWpa2Enterprise UtilsSecurityTypeEnum = 8
)

func UtilsSecurityTypeGetType() gi.GType {
	ret := _I.GetGType(159, "UtilsSecurityType")
	return ret
}

// Struct VariantAttributeSpec
type VariantAttributeSpec struct {
	P unsafe.Pointer
}

func VariantAttributeSpecGetType() gi.GType {
	ret := _I.GetGType(160, "VariantAttributeSpec")
	return ret
}

// Flags VlanFlags
type VlanFlags int

const (
	VlanFlagsReorderHeaders VlanFlags = 1
	VlanFlagsGvrp           VlanFlags = 2
	VlanFlagsLooseBinding   VlanFlags = 4
	VlanFlagsMvrp           VlanFlags = 8
)

func VlanFlagsGetType() gi.GType {
	ret := _I.GetGType(161, "VlanFlags")
	return ret
}

// Enum VlanPriorityMap
type VlanPriorityMapEnum int

const (
	VlanPriorityMapIngressMap VlanPriorityMapEnum = 0
	VlanPriorityMapEgressMap  VlanPriorityMapEnum = 1
)

func VlanPriorityMapGetType() gi.GType {
	ret := _I.GetGType(162, "VlanPriorityMap")
	return ret
}

// Object VpnConnection
type VpnConnection struct {
	ActiveConnection
}

func WrapVpnConnection(p unsafe.Pointer) (r VpnConnection) { r.P = p; return }

type IVpnConnection interface{ P_VpnConnection() unsafe.Pointer }

func (v VpnConnection) P_VpnConnection() unsafe.Pointer { return v.P }
func VpnConnectionGetType() gi.GType {
	ret := _I.GetGType(163, "VpnConnection")
	return ret
}

// nm_vpn_connection_get_banner
//
// [ result ] trans: nothing
//
func (v VpnConnection) GetBanner() (result string) {
	iv, err := _I.Get(1074, "VpnConnection", "get_banner", 1153, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_vpn_connection_get_vpn_state
//
// [ result ] trans: nothing
//
func (v VpnConnection) GetVpnState() (result VpnConnectionStateEnum) {
	iv, err := _I.Get(1075, "VpnConnection", "get_vpn_state", 1153, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = VpnConnectionStateEnum(ret.Int())
	return
}

// ignore GType struct VpnConnectionClass

// Enum VpnConnectionState
type VpnConnectionStateEnum int

const (
	VpnConnectionStateUnknown      VpnConnectionStateEnum = 0
	VpnConnectionStatePrepare      VpnConnectionStateEnum = 1
	VpnConnectionStateNeedAuth     VpnConnectionStateEnum = 2
	VpnConnectionStateConnect      VpnConnectionStateEnum = 3
	VpnConnectionStateIpConfigGet  VpnConnectionStateEnum = 4
	VpnConnectionStateActivated    VpnConnectionStateEnum = 5
	VpnConnectionStateFailed       VpnConnectionStateEnum = 6
	VpnConnectionStateDisconnected VpnConnectionStateEnum = 7
)

func VpnConnectionStateGetType() gi.GType {
	ret := _I.GetGType(164, "VpnConnectionState")
	return ret
}

// Enum VpnConnectionStateReason
type VpnConnectionStateReasonEnum int

const (
	VpnConnectionStateReasonUnknown             VpnConnectionStateReasonEnum = 0
	VpnConnectionStateReasonNone                VpnConnectionStateReasonEnum = 1
	VpnConnectionStateReasonUserDisconnected    VpnConnectionStateReasonEnum = 2
	VpnConnectionStateReasonDeviceDisconnected  VpnConnectionStateReasonEnum = 3
	VpnConnectionStateReasonServiceStopped      VpnConnectionStateReasonEnum = 4
	VpnConnectionStateReasonIpConfigInvalid     VpnConnectionStateReasonEnum = 5
	VpnConnectionStateReasonConnectTimeout      VpnConnectionStateReasonEnum = 6
	VpnConnectionStateReasonServiceStartTimeout VpnConnectionStateReasonEnum = 7
	VpnConnectionStateReasonServiceStartFailed  VpnConnectionStateReasonEnum = 8
	VpnConnectionStateReasonNoSecrets           VpnConnectionStateReasonEnum = 9
	VpnConnectionStateReasonLoginFailed         VpnConnectionStateReasonEnum = 10
	VpnConnectionStateReasonConnectionRemoved   VpnConnectionStateReasonEnum = 11
)

func VpnConnectionStateReasonGetType() gi.GType {
	ret := _I.GetGType(165, "VpnConnectionStateReason")
	return ret
}

// Interface VpnEditor
type VpnEditor struct {
	VpnEditorIfc
	P unsafe.Pointer
}
type VpnEditorIfc struct{}
type IVpnEditor interface{ P_VpnEditor() unsafe.Pointer }

func (v VpnEditor) P_VpnEditor() unsafe.Pointer { return v.P }
func VpnEditorGetType() gi.GType {
	ret := _I.GetGType(166, "VpnEditor")
	return ret
}

// nm_vpn_editor_get_widget
//
// [ result ] trans: nothing
//
func (v *VpnEditorIfc) GetWidget() (result g.Object) {
	iv, err := _I.Get(1076, "VpnEditor", "get_widget", 1157, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_vpn_editor_update_connection
//
// [ connection ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *VpnEditorIfc) UpdateConnection(connection IConnection) (result bool, err error) {
	iv, err := _I.Get(1077, "VpnEditor", "update_connection", 1157, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_Connection()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_connection := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_connection, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// ignore GType struct VpnEditorInterface

// Interface VpnEditorPlugin
type VpnEditorPlugin struct {
	VpnEditorPluginIfc
	P unsafe.Pointer
}
type VpnEditorPluginIfc struct{}
type IVpnEditorPlugin interface{ P_VpnEditorPlugin() unsafe.Pointer }

func (v VpnEditorPlugin) P_VpnEditorPlugin() unsafe.Pointer { return v.P }
func VpnEditorPluginGetType() gi.GType {
	ret := _I.GetGType(167, "VpnEditorPlugin")
	return ret
}

// nm_vpn_editor_plugin_load
//
// [ plugin_name ] trans: nothing
//
// [ check_service ] trans: nothing
//
// [ result ] trans: everything
//
func VpnEditorPluginLoad1(plugin_name string, check_service string) (result VpnEditorPlugin, err error) {
	iv, err := _I.Get(1078, "VpnEditorPlugin", "load", 1159, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_plugin_name := gi.CString(plugin_name)
	c_check_service := gi.CString(check_service)
	arg_plugin_name := gi.NewStringArgument(c_plugin_name)
	arg_check_service := gi.NewStringArgument(c_check_service)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_plugin_name, arg_check_service, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_plugin_name)
	gi.Free(c_check_service)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_vpn_editor_plugin_load_from_file
//
// [ plugin_name ] trans: nothing
//
// [ check_service ] trans: nothing
//
// [ check_owner ] trans: nothing
//
// [ check_file ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ result ] trans: everything
//
func VpnEditorPluginLoadFromFile1(plugin_name string, check_service string, check_owner int32, check_file UtilsCheckFilePredicate) (result VpnEditorPlugin, err error) {
	iv, err := _I.Get(1079, "VpnEditorPlugin", "load_from_file", 1159, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_plugin_name := gi.CString(plugin_name)
	c_check_service := gi.CString(check_service)
	var cId uint
	var funcPtr unsafe.Pointer
	if check_file != nil {
		callableInfo := gi.GetCallableInfo("NM", "UtilsCheckFilePredicate")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallUtilsCheckFilePredicate(check_file, __result, __args)
		}, gi.ScopeCall, callableInfo)
		callableInfo.Unref()
	}
	arg_plugin_name := gi.NewStringArgument(c_plugin_name)
	arg_check_service := gi.NewStringArgument(c_check_service)
	arg_check_owner := gi.NewInt32Argument(check_owner)
	arg_check_file := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_plugin_name, arg_check_service, arg_check_owner, arg_check_file, arg_user_data, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_plugin_name)
	gi.Free(c_check_service)
	gi.UnregisterFClosure(cId)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_vpn_editor_plugin_export
//
// [ path ] trans: nothing
//
// [ connection ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *VpnEditorPluginIfc) Export(path string, connection IConnection) (result bool, err error) {
	iv, err := _I.Get(1080, "VpnEditorPlugin", "export", 1159, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_path := gi.CString(path)
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_Connection()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_path := gi.NewStringArgument(c_path)
	arg_connection := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_path, arg_connection, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_path)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_vpn_editor_plugin_get_capabilities
//
// [ result ] trans: nothing
//
func (v *VpnEditorPluginIfc) GetCapabilities() (result VpnEditorPluginCapabilityFlags) {
	iv, err := _I.Get(1081, "VpnEditorPlugin", "get_capabilities", 1159, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = VpnEditorPluginCapabilityFlags(ret.Int())
	return
}

// nm_vpn_editor_plugin_get_editor
//
// [ connection ] trans: nothing
//
// [ result ] trans: everything
//
func (v *VpnEditorPluginIfc) GetEditor(connection IConnection) (result VpnEditor, err error) {
	iv, err := _I.Get(1082, "VpnEditorPlugin", "get_editor", 1159, 4, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_Connection()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_connection := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_connection, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_vpn_editor_plugin_get_plugin_info
//
// [ result ] trans: nothing
//
func (v *VpnEditorPluginIfc) GetPluginInfo() (result VpnPluginInfo) {
	iv, err := _I.Get(1083, "VpnEditorPlugin", "get_plugin_info", 1159, 5, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_vpn_editor_plugin_get_suggested_filename
//
// [ connection ] trans: nothing
//
// [ result ] trans: everything
//
func (v *VpnEditorPluginIfc) GetSuggestedFilename(connection IConnection) (result string) {
	iv, err := _I.Get(1084, "VpnEditorPlugin", "get_suggested_filename", 1159, 6, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_Connection()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_connection := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_connection}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// nm_vpn_editor_plugin_get_vt
//
// [ vt ] trans: nothing, dir: out
//
// [ vt_size ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *VpnEditorPluginIfc) GetVt(vt VpnEditorPluginVT, vt_size uint64) (result uint64) {
	iv, err := _I.Get(1085, "VpnEditorPlugin", "get_vt", 1159, 7, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_vt := gi.NewPointerArgument(vt.P)
	arg_vt_size := gi.NewUint64Argument(vt_size)
	args := []gi.Argument{arg_v, arg_vt, arg_vt_size}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint64()
	return
}

// nm_vpn_editor_plugin_import
//
// [ path ] trans: nothing
//
// [ result ] trans: everything
//
func (v *VpnEditorPluginIfc) Import(path string) (result Connection, err error) {
	iv, err := _I.Get(1086, "VpnEditorPlugin", "import", 1159, 8, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_path := gi.NewStringArgument(c_path)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_path, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_path)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_vpn_editor_plugin_set_plugin_info
//
// [ plugin_info ] trans: nothing
//
func (v *VpnEditorPluginIfc) SetPluginInfo(plugin_info IVpnPluginInfo) {
	iv, err := _I.Get(1087, "VpnEditorPlugin", "set_plugin_info", 1159, 9, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if plugin_info != nil {
		tmp = plugin_info.P_VpnPluginInfo()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_plugin_info := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_plugin_info}
	iv.Call(args, nil, nil)
}

// Flags VpnEditorPluginCapability
type VpnEditorPluginCapabilityFlags int

const (
	VpnEditorPluginCapabilityNone   VpnEditorPluginCapabilityFlags = 0
	VpnEditorPluginCapabilityImport VpnEditorPluginCapabilityFlags = 1
	VpnEditorPluginCapabilityExport VpnEditorPluginCapabilityFlags = 2
	VpnEditorPluginCapabilityIpv6   VpnEditorPluginCapabilityFlags = 4
)

func VpnEditorPluginCapabilityGetType() gi.GType {
	ret := _I.GetGType(168, "VpnEditorPluginCapability")
	return ret
}

// ignore GType struct VpnEditorPluginInterface

// Struct VpnEditorPluginVT
type VpnEditorPluginVT struct {
	P unsafe.Pointer
}

func VpnEditorPluginVTGetType() gi.GType {
	ret := _I.GetGType(169, "VpnEditorPluginVT")
	return ret
}

type VpnIterFunc func(key string, value string)

func CallVpnIterFunc(fn VpnIterFunc, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	key := gi.GoString(*(*unsafe.Pointer)(args[0]))
	value := gi.GoString(*(*unsafe.Pointer)(args[1]))
	fn(key, value)
}

// Enum VpnPluginError
type VpnPluginErrorEnum int

const (
	VpnPluginErrorFailed                  VpnPluginErrorEnum = 0
	VpnPluginErrorStartinginprogress      VpnPluginErrorEnum = 1
	VpnPluginErrorAlreadystarted          VpnPluginErrorEnum = 2
	VpnPluginErrorStoppinginprogress      VpnPluginErrorEnum = 3
	VpnPluginErrorAlreadystopped          VpnPluginErrorEnum = 4
	VpnPluginErrorWrongstate              VpnPluginErrorEnum = 5
	VpnPluginErrorBadarguments            VpnPluginErrorEnum = 6
	VpnPluginErrorLaunchfailed            VpnPluginErrorEnum = 7
	VpnPluginErrorInvalidconnection       VpnPluginErrorEnum = 8
	VpnPluginErrorInteractivenotsupported VpnPluginErrorEnum = 9
)

func VpnPluginErrorGetType() gi.GType {
	ret := _I.GetGType(170, "VpnPluginError")
	return ret
}

// Enum VpnPluginFailure
type VpnPluginFailureEnum int

const (
	VpnPluginFailureLoginFailed   VpnPluginFailureEnum = 0
	VpnPluginFailureConnectFailed VpnPluginFailureEnum = 1
	VpnPluginFailureBadIpConfig   VpnPluginFailureEnum = 2
)

func VpnPluginFailureGetType() gi.GType {
	ret := _I.GetGType(171, "VpnPluginFailure")
	return ret
}

// Object VpnPluginInfo
type VpnPluginInfo struct {
	g.InitableIfc
	g.Object
}

func WrapVpnPluginInfo(p unsafe.Pointer) (r VpnPluginInfo) { r.P = p; return }

type IVpnPluginInfo interface{ P_VpnPluginInfo() unsafe.Pointer }

func (v VpnPluginInfo) P_VpnPluginInfo() unsafe.Pointer { return v.P }
func (v VpnPluginInfo) P_Initable() unsafe.Pointer      { return v.P }
func VpnPluginInfoGetType() gi.GType {
	ret := _I.GetGType(172, "VpnPluginInfo")
	return ret
}

// nm_vpn_plugin_info_new_from_file
//
// [ filename ] trans: nothing
//
// [ result ] trans: everything
//
func NewVpnPluginInfoFromFile(filename string) (result VpnPluginInfo, err error) {
	iv, err := _I.Get(1088, "VpnPluginInfo", "new_from_file", 1166, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_filename := gi.CString(filename)
	arg_filename := gi.NewStringArgument(c_filename)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_filename, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_filename)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_vpn_plugin_info_new_search_file
//
// [ name ] trans: nothing
//
// [ service ] trans: nothing
//
// [ result ] trans: everything
//
func NewVpnPluginInfoSearchFile(name string, service string) (result VpnPluginInfo) {
	iv, err := _I.Get(1089, "VpnPluginInfo", "new_search_file", 1166, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	c_service := gi.CString(service)
	arg_name := gi.NewStringArgument(c_name)
	arg_service := gi.NewStringArgument(c_service)
	args := []gi.Argument{arg_name, arg_service}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	gi.Free(c_service)
	result.P = ret.Pointer()
	return
}

// nm_vpn_plugin_info_new_with_data
//
// [ filename ] trans: nothing
//
// [ keyfile ] trans: nothing
//
// [ result ] trans: everything
//
func NewVpnPluginInfoWithData(filename string, keyfile g.KeyFile) (result VpnPluginInfo, err error) {
	iv, err := _I.Get(1090, "VpnPluginInfo", "new_with_data", 1166, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_filename := gi.CString(filename)
	arg_filename := gi.NewStringArgument(c_filename)
	arg_keyfile := gi.NewPointerArgument(keyfile.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_filename, arg_keyfile, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_filename)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_vpn_plugin_info_list_add
//
// [ list ] trans: nothing
//
// [ plugin_info ] trans: nothing
//
// [ result ] trans: nothing
//
func VpnPluginInfoListAdd1(list g.SList, plugin_info IVpnPluginInfo) (result bool, err error) {
	iv, err := _I.Get(1091, "VpnPluginInfo", "list_add", 1166, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if plugin_info != nil {
		tmp = plugin_info.P_VpnPluginInfo()
	}
	arg_list := gi.NewPointerArgument(list.P)
	arg_plugin_info := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_list, arg_plugin_info, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_vpn_plugin_info_list_find_by_filename
//
// [ list ] trans: nothing
//
// [ filename ] trans: nothing
//
// [ result ] trans: nothing
//
func VpnPluginInfoListFindByFilename1(list g.SList, filename string) (result VpnPluginInfo) {
	iv, err := _I.Get(1092, "VpnPluginInfo", "list_find_by_filename", 1166, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_filename := gi.CString(filename)
	arg_list := gi.NewPointerArgument(list.P)
	arg_filename := gi.NewStringArgument(c_filename)
	args := []gi.Argument{arg_list, arg_filename}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_filename)
	result.P = ret.Pointer()
	return
}

// nm_vpn_plugin_info_list_find_by_name
//
// [ list ] trans: nothing
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func VpnPluginInfoListFindByName1(list g.SList, name string) (result VpnPluginInfo) {
	iv, err := _I.Get(1093, "VpnPluginInfo", "list_find_by_name", 1166, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_list := gi.NewPointerArgument(list.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_list, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// nm_vpn_plugin_info_list_find_by_service
//
// [ list ] trans: nothing
//
// [ service ] trans: nothing
//
// [ result ] trans: nothing
//
func VpnPluginInfoListFindByService1(list g.SList, service string) (result VpnPluginInfo) {
	iv, err := _I.Get(1094, "VpnPluginInfo", "list_find_by_service", 1166, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_service := gi.CString(service)
	arg_list := gi.NewPointerArgument(list.P)
	arg_service := gi.NewStringArgument(c_service)
	args := []gi.Argument{arg_list, arg_service}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_service)
	result.P = ret.Pointer()
	return
}

// nm_vpn_plugin_info_list_find_service_type
//
// [ list ] trans: nothing
//
// [ name ] trans: nothing
//
// [ result ] trans: everything
//
func VpnPluginInfoListFindServiceType1(list g.SList, name string) (result string) {
	iv, err := _I.Get(1095, "VpnPluginInfo", "list_find_service_type", 1166, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_list := gi.NewPointerArgument(list.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_list, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result = ret.String().Take()
	return
}

// nm_vpn_plugin_info_list_get_service_types
//
// [ list ] trans: nothing
//
// [ only_existing ] trans: nothing
//
// [ with_abbreviations ] trans: nothing
//
// [ result ] trans: everything
//
func VpnPluginInfoListGetServiceTypes1(list g.SList, only_existing bool, with_abbreviations bool) (result gi.CStrArray) {
	iv, err := _I.Get(1096, "VpnPluginInfo", "list_get_service_types", 1166, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_list := gi.NewPointerArgument(list.P)
	arg_only_existing := gi.NewBoolArgument(only_existing)
	arg_with_abbreviations := gi.NewBoolArgument(with_abbreviations)
	args := []gi.Argument{arg_list, arg_only_existing, arg_with_abbreviations}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// nm_vpn_plugin_info_list_load
//
// [ result ] trans: everything
//
func VpnPluginInfoListLoad1() (result g.SList) {
	iv, err := _I.Get(1097, "VpnPluginInfo", "list_load", 1166, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_vpn_plugin_info_list_remove
//
// [ list ] trans: nothing
//
// [ plugin_info ] trans: nothing
//
// [ result ] trans: nothing
//
func VpnPluginInfoListRemove1(list g.SList, plugin_info IVpnPluginInfo) (result bool) {
	iv, err := _I.Get(1098, "VpnPluginInfo", "list_remove", 1166, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if plugin_info != nil {
		tmp = plugin_info.P_VpnPluginInfo()
	}
	arg_list := gi.NewPointerArgument(list.P)
	arg_plugin_info := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_list, arg_plugin_info}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_vpn_plugin_info_validate_filename
//
// [ filename ] trans: nothing
//
// [ result ] trans: nothing
//
func VpnPluginInfoValidateFilename1(filename string) (result bool) {
	iv, err := _I.Get(1099, "VpnPluginInfo", "validate_filename", 1166, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_filename := gi.CString(filename)
	arg_filename := gi.NewStringArgument(c_filename)
	args := []gi.Argument{arg_filename}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_filename)
	result = ret.Bool()
	return
}

// nm_vpn_plugin_info_get_aliases
//
// [ result ] trans: nothing
//
func (v VpnPluginInfo) GetAliases() (result gi.CStrArray) {
	iv, err := _I.Get(1100, "VpnPluginInfo", "get_aliases", 1166, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// nm_vpn_plugin_info_get_auth_dialog
//
// [ result ] trans: nothing
//
func (v VpnPluginInfo) GetAuthDialog() (result string) {
	iv, err := _I.Get(1101, "VpnPluginInfo", "get_auth_dialog", 1166, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_vpn_plugin_info_get_editor_plugin
//
// [ result ] trans: nothing
//
func (v VpnPluginInfo) GetEditorPlugin() (result VpnEditorPlugin) {
	iv, err := _I.Get(1102, "VpnPluginInfo", "get_editor_plugin", 1166, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_vpn_plugin_info_get_filename
//
// [ result ] trans: nothing
//
func (v VpnPluginInfo) GetFilename() (result string) {
	iv, err := _I.Get(1103, "VpnPluginInfo", "get_filename", 1166, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_vpn_plugin_info_get_name
//
// [ result ] trans: nothing
//
func (v VpnPluginInfo) GetName() (result string) {
	iv, err := _I.Get(1104, "VpnPluginInfo", "get_name", 1166, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_vpn_plugin_info_get_plugin
//
// [ result ] trans: nothing
//
func (v VpnPluginInfo) GetPlugin() (result string) {
	iv, err := _I.Get(1105, "VpnPluginInfo", "get_plugin", 1166, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_vpn_plugin_info_get_program
//
// [ result ] trans: nothing
//
func (v VpnPluginInfo) GetProgram() (result string) {
	iv, err := _I.Get(1106, "VpnPluginInfo", "get_program", 1166, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_vpn_plugin_info_get_service
//
// [ result ] trans: nothing
//
func (v VpnPluginInfo) GetService() (result string) {
	iv, err := _I.Get(1107, "VpnPluginInfo", "get_service", 1166, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_vpn_plugin_info_load_editor_plugin
//
// [ result ] trans: nothing
//
func (v VpnPluginInfo) LoadEditorPlugin() (result VpnEditorPlugin, err error) {
	iv, err := _I.Get(1108, "VpnPluginInfo", "load_editor_plugin", 1166, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_vpn_plugin_info_lookup_property
//
// [ group ] trans: nothing
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v VpnPluginInfo) LookupProperty(group string, key string) (result string) {
	iv, err := _I.Get(1109, "VpnPluginInfo", "lookup_property", 1166, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_group := gi.CString(group)
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_group := gi.NewStringArgument(c_group)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_group, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_group)
	gi.Free(c_key)
	result = ret.String().Copy()
	return
}

// nm_vpn_plugin_info_set_editor_plugin
//
// [ plugin ] trans: nothing
//
func (v VpnPluginInfo) SetEditorPlugin(plugin IVpnEditorPlugin) {
	iv, err := _I.Get(1110, "VpnPluginInfo", "set_editor_plugin", 1166, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if plugin != nil {
		tmp = plugin.P_VpnEditorPlugin()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_plugin := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_plugin}
	iv.Call(args, nil, nil)
}

// nm_vpn_plugin_info_supports_hints
//
// [ result ] trans: nothing
//
func (v VpnPluginInfo) SupportsHints() (result bool) {
	iv, err := _I.Get(1111, "VpnPluginInfo", "supports_hints", 1166, 23, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_vpn_plugin_info_supports_multiple
//
// [ result ] trans: nothing
//
func (v VpnPluginInfo) SupportsMultiple() (result bool) {
	iv, err := _I.Get(1112, "VpnPluginInfo", "supports_multiple", 1166, 24, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct VpnPluginInfoClass

// Object VpnPluginOld
type VpnPluginOld struct {
	g.InitableIfc
	g.Object
}

func WrapVpnPluginOld(p unsafe.Pointer) (r VpnPluginOld) { r.P = p; return }

type IVpnPluginOld interface{ P_VpnPluginOld() unsafe.Pointer }

func (v VpnPluginOld) P_VpnPluginOld() unsafe.Pointer { return v.P }
func (v VpnPluginOld) P_Initable() unsafe.Pointer     { return v.P }
func VpnPluginOldGetType() gi.GType {
	ret := _I.GetGType(173, "VpnPluginOld")
	return ret
}

// Deprecated
//
// nm_vpn_plugin_old_get_secret_flags
//
// [ data ] trans: nothing
//
// [ secret_name ] trans: nothing
//
// [ out_flags ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func VpnPluginOldGetSecretFlags1(data g.HashTable, secret_name string) (result bool, out_flags SettingSecretFlags) {
	iv, err := _I.Get(1113, "VpnPluginOld", "get_secret_flags", 1168, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	c_secret_name := gi.CString(secret_name)
	arg_data := gi.NewPointerArgument(data.P)
	arg_secret_name := gi.NewStringArgument(c_secret_name)
	arg_out_flags := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_data, arg_secret_name, arg_out_flags}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_secret_name)
	out_flags = SettingSecretFlags(outArgs[0].Int())
	result = ret.Bool()
	return
}

// Deprecated
//
// nm_vpn_plugin_old_read_vpn_details
//
// [ fd ] trans: nothing
//
// [ out_data ] trans: everything, dir: out
//
// [ out_secrets ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func VpnPluginOldReadVpnDetails1(fd int32) (result bool, out_data g.HashTable, out_secrets g.HashTable) {
	iv, err := _I.Get(1114, "VpnPluginOld", "read_vpn_details", 1168, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_fd := gi.NewInt32Argument(fd)
	arg_out_data := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_out_secrets := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_fd, arg_out_data, arg_out_secrets}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	out_data.P = outArgs[0].Pointer()
	out_secrets.P = outArgs[1].Pointer()
	result = ret.Bool()
	return
}

// Deprecated
//
// nm_vpn_plugin_old_disconnect
//
// [ result ] trans: nothing
//
func (v VpnPluginOld) Disconnect() (result bool, err error) {
	iv, err := _I.Get(1115, "VpnPluginOld", "disconnect", 1168, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// Deprecated
//
// nm_vpn_plugin_old_failure
//
// [ reason ] trans: nothing
//
func (v VpnPluginOld) Failure(reason VpnPluginFailureEnum) {
	iv, err := _I.Get(1116, "VpnPluginOld", "failure", 1168, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_reason := gi.NewIntArgument(int(reason))
	args := []gi.Argument{arg_v, arg_reason}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// nm_vpn_plugin_old_get_connection
//
// [ result ] trans: everything
//
func (v VpnPluginOld) GetConnection() (result g.DBusConnection) {
	iv, err := _I.Get(1117, "VpnPluginOld", "get_connection", 1168, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// nm_vpn_plugin_old_get_state
//
// [ result ] trans: nothing
//
func (v VpnPluginOld) GetState() (result VpnServiceStateEnum) {
	iv, err := _I.Get(1118, "VpnPluginOld", "get_state", 1168, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = VpnServiceStateEnum(ret.Int())
	return
}

// Deprecated
//
// nm_vpn_plugin_old_secrets_required
//
// [ message ] trans: nothing
//
// [ hints ] trans: nothing
//
func (v VpnPluginOld) SecretsRequired(message string, hints string) {
	iv, err := _I.Get(1119, "VpnPluginOld", "secrets_required", 1168, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_message := gi.CString(message)
	c_hints := gi.CString(hints)
	arg_v := gi.NewPointerArgument(v.P)
	arg_message := gi.NewStringArgument(c_message)
	arg_hints := gi.NewStringArgument(c_hints)
	args := []gi.Argument{arg_v, arg_message, arg_hints}
	iv.Call(args, nil, nil)
	gi.Free(c_message)
	gi.Free(c_hints)
}

// Deprecated
//
// nm_vpn_plugin_old_set_config
//
// [ config ] trans: nothing
//
func (v VpnPluginOld) SetConfig(config g.Variant) {
	iv, err := _I.Get(1120, "VpnPluginOld", "set_config", 1168, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_config := gi.NewPointerArgument(config.P)
	args := []gi.Argument{arg_v, arg_config}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// nm_vpn_plugin_old_set_ip4_config
//
// [ ip4_config ] trans: nothing
//
func (v VpnPluginOld) SetIp4Config(ip4_config g.Variant) {
	iv, err := _I.Get(1121, "VpnPluginOld", "set_ip4_config", 1168, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_ip4_config := gi.NewPointerArgument(ip4_config.P)
	args := []gi.Argument{arg_v, arg_ip4_config}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// nm_vpn_plugin_old_set_ip6_config
//
// [ ip6_config ] trans: nothing
//
func (v VpnPluginOld) SetIp6Config(ip6_config g.Variant) {
	iv, err := _I.Get(1122, "VpnPluginOld", "set_ip6_config", 1168, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_ip6_config := gi.NewPointerArgument(ip6_config.P)
	args := []gi.Argument{arg_v, arg_ip6_config}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// nm_vpn_plugin_old_set_login_banner
//
// [ banner ] trans: nothing
//
func (v VpnPluginOld) SetLoginBanner(banner string) {
	iv, err := _I.Get(1123, "VpnPluginOld", "set_login_banner", 1168, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_banner := gi.CString(banner)
	arg_v := gi.NewPointerArgument(v.P)
	arg_banner := gi.NewStringArgument(c_banner)
	args := []gi.Argument{arg_v, arg_banner}
	iv.Call(args, nil, nil)
	gi.Free(c_banner)
}

// Deprecated
//
// nm_vpn_plugin_old_set_state
//
// [ state ] trans: nothing
//
func (v VpnPluginOld) SetState(state VpnServiceStateEnum) {
	iv, err := _I.Get(1124, "VpnPluginOld", "set_state", 1168, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state := gi.NewIntArgument(int(state))
	args := []gi.Argument{arg_v, arg_state}
	iv.Call(args, nil, nil)
}

// ignore GType struct VpnPluginOldClass

// Object VpnServicePlugin
type VpnServicePlugin struct {
	g.InitableIfc
	g.Object
}

func WrapVpnServicePlugin(p unsafe.Pointer) (r VpnServicePlugin) { r.P = p; return }

type IVpnServicePlugin interface{ P_VpnServicePlugin() unsafe.Pointer }

func (v VpnServicePlugin) P_VpnServicePlugin() unsafe.Pointer { return v.P }
func (v VpnServicePlugin) P_Initable() unsafe.Pointer         { return v.P }
func VpnServicePluginGetType() gi.GType {
	ret := _I.GetGType(174, "VpnServicePlugin")
	return ret
}

// nm_vpn_service_plugin_get_secret_flags
//
// [ data ] trans: nothing
//
// [ secret_name ] trans: nothing
//
// [ out_flags ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func VpnServicePluginGetSecretFlags1(data g.HashTable, secret_name string) (result bool, out_flags SettingSecretFlags) {
	iv, err := _I.Get(1125, "VpnServicePlugin", "get_secret_flags", 1170, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	c_secret_name := gi.CString(secret_name)
	arg_data := gi.NewPointerArgument(data.P)
	arg_secret_name := gi.NewStringArgument(c_secret_name)
	arg_out_flags := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_data, arg_secret_name, arg_out_flags}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_secret_name)
	out_flags = SettingSecretFlags(outArgs[0].Int())
	result = ret.Bool()
	return
}

// nm_vpn_service_plugin_read_vpn_details
//
// [ fd ] trans: nothing
//
// [ out_data ] trans: everything, dir: out
//
// [ out_secrets ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func VpnServicePluginReadVpnDetails1(fd int32) (result bool, out_data g.HashTable, out_secrets g.HashTable) {
	iv, err := _I.Get(1126, "VpnServicePlugin", "read_vpn_details", 1170, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_fd := gi.NewInt32Argument(fd)
	arg_out_data := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_out_secrets := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_fd, arg_out_data, arg_out_secrets}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	out_data.P = outArgs[0].Pointer()
	out_secrets.P = outArgs[1].Pointer()
	result = ret.Bool()
	return
}

// nm_vpn_service_plugin_disconnect
//
// [ result ] trans: nothing
//
func (v VpnServicePlugin) Disconnect() (result bool, err error) {
	iv, err := _I.Get(1127, "VpnServicePlugin", "disconnect", 1170, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_vpn_service_plugin_failure
//
// [ reason ] trans: nothing
//
func (v VpnServicePlugin) Failure(reason VpnPluginFailureEnum) {
	iv, err := _I.Get(1128, "VpnServicePlugin", "failure", 1170, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_reason := gi.NewIntArgument(int(reason))
	args := []gi.Argument{arg_v, arg_reason}
	iv.Call(args, nil, nil)
}

// nm_vpn_service_plugin_get_connection
//
// [ result ] trans: everything
//
func (v VpnServicePlugin) GetConnection() (result g.DBusConnection) {
	iv, err := _I.Get(1129, "VpnServicePlugin", "get_connection", 1170, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_vpn_service_plugin_secrets_required
//
// [ message ] trans: nothing
//
// [ hints ] trans: nothing
//
func (v VpnServicePlugin) SecretsRequired(message string, hints string) {
	iv, err := _I.Get(1130, "VpnServicePlugin", "secrets_required", 1170, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_message := gi.CString(message)
	c_hints := gi.CString(hints)
	arg_v := gi.NewPointerArgument(v.P)
	arg_message := gi.NewStringArgument(c_message)
	arg_hints := gi.NewStringArgument(c_hints)
	args := []gi.Argument{arg_v, arg_message, arg_hints}
	iv.Call(args, nil, nil)
	gi.Free(c_message)
	gi.Free(c_hints)
}

// nm_vpn_service_plugin_set_config
//
// [ config ] trans: nothing
//
func (v VpnServicePlugin) SetConfig(config g.Variant) {
	iv, err := _I.Get(1131, "VpnServicePlugin", "set_config", 1170, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_config := gi.NewPointerArgument(config.P)
	args := []gi.Argument{arg_v, arg_config}
	iv.Call(args, nil, nil)
}

// nm_vpn_service_plugin_set_ip4_config
//
// [ ip4_config ] trans: nothing
//
func (v VpnServicePlugin) SetIp4Config(ip4_config g.Variant) {
	iv, err := _I.Get(1132, "VpnServicePlugin", "set_ip4_config", 1170, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_ip4_config := gi.NewPointerArgument(ip4_config.P)
	args := []gi.Argument{arg_v, arg_ip4_config}
	iv.Call(args, nil, nil)
}

// nm_vpn_service_plugin_set_ip6_config
//
// [ ip6_config ] trans: nothing
//
func (v VpnServicePlugin) SetIp6Config(ip6_config g.Variant) {
	iv, err := _I.Get(1133, "VpnServicePlugin", "set_ip6_config", 1170, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_ip6_config := gi.NewPointerArgument(ip6_config.P)
	args := []gi.Argument{arg_v, arg_ip6_config}
	iv.Call(args, nil, nil)
}

// nm_vpn_service_plugin_set_login_banner
//
// [ banner ] trans: nothing
//
func (v VpnServicePlugin) SetLoginBanner(banner string) {
	iv, err := _I.Get(1134, "VpnServicePlugin", "set_login_banner", 1170, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_banner := gi.CString(banner)
	arg_v := gi.NewPointerArgument(v.P)
	arg_banner := gi.NewStringArgument(c_banner)
	args := []gi.Argument{arg_v, arg_banner}
	iv.Call(args, nil, nil)
	gi.Free(c_banner)
}

// nm_vpn_service_plugin_shutdown
//
func (v VpnServicePlugin) Shutdown() {
	iv, err := _I.Get(1135, "VpnServicePlugin", "shutdown", 1170, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// ignore GType struct VpnServicePluginClass

// Enum VpnServiceState
type VpnServiceStateEnum int

const (
	VpnServiceStateUnknown  VpnServiceStateEnum = 0
	VpnServiceStateInit     VpnServiceStateEnum = 1
	VpnServiceStateShutdown VpnServiceStateEnum = 2
	VpnServiceStateStarting VpnServiceStateEnum = 3
	VpnServiceStateStarted  VpnServiceStateEnum = 4
	VpnServiceStateStopping VpnServiceStateEnum = 5
	VpnServiceStateStopped  VpnServiceStateEnum = 6
)

func VpnServiceStateGetType() gi.GType {
	ret := _I.GetGType(175, "VpnServiceState")
	return ret
}

// Enum WepKeyType
type WepKeyTypeEnum int

const (
	WepKeyTypeUnknown    WepKeyTypeEnum = 0
	WepKeyTypeKey        WepKeyTypeEnum = 1
	WepKeyTypePassphrase WepKeyTypeEnum = 2
)

func WepKeyTypeGetType() gi.GType {
	ret := _I.GetGType(176, "WepKeyType")
	return ret
}

// Object WimaxNsp
type WimaxNsp struct {
	Object
}

func WrapWimaxNsp(p unsafe.Pointer) (r WimaxNsp) { r.P = p; return }

type IWimaxNsp interface{ P_WimaxNsp() unsafe.Pointer }

func (v WimaxNsp) P_WimaxNsp() unsafe.Pointer { return v.P }
func WimaxNspGetType() gi.GType {
	ret := _I.GetGType(177, "WimaxNsp")
	return ret
}

// nm_wimax_nsp_connection_valid
//
// [ connection ] trans: nothing
//
// [ result ] trans: nothing
//
func (v WimaxNsp) ConnectionValid(connection IConnection) (result bool) {
	iv, err := _I.Get(1136, "WimaxNsp", "connection_valid", 1177, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_Connection()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connection := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_connection}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_wimax_nsp_filter_connections
//
// [ connections ] trans: nothing
//
// [ result ] trans: everything
//
func (v WimaxNsp) FilterConnections(connections int /*TODO_TYPE isPtr: true, tag: array*/) (result g.PtrArray) {
	iv, err := _I.Get(1137, "WimaxNsp", "filter_connections", 1177, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connections := gi.NewIntArgument(connections) /*TODO*/
	args := []gi.Argument{arg_v, arg_connections}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_wimax_nsp_get_name
//
// [ result ] trans: nothing
//
func (v WimaxNsp) GetName() (result string) {
	iv, err := _I.Get(1138, "WimaxNsp", "get_name", 1177, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_wimax_nsp_get_network_type
//
// [ result ] trans: nothing
//
func (v WimaxNsp) GetNetworkType() (result WimaxNspNetworkTypeEnum) {
	iv, err := _I.Get(1139, "WimaxNsp", "get_network_type", 1177, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = WimaxNspNetworkTypeEnum(ret.Int())
	return
}

// nm_wimax_nsp_get_signal_quality
//
// [ result ] trans: nothing
//
func (v WimaxNsp) GetSignalQuality() (result uint32) {
	iv, err := _I.Get(1140, "WimaxNsp", "get_signal_quality", 1177, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// ignore GType struct WimaxNspClass

// Enum WimaxNspNetworkType
type WimaxNspNetworkTypeEnum int

const (
	WimaxNspNetworkTypeUnknown        WimaxNspNetworkTypeEnum = 0
	WimaxNspNetworkTypeHome           WimaxNspNetworkTypeEnum = 1
	WimaxNspNetworkTypePartner        WimaxNspNetworkTypeEnum = 2
	WimaxNspNetworkTypeRoamingPartner WimaxNspNetworkTypeEnum = 3
)

func WimaxNspNetworkTypeGetType() gi.GType {
	ret := _I.GetGType(178, "WimaxNspNetworkType")
	return ret
}

// nm_agent_manager_error_quark
//
// [ result ] trans: nothing
//
func AgentManagerErrorQuark() (result uint32) {
	iv, err := _I.Get(1141, "agent_manager_error_quark", "", 1180, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_client_error_quark
//
// [ result ] trans: nothing
//
func ClientErrorQuark() (result uint32) {
	iv, err := _I.Get(1142, "client_error_quark", "", 1181, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_connection_error_quark
//
// [ result ] trans: nothing
//
func ConnectionErrorQuark() (result uint32) {
	iv, err := _I.Get(1143, "connection_error_quark", "", 1182, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_crypto_error_quark
//
// [ result ] trans: nothing
//
func CryptoErrorQuark() (result uint32) {
	iv, err := _I.Get(1144, "crypto_error_quark", "", 1183, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_device_error_quark
//
// [ result ] trans: nothing
//
func DeviceErrorQuark() (result uint32) {
	iv, err := _I.Get(1145, "device_error_quark", "", 1184, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_ethtool_optname_is_feature
//
// [ optname ] trans: nothing
//
// [ result ] trans: nothing
//
func EthtoolOptnameIsFeature(optname string) (result bool) {
	iv, err := _I.Get(1146, "ethtool_optname_is_feature", "", 1185, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_optname := gi.CString(optname)
	arg_optname := gi.NewStringArgument(c_optname)
	args := []gi.Argument{arg_optname}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_optname)
	result = ret.Bool()
	return
}

// nm_ip_route_attribute_validate
//
// [ name ] trans: nothing
//
// [ value ] trans: nothing
//
// [ family ] trans: nothing
//
// [ known ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func IpRouteAttributeValidate(name string, value g.Variant, family int32) (result bool, known bool, err error) {
	iv, err := _I.Get(1147, "ip_route_attribute_validate", "", 1186, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	c_name := gi.CString(name)
	arg_name := gi.NewStringArgument(c_name)
	arg_value := gi.NewPointerArgument(value.P)
	arg_family := gi.NewInt32Argument(family)
	arg_known := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_name, arg_value, arg_family, arg_known, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_name)
	err = gi.ToError(outArgs[1].Pointer())
	known = outArgs[0].Bool()
	result = ret.Bool()
	return
}

// nm_ip_route_get_variant_attribute_spec
//
// [ result ] trans: nothing
//
func IpRouteGetVariantAttributeSpec() (result VariantAttributeSpec) {
	iv, err := _I.Get(1148, "ip_route_get_variant_attribute_spec", "", 1187, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_manager_error_quark
//
// [ result ] trans: nothing
//
func ManagerErrorQuark() (result uint32) {
	iv, err := _I.Get(1149, "manager_error_quark", "", 1188, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_secret_agent_error_quark
//
// [ result ] trans: nothing
//
func SecretAgentErrorQuark() (result uint32) {
	iv, err := _I.Get(1150, "secret_agent_error_quark", "", 1189, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_settings_error_quark
//
// [ result ] trans: nothing
//
func SettingsErrorQuark() (result uint32) {
	iv, err := _I.Get(1151, "settings_error_quark", "", 1190, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_sriov_vf_attribute_validate
//
// [ name ] trans: nothing
//
// [ value ] trans: nothing
//
// [ known ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func SriovVfAttributeValidate(name string, value g.Variant) (result bool, known bool, err error) {
	iv, err := _I.Get(1152, "sriov_vf_attribute_validate", "", 1191, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	c_name := gi.CString(name)
	arg_name := gi.NewStringArgument(c_name)
	arg_value := gi.NewPointerArgument(value.P)
	arg_known := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_name, arg_value, arg_known, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_name)
	err = gi.ToError(outArgs[1].Pointer())
	known = outArgs[0].Bool()
	result = ret.Bool()
	return
}

// nm_utils_ap_mode_security_valid
//
// [ type1 ] trans: nothing
//
// [ wifi_caps ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsApModeSecurityValid(type1 UtilsSecurityTypeEnum, wifi_caps DeviceWifiCapabilitiesFlags) (result bool) {
	iv, err := _I.Get(1153, "utils_ap_mode_security_valid", "", 1192, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_type1 := gi.NewIntArgument(int(type1))
	arg_wifi_caps := gi.NewIntArgument(int(wifi_caps))
	args := []gi.Argument{arg_type1, arg_wifi_caps}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_utils_bin2hexstr
//
// [ src ] trans: nothing
//
// [ len1 ] trans: nothing
//
// [ final_len ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsBin2hexstr(src int /*TODO_TYPE array type c, elemTypeTag: guint8*/, len1 uint64, final_len int32) (result string) {
	iv, err := _I.Get(1154, "utils_bin2hexstr", "", 1193, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_src := gi.NewIntArgument(src) /*TODO*/
	arg_len1 := gi.NewUint64Argument(len1)
	arg_final_len := gi.NewInt32Argument(final_len)
	args := []gi.Argument{arg_src, arg_len1, arg_final_len}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// nm_utils_bond_mode_int_to_string
//
// [ mode ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsBondModeIntToString(mode int32) (result string) {
	iv, err := _I.Get(1155, "utils_bond_mode_int_to_string", "", 1194, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_mode := gi.NewInt32Argument(mode)
	args := []gi.Argument{arg_mode}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_utils_bond_mode_string_to_int
//
// [ mode ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsBondModeStringToInt(mode string) (result int32) {
	iv, err := _I.Get(1156, "utils_bond_mode_string_to_int", "", 1195, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_mode := gi.CString(mode)
	arg_mode := gi.NewStringArgument(c_mode)
	args := []gi.Argument{arg_mode}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_mode)
	result = ret.Int32()
	return
}

// nm_utils_check_virtual_device_compatibility
//
// [ virtual_type ] trans: nothing
//
// [ other_type ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsCheckVirtualDeviceCompatibility(virtual_type gi.GType, other_type gi.GType) (result bool) {
	iv, err := _I.Get(1157, "utils_check_virtual_device_compatibility", "", 1196, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_virtual_type := gi.NewUintArgument(uint(virtual_type))
	arg_other_type := gi.NewUintArgument(uint(other_type))
	args := []gi.Argument{arg_virtual_type, arg_other_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_utils_enum_from_str
//
// [ type1 ] trans: nothing
//
// [ str ] trans: nothing
//
// [ out_value ] trans: everything, dir: out
//
// [ err_token ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func UtilsEnumFromStr(type1 gi.GType, str string) (result bool, out_value int32, err_token string) {
	iv, err := _I.Get(1158, "utils_enum_from_str", "", 1197, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	c_str := gi.CString(str)
	arg_type1 := gi.NewUintArgument(uint(type1))
	arg_str := gi.NewStringArgument(c_str)
	arg_out_value := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err_token := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_type1, arg_str, arg_out_value, arg_err_token}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_str)
	out_value = outArgs[0].Int32()
	err_token = outArgs[1].String().Take()
	result = ret.Bool()
	return
}

// nm_utils_enum_get_values
//
// [ type1 ] trans: nothing
//
// [ from ] trans: nothing
//
// [ to ] trans: nothing
//
// [ result ] trans: container
//
func UtilsEnumGetValues(type1 gi.GType, from int32, to int32) (result gi.CStrArray) {
	iv, err := _I.Get(1159, "utils_enum_get_values", "", 1198, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_type1 := gi.NewUintArgument(uint(type1))
	arg_from := gi.NewInt32Argument(from)
	arg_to := gi.NewInt32Argument(to)
	args := []gi.Argument{arg_type1, arg_from, arg_to}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// nm_utils_enum_to_str
//
// [ type1 ] trans: nothing
//
// [ value ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsEnumToStr(type1 gi.GType, value int32) (result string) {
	iv, err := _I.Get(1160, "utils_enum_to_str", "", 1199, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_type1 := gi.NewUintArgument(uint(type1))
	arg_value := gi.NewInt32Argument(value)
	args := []gi.Argument{arg_type1, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// nm_utils_escape_ssid
//
// [ ssid ] trans: nothing
//
// [ len1 ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsEscapeSsid(ssid gi.Uint8Array, len1 uint64) (result string) {
	iv, err := _I.Get(1161, "utils_escape_ssid", "", 1200, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_ssid := gi.NewPointerArgument(ssid.P)
	arg_len1 := gi.NewUint64Argument(len1)
	args := []gi.Argument{arg_ssid, arg_len1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_utils_file_is_certificate
//
// [ filename ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsFileIsCertificate(filename string) (result bool) {
	iv, err := _I.Get(1162, "utils_file_is_certificate", "", 1201, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_filename := gi.CString(filename)
	arg_filename := gi.NewStringArgument(c_filename)
	args := []gi.Argument{arg_filename}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_filename)
	result = ret.Bool()
	return
}

// nm_utils_file_is_pkcs12
//
// [ filename ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsFileIsPkcs12(filename string) (result bool) {
	iv, err := _I.Get(1163, "utils_file_is_pkcs12", "", 1202, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_filename := gi.CString(filename)
	arg_filename := gi.NewStringArgument(c_filename)
	args := []gi.Argument{arg_filename}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_filename)
	result = ret.Bool()
	return
}

// nm_utils_file_is_private_key
//
// [ filename ] trans: nothing
//
// [ out_encrypted ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func UtilsFileIsPrivateKey(filename string) (result bool, out_encrypted bool) {
	iv, err := _I.Get(1164, "utils_file_is_private_key", "", 1203, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	c_filename := gi.CString(filename)
	arg_filename := gi.NewStringArgument(c_filename)
	arg_out_encrypted := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_filename, arg_out_encrypted}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_filename)
	out_encrypted = outArgs[0].Bool()
	result = ret.Bool()
	return
}

// nm_utils_file_search_in_paths
//
// [ progname ] trans: nothing
//
// [ try_first ] trans: nothing
//
// [ paths ] trans: nothing
//
// [ file_test_flags ] trans: nothing
//
// [ predicate ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsFileSearchInPaths(progname string, try_first string, paths string, file_test_flags g.FileTestFlags, predicate UtilsFileSearchInPathsPredicate) (result string, err error) {
	iv, err := _I.Get(1165, "utils_file_search_in_paths", "", 1204, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_progname := gi.CString(progname)
	c_try_first := gi.CString(try_first)
	c_paths := gi.CString(paths)
	var cId uint
	var funcPtr unsafe.Pointer
	if predicate != nil {
		callableInfo := gi.GetCallableInfo("NM", "UtilsFileSearchInPathsPredicate")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallUtilsFileSearchInPathsPredicate(predicate, __result, __args)
		}, gi.ScopeCall, callableInfo)
		callableInfo.Unref()
	}
	arg_progname := gi.NewStringArgument(c_progname)
	arg_try_first := gi.NewStringArgument(c_try_first)
	arg_paths := gi.NewStringArgument(c_paths)
	arg_file_test_flags := gi.NewIntArgument(int(file_test_flags))
	arg_predicate := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_progname, arg_try_first, arg_paths, arg_file_test_flags, arg_predicate, arg_user_data, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_progname)
	gi.Free(c_try_first)
	gi.Free(c_paths)
	gi.UnregisterFClosure(cId)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.String().Copy()
	return
}

// nm_utils_format_variant_attributes
//
// [ attributes ] trans: nothing
//
// [ attr_separator ] trans: nothing
//
// [ key_value_separator ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsFormatVariantAttributes(attributes g.HashTable, attr_separator int8, key_value_separator int8) (result string) {
	iv, err := _I.Get(1166, "utils_format_variant_attributes", "", 1205, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_attributes := gi.NewPointerArgument(attributes.P)
	arg_attr_separator := gi.NewInt8Argument(attr_separator)
	arg_key_value_separator := gi.NewInt8Argument(key_value_separator)
	args := []gi.Argument{arg_attributes, arg_attr_separator, arg_key_value_separator}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// nm_utils_get_timestamp_msec
//
// [ result ] trans: nothing
//
func UtilsGetTimestampMsec() (result int64) {
	iv, err := _I.Get(1167, "utils_get_timestamp_msec", "", 1206, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Int64()
	return
}

// nm_utils_hexstr2bin
//
// [ hex ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsHexstr2bin(hex string) (result g.Bytes) {
	iv, err := _I.Get(1168, "utils_hexstr2bin", "", 1207, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_hex := gi.CString(hex)
	arg_hex := gi.NewStringArgument(c_hex)
	args := []gi.Argument{arg_hex}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_hex)
	result.P = ret.Pointer()
	return
}

// nm_utils_hwaddr_atoba
//
// [ asc ] trans: nothing
//
// [ length ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsHwaddrAtoba(asc string, length uint64) (result g.ByteArray) {
	iv, err := _I.Get(1169, "utils_hwaddr_atoba", "", 1208, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_asc := gi.CString(asc)
	arg_asc := gi.NewStringArgument(c_asc)
	arg_length := gi.NewUint64Argument(length)
	args := []gi.Argument{arg_asc, arg_length}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_asc)
	result.P = ret.Pointer()
	return
}

// nm_utils_hwaddr_aton
//
// [ asc ] trans: nothing
//
// [ buffer ] trans: nothing
//
// [ length ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsHwaddrAton(asc string, buffer int /*TODO_TYPE array type c, elemTypeTag: guint8*/, length uint64) (result uint8) {
	iv, err := _I.Get(1170, "utils_hwaddr_aton", "", 1209, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_asc := gi.CString(asc)
	arg_asc := gi.NewStringArgument(c_asc)
	arg_buffer := gi.NewIntArgument(buffer) /*TODO*/
	arg_length := gi.NewUint64Argument(length)
	args := []gi.Argument{arg_asc, arg_buffer, arg_length}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_asc)
	result = ret.Uint8()
	return
}

// nm_utils_hwaddr_canonical
//
// [ asc ] trans: nothing
//
// [ length ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsHwaddrCanonical(asc string, length int64) (result string) {
	iv, err := _I.Get(1171, "utils_hwaddr_canonical", "", 1210, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_asc := gi.CString(asc)
	arg_asc := gi.NewStringArgument(c_asc)
	arg_length := gi.NewInt64Argument(length)
	args := []gi.Argument{arg_asc, arg_length}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_asc)
	result = ret.String().Take()
	return
}

// nm_utils_hwaddr_len
//
// [ type1 ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsHwaddrLen(type1 int32) (result uint64) {
	iv, err := _I.Get(1172, "utils_hwaddr_len", "", 1211, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_type1 := gi.NewInt32Argument(type1)
	args := []gi.Argument{arg_type1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint64()
	return
}

// nm_utils_hwaddr_matches
//
// [ hwaddr1 ] trans: nothing
//
// [ hwaddr1_len ] trans: nothing
//
// [ hwaddr2 ] trans: nothing
//
// [ hwaddr2_len ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsHwaddrMatches(hwaddr1 unsafe.Pointer, hwaddr1_len int64, hwaddr2 unsafe.Pointer, hwaddr2_len int64) (result bool) {
	iv, err := _I.Get(1173, "utils_hwaddr_matches", "", 1212, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_hwaddr1 := gi.NewPointerArgument(hwaddr1)
	arg_hwaddr1_len := gi.NewInt64Argument(hwaddr1_len)
	arg_hwaddr2 := gi.NewPointerArgument(hwaddr2)
	arg_hwaddr2_len := gi.NewInt64Argument(hwaddr2_len)
	args := []gi.Argument{arg_hwaddr1, arg_hwaddr1_len, arg_hwaddr2, arg_hwaddr2_len}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_utils_hwaddr_ntoa
//
// [ addr ] trans: nothing
//
// [ length ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsHwaddrNtoa(addr int /*TODO_TYPE array type c, elemTypeTag: guint8*/, length uint64) (result string) {
	iv, err := _I.Get(1174, "utils_hwaddr_ntoa", "", 1213, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_addr := gi.NewIntArgument(addr) /*TODO*/
	arg_length := gi.NewUint64Argument(length)
	args := []gi.Argument{arg_addr, arg_length}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// nm_utils_hwaddr_valid
//
// [ asc ] trans: nothing
//
// [ length ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsHwaddrValid(asc string, length int64) (result bool) {
	iv, err := _I.Get(1175, "utils_hwaddr_valid", "", 1214, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_asc := gi.CString(asc)
	arg_asc := gi.NewStringArgument(c_asc)
	arg_length := gi.NewInt64Argument(length)
	args := []gi.Argument{arg_asc, arg_length}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_asc)
	result = ret.Bool()
	return
}

// Deprecated
//
// nm_utils_iface_valid_name
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsIfaceValidName(name string) (result bool) {
	iv, err := _I.Get(1176, "utils_iface_valid_name", "", 1215, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result = ret.Bool()
	return
}

// nm_utils_ip4_addresses_from_variant
//
// [ value ] trans: nothing
//
// [ out_gateway ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func UtilsIp4AddressesFromVariant(value g.Variant) (result g.PtrArray, out_gateway string) {
	iv, err := _I.Get(1177, "utils_ip4_addresses_from_variant", "", 1216, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_value := gi.NewPointerArgument(value.P)
	arg_out_gateway := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_value, arg_out_gateway}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	out_gateway = outArgs[0].String().Take()
	result.P = ret.Pointer()
	return
}

// nm_utils_ip4_addresses_to_variant
//
// [ addresses ] trans: nothing
//
// [ gateway ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsIp4AddressesToVariant(addresses int /*TODO_TYPE isPtr: true, tag: array*/, gateway string) (result g.Variant) {
	iv, err := _I.Get(1178, "utils_ip4_addresses_to_variant", "", 1217, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_gateway := gi.CString(gateway)
	arg_addresses := gi.NewIntArgument(addresses) /*TODO*/
	arg_gateway := gi.NewStringArgument(c_gateway)
	args := []gi.Argument{arg_addresses, arg_gateway}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_gateway)
	result.P = ret.Pointer()
	return
}

// nm_utils_ip4_dns_from_variant
//
// [ value ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsIp4DnsFromVariant(value g.Variant) (result string) {
	iv, err := _I.Get(1179, "utils_ip4_dns_from_variant", "", 1218, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// nm_utils_ip4_dns_to_variant
//
// [ dns ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsIp4DnsToVariant(dns string) (result g.Variant) {
	iv, err := _I.Get(1180, "utils_ip4_dns_to_variant", "", 1219, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_dns := gi.CString(dns)
	arg_dns := gi.NewStringArgument(c_dns)
	args := []gi.Argument{arg_dns}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_dns)
	result.P = ret.Pointer()
	return
}

// nm_utils_ip4_get_default_prefix
//
// [ ip ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsIp4GetDefaultPrefix(ip uint32) (result uint32) {
	iv, err := _I.Get(1181, "utils_ip4_get_default_prefix", "", 1220, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_ip := gi.NewUint32Argument(ip)
	args := []gi.Argument{arg_ip}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_utils_ip4_netmask_to_prefix
//
// [ netmask ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsIp4NetmaskToPrefix(netmask uint32) (result uint32) {
	iv, err := _I.Get(1182, "utils_ip4_netmask_to_prefix", "", 1221, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_netmask := gi.NewUint32Argument(netmask)
	args := []gi.Argument{arg_netmask}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_utils_ip4_prefix_to_netmask
//
// [ prefix ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsIp4PrefixToNetmask(prefix uint32) (result uint32) {
	iv, err := _I.Get(1183, "utils_ip4_prefix_to_netmask", "", 1222, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_prefix := gi.NewUint32Argument(prefix)
	args := []gi.Argument{arg_prefix}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_utils_ip4_routes_from_variant
//
// [ value ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsIp4RoutesFromVariant(value g.Variant) (result g.PtrArray) {
	iv, err := _I.Get(1184, "utils_ip4_routes_from_variant", "", 1223, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_utils_ip4_routes_to_variant
//
// [ routes ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsIp4RoutesToVariant(routes int /*TODO_TYPE isPtr: true, tag: array*/) (result g.Variant) {
	iv, err := _I.Get(1185, "utils_ip4_routes_to_variant", "", 1224, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_routes := gi.NewIntArgument(routes) /*TODO*/
	args := []gi.Argument{arg_routes}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_utils_ip6_addresses_from_variant
//
// [ value ] trans: nothing
//
// [ out_gateway ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func UtilsIp6AddressesFromVariant(value g.Variant) (result g.PtrArray, out_gateway string) {
	iv, err := _I.Get(1186, "utils_ip6_addresses_from_variant", "", 1225, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_value := gi.NewPointerArgument(value.P)
	arg_out_gateway := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_value, arg_out_gateway}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	out_gateway = outArgs[0].String().Take()
	result.P = ret.Pointer()
	return
}

// nm_utils_ip6_addresses_to_variant
//
// [ addresses ] trans: nothing
//
// [ gateway ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsIp6AddressesToVariant(addresses int /*TODO_TYPE isPtr: true, tag: array*/, gateway string) (result g.Variant) {
	iv, err := _I.Get(1187, "utils_ip6_addresses_to_variant", "", 1226, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_gateway := gi.CString(gateway)
	arg_addresses := gi.NewIntArgument(addresses) /*TODO*/
	arg_gateway := gi.NewStringArgument(c_gateway)
	args := []gi.Argument{arg_addresses, arg_gateway}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_gateway)
	result.P = ret.Pointer()
	return
}

// nm_utils_ip6_dns_from_variant
//
// [ value ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsIp6DnsFromVariant(value g.Variant) (result string) {
	iv, err := _I.Get(1188, "utils_ip6_dns_from_variant", "", 1227, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// nm_utils_ip6_dns_to_variant
//
// [ dns ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsIp6DnsToVariant(dns string) (result g.Variant) {
	iv, err := _I.Get(1189, "utils_ip6_dns_to_variant", "", 1228, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_dns := gi.CString(dns)
	arg_dns := gi.NewStringArgument(c_dns)
	args := []gi.Argument{arg_dns}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_dns)
	result.P = ret.Pointer()
	return
}

// nm_utils_ip6_routes_from_variant
//
// [ value ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsIp6RoutesFromVariant(value g.Variant) (result g.PtrArray) {
	iv, err := _I.Get(1190, "utils_ip6_routes_from_variant", "", 1229, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_utils_ip6_routes_to_variant
//
// [ routes ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsIp6RoutesToVariant(routes int /*TODO_TYPE isPtr: true, tag: array*/) (result g.Variant) {
	iv, err := _I.Get(1191, "utils_ip6_routes_to_variant", "", 1230, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_routes := gi.NewIntArgument(routes) /*TODO*/
	args := []gi.Argument{arg_routes}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_utils_ip_addresses_from_variant
//
// [ value ] trans: nothing
//
// [ family ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsIpAddressesFromVariant(value g.Variant, family int32) (result g.PtrArray) {
	iv, err := _I.Get(1192, "utils_ip_addresses_from_variant", "", 1231, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_value := gi.NewPointerArgument(value.P)
	arg_family := gi.NewInt32Argument(family)
	args := []gi.Argument{arg_value, arg_family}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_utils_ip_addresses_to_variant
//
// [ addresses ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsIpAddressesToVariant(addresses int /*TODO_TYPE isPtr: true, tag: array*/) (result g.Variant) {
	iv, err := _I.Get(1193, "utils_ip_addresses_to_variant", "", 1232, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_addresses := gi.NewIntArgument(addresses) /*TODO*/
	args := []gi.Argument{arg_addresses}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_utils_ip_routes_from_variant
//
// [ value ] trans: nothing
//
// [ family ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsIpRoutesFromVariant(value g.Variant, family int32) (result g.PtrArray) {
	iv, err := _I.Get(1194, "utils_ip_routes_from_variant", "", 1233, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_value := gi.NewPointerArgument(value.P)
	arg_family := gi.NewInt32Argument(family)
	args := []gi.Argument{arg_value, arg_family}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_utils_ip_routes_to_variant
//
// [ routes ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsIpRoutesToVariant(routes int /*TODO_TYPE isPtr: true, tag: array*/) (result g.Variant) {
	iv, err := _I.Get(1195, "utils_ip_routes_to_variant", "", 1234, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_routes := gi.NewIntArgument(routes) /*TODO*/
	args := []gi.Argument{arg_routes}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// nm_utils_ipaddr_valid
//
// [ family ] trans: nothing
//
// [ ip ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsIpaddrValid(family int32, ip string) (result bool) {
	iv, err := _I.Get(1196, "utils_ipaddr_valid", "", 1235, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_ip := gi.CString(ip)
	arg_family := gi.NewInt32Argument(family)
	arg_ip := gi.NewStringArgument(c_ip)
	args := []gi.Argument{arg_family, arg_ip}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_ip)
	result = ret.Bool()
	return
}

// nm_utils_is_empty_ssid
//
// [ ssid ] trans: nothing
//
// [ len1 ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsIsEmptySsid(ssid gi.Uint8Array, len1 uint64) (result bool) {
	iv, err := _I.Get(1197, "utils_is_empty_ssid", "", 1236, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_ssid := gi.NewPointerArgument(ssid.P)
	arg_len1 := gi.NewUint64Argument(len1)
	args := []gi.Argument{arg_ssid, arg_len1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_utils_is_json_object
//
// [ str ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsIsJsonObject(str string) (result bool, err error) {
	iv, err := _I.Get(1198, "utils_is_json_object", "", 1237, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_str := gi.CString(str)
	arg_str := gi.NewStringArgument(c_str)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_str, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_str)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_utils_is_uuid
//
// [ str ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsIsUuid(str string) (result bool) {
	iv, err := _I.Get(1199, "utils_is_uuid", "", 1238, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_str := gi.CString(str)
	arg_str := gi.NewStringArgument(c_str)
	args := []gi.Argument{arg_str}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_str)
	result = ret.Bool()
	return
}

// nm_utils_is_valid_iface_name
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsIsValidIfaceName(name string) (result bool, err error) {
	iv, err := _I.Get(1200, "utils_is_valid_iface_name", "", 1239, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_name := gi.CString(name)
	arg_name := gi.NewStringArgument(c_name)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_name, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_name)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// nm_utils_parse_variant_attributes
//
// [ string ] trans: nothing
//
// [ attr_separator ] trans: nothing
//
// [ key_value_separator ] trans: nothing
//
// [ ignore_unknown ] trans: nothing
//
// [ spec ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsParseVariantAttributes(string string, attr_separator int8, key_value_separator int8, ignore_unknown bool, spec VariantAttributeSpec) (result g.HashTable, err error) {
	iv, err := _I.Get(1201, "utils_parse_variant_attributes", "", 1240, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_string := gi.CString(string)
	arg_string := gi.NewStringArgument(c_string)
	arg_attr_separator := gi.NewInt8Argument(attr_separator)
	arg_key_value_separator := gi.NewInt8Argument(key_value_separator)
	arg_ignore_unknown := gi.NewBoolArgument(ignore_unknown)
	arg_spec := gi.NewPointerArgument(spec.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_string, arg_attr_separator, arg_key_value_separator, arg_ignore_unknown, arg_spec, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_string)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_utils_same_ssid
//
// [ ssid1 ] trans: nothing
//
// [ len1 ] trans: nothing
//
// [ ssid2 ] trans: nothing
//
// [ len2 ] trans: nothing
//
// [ ignore_trailing_null ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsSameSsid(ssid1 gi.Uint8Array, len1 uint64, ssid2 gi.Uint8Array, len2 uint64, ignore_trailing_null bool) (result bool) {
	iv, err := _I.Get(1202, "utils_same_ssid", "", 1241, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_ssid1 := gi.NewPointerArgument(ssid1.P)
	arg_len1 := gi.NewUint64Argument(len1)
	arg_ssid2 := gi.NewPointerArgument(ssid2.P)
	arg_len2 := gi.NewUint64Argument(len2)
	arg_ignore_trailing_null := gi.NewBoolArgument(ignore_trailing_null)
	args := []gi.Argument{arg_ssid1, arg_len1, arg_ssid2, arg_len2, arg_ignore_trailing_null}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_utils_security_valid
//
// [ type1 ] trans: nothing
//
// [ wifi_caps ] trans: nothing
//
// [ have_ap ] trans: nothing
//
// [ adhoc ] trans: nothing
//
// [ ap_flags ] trans: nothing
//
// [ ap_wpa ] trans: nothing
//
// [ ap_rsn ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsSecurityValid(type1 UtilsSecurityTypeEnum, wifi_caps DeviceWifiCapabilitiesFlags, have_ap bool, adhoc bool, ap_flags NM80211ApFlags, ap_wpa NM80211ApSecurityFlags, ap_rsn NM80211ApSecurityFlags) (result bool) {
	iv, err := _I.Get(1203, "utils_security_valid", "", 1242, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_type1 := gi.NewIntArgument(int(type1))
	arg_wifi_caps := gi.NewIntArgument(int(wifi_caps))
	arg_have_ap := gi.NewBoolArgument(have_ap)
	arg_adhoc := gi.NewBoolArgument(adhoc)
	arg_ap_flags := gi.NewIntArgument(int(ap_flags))
	arg_ap_wpa := gi.NewIntArgument(int(ap_wpa))
	arg_ap_rsn := gi.NewIntArgument(int(ap_rsn))
	args := []gi.Argument{arg_type1, arg_wifi_caps, arg_have_ap, arg_adhoc, arg_ap_flags, arg_ap_wpa, arg_ap_rsn}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// nm_utils_sriov_vf_from_str
//
// [ str ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsSriovVfFromStr(str string) (result SriovVF, err error) {
	iv, err := _I.Get(1204, "utils_sriov_vf_from_str", "", 1243, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_str := gi.CString(str)
	arg_str := gi.NewStringArgument(c_str)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_str, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_str)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_utils_sriov_vf_to_str
//
// [ vf ] trans: nothing
//
// [ omit_index ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsSriovVfToStr(vf SriovVF, omit_index bool) (result string, err error) {
	iv, err := _I.Get(1205, "utils_sriov_vf_to_str", "", 1244, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_vf := gi.NewPointerArgument(vf.P)
	arg_omit_index := gi.NewBoolArgument(omit_index)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_vf, arg_omit_index, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.String().Take()
	return
}

// nm_utils_ssid_to_utf8
//
// [ ssid ] trans: nothing
//
// [ len1 ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsSsidToUtf8(ssid gi.Uint8Array, len1 uint64) (result string) {
	iv, err := _I.Get(1206, "utils_ssid_to_utf8", "", 1245, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_ssid := gi.NewPointerArgument(ssid.P)
	arg_len1 := gi.NewUint64Argument(len1)
	args := []gi.Argument{arg_ssid, arg_len1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// nm_utils_tc_action_from_str
//
// [ str ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsTcActionFromStr(str string) (result TCAction, err error) {
	iv, err := _I.Get(1207, "utils_tc_action_from_str", "", 1246, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_str := gi.CString(str)
	arg_str := gi.NewStringArgument(c_str)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_str, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_str)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_utils_tc_action_to_str
//
// [ action ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsTcActionToStr(action TCAction) (result string, err error) {
	iv, err := _I.Get(1208, "utils_tc_action_to_str", "", 1247, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_action := gi.NewPointerArgument(action.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_action, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.String().Take()
	return
}

// nm_utils_tc_qdisc_from_str
//
// [ str ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsTcQdiscFromStr(str string) (result TCQdisc, err error) {
	iv, err := _I.Get(1209, "utils_tc_qdisc_from_str", "", 1248, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_str := gi.CString(str)
	arg_str := gi.NewStringArgument(c_str)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_str, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_str)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_utils_tc_qdisc_to_str
//
// [ qdisc ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsTcQdiscToStr(qdisc TCQdisc) (result string, err error) {
	iv, err := _I.Get(1210, "utils_tc_qdisc_to_str", "", 1249, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_qdisc := gi.NewPointerArgument(qdisc.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_qdisc, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.String().Take()
	return
}

// nm_utils_tc_tfilter_from_str
//
// [ str ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsTcTfilterFromStr(str string) (result TCTfilter, err error) {
	iv, err := _I.Get(1211, "utils_tc_tfilter_from_str", "", 1250, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_str := gi.CString(str)
	arg_str := gi.NewStringArgument(c_str)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_str, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_str)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_utils_tc_tfilter_to_str
//
// [ tfilter ] trans: nothing
//
// [ result ] trans: everything
//
func UtilsTcTfilterToStr(tfilter TCTfilter) (result string, err error) {
	iv, err := _I.Get(1212, "utils_tc_tfilter_to_str", "", 1251, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_tfilter := gi.NewPointerArgument(tfilter.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_tfilter, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.String().Take()
	return
}

// nm_utils_uuid_generate
//
// [ result ] trans: everything
//
func UtilsUuidGenerate() (result string) {
	iv, err := _I.Get(1213, "utils_uuid_generate", "", 1252, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.String().Take()
	return
}

// nm_utils_version
//
// [ result ] trans: nothing
//
func UtilsVersion() (result uint32) {
	iv, err := _I.Get(1214, "utils_version", "", 1253, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_utils_wep_key_valid
//
// [ key ] trans: nothing
//
// [ wep_type ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsWepKeyValid(key string, wep_type WepKeyTypeEnum) (result bool) {
	iv, err := _I.Get(1215, "utils_wep_key_valid", "", 1254, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_key := gi.NewStringArgument(c_key)
	arg_wep_type := gi.NewIntArgument(int(wep_type))
	args := []gi.Argument{arg_key, arg_wep_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Bool()
	return
}

// nm_utils_wifi_2ghz_freqs
//
// [ result ] trans: nothing
//
func UtilsWifi2ghzFreqs() (result uint32) {
	iv, err := _I.Get(1216, "utils_wifi_2ghz_freqs", "", 1255, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_utils_wifi_5ghz_freqs
//
// [ result ] trans: nothing
//
func UtilsWifi5ghzFreqs() (result uint32) {
	iv, err := _I.Get(1217, "utils_wifi_5ghz_freqs", "", 1256, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_utils_wifi_channel_to_freq
//
// [ channel ] trans: nothing
//
// [ band ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsWifiChannelToFreq(channel uint32, band string) (result uint32) {
	iv, err := _I.Get(1218, "utils_wifi_channel_to_freq", "", 1257, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_band := gi.CString(band)
	arg_channel := gi.NewUint32Argument(channel)
	arg_band := gi.NewStringArgument(c_band)
	args := []gi.Argument{arg_channel, arg_band}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_band)
	result = ret.Uint32()
	return
}

// nm_utils_wifi_find_next_channel
//
// [ channel ] trans: nothing
//
// [ direction ] trans: nothing
//
// [ band ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsWifiFindNextChannel(channel uint32, direction int32, band string) (result uint32) {
	iv, err := _I.Get(1219, "utils_wifi_find_next_channel", "", 1258, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_band := gi.CString(band)
	arg_channel := gi.NewUint32Argument(channel)
	arg_direction := gi.NewInt32Argument(direction)
	arg_band := gi.NewStringArgument(c_band)
	args := []gi.Argument{arg_channel, arg_direction, arg_band}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_band)
	result = ret.Uint32()
	return
}

// nm_utils_wifi_freq_to_channel
//
// [ freq ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsWifiFreqToChannel(freq uint32) (result uint32) {
	iv, err := _I.Get(1220, "utils_wifi_freq_to_channel", "", 1259, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_freq := gi.NewUint32Argument(freq)
	args := []gi.Argument{arg_freq}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// nm_utils_wifi_is_channel_valid
//
// [ channel ] trans: nothing
//
// [ band ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsWifiIsChannelValid(channel uint32, band string) (result bool) {
	iv, err := _I.Get(1221, "utils_wifi_is_channel_valid", "", 1260, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_band := gi.CString(band)
	arg_channel := gi.NewUint32Argument(channel)
	arg_band := gi.NewStringArgument(c_band)
	args := []gi.Argument{arg_channel, arg_band}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_band)
	result = ret.Bool()
	return
}

// nm_utils_wifi_strength_bars
//
// [ strength ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsWifiStrengthBars(strength uint8) (result string) {
	iv, err := _I.Get(1222, "utils_wifi_strength_bars", "", 1261, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_strength := gi.NewUint8Argument(strength)
	args := []gi.Argument{arg_strength}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// nm_utils_wpa_psk_valid
//
// [ psk ] trans: nothing
//
// [ result ] trans: nothing
//
func UtilsWpaPskValid(psk string) (result bool) {
	iv, err := _I.Get(1223, "utils_wpa_psk_valid", "", 1262, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_psk := gi.CString(psk)
	arg_psk := gi.NewStringArgument(c_psk)
	args := []gi.Argument{arg_psk}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_psk)
	result = ret.Bool()
	return
}

// nm_vpn_editor_plugin_load
//
// [ plugin_name ] trans: nothing
//
// [ check_service ] trans: nothing
//
// [ result ] trans: everything
//
func VpnEditorPluginLoad(plugin_name string, check_service string) (result VpnEditorPlugin, err error) {
	iv, err := _I.Get(1224, "vpn_editor_plugin_load", "", 1263, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_plugin_name := gi.CString(plugin_name)
	c_check_service := gi.CString(check_service)
	arg_plugin_name := gi.NewStringArgument(c_plugin_name)
	arg_check_service := gi.NewStringArgument(c_check_service)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_plugin_name, arg_check_service, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_plugin_name)
	gi.Free(c_check_service)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_vpn_editor_plugin_load_from_file
//
// [ plugin_name ] trans: nothing
//
// [ check_service ] trans: nothing
//
// [ check_owner ] trans: nothing
//
// [ check_file ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ result ] trans: everything
//
func VpnEditorPluginLoadFromFile(plugin_name string, check_service string, check_owner int32, check_file UtilsCheckFilePredicate) (result VpnEditorPlugin, err error) {
	iv, err := _I.Get(1225, "vpn_editor_plugin_load_from_file", "", 1264, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_plugin_name := gi.CString(plugin_name)
	c_check_service := gi.CString(check_service)
	var cId uint
	var funcPtr unsafe.Pointer
	if check_file != nil {
		callableInfo := gi.GetCallableInfo("NM", "UtilsCheckFilePredicate")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallUtilsCheckFilePredicate(check_file, __result, __args)
		}, gi.ScopeCall, callableInfo)
		callableInfo.Unref()
	}
	arg_plugin_name := gi.NewStringArgument(c_plugin_name)
	arg_check_service := gi.NewStringArgument(c_check_service)
	arg_check_owner := gi.NewInt32Argument(check_owner)
	arg_check_file := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_plugin_name, arg_check_service, arg_check_owner, arg_check_file, arg_user_data, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_plugin_name)
	gi.Free(c_check_service)
	gi.UnregisterFClosure(cId)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// nm_vpn_plugin_error_quark
//
// [ result ] trans: nothing
//
func VpnPluginErrorQuark() (result uint32) {
	iv, err := _I.Get(1226, "vpn_plugin_error_quark", "", 1265, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// constants
const (
	ACCESS_POINT_BSSID                                     = "bssid"
	ACCESS_POINT_FLAGS                                     = "flags"
	ACCESS_POINT_FREQUENCY                                 = "frequency"
	ACCESS_POINT_HW_ADDRESS                                = "hw-address"
	ACCESS_POINT_LAST_SEEN                                 = "last-seen"
	ACCESS_POINT_MAX_BITRATE                               = "max-bitrate"
	ACCESS_POINT_MODE                                      = "mode"
	ACCESS_POINT_RSN_FLAGS                                 = "rsn-flags"
	ACCESS_POINT_SSID                                      = "ssid"
	ACCESS_POINT_STRENGTH                                  = "strength"
	ACCESS_POINT_WPA_FLAGS                                 = "wpa-flags"
	ACTIVE_CONNECTION_CONNECTION                           = "connection"
	ACTIVE_CONNECTION_DEFAULT                              = "default"
	ACTIVE_CONNECTION_DEFAULT6                             = "default6"
	ACTIVE_CONNECTION_DEVICES                              = "devices"
	ACTIVE_CONNECTION_DHCP4_CONFIG                         = "dhcp4-config"
	ACTIVE_CONNECTION_DHCP6_CONFIG                         = "dhcp6-config"
	ACTIVE_CONNECTION_ID                                   = "id"
	ACTIVE_CONNECTION_IP4_CONFIG                           = "ip4-config"
	ACTIVE_CONNECTION_IP6_CONFIG                           = "ip6-config"
	ACTIVE_CONNECTION_MASTER                               = "master"
	ACTIVE_CONNECTION_SPECIFIC_OBJECT_PATH                 = "specific-object-path"
	ACTIVE_CONNECTION_STATE                                = "state"
	ACTIVE_CONNECTION_STATE_FLAGS                          = "state-flags"
	ACTIVE_CONNECTION_TYPE                                 = "type"
	ACTIVE_CONNECTION_UUID                                 = "uuid"
	ACTIVE_CONNECTION_VPN                                  = "vpn"
	CHECKPOINT_CREATED                                     = "created"
	CHECKPOINT_DEVICES                                     = "devices"
	CHECKPOINT_ROLLBACK_TIMEOUT                            = "rollback-timeout"
	CLIENT_ACTIVATING_CONNECTION                           = "activating-connection"
	CLIENT_ACTIVE_CONNECTIONS                              = "active-connections"
	CLIENT_ACTIVE_CONNECTION_ADDED                         = "active-connection-added"
	CLIENT_ACTIVE_CONNECTION_REMOVED                       = "active-connection-removed"
	CLIENT_ALL_DEVICES                                     = "all-devices"
	CLIENT_ANY_DEVICE_ADDED                                = "any-device-added"
	CLIENT_ANY_DEVICE_REMOVED                              = "any-device-removed"
	CLIENT_CAN_MODIFY                                      = "can-modify"
	CLIENT_CONNECTIONS                                     = "connections"
	CLIENT_CONNECTION_ADDED                                = "connection-added"
	CLIENT_CONNECTION_REMOVED                              = "connection-removed"
	CLIENT_CONNECTIVITY                                    = "connectivity"
	CLIENT_CONNECTIVITY_CHECK_AVAILABLE                    = "connectivity-check-available"
	CLIENT_CONNECTIVITY_CHECK_ENABLED                      = "connectivity-check-enabled"
	CLIENT_DEVICES                                         = "devices"
	CLIENT_DEVICE_ADDED                                    = "device-added"
	CLIENT_DEVICE_REMOVED                                  = "device-removed"
	CLIENT_DNS_CONFIGURATION                               = "dns-configuration"
	CLIENT_DNS_MODE                                        = "dns-mode"
	CLIENT_DNS_RC_MANAGER                                  = "dns-rc-manager"
	CLIENT_HOSTNAME                                        = "hostname"
	CLIENT_METERED                                         = "metered"
	CLIENT_NETWORKING_ENABLED                              = "networking-enabled"
	CLIENT_NM_RUNNING                                      = "nm-running"
	CLIENT_PERMISSION_CHANGED                              = "permission-changed"
	CLIENT_PRIMARY_CONNECTION                              = "primary-connection"
	CLIENT_STARTUP                                         = "startup"
	CLIENT_STATE                                           = "state"
	CLIENT_VERSION                                         = "version"
	CLIENT_WIMAX_ENABLED                                   = "wimax-enabled"
	CLIENT_WIMAX_HARDWARE_ENABLED                          = "wimax-hardware-enabled"
	CLIENT_WIRELESS_ENABLED                                = "wireless-enabled"
	CLIENT_WIRELESS_HARDWARE_ENABLED                       = "wireless-hardware-enabled"
	CLIENT_WWAN_ENABLED                                    = "wwan-enabled"
	CLIENT_WWAN_HARDWARE_ENABLED                           = "wwan-hardware-enabled"
	CONNECTION_CHANGED                                     = "changed"
	CONNECTION_NORMALIZE_PARAM_IP6_CONFIG_METHOD           = "ip6-config-method"
	CONNECTION_SECRETS_CLEARED                             = "secrets-cleared"
	CONNECTION_SECRETS_UPDATED                             = "secrets-updated"
	DBUS_INTERFACE                                         = "org.freedesktop.NetworkManager"
	DBUS_INTERFACE_DNS_MANAGER                             = "org.freedesktop.NetworkManager.DnsManager"
	DBUS_INTERFACE_SETTINGS                                = "org.freedesktop.NetworkManager.Settings"
	DBUS_INTERFACE_SETTINGS_CONNECTION                     = "org.freedesktop.NetworkManager.Settings.Connection"
	DBUS_INTERFACE_SETTINGS_CONNECTION_SECRETS             = "org.freedesktop.NetworkManager.Settings.Connection.Secrets"
	DBUS_INTERFACE_VPN                                     = "org.freedesktop.NetworkManager.VPN.Manager"
	DBUS_INTERFACE_VPN_CONNECTION                          = "org.freedesktop.NetworkManager.VPN.Connection"
	DBUS_INVALID_VPN_CONNECTION                            = "org.freedesktop.NetworkManager.VPNConnections.InvalidVPNConnection"
	DBUS_NO_ACTIVE_VPN_CONNECTION                          = "org.freedesktop.NetworkManager.VPNConnections.NoActiveVPNConnection"
	DBUS_NO_VPN_CONNECTIONS                                = "org.freedesktop.NetworkManager.VPNConnections.NoVPNConnections"
	DBUS_PATH                                              = "/org/freedesktop/NetworkManager"
	DBUS_PATH_AGENT_MANAGER                                = "/org/freedesktop/NetworkManager/AgentManager"
	DBUS_PATH_DNS_MANAGER                                  = "/org/freedesktop/NetworkManager/DnsManager"
	DBUS_PATH_SECRET_AGENT                                 = "/org/freedesktop/NetworkManager/SecretAgent"
	DBUS_PATH_SETTINGS                                     = "/org/freedesktop/NetworkManager/Settings"
	DBUS_PATH_SETTINGS_CONNECTION                          = "/org/freedesktop/NetworkManager/Settings/Connection"
	DBUS_PATH_VPN                                          = "/org/freedesktop/NetworkManager/VPN/Manager"
	DBUS_PATH_VPN_CONNECTION                               = "/org/freedesktop/NetworkManager/VPN/Connection"
	DBUS_SERVICE                                           = "org.freedesktop.NetworkManager"
	DBUS_VPN_ALREADY_STARTED                               = "AlreadyStarted"
	DBUS_VPN_ALREADY_STOPPED                               = "AlreadyStopped"
	DBUS_VPN_BAD_ARGUMENTS                                 = "BadArguments"
	DBUS_VPN_ERROR_PREFIX                                  = "org.freedesktop.NetworkManager.VPN.Error"
	DBUS_VPN_INTERACTIVE_NOT_SUPPORTED                     = "InteractiveNotSupported"
	DBUS_VPN_SIGNAL_CONNECT_FAILED                         = "ConnectFailed"
	DBUS_VPN_SIGNAL_IP4_CONFIG                             = "IP4Config"
	DBUS_VPN_SIGNAL_IP_CONFIG_BAD                          = "IPConfigBad"
	DBUS_VPN_SIGNAL_LAUNCH_FAILED                          = "LaunchFailed"
	DBUS_VPN_SIGNAL_LOGIN_BANNER                           = "LoginBanner"
	DBUS_VPN_SIGNAL_LOGIN_FAILED                           = "LoginFailed"
	DBUS_VPN_SIGNAL_STATE_CHANGE                           = "StateChange"
	DBUS_VPN_SIGNAL_VPN_CONFIG_BAD                         = "VPNConfigBad"
	DBUS_VPN_STARTING_IN_PROGRESS                          = "StartingInProgress"
	DBUS_VPN_STOPPING_IN_PROGRESS                          = "StoppingInProgress"
	DBUS_VPN_WRONG_STATE                                   = "WrongState"
	DEVICE_6LOWPAN_HW_ADDRESS                              = "hw-address"
	DEVICE_6LOWPAN_PARENT                                  = "parent"
	DEVICE_ACTIVE_CONNECTION                               = "active-connection"
	DEVICE_ADSL_CARRIER                                    = "carrier"
	DEVICE_AUTOCONNECT                                     = "autoconnect"
	DEVICE_AVAILABLE_CONNECTIONS                           = "available-connections"
	DEVICE_BOND_CARRIER                                    = "carrier"
	DEVICE_BOND_HW_ADDRESS                                 = "hw-address"
	DEVICE_BOND_SLAVES                                     = "slaves"
	DEVICE_BRIDGE_CARRIER                                  = "carrier"
	DEVICE_BRIDGE_HW_ADDRESS                               = "hw-address"
	DEVICE_BRIDGE_SLAVES                                   = "slaves"
	DEVICE_BT_CAPABILITIES                                 = "bt-capabilities"
	DEVICE_BT_HW_ADDRESS                                   = "hw-address"
	DEVICE_BT_NAME                                         = "name"
	DEVICE_CAPABILITIES                                    = "capabilities"
	DEVICE_DEVICE_TYPE                                     = "device-type"
	DEVICE_DHCP4_CONFIG                                    = "dhcp4-config"
	DEVICE_DHCP6_CONFIG                                    = "dhcp6-config"
	DEVICE_DRIVER                                          = "driver"
	DEVICE_DRIVER_VERSION                                  = "driver-version"
	DEVICE_DUMMY_HW_ADDRESS                                = "hw-address"
	DEVICE_ETHERNET_CARRIER                                = "carrier"
	DEVICE_ETHERNET_HW_ADDRESS                             = "hw-address"
	DEVICE_ETHERNET_PERMANENT_HW_ADDRESS                   = "perm-hw-address"
	DEVICE_ETHERNET_S390_SUBCHANNELS                       = "s390-subchannels"
	DEVICE_ETHERNET_SPEED                                  = "speed"
	DEVICE_FIRMWARE_MISSING                                = "firmware-missing"
	DEVICE_FIRMWARE_VERSION                                = "firmware-version"
	DEVICE_GENERIC_HW_ADDRESS                              = "hw-address"
	DEVICE_GENERIC_TYPE_DESCRIPTION                        = "type-description"
	DEVICE_INFINIBAND_CARRIER                              = "carrier"
	DEVICE_INFINIBAND_HW_ADDRESS                           = "hw-address"
	DEVICE_INTERFACE                                       = "interface"
	DEVICE_IP4_CONFIG                                      = "ip4-config"
	DEVICE_IP6_CONFIG                                      = "ip6-config"
	DEVICE_IP_INTERFACE                                    = "ip-interface"
	DEVICE_IP_TUNNEL_ENCAPSULATION_LIMIT                   = "encapsulation-limit"
	DEVICE_IP_TUNNEL_FLAGS                                 = "flags"
	DEVICE_IP_TUNNEL_FLOW_LABEL                            = "flow-label"
	DEVICE_IP_TUNNEL_INPUT_KEY                             = "input-key"
	DEVICE_IP_TUNNEL_LOCAL                                 = "local"
	DEVICE_IP_TUNNEL_MODE                                  = "mode"
	DEVICE_IP_TUNNEL_OUTPUT_KEY                            = "output-key"
	DEVICE_IP_TUNNEL_PARENT                                = "parent"
	DEVICE_IP_TUNNEL_PATH_MTU_DISCOVERY                    = "path-mtu-discovery"
	DEVICE_IP_TUNNEL_REMOTE                                = "remote"
	DEVICE_IP_TUNNEL_TOS                                   = "tos"
	DEVICE_IP_TUNNEL_TTL                                   = "ttl"
	DEVICE_LLDP_NEIGHBORS                                  = "lldp-neighbors"
	DEVICE_MACSEC_CIPHER_SUITE                             = "cipher-suite"
	DEVICE_MACSEC_ENCODING_SA                              = "encoding-sa"
	DEVICE_MACSEC_ENCRYPT                                  = "encrypt"
	DEVICE_MACSEC_ES                                       = "es"
	DEVICE_MACSEC_HW_ADDRESS                               = "hw-address"
	DEVICE_MACSEC_ICV_LENGTH                               = "icv-length"
	DEVICE_MACSEC_INCLUDE_SCI                              = "include-sci"
	DEVICE_MACSEC_PARENT                                   = "parent"
	DEVICE_MACSEC_PROTECT                                  = "protect"
	DEVICE_MACSEC_REPLAY_PROTECT                           = "replay-protect"
	DEVICE_MACSEC_SCB                                      = "scb"
	DEVICE_MACSEC_SCI                                      = "sci"
	DEVICE_MACSEC_VALIDATION                               = "validation"
	DEVICE_MACSEC_WINDOW                                   = "window"
	DEVICE_MACVLAN_HW_ADDRESS                              = "hw-address"
	DEVICE_MACVLAN_MODE                                    = "mode"
	DEVICE_MACVLAN_NO_PROMISC                              = "no-promisc"
	DEVICE_MACVLAN_PARENT                                  = "parent"
	DEVICE_MACVLAN_TAP                                     = "tap"
	DEVICE_MANAGED                                         = "managed"
	DEVICE_METERED                                         = "metered"
	DEVICE_MODEM_CURRENT_CAPABILITIES                      = "current-capabilities"
	DEVICE_MODEM_MODEM_CAPABILITIES                        = "modem-capabilities"
	DEVICE_MTU                                             = "mtu"
	DEVICE_NM_PLUGIN_MISSING                               = "nm-plugin-missing"
	DEVICE_OLPC_MESH_ACTIVE_CHANNEL                        = "active-channel"
	DEVICE_OLPC_MESH_COMPANION                             = "companion"
	DEVICE_OLPC_MESH_HW_ADDRESS                            = "hw-address"
	DEVICE_OVS_BRIDGE_SLAVES                               = "slaves"
	DEVICE_OVS_PORT_SLAVES                                 = "slaves"
	DEVICE_PHYSICAL_PORT_ID                                = "physical-port-id"
	DEVICE_PRODUCT                                         = "product"
	DEVICE_REAL                                            = "real"
	DEVICE_STATE                                           = "state"
	DEVICE_STATE_REASON                                    = "state-reason"
	DEVICE_TEAM_CARRIER                                    = "carrier"
	DEVICE_TEAM_CONFIG                                     = "config"
	DEVICE_TEAM_HW_ADDRESS                                 = "hw-address"
	DEVICE_TEAM_SLAVES                                     = "slaves"
	DEVICE_TUN_GROUP                                       = "group"
	DEVICE_TUN_HW_ADDRESS                                  = "hw-address"
	DEVICE_TUN_MODE                                        = "mode"
	DEVICE_TUN_MULTI_QUEUE                                 = "multi-queue"
	DEVICE_TUN_NO_PI                                       = "no-pi"
	DEVICE_TUN_OWNER                                       = "owner"
	DEVICE_TUN_VNET_HDR                                    = "vnet-hdr"
	DEVICE_UDI                                             = "udi"
	DEVICE_VENDOR                                          = "vendor"
	DEVICE_VLAN_CARRIER                                    = "carrier"
	DEVICE_VLAN_HW_ADDRESS                                 = "hw-address"
	DEVICE_VLAN_PARENT                                     = "parent"
	DEVICE_VLAN_VLAN_ID                                    = "vlan-id"
	DEVICE_VXLAN_AGEING                                    = "ageing"
	DEVICE_VXLAN_CARRIER                                   = "carrier"
	DEVICE_VXLAN_DST_PORT                                  = "dst-port"
	DEVICE_VXLAN_GROUP                                     = "group"
	DEVICE_VXLAN_HW_ADDRESS                                = "hw-address"
	DEVICE_VXLAN_ID                                        = "id"
	DEVICE_VXLAN_L2MISS                                    = "l2miss"
	DEVICE_VXLAN_L3MISS                                    = "l3miss"
	DEVICE_VXLAN_LEARNING                                  = "learning"
	DEVICE_VXLAN_LIMIT                                     = "limit"
	DEVICE_VXLAN_LOCAL                                     = "local"
	DEVICE_VXLAN_PARENT                                    = "parent"
	DEVICE_VXLAN_PROXY                                     = "proxy"
	DEVICE_VXLAN_RSC                                       = "rsc"
	DEVICE_VXLAN_SRC_PORT_MAX                              = "src-port-max"
	DEVICE_VXLAN_SRC_PORT_MIN                              = "src-port-min"
	DEVICE_VXLAN_TOS                                       = "tos"
	DEVICE_VXLAN_TTL                                       = "ttl"
	DEVICE_WIFI_ACCESS_POINTS                              = "access-points"
	DEVICE_WIFI_ACTIVE_ACCESS_POINT                        = "active-access-point"
	DEVICE_WIFI_BITRATE                                    = "bitrate"
	DEVICE_WIFI_CAPABILITIES                               = "wireless-capabilities"
	DEVICE_WIFI_HW_ADDRESS                                 = "hw-address"
	DEVICE_WIFI_LAST_SCAN                                  = "last-scan"
	DEVICE_WIFI_MODE                                       = "mode"
	DEVICE_WIFI_PERMANENT_HW_ADDRESS                       = "perm-hw-address"
	DEVICE_WIMAX_ACTIVE_NSP                                = "active-nsp"
	DEVICE_WIMAX_BSID                                      = "bsid"
	DEVICE_WIMAX_CENTER_FREQUENCY                          = "center-frequency"
	DEVICE_WIMAX_CINR                                      = "cinr"
	DEVICE_WIMAX_HW_ADDRESS                                = "hw-address"
	DEVICE_WIMAX_NSPS                                      = "nsps"
	DEVICE_WIMAX_RSSI                                      = "rssi"
	DEVICE_WIMAX_TX_POWER                                  = "tx-power"
	DEVICE_WIREGUARD_FWMARK                                = "fwmark"
	DEVICE_WIREGUARD_LISTEN_PORT                           = "listen-port"
	DEVICE_WIREGUARD_PUBLIC_KEY                            = "public-key"
	DEVICE_WPAN_HW_ADDRESS                                 = "hw-address"
	DHCP_CONFIG_FAMILY                                     = "family"
	DHCP_CONFIG_OPTIONS                                    = "options"
	ETHTOOL_OPTNAME_FEATURE_ESP_HW_OFFLOAD                 = "feature-esp-hw-offload"
	ETHTOOL_OPTNAME_FEATURE_ESP_TX_CSUM_HW_OFFLOAD         = "feature-esp-tx-csum-hw-offload"
	ETHTOOL_OPTNAME_FEATURE_FCOE_MTU                       = "feature-fcoe-mtu"
	ETHTOOL_OPTNAME_FEATURE_GRO                            = "feature-gro"
	ETHTOOL_OPTNAME_FEATURE_GSO                            = "feature-gso"
	ETHTOOL_OPTNAME_FEATURE_HIGHDMA                        = "feature-highdma"
	ETHTOOL_OPTNAME_FEATURE_HW_TC_OFFLOAD                  = "feature-hw-tc-offload"
	ETHTOOL_OPTNAME_FEATURE_L2_FWD_OFFLOAD                 = "feature-l2-fwd-offload"
	ETHTOOL_OPTNAME_FEATURE_LOOPBACK                       = "feature-loopback"
	ETHTOOL_OPTNAME_FEATURE_LRO                            = "feature-lro"
	ETHTOOL_OPTNAME_FEATURE_NTUPLE                         = "feature-ntuple"
	ETHTOOL_OPTNAME_FEATURE_RX                             = "feature-rx"
	ETHTOOL_OPTNAME_FEATURE_RXHASH                         = "feature-rxhash"
	ETHTOOL_OPTNAME_FEATURE_RXVLAN                         = "feature-rxvlan"
	ETHTOOL_OPTNAME_FEATURE_RX_ALL                         = "feature-rx-all"
	ETHTOOL_OPTNAME_FEATURE_RX_FCS                         = "feature-rx-fcs"
	ETHTOOL_OPTNAME_FEATURE_RX_GRO_HW                      = "feature-rx-gro-hw"
	ETHTOOL_OPTNAME_FEATURE_RX_UDP_TUNNEL_PORT_OFFLOAD     = "feature-rx-udp_tunnel-port-offload"
	ETHTOOL_OPTNAME_FEATURE_RX_VLAN_FILTER                 = "feature-rx-vlan-filter"
	ETHTOOL_OPTNAME_FEATURE_RX_VLAN_STAG_FILTER            = "feature-rx-vlan-stag-filter"
	ETHTOOL_OPTNAME_FEATURE_RX_VLAN_STAG_HW_PARSE          = "feature-rx-vlan-stag-hw-parse"
	ETHTOOL_OPTNAME_FEATURE_SG                             = "feature-sg"
	ETHTOOL_OPTNAME_FEATURE_TLS_HW_RECORD                  = "feature-tls-hw-record"
	ETHTOOL_OPTNAME_FEATURE_TLS_HW_TX_OFFLOAD              = "feature-tls-hw-tx-offload"
	ETHTOOL_OPTNAME_FEATURE_TSO                            = "feature-tso"
	ETHTOOL_OPTNAME_FEATURE_TX                             = "feature-tx"
	ETHTOOL_OPTNAME_FEATURE_TXVLAN                         = "feature-txvlan"
	ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_FCOE_CRC           = "feature-tx-checksum-fcoe-crc"
	ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IPV4               = "feature-tx-checksum-ipv4"
	ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IPV6               = "feature-tx-checksum-ipv6"
	ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IP_GENERIC         = "feature-tx-checksum-ip-generic"
	ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_SCTP               = "feature-tx-checksum-sctp"
	ETHTOOL_OPTNAME_FEATURE_TX_ESP_SEGMENTATION            = "feature-tx-esp-segmentation"
	ETHTOOL_OPTNAME_FEATURE_TX_FCOE_SEGMENTATION           = "feature-tx-fcoe-segmentation"
	ETHTOOL_OPTNAME_FEATURE_TX_GRE_CSUM_SEGMENTATION       = "feature-tx-gre-csum-segmentation"
	ETHTOOL_OPTNAME_FEATURE_TX_GRE_SEGMENTATION            = "feature-tx-gre-segmentation"
	ETHTOOL_OPTNAME_FEATURE_TX_GSO_PARTIAL                 = "feature-tx-gso-partial"
	ETHTOOL_OPTNAME_FEATURE_TX_GSO_ROBUST                  = "feature-tx-gso-robust"
	ETHTOOL_OPTNAME_FEATURE_TX_IPXIP4_SEGMENTATION         = "feature-tx-ipxip4-segmentation"
	ETHTOOL_OPTNAME_FEATURE_TX_IPXIP6_SEGMENTATION         = "feature-tx-ipxip6-segmentation"
	ETHTOOL_OPTNAME_FEATURE_TX_NOCACHE_COPY                = "feature-tx-nocache-copy"
	ETHTOOL_OPTNAME_FEATURE_TX_SCATTER_GATHER              = "feature-tx-scatter-gather"
	ETHTOOL_OPTNAME_FEATURE_TX_SCATTER_GATHER_FRAGLIST     = "feature-tx-scatter-gather-fraglist"
	ETHTOOL_OPTNAME_FEATURE_TX_SCTP_SEGMENTATION           = "feature-tx-sctp-segmentation"
	ETHTOOL_OPTNAME_FEATURE_TX_TCP6_SEGMENTATION           = "feature-tx-tcp6-segmentation"
	ETHTOOL_OPTNAME_FEATURE_TX_TCP_ECN_SEGMENTATION        = "feature-tx-tcp-ecn-segmentation"
	ETHTOOL_OPTNAME_FEATURE_TX_TCP_MANGLEID_SEGMENTATION   = "feature-tx-tcp-mangleid-segmentation"
	ETHTOOL_OPTNAME_FEATURE_TX_TCP_SEGMENTATION            = "feature-tx-tcp-segmentation"
	ETHTOOL_OPTNAME_FEATURE_TX_UDP_SEGMENTATION            = "feature-tx-udp-segmentation"
	ETHTOOL_OPTNAME_FEATURE_TX_UDP_TNL_CSUM_SEGMENTATION   = "feature-tx-udp_tnl-csum-segmentation"
	ETHTOOL_OPTNAME_FEATURE_TX_UDP_TNL_SEGMENTATION        = "feature-tx-udp_tnl-segmentation"
	ETHTOOL_OPTNAME_FEATURE_TX_VLAN_STAG_HW_INSERT         = "feature-tx-vlan-stag-hw-insert"
	IP_ADDRESS_ATTRIBUTE_LABEL                             = "label"
	IP_CONFIG_ADDRESSES                                    = "addresses"
	IP_CONFIG_DOMAINS                                      = "domains"
	IP_CONFIG_FAMILY                                       = "family"
	IP_CONFIG_GATEWAY                                      = "gateway"
	IP_CONFIG_NAMESERVERS                                  = "nameservers"
	IP_CONFIG_ROUTES                                       = "routes"
	IP_CONFIG_SEARCHES                                     = "searches"
	IP_CONFIG_WINS_SERVERS                                 = "wins-servers"
	IP_ROUTE_ATTRIBUTE_CWND                                = "cwnd"
	IP_ROUTE_ATTRIBUTE_FROM                                = "from"
	IP_ROUTE_ATTRIBUTE_INITCWND                            = "initcwnd"
	IP_ROUTE_ATTRIBUTE_INITRWND                            = "initrwnd"
	IP_ROUTE_ATTRIBUTE_LOCK_CWND                           = "lock-cwnd"
	IP_ROUTE_ATTRIBUTE_LOCK_INITCWND                       = "lock-initcwnd"
	IP_ROUTE_ATTRIBUTE_LOCK_INITRWND                       = "lock-initrwnd"
	IP_ROUTE_ATTRIBUTE_LOCK_MTU                            = "lock-mtu"
	IP_ROUTE_ATTRIBUTE_LOCK_WINDOW                         = "lock-window"
	IP_ROUTE_ATTRIBUTE_MTU                                 = "mtu"
	IP_ROUTE_ATTRIBUTE_ONLINK                              = "onlink"
	IP_ROUTE_ATTRIBUTE_SRC                                 = "src"
	IP_ROUTE_ATTRIBUTE_TABLE                               = "table"
	IP_ROUTE_ATTRIBUTE_TOS                                 = "tos"
	IP_ROUTE_ATTRIBUTE_WINDOW                              = "window"
	LLDP_ATTR_CHASSIS_ID                                   = "chassis-id"
	LLDP_ATTR_CHASSIS_ID_TYPE                              = "chassis-id-type"
	LLDP_ATTR_DESTINATION                                  = "destination"
	LLDP_ATTR_IEEE_802_1_PPVID                             = "ieee-802-1-ppvid"
	LLDP_ATTR_IEEE_802_1_PPVID_FLAGS                       = "ieee-802-1-ppvid-flags"
	LLDP_ATTR_IEEE_802_1_PVID                              = "ieee-802-1-pvid"
	LLDP_ATTR_IEEE_802_1_VID                               = "ieee-802-1-vid"
	LLDP_ATTR_IEEE_802_1_VLAN_NAME                         = "ieee-802-1-vlan-name"
	LLDP_ATTR_PORT_DESCRIPTION                             = "port-description"
	LLDP_ATTR_PORT_ID                                      = "port-id"
	LLDP_ATTR_PORT_ID_TYPE                                 = "port-id-type"
	LLDP_ATTR_SYSTEM_CAPABILITIES                          = "system-capabilities"
	LLDP_ATTR_SYSTEM_DESCRIPTION                           = "system-description"
	LLDP_ATTR_SYSTEM_NAME                                  = "system-name"
	LLDP_DEST_NEAREST_BRIDGE                               = "nearest-bridge"
	LLDP_DEST_NEAREST_CUSTOMER_BRIDGE                      = "nearest-customer-bridge"
	LLDP_DEST_NEAREST_NON_TPMR_BRIDGE                      = "nearest-non-tpmr-bridge"
	MAJOR_VERSION                                          = 1
	MICRO_VERSION                                          = 6
	MINOR_VERSION                                          = 14
	OBJECT_DBUS_CONNECTION                                 = "dbus-connection"
	OBJECT_DBUS_OBJECT                                     = "dbus-object"
	OBJECT_DBUS_OBJECT_MANAGER                             = "dbus-object-manager"
	OBJECT_PATH                                            = "path"
	REMOTE_CONNECTION_DBUS_CONNECTION                      = "dbus-connection"
	REMOTE_CONNECTION_FILENAME                             = "filename"
	REMOTE_CONNECTION_FLAGS                                = "flags"
	REMOTE_CONNECTION_PATH                                 = "path"
	REMOTE_CONNECTION_UNSAVED                              = "unsaved"
	REMOTE_CONNECTION_VISIBLE                              = "visible"
	SECRET_AGENT_OLD_AUTO_REGISTER                         = "auto-register"
	SECRET_AGENT_OLD_CAPABILITIES                          = "capabilities"
	SECRET_AGENT_OLD_IDENTIFIER                            = "identifier"
	SECRET_AGENT_OLD_REGISTERED                            = "registered"
	SETTING_6LOWPAN_PARENT                                 = "parent"
	SETTING_6LOWPAN_SETTING_NAME                           = "6lowpan"
	SETTING_802_1X_ALTSUBJECT_MATCHES                      = "altsubject-matches"
	SETTING_802_1X_ANONYMOUS_IDENTITY                      = "anonymous-identity"
	SETTING_802_1X_AUTH_TIMEOUT                            = "auth-timeout"
	SETTING_802_1X_CA_CERT                                 = "ca-cert"
	SETTING_802_1X_CA_CERT_PASSWORD                        = "ca-cert-password"
	SETTING_802_1X_CA_CERT_PASSWORD_FLAGS                  = "ca-cert-password-flags"
	SETTING_802_1X_CA_PATH                                 = "ca-path"
	SETTING_802_1X_CERT_SCHEME_PREFIX_PATH                 = "file://"
	SETTING_802_1X_CERT_SCHEME_PREFIX_PKCS11               = "pkcs11:"
	SETTING_802_1X_CLIENT_CERT                             = "client-cert"
	SETTING_802_1X_CLIENT_CERT_PASSWORD                    = "client-cert-password"
	SETTING_802_1X_CLIENT_CERT_PASSWORD_FLAGS              = "client-cert-password-flags"
	SETTING_802_1X_DOMAIN_SUFFIX_MATCH                     = "domain-suffix-match"
	SETTING_802_1X_EAP                                     = "eap"
	SETTING_802_1X_IDENTITY                                = "identity"
	SETTING_802_1X_PAC_FILE                                = "pac-file"
	SETTING_802_1X_PASSWORD                                = "password"
	SETTING_802_1X_PASSWORD_FLAGS                          = "password-flags"
	SETTING_802_1X_PASSWORD_RAW                            = "password-raw"
	SETTING_802_1X_PASSWORD_RAW_FLAGS                      = "password-raw-flags"
	SETTING_802_1X_PHASE1_AUTH_FLAGS                       = "phase1-auth-flags"
	SETTING_802_1X_PHASE1_FAST_PROVISIONING                = "phase1-fast-provisioning"
	SETTING_802_1X_PHASE1_PEAPLABEL                        = "phase1-peaplabel"
	SETTING_802_1X_PHASE1_PEAPVER                          = "phase1-peapver"
	SETTING_802_1X_PHASE2_ALTSUBJECT_MATCHES               = "phase2-altsubject-matches"
	SETTING_802_1X_PHASE2_AUTH                             = "phase2-auth"
	SETTING_802_1X_PHASE2_AUTHEAP                          = "phase2-autheap"
	SETTING_802_1X_PHASE2_CA_CERT                          = "phase2-ca-cert"
	SETTING_802_1X_PHASE2_CA_CERT_PASSWORD                 = "phase2-ca-cert-password"
	SETTING_802_1X_PHASE2_CA_CERT_PASSWORD_FLAGS           = "phase2-ca-cert-password-flags"
	SETTING_802_1X_PHASE2_CA_PATH                          = "phase2-ca-path"
	SETTING_802_1X_PHASE2_CLIENT_CERT                      = "phase2-client-cert"
	SETTING_802_1X_PHASE2_CLIENT_CERT_PASSWORD             = "phase2-client-cert-password"
	SETTING_802_1X_PHASE2_CLIENT_CERT_PASSWORD_FLAGS       = "phase2-client-cert-password-flags"
	SETTING_802_1X_PHASE2_DOMAIN_SUFFIX_MATCH              = "phase2-domain-suffix-match"
	SETTING_802_1X_PHASE2_PRIVATE_KEY                      = "phase2-private-key"
	SETTING_802_1X_PHASE2_PRIVATE_KEY_PASSWORD             = "phase2-private-key-password"
	SETTING_802_1X_PHASE2_PRIVATE_KEY_PASSWORD_FLAGS       = "phase2-private-key-password-flags"
	SETTING_802_1X_PHASE2_SUBJECT_MATCH                    = "phase2-subject-match"
	SETTING_802_1X_PIN                                     = "pin"
	SETTING_802_1X_PIN_FLAGS                               = "pin-flags"
	SETTING_802_1X_PRIVATE_KEY                             = "private-key"
	SETTING_802_1X_PRIVATE_KEY_PASSWORD                    = "private-key-password"
	SETTING_802_1X_PRIVATE_KEY_PASSWORD_FLAGS              = "private-key-password-flags"
	SETTING_802_1X_SETTING_NAME                            = "802-1x"
	SETTING_802_1X_SUBJECT_MATCH                           = "subject-match"
	SETTING_802_1X_SYSTEM_CA_CERTS                         = "system-ca-certs"
	SETTING_ADSL_ENCAPSULATION                             = "encapsulation"
	SETTING_ADSL_ENCAPSULATION_LLC                         = "llc"
	SETTING_ADSL_ENCAPSULATION_VCMUX                       = "vcmux"
	SETTING_ADSL_PASSWORD                                  = "password"
	SETTING_ADSL_PASSWORD_FLAGS                            = "password-flags"
	SETTING_ADSL_PROTOCOL                                  = "protocol"
	SETTING_ADSL_PROTOCOL_IPOATM                           = "ipoatm"
	SETTING_ADSL_PROTOCOL_PPPOA                            = "pppoa"
	SETTING_ADSL_PROTOCOL_PPPOE                            = "pppoe"
	SETTING_ADSL_SETTING_NAME                              = "adsl"
	SETTING_ADSL_USERNAME                                  = "username"
	SETTING_ADSL_VCI                                       = "vci"
	SETTING_ADSL_VPI                                       = "vpi"
	SETTING_BLUETOOTH_BDADDR                               = "bdaddr"
	SETTING_BLUETOOTH_SETTING_NAME                         = "bluetooth"
	SETTING_BLUETOOTH_TYPE                                 = "type"
	SETTING_BLUETOOTH_TYPE_DUN                             = "dun"
	SETTING_BLUETOOTH_TYPE_NAP                             = "nap"
	SETTING_BLUETOOTH_TYPE_PANU                            = "panu"
	SETTING_BOND_OPTIONS                                   = "options"
	SETTING_BOND_OPTION_ACTIVE_SLAVE                       = "active_slave"
	SETTING_BOND_OPTION_AD_ACTOR_SYSTEM                    = "ad_actor_system"
	SETTING_BOND_OPTION_AD_ACTOR_SYS_PRIO                  = "ad_actor_sys_prio"
	SETTING_BOND_OPTION_AD_SELECT                          = "ad_select"
	SETTING_BOND_OPTION_AD_USER_PORT_KEY                   = "ad_user_port_key"
	SETTING_BOND_OPTION_ALL_SLAVES_ACTIVE                  = "all_slaves_active"
	SETTING_BOND_OPTION_ARP_ALL_TARGETS                    = "arp_all_targets"
	SETTING_BOND_OPTION_ARP_INTERVAL                       = "arp_interval"
	SETTING_BOND_OPTION_ARP_IP_TARGET                      = "arp_ip_target"
	SETTING_BOND_OPTION_ARP_VALIDATE                       = "arp_validate"
	SETTING_BOND_OPTION_DOWNDELAY                          = "downdelay"
	SETTING_BOND_OPTION_FAIL_OVER_MAC                      = "fail_over_mac"
	SETTING_BOND_OPTION_LACP_RATE                          = "lacp_rate"
	SETTING_BOND_OPTION_LP_INTERVAL                        = "lp_interval"
	SETTING_BOND_OPTION_MIIMON                             = "miimon"
	SETTING_BOND_OPTION_MIN_LINKS                          = "min_links"
	SETTING_BOND_OPTION_MODE                               = "mode"
	SETTING_BOND_OPTION_NUM_GRAT_ARP                       = "num_grat_arp"
	SETTING_BOND_OPTION_NUM_UNSOL_NA                       = "num_unsol_na"
	SETTING_BOND_OPTION_PACKETS_PER_SLAVE                  = "packets_per_slave"
	SETTING_BOND_OPTION_PRIMARY                            = "primary"
	SETTING_BOND_OPTION_PRIMARY_RESELECT                   = "primary_reselect"
	SETTING_BOND_OPTION_RESEND_IGMP                        = "resend_igmp"
	SETTING_BOND_OPTION_TLB_DYNAMIC_LB                     = "tlb_dynamic_lb"
	SETTING_BOND_OPTION_UPDELAY                            = "updelay"
	SETTING_BOND_OPTION_USE_CARRIER                        = "use_carrier"
	SETTING_BOND_OPTION_XMIT_HASH_POLICY                   = "xmit_hash_policy"
	SETTING_BOND_SETTING_NAME                              = "bond"
	SETTING_BRIDGE_AGEING_TIME                             = "ageing-time"
	SETTING_BRIDGE_FORWARD_DELAY                           = "forward-delay"
	SETTING_BRIDGE_GROUP_FORWARD_MASK                      = "group-forward-mask"
	SETTING_BRIDGE_HELLO_TIME                              = "hello-time"
	SETTING_BRIDGE_MAC_ADDRESS                             = "mac-address"
	SETTING_BRIDGE_MAX_AGE                                 = "max-age"
	SETTING_BRIDGE_MULTICAST_SNOOPING                      = "multicast-snooping"
	SETTING_BRIDGE_PORT_HAIRPIN_MODE                       = "hairpin-mode"
	SETTING_BRIDGE_PORT_PATH_COST                          = "path-cost"
	SETTING_BRIDGE_PORT_PRIORITY                           = "priority"
	SETTING_BRIDGE_PORT_SETTING_NAME                       = "bridge-port"
	SETTING_BRIDGE_PRIORITY                                = "priority"
	SETTING_BRIDGE_SETTING_NAME                            = "bridge"
	SETTING_BRIDGE_STP                                     = "stp"
	SETTING_CDMA_MTU                                       = "mtu"
	SETTING_CDMA_NUMBER                                    = "number"
	SETTING_CDMA_PASSWORD                                  = "password"
	SETTING_CDMA_PASSWORD_FLAGS                            = "password-flags"
	SETTING_CDMA_SETTING_NAME                              = "cdma"
	SETTING_CDMA_USERNAME                                  = "username"
	SETTING_CONNECTION_AUTH_RETRIES                        = "auth-retries"
	SETTING_CONNECTION_AUTOCONNECT                         = "autoconnect"
	SETTING_CONNECTION_AUTOCONNECT_PRIORITY                = "autoconnect-priority"
	SETTING_CONNECTION_AUTOCONNECT_PRIORITY_DEFAULT        = 0
	SETTING_CONNECTION_AUTOCONNECT_PRIORITY_MAX            = 999
	SETTING_CONNECTION_AUTOCONNECT_PRIORITY_MIN            = -999
	SETTING_CONNECTION_AUTOCONNECT_RETRIES                 = "autoconnect-retries"
	SETTING_CONNECTION_AUTOCONNECT_SLAVES                  = "autoconnect-slaves"
	SETTING_CONNECTION_GATEWAY_PING_TIMEOUT                = "gateway-ping-timeout"
	SETTING_CONNECTION_ID                                  = "id"
	SETTING_CONNECTION_INTERFACE_NAME                      = "interface-name"
	SETTING_CONNECTION_LLDP                                = "lldp"
	SETTING_CONNECTION_LLMNR                               = "llmnr"
	SETTING_CONNECTION_MASTER                              = "master"
	SETTING_CONNECTION_MDNS                                = "mdns"
	SETTING_CONNECTION_METERED                             = "metered"
	SETTING_CONNECTION_MULTI_CONNECT                       = "multi-connect"
	SETTING_CONNECTION_PERMISSIONS                         = "permissions"
	SETTING_CONNECTION_READ_ONLY                           = "read-only"
	SETTING_CONNECTION_SECONDARIES                         = "secondaries"
	SETTING_CONNECTION_SETTING_NAME                        = "connection"
	SETTING_CONNECTION_SLAVE_TYPE                          = "slave-type"
	SETTING_CONNECTION_STABLE_ID                           = "stable-id"
	SETTING_CONNECTION_TIMESTAMP                           = "timestamp"
	SETTING_CONNECTION_TYPE                                = "type"
	SETTING_CONNECTION_UUID                                = "uuid"
	SETTING_CONNECTION_ZONE                                = "zone"
	SETTING_DCB_APP_FCOE_FLAGS                             = "app-fcoe-flags"
	SETTING_DCB_APP_FCOE_MODE                              = "app-fcoe-mode"
	SETTING_DCB_APP_FCOE_PRIORITY                          = "app-fcoe-priority"
	SETTING_DCB_APP_FIP_FLAGS                              = "app-fip-flags"
	SETTING_DCB_APP_FIP_PRIORITY                           = "app-fip-priority"
	SETTING_DCB_APP_ISCSI_FLAGS                            = "app-iscsi-flags"
	SETTING_DCB_APP_ISCSI_PRIORITY                         = "app-iscsi-priority"
	SETTING_DCB_FCOE_MODE_FABRIC                           = "fabric"
	SETTING_DCB_FCOE_MODE_VN2VN                            = "vn2vn"
	SETTING_DCB_PRIORITY_BANDWIDTH                         = "priority-bandwidth"
	SETTING_DCB_PRIORITY_FLOW_CONTROL                      = "priority-flow-control"
	SETTING_DCB_PRIORITY_FLOW_CONTROL_FLAGS                = "priority-flow-control-flags"
	SETTING_DCB_PRIORITY_GROUP_BANDWIDTH                   = "priority-group-bandwidth"
	SETTING_DCB_PRIORITY_GROUP_FLAGS                       = "priority-group-flags"
	SETTING_DCB_PRIORITY_GROUP_ID                          = "priority-group-id"
	SETTING_DCB_PRIORITY_STRICT_BANDWIDTH                  = "priority-strict-bandwidth"
	SETTING_DCB_PRIORITY_TRAFFIC_CLASS                     = "priority-traffic-class"
	SETTING_DCB_SETTING_NAME                               = "dcb"
	SETTING_DNS_OPTION_ATTEMPTS                            = "attempts"
	SETTING_DNS_OPTION_DEBUG                               = "debug"
	SETTING_DNS_OPTION_EDNS0                               = "edns0"
	SETTING_DNS_OPTION_INET6                               = "inet6"
	SETTING_DNS_OPTION_IP6_BYTESTRING                      = "ip6-bytestring"
	SETTING_DNS_OPTION_IP6_DOTINT                          = "ip6-dotint"
	SETTING_DNS_OPTION_NDOTS                               = "ndots"
	SETTING_DNS_OPTION_NO_CHECK_NAMES                      = "no-check-names"
	SETTING_DNS_OPTION_NO_IP6_DOTINT                       = "no-ip6-dotint"
	SETTING_DNS_OPTION_NO_TLD_QUERY                        = "no-tld-query"
	SETTING_DNS_OPTION_ROTATE                              = "rotate"
	SETTING_DNS_OPTION_SINGLE_REQUEST                      = "single-request"
	SETTING_DNS_OPTION_SINGLE_REQUEST_REOPEN               = "single-request-reopen"
	SETTING_DNS_OPTION_TIMEOUT                             = "timeout"
	SETTING_DNS_OPTION_USE_VC                              = "use-vc"
	SETTING_DUMMY_SETTING_NAME                             = "dummy"
	SETTING_ETHTOOL_SETTING_NAME                           = "ethtool"
	SETTING_GENERIC_SETTING_NAME                           = "generic"
	SETTING_GSM_APN                                        = "apn"
	SETTING_GSM_DEVICE_ID                                  = "device-id"
	SETTING_GSM_HOME_ONLY                                  = "home-only"
	SETTING_GSM_MTU                                        = "mtu"
	SETTING_GSM_NETWORK_ID                                 = "network-id"
	SETTING_GSM_NUMBER                                     = "number"
	SETTING_GSM_PASSWORD                                   = "password"
	SETTING_GSM_PASSWORD_FLAGS                             = "password-flags"
	SETTING_GSM_PIN                                        = "pin"
	SETTING_GSM_PIN_FLAGS                                  = "pin-flags"
	SETTING_GSM_SETTING_NAME                               = "gsm"
	SETTING_GSM_SIM_ID                                     = "sim-id"
	SETTING_GSM_SIM_OPERATOR_ID                            = "sim-operator-id"
	SETTING_GSM_USERNAME                                   = "username"
	SETTING_INFINIBAND_MAC_ADDRESS                         = "mac-address"
	SETTING_INFINIBAND_MTU                                 = "mtu"
	SETTING_INFINIBAND_PARENT                              = "parent"
	SETTING_INFINIBAND_P_KEY                               = "p-key"
	SETTING_INFINIBAND_SETTING_NAME                        = "infiniband"
	SETTING_INFINIBAND_TRANSPORT_MODE                      = "transport-mode"
	SETTING_IP4_CONFIG_DHCP_CLIENT_ID                      = "dhcp-client-id"
	SETTING_IP4_CONFIG_DHCP_FQDN                           = "dhcp-fqdn"
	SETTING_IP4_CONFIG_METHOD_AUTO                         = "auto"
	SETTING_IP4_CONFIG_METHOD_DISABLED                     = "disabled"
	SETTING_IP4_CONFIG_METHOD_LINK_LOCAL                   = "link-local"
	SETTING_IP4_CONFIG_METHOD_MANUAL                       = "manual"
	SETTING_IP4_CONFIG_METHOD_SHARED                       = "shared"
	SETTING_IP4_CONFIG_SETTING_NAME                        = "ipv4"
	SETTING_IP6_CONFIG_ADDR_GEN_MODE                       = "addr-gen-mode"
	SETTING_IP6_CONFIG_DHCP_DUID                           = "dhcp-duid"
	SETTING_IP6_CONFIG_IP6_PRIVACY                         = "ip6-privacy"
	SETTING_IP6_CONFIG_METHOD_AUTO                         = "auto"
	SETTING_IP6_CONFIG_METHOD_DHCP                         = "dhcp"
	SETTING_IP6_CONFIG_METHOD_IGNORE                       = "ignore"
	SETTING_IP6_CONFIG_METHOD_LINK_LOCAL                   = "link-local"
	SETTING_IP6_CONFIG_METHOD_MANUAL                       = "manual"
	SETTING_IP6_CONFIG_METHOD_SHARED                       = "shared"
	SETTING_IP6_CONFIG_SETTING_NAME                        = "ipv6"
	SETTING_IP6_CONFIG_TOKEN                               = "token"
	SETTING_IP_CONFIG_ADDRESSES                            = "addresses"
	SETTING_IP_CONFIG_DAD_TIMEOUT                          = "dad-timeout"
	SETTING_IP_CONFIG_DAD_TIMEOUT_MAX                      = 30000
	SETTING_IP_CONFIG_DHCP_HOSTNAME                        = "dhcp-hostname"
	SETTING_IP_CONFIG_DHCP_SEND_HOSTNAME                   = "dhcp-send-hostname"
	SETTING_IP_CONFIG_DHCP_TIMEOUT                         = "dhcp-timeout"
	SETTING_IP_CONFIG_DNS                                  = "dns"
	SETTING_IP_CONFIG_DNS_OPTIONS                          = "dns-options"
	SETTING_IP_CONFIG_DNS_PRIORITY                         = "dns-priority"
	SETTING_IP_CONFIG_DNS_SEARCH                           = "dns-search"
	SETTING_IP_CONFIG_GATEWAY                              = "gateway"
	SETTING_IP_CONFIG_IGNORE_AUTO_DNS                      = "ignore-auto-dns"
	SETTING_IP_CONFIG_IGNORE_AUTO_ROUTES                   = "ignore-auto-routes"
	SETTING_IP_CONFIG_MAY_FAIL                             = "may-fail"
	SETTING_IP_CONFIG_METHOD                               = "method"
	SETTING_IP_CONFIG_NEVER_DEFAULT                        = "never-default"
	SETTING_IP_CONFIG_ROUTES                               = "routes"
	SETTING_IP_CONFIG_ROUTE_METRIC                         = "route-metric"
	SETTING_IP_CONFIG_ROUTE_TABLE                          = "route-table"
	SETTING_IP_TUNNEL_ENCAPSULATION_LIMIT                  = "encapsulation-limit"
	SETTING_IP_TUNNEL_FLAGS                                = "flags"
	SETTING_IP_TUNNEL_FLOW_LABEL                           = "flow-label"
	SETTING_IP_TUNNEL_INPUT_KEY                            = "input-key"
	SETTING_IP_TUNNEL_LOCAL                                = "local"
	SETTING_IP_TUNNEL_MODE                                 = "mode"
	SETTING_IP_TUNNEL_MTU                                  = "mtu"
	SETTING_IP_TUNNEL_OUTPUT_KEY                           = "output-key"
	SETTING_IP_TUNNEL_PARENT                               = "parent"
	SETTING_IP_TUNNEL_PATH_MTU_DISCOVERY                   = "path-mtu-discovery"
	SETTING_IP_TUNNEL_REMOTE                               = "remote"
	SETTING_IP_TUNNEL_SETTING_NAME                         = "ip-tunnel"
	SETTING_IP_TUNNEL_TOS                                  = "tos"
	SETTING_IP_TUNNEL_TTL                                  = "ttl"
	SETTING_MACSEC_ENCRYPT                                 = "encrypt"
	SETTING_MACSEC_MKA_CAK                                 = "mka-cak"
	SETTING_MACSEC_MKA_CAK_FLAGS                           = "mka-cak-flags"
	SETTING_MACSEC_MKA_CAK_LENGTH                          = 32
	SETTING_MACSEC_MKA_CKN                                 = "mka-ckn"
	SETTING_MACSEC_MKA_CKN_LENGTH                          = 64
	SETTING_MACSEC_MODE                                    = "mode"
	SETTING_MACSEC_PARENT                                  = "parent"
	SETTING_MACSEC_PORT                                    = "port"
	SETTING_MACSEC_SEND_SCI                                = "send-sci"
	SETTING_MACSEC_SETTING_NAME                            = "macsec"
	SETTING_MACSEC_VALIDATION                              = "validation"
	SETTING_MACVLAN_MODE                                   = "mode"
	SETTING_MACVLAN_PARENT                                 = "parent"
	SETTING_MACVLAN_PROMISCUOUS                            = "promiscuous"
	SETTING_MACVLAN_SETTING_NAME                           = "macvlan"
	SETTING_MACVLAN_TAP                                    = "tap"
	SETTING_MATCH_INTERFACE_NAME                           = "interface-name"
	SETTING_MATCH_SETTING_NAME                             = "match"
	SETTING_NAME                                           = "name"
	SETTING_OLPC_MESH_CHANNEL                              = "channel"
	SETTING_OLPC_MESH_DHCP_ANYCAST_ADDRESS                 = "dhcp-anycast-address"
	SETTING_OLPC_MESH_SETTING_NAME                         = "802-11-olpc-mesh"
	SETTING_OLPC_MESH_SSID                                 = "ssid"
	SETTING_OVS_BRIDGE_FAIL_MODE                           = "fail-mode"
	SETTING_OVS_BRIDGE_MCAST_SNOOPING_ENABLE               = "mcast-snooping-enable"
	SETTING_OVS_BRIDGE_RSTP_ENABLE                         = "rstp-enable"
	SETTING_OVS_BRIDGE_SETTING_NAME                        = "ovs-bridge"
	SETTING_OVS_BRIDGE_STP_ENABLE                          = "stp-enable"
	SETTING_OVS_INTERFACE_SETTING_NAME                     = "ovs-interface"
	SETTING_OVS_INTERFACE_TYPE                             = "type"
	SETTING_OVS_PATCH_PEER                                 = "peer"
	SETTING_OVS_PATCH_SETTING_NAME                         = "ovs-patch"
	SETTING_OVS_PORT_BOND_DOWNDELAY                        = "bond-downdelay"
	SETTING_OVS_PORT_BOND_MODE                             = "bond-mode"
	SETTING_OVS_PORT_BOND_UPDELAY                          = "bond-updelay"
	SETTING_OVS_PORT_LACP                                  = "lacp"
	SETTING_OVS_PORT_SETTING_NAME                          = "ovs-port"
	SETTING_OVS_PORT_TAG                                   = "tag"
	SETTING_OVS_PORT_VLAN_MODE                             = "vlan-mode"
	SETTING_PARAM_FUZZY_IGNORE                             = 8
	SETTING_PARAM_REQUIRED                                 = 2
	SETTING_PARAM_SECRET                                   = 4
	SETTING_PPPOE_PARENT                                   = "parent"
	SETTING_PPPOE_PASSWORD                                 = "password"
	SETTING_PPPOE_PASSWORD_FLAGS                           = "password-flags"
	SETTING_PPPOE_SERVICE                                  = "service"
	SETTING_PPPOE_SETTING_NAME                             = "pppoe"
	SETTING_PPPOE_USERNAME                                 = "username"
	SETTING_PPP_BAUD                                       = "baud"
	SETTING_PPP_CRTSCTS                                    = "crtscts"
	SETTING_PPP_LCP_ECHO_FAILURE                           = "lcp-echo-failure"
	SETTING_PPP_LCP_ECHO_INTERVAL                          = "lcp-echo-interval"
	SETTING_PPP_MPPE_STATEFUL                              = "mppe-stateful"
	SETTING_PPP_MRU                                        = "mru"
	SETTING_PPP_MTU                                        = "mtu"
	SETTING_PPP_NOAUTH                                     = "noauth"
	SETTING_PPP_NOBSDCOMP                                  = "nobsdcomp"
	SETTING_PPP_NODEFLATE                                  = "nodeflate"
	SETTING_PPP_NO_VJ_COMP                                 = "no-vj-comp"
	SETTING_PPP_REFUSE_CHAP                                = "refuse-chap"
	SETTING_PPP_REFUSE_EAP                                 = "refuse-eap"
	SETTING_PPP_REFUSE_MSCHAP                              = "refuse-mschap"
	SETTING_PPP_REFUSE_MSCHAPV2                            = "refuse-mschapv2"
	SETTING_PPP_REFUSE_PAP                                 = "refuse-pap"
	SETTING_PPP_REQUIRE_MPPE                               = "require-mppe"
	SETTING_PPP_REQUIRE_MPPE_128                           = "require-mppe-128"
	SETTING_PPP_SETTING_NAME                               = "ppp"
	SETTING_PROXY_BROWSER_ONLY                             = "browser-only"
	SETTING_PROXY_METHOD                                   = "method"
	SETTING_PROXY_PAC_SCRIPT                               = "pac-script"
	SETTING_PROXY_PAC_URL                                  = "pac-url"
	SETTING_PROXY_SETTING_NAME                             = "proxy"
	SETTING_SERIAL_BAUD                                    = "baud"
	SETTING_SERIAL_BITS                                    = "bits"
	SETTING_SERIAL_PARITY                                  = "parity"
	SETTING_SERIAL_SEND_DELAY                              = "send-delay"
	SETTING_SERIAL_SETTING_NAME                            = "serial"
	SETTING_SERIAL_STOPBITS                                = "stopbits"
	SETTING_SRIOV_AUTOPROBE_DRIVERS                        = "autoprobe-drivers"
	SETTING_SRIOV_SETTING_NAME                             = "sriov"
	SETTING_SRIOV_TOTAL_VFS                                = "total-vfs"
	SETTING_SRIOV_VFS                                      = "vfs"
	SETTING_TC_CONFIG_QDISCS                               = "qdiscs"
	SETTING_TC_CONFIG_SETTING_NAME                         = "tc"
	SETTING_TC_CONFIG_TFILTERS                             = "tfilters"
	SETTING_TEAM_CONFIG                                    = "config"
	SETTING_TEAM_LINK_WATCHERS                             = "link-watchers"
	SETTING_TEAM_MCAST_REJOIN_COUNT                        = "mcast-rejoin-count"
	SETTING_TEAM_MCAST_REJOIN_INTERVAL                     = "mcast-rejoin-interval"
	SETTING_TEAM_NOTIFY_MCAST_COUNT_ACTIVEBACKUP_DEFAULT   = 1
	SETTING_TEAM_NOTIFY_PEERS_COUNT                        = "notify-peers-count"
	SETTING_TEAM_NOTIFY_PEERS_COUNT_ACTIVEBACKUP_DEFAULT   = 1
	SETTING_TEAM_NOTIFY_PEERS_INTERVAL                     = "notify-peers-interval"
	SETTING_TEAM_PORT_CONFIG                               = "config"
	SETTING_TEAM_PORT_LACP_KEY                             = "lacp-key"
	SETTING_TEAM_PORT_LACP_PRIO                            = "lacp-prio"
	SETTING_TEAM_PORT_LACP_PRIO_DEFAULT                    = 255
	SETTING_TEAM_PORT_LINK_WATCHERS                        = "link-watchers"
	SETTING_TEAM_PORT_PRIO                                 = "prio"
	SETTING_TEAM_PORT_QUEUE_ID                             = "queue-id"
	SETTING_TEAM_PORT_QUEUE_ID_DEFAULT                     = -1
	SETTING_TEAM_PORT_SETTING_NAME                         = "team-port"
	SETTING_TEAM_PORT_STICKY                               = "sticky"
	SETTING_TEAM_RUNNER                                    = "runner"
	SETTING_TEAM_RUNNER_ACTIVE                             = "runner-active"
	SETTING_TEAM_RUNNER_ACTIVEBACKUP                       = "activebackup"
	SETTING_TEAM_RUNNER_AGG_SELECT_POLICY                  = "runner-agg-select-policy"
	SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_BANDWIDTH        = "bandwidth"
	SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_COUNT            = "count"
	SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_LACP_PRIO        = "lacp_prio"
	SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_LACP_PRIO_STABLE = "lacp_prio_stable"
	SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_PORT_CONFIG      = "port_config"
	SETTING_TEAM_RUNNER_BROADCAST                          = "broadcast"
	SETTING_TEAM_RUNNER_FAST_RATE                          = "runner-fast-rate"
	SETTING_TEAM_RUNNER_HWADDR_POLICY                      = "runner-hwaddr-policy"
	SETTING_TEAM_RUNNER_HWADDR_POLICY_BY_ACTIVE            = "by_active"
	SETTING_TEAM_RUNNER_HWADDR_POLICY_ONLY_ACTIVE          = "only_active"
	SETTING_TEAM_RUNNER_HWADDR_POLICY_SAME_ALL             = "same_all"
	SETTING_TEAM_RUNNER_LACP                               = "lacp"
	SETTING_TEAM_RUNNER_LOADBALANCE                        = "loadbalance"
	SETTING_TEAM_RUNNER_MIN_PORTS                          = "runner-min-ports"
	SETTING_TEAM_RUNNER_RANDOM                             = "random"
	SETTING_TEAM_RUNNER_ROUNDROBIN                         = "roundrobin"
	SETTING_TEAM_RUNNER_SYS_PRIO                           = "runner-sys-prio"
	SETTING_TEAM_RUNNER_SYS_PRIO_DEFAULT                   = 65535
	SETTING_TEAM_RUNNER_TX_BALANCER                        = "runner-tx-balancer"
	SETTING_TEAM_RUNNER_TX_BALANCER_INTERVAL               = "runner-tx-balancer-interval"
	SETTING_TEAM_RUNNER_TX_BALANCER_INTERVAL_DEFAULT       = 50
	SETTING_TEAM_RUNNER_TX_HASH                            = "runner-tx-hash"
	SETTING_TEAM_SETTING_NAME                              = "team"
	SETTING_TUN_GROUP                                      = "group"
	SETTING_TUN_MODE                                       = "mode"
	SETTING_TUN_MULTI_QUEUE                                = "multi-queue"
	SETTING_TUN_OWNER                                      = "owner"
	SETTING_TUN_PI                                         = "pi"
	SETTING_TUN_SETTING_NAME                               = "tun"
	SETTING_TUN_VNET_HDR                                   = "vnet-hdr"
	SETTING_USER_DATA                                      = "data"
	SETTING_USER_SETTING_NAME                              = "user"
	SETTING_VLAN_EGRESS_PRIORITY_MAP                       = "egress-priority-map"
	SETTING_VLAN_FLAGS                                     = "flags"
	SETTING_VLAN_ID                                        = "id"
	SETTING_VLAN_INGRESS_PRIORITY_MAP                      = "ingress-priority-map"
	SETTING_VLAN_PARENT                                    = "parent"
	SETTING_VLAN_SETTING_NAME                              = "vlan"
	SETTING_VPN_DATA                                       = "data"
	SETTING_VPN_PERSISTENT                                 = "persistent"
	SETTING_VPN_SECRETS                                    = "secrets"
	SETTING_VPN_SERVICE_TYPE                               = "service-type"
	SETTING_VPN_SETTING_NAME                               = "vpn"
	SETTING_VPN_TIMEOUT                                    = "timeout"
	SETTING_VPN_USER_NAME                                  = "user-name"
	SETTING_VXLAN_AGEING                                   = "ageing"
	SETTING_VXLAN_DESTINATION_PORT                         = "destination-port"
	SETTING_VXLAN_ID                                       = "id"
	SETTING_VXLAN_L2_MISS                                  = "l2-miss"
	SETTING_VXLAN_L3_MISS                                  = "l3-miss"
	SETTING_VXLAN_LEARNING                                 = "learning"
	SETTING_VXLAN_LIMIT                                    = "limit"
	SETTING_VXLAN_LOCAL                                    = "local"
	SETTING_VXLAN_PARENT                                   = "parent"
	SETTING_VXLAN_PROXY                                    = "proxy"
	SETTING_VXLAN_REMOTE                                   = "remote"
	SETTING_VXLAN_RSC                                      = "rsc"
	SETTING_VXLAN_SETTING_NAME                             = "vxlan"
	SETTING_VXLAN_SOURCE_PORT_MAX                          = "source-port-max"
	SETTING_VXLAN_SOURCE_PORT_MIN                          = "source-port-min"
	SETTING_VXLAN_TOS                                      = "tos"
	SETTING_VXLAN_TTL                                      = "ttl"
	SETTING_WIMAX_MAC_ADDRESS                              = "mac-address"
	SETTING_WIMAX_NETWORK_NAME                             = "network-name"
	SETTING_WIMAX_SETTING_NAME                             = "wimax"
	SETTING_WIRED_AUTO_NEGOTIATE                           = "auto-negotiate"
	SETTING_WIRED_CLONED_MAC_ADDRESS                       = "cloned-mac-address"
	SETTING_WIRED_DUPLEX                                   = "duplex"
	SETTING_WIRED_GENERATE_MAC_ADDRESS_MASK                = "generate-mac-address-mask"
	SETTING_WIRED_MAC_ADDRESS                              = "mac-address"
	SETTING_WIRED_MAC_ADDRESS_BLACKLIST                    = "mac-address-blacklist"
	SETTING_WIRED_MTU                                      = "mtu"
	SETTING_WIRED_PORT                                     = "port"
	SETTING_WIRED_S390_NETTYPE                             = "s390-nettype"
	SETTING_WIRED_S390_OPTIONS                             = "s390-options"
	SETTING_WIRED_S390_SUBCHANNELS                         = "s390-subchannels"
	SETTING_WIRED_SETTING_NAME                             = "802-3-ethernet"
	SETTING_WIRED_SPEED                                    = "speed"
	SETTING_WIRED_WAKE_ON_LAN                              = "wake-on-lan"
	SETTING_WIRED_WAKE_ON_LAN_PASSWORD                     = "wake-on-lan-password"
	SETTING_WIRELESS_BAND                                  = "band"
	SETTING_WIRELESS_BSSID                                 = "bssid"
	SETTING_WIRELESS_CHANNEL                               = "channel"
	SETTING_WIRELESS_CLONED_MAC_ADDRESS                    = "cloned-mac-address"
	SETTING_WIRELESS_GENERATE_MAC_ADDRESS_MASK             = "generate-mac-address-mask"
	SETTING_WIRELESS_HIDDEN                                = "hidden"
	SETTING_WIRELESS_MAC_ADDRESS                           = "mac-address"
	SETTING_WIRELESS_MAC_ADDRESS_BLACKLIST                 = "mac-address-blacklist"
	SETTING_WIRELESS_MAC_ADDRESS_RANDOMIZATION             = "mac-address-randomization"
	SETTING_WIRELESS_MODE                                  = "mode"
	SETTING_WIRELESS_MODE_ADHOC                            = "adhoc"
	SETTING_WIRELESS_MODE_AP                               = "ap"
	SETTING_WIRELESS_MODE_INFRA                            = "infrastructure"
	SETTING_WIRELESS_MTU                                   = "mtu"
	SETTING_WIRELESS_POWERSAVE                             = "powersave"
	SETTING_WIRELESS_RATE                                  = "rate"
	SETTING_WIRELESS_SECURITY_AUTH_ALG                     = "auth-alg"
	SETTING_WIRELESS_SECURITY_FILS                         = "fils"
	SETTING_WIRELESS_SECURITY_GROUP                        = "group"
	SETTING_WIRELESS_SECURITY_KEY_MGMT                     = "key-mgmt"
	SETTING_WIRELESS_SECURITY_LEAP_PASSWORD                = "leap-password"
	SETTING_WIRELESS_SECURITY_LEAP_PASSWORD_FLAGS          = "leap-password-flags"
	SETTING_WIRELESS_SECURITY_LEAP_USERNAME                = "leap-username"
	SETTING_WIRELESS_SECURITY_PAIRWISE                     = "pairwise"
	SETTING_WIRELESS_SECURITY_PMF                          = "pmf"
	SETTING_WIRELESS_SECURITY_PROTO                        = "proto"
	SETTING_WIRELESS_SECURITY_PSK                          = "psk"
	SETTING_WIRELESS_SECURITY_PSK_FLAGS                    = "psk-flags"
	SETTING_WIRELESS_SECURITY_SETTING_NAME                 = "802-11-wireless-security"
	SETTING_WIRELESS_SECURITY_WEP_KEY0                     = "wep-key0"
	SETTING_WIRELESS_SECURITY_WEP_KEY1                     = "wep-key1"
	SETTING_WIRELESS_SECURITY_WEP_KEY2                     = "wep-key2"
	SETTING_WIRELESS_SECURITY_WEP_KEY3                     = "wep-key3"
	SETTING_WIRELESS_SECURITY_WEP_KEY_FLAGS                = "wep-key-flags"
	SETTING_WIRELESS_SECURITY_WEP_KEY_TYPE                 = "wep-key-type"
	SETTING_WIRELESS_SECURITY_WEP_TX_KEYIDX                = "wep-tx-keyidx"
	SETTING_WIRELESS_SECURITY_WPS_METHOD                   = "wps-method"
	SETTING_WIRELESS_SEEN_BSSIDS                           = "seen-bssids"
	SETTING_WIRELESS_SETTING_NAME                          = "802-11-wireless"
	SETTING_WIRELESS_SSID                                  = "ssid"
	SETTING_WIRELESS_TX_POWER                              = "tx-power"
	SETTING_WIRELESS_WAKE_ON_WLAN                          = "wake-on-wlan"
	SETTING_WPAN_MAC_ADDRESS                               = "mac-address"
	SETTING_WPAN_PAN_ID                                    = "pan-id"
	SETTING_WPAN_SETTING_NAME                              = "wpan"
	SETTING_WPAN_SHORT_ADDRESS                             = "short-address"
	SRIOV_VF_ATTRIBUTE_MAC                                 = "mac"
	SRIOV_VF_ATTRIBUTE_MAX_TX_RATE                         = "max-tx-rate"
	SRIOV_VF_ATTRIBUTE_MIN_TX_RATE                         = "min-tx-rate"
	SRIOV_VF_ATTRIBUTE_SPOOF_CHECK                         = "spoof-check"
	SRIOV_VF_ATTRIBUTE_TRUST                               = "trust"
	TEAM_LINK_WATCHER_ARP_PING                             = "arp_ping"
	TEAM_LINK_WATCHER_ETHTOOL                              = "ethtool"
	TEAM_LINK_WATCHER_NSNA_PING                            = "nsna_ping"
	UTILS_HWADDR_LEN_MAX                                   = 20
	VLAN_FLAGS_ALL                                         = 15
	VPN_CONNECTION_BANNER                                  = "banner"
	VPN_CONNECTION_VPN_STATE                               = "vpn-state"
	VPN_DBUS_PLUGIN_INTERFACE                              = "org.freedesktop.NetworkManager.VPN.Plugin"
	VPN_DBUS_PLUGIN_PATH                                   = "/org/freedesktop/NetworkManager/VPN/Plugin"
	VPN_EDITOR_PLUGIN_DESCRIPTION                          = "description"
	VPN_EDITOR_PLUGIN_NAME                                 = "name"
	VPN_EDITOR_PLUGIN_SERVICE                              = "service"
	VPN_PLUGIN_CAN_PERSIST                                 = "can-persist"
	VPN_PLUGIN_CONFIG_BANNER                               = "banner"
	VPN_PLUGIN_CONFIG_EXT_GATEWAY                          = "gateway"
	VPN_PLUGIN_CONFIG_HAS_IP4                              = "has-ip4"
	VPN_PLUGIN_CONFIG_HAS_IP6                              = "has-ip6"
	VPN_PLUGIN_CONFIG_MTU                                  = "mtu"
	VPN_PLUGIN_CONFIG_PROXY_PAC                            = "pac"
	VPN_PLUGIN_CONFIG_TUNDEV                               = "tundev"
	VPN_PLUGIN_INFO_FILENAME                               = "filename"
	VPN_PLUGIN_INFO_KEYFILE                                = "keyfile"
	VPN_PLUGIN_INFO_KF_GROUP_CONNECTION                    = "VPN Connection"
	VPN_PLUGIN_INFO_KF_GROUP_GNOME                         = "GNOME"
	VPN_PLUGIN_INFO_KF_GROUP_LIBNM                         = "libnm"
	VPN_PLUGIN_INFO_NAME                                   = "name"
	VPN_PLUGIN_IP4_CONFIG_ADDRESS                          = "address"
	VPN_PLUGIN_IP4_CONFIG_DNS                              = "dns"
	VPN_PLUGIN_IP4_CONFIG_DOMAIN                           = "domain"
	VPN_PLUGIN_IP4_CONFIG_DOMAINS                          = "domains"
	VPN_PLUGIN_IP4_CONFIG_INT_GATEWAY                      = "internal-gateway"
	VPN_PLUGIN_IP4_CONFIG_MSS                              = "mss"
	VPN_PLUGIN_IP4_CONFIG_NBNS                             = "nbns"
	VPN_PLUGIN_IP4_CONFIG_NEVER_DEFAULT                    = "never-default"
	VPN_PLUGIN_IP4_CONFIG_PREFIX                           = "prefix"
	VPN_PLUGIN_IP4_CONFIG_PRESERVE_ROUTES                  = "preserve-routes"
	VPN_PLUGIN_IP4_CONFIG_PTP                              = "ptp"
	VPN_PLUGIN_IP4_CONFIG_ROUTES                           = "routes"
	VPN_PLUGIN_IP6_CONFIG_ADDRESS                          = "address"
	VPN_PLUGIN_IP6_CONFIG_DNS                              = "dns"
	VPN_PLUGIN_IP6_CONFIG_DOMAIN                           = "domain"
	VPN_PLUGIN_IP6_CONFIG_DOMAINS                          = "domains"
	VPN_PLUGIN_IP6_CONFIG_INT_GATEWAY                      = "internal-gateway"
	VPN_PLUGIN_IP6_CONFIG_MSS                              = "mss"
	VPN_PLUGIN_IP6_CONFIG_NEVER_DEFAULT                    = "never-default"
	VPN_PLUGIN_IP6_CONFIG_PREFIX                           = "prefix"
	VPN_PLUGIN_IP6_CONFIG_PRESERVE_ROUTES                  = "preserve-routes"
	VPN_PLUGIN_IP6_CONFIG_PTP                              = "ptp"
	VPN_PLUGIN_IP6_CONFIG_ROUTES                           = "routes"
	VPN_PLUGIN_OLD_DBUS_SERVICE_NAME                       = "service-name"
	VPN_PLUGIN_OLD_STATE                                   = "state"
	VPN_SERVICE_PLUGIN_DBUS_SERVICE_NAME                   = "service-name"
	VPN_SERVICE_PLUGIN_DBUS_WATCH_PEER                     = "watch-peer"
	VPN_SERVICE_PLUGIN_STATE                               = "state"
	WIMAX_NSP_NAME                                         = "name"
	WIMAX_NSP_NETWORK_TYPE                                 = "network-type"
	WIMAX_NSP_SIGNAL_QUALITY                               = "signal-quality"
)
const (
	SigAccessPointAdded        = "access-point-added"
	SigAccessPointRemoved      = "access-point-removed"
	SigActiveConnectionAdded   = "active-connection-added"
	SigActiveConnectionRemoved = "active-connection-removed"
	SigAnyDeviceAdded          = "any-device-added"
	SigAnyDeviceRemoved        = "any-device-removed"
	SigChanged                 = "changed"
	SigConfig                  = "config"
	SigConnectionAdded         = "connection-added"
	SigConnectionRemoved       = "connection-removed"
	SigDeviceAdded             = "device-added"
	SigDeviceRemoved           = "device-removed"
	SigFailure                 = "failure"
	SigIp4Config               = "ip4-config"
	SigIp6Config               = "ip6-config"
	SigLoginBanner             = "login-banner"
	SigNspAdded                = "nsp-added"
	SigNspRemoved              = "nsp-removed"
	SigPermissionChanged       = "permission-changed"
	SigQuit                    = "quit"
	SigSecretsCleared          = "secrets-cleared"
	SigSecretsRequired         = "secrets-required"
	SigSecretsUpdated          = "secrets-updated"
	SigStateChanged            = "state-changed"
	SigVpnStateChanged         = "vpn-state-changed"
)
