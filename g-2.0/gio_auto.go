/*
 * Copyright (C) 2019 ~ 2020 Uniontech Software Technology Co.,Ltd
 *
 * Author:
 *
 * Maintainer:
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// Code generated by "girgen"; DO NOT EDIT.

package g

/*
#cgo pkg-config: gio-2.0 gio-unix-2.0
#include <gio/gdesktopappinfo.h>
#include <gio/gfiledescriptorbased.h>
#include <gio/gio.h>
#include <gio/gunixconnection.h>
#include <gio/gunixcredentialsmessage.h>
#include <gio/gunixfdlist.h>
#include <gio/gunixfdmessage.h>
#include <gio/gunixinputstream.h>
#include <gio/gunixmounts.h>
#include <gio/gunixoutputstream.h>
#include <gio/gunixsocketaddress.h>
*/
import "C"
import "github.com/linuxdeepin/go-gir/gi"
import "log"
import "unsafe"

var _ gi.GType
var _ unsafe.Pointer
var _ *log.Logger

func init() {
	repo := gi.DefaultRepository()
	_, err := repo.Require("Gio", "2.0", gi.REPOSITORY_LOAD_FLAG_LAZY)
	if err != nil {
		panic(err)
	}
}

// Interface Action
type Action struct {
	ActionIfc
	P unsafe.Pointer
}
type ActionIfc struct{}
type IAction interface{ P_Action() unsafe.Pointer }

func (v Action) P_Action() unsafe.Pointer { return v.P }
func ActionGetType() gi.GType {
	ret := _I.GetGType1(193, "Gio", "Action")
	return ret
}

// g_action_name_is_valid
//
// [ action_name ] trans: nothing
//
// [ result ] trans: nothing
//
func ActionNameIsValid1(action_name string) (result bool) {
	iv, err := _I.Get1(1635, "Gio", "Action", "name_is_valid", 0, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_action_name := gi.NewStringArgument(c_action_name)
	args := []gi.Argument{arg_action_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_action_name)
	result = ret.Bool()
	return
}

// g_action_parse_detailed_name
//
// [ detailed_name ] trans: nothing
//
// [ action_name ] trans: everything, dir: out
//
// [ target_value ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func ActionParseDetailedName1(detailed_name string) (result bool, action_name string, target_value Variant, err error) {
	iv, err := _I.Get1(1636, "Gio", "Action", "parse_detailed_name", 0, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [3]gi.Argument
	c_detailed_name := gi.CString(detailed_name)
	arg_detailed_name := gi.NewStringArgument(c_detailed_name)
	arg_action_name := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_target_value := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	args := []gi.Argument{arg_detailed_name, arg_action_name, arg_target_value, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_detailed_name)
	err = gi.ToError(outArgs[2].Pointer())
	action_name = outArgs[0].String().Take()
	target_value.P = outArgs[1].Pointer()
	result = ret.Bool()
	return
}

// g_action_print_detailed_name
//
// [ action_name ] trans: nothing
//
// [ target_value ] trans: nothing
//
// [ result ] trans: everything
//
func ActionPrintDetailedName1(action_name string, target_value Variant) (result string) {
	iv, err := _I.Get1(1637, "Gio", "Action", "print_detailed_name", 0, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_action_name := gi.NewStringArgument(c_action_name)
	arg_target_value := gi.NewPointerArgument(target_value.P)
	args := []gi.Argument{arg_action_name, arg_target_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_action_name)
	result = ret.String().Take()
	return
}

// g_action_activate
//
// [ parameter ] trans: nothing
//
func (v *ActionIfc) Activate(parameter Variant) {
	iv, err := _I.Get1(1638, "Gio", "Action", "activate", 0, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_parameter := gi.NewPointerArgument(parameter.P)
	args := []gi.Argument{arg_v, arg_parameter}
	iv.Call(args, nil, nil)
}

// g_action_change_state
//
// [ value ] trans: nothing
//
func (v *ActionIfc) ChangeState(value Variant) {
	iv, err := _I.Get1(1639, "Gio", "Action", "change_state", 0, 4, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_value}
	iv.Call(args, nil, nil)
}

// g_action_get_enabled
//
// [ result ] trans: nothing
//
func (v *ActionIfc) GetEnabled() (result bool) {
	iv, err := _I.Get1(1640, "Gio", "Action", "get_enabled", 0, 5, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_action_get_name
//
// [ result ] trans: nothing
//
func (v *ActionIfc) GetName() (result string) {
	iv, err := _I.Get1(1641, "Gio", "Action", "get_name", 0, 6, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_action_get_parameter_type
//
// [ result ] trans: nothing
//
func (v *ActionIfc) GetParameterType() (result VariantType) {
	iv, err := _I.Get1(1642, "Gio", "Action", "get_parameter_type", 0, 7, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_action_get_state
//
// [ result ] trans: everything
//
func (v *ActionIfc) GetState() (result Variant) {
	iv, err := _I.Get1(1643, "Gio", "Action", "get_state", 0, 8, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_action_get_state_hint
//
// [ result ] trans: everything
//
func (v *ActionIfc) GetStateHint() (result Variant) {
	iv, err := _I.Get1(1644, "Gio", "Action", "get_state_hint", 0, 9, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_action_get_state_type
//
// [ result ] trans: nothing
//
func (v *ActionIfc) GetStateType() (result VariantType) {
	iv, err := _I.Get1(1645, "Gio", "Action", "get_state_type", 0, 10, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Struct ActionEntry
type ActionEntry struct {
	P unsafe.Pointer
}

const SizeOfStructActionEntry = 64

func ActionEntryGetType() gi.GType {
	ret := _I.GetGType1(194, "Gio", "ActionEntry")
	return ret
}

func (v ActionEntry) p() *C.GActionEntry {
	return (*C.GActionEntry)(v.P)
}
func (v ActionEntry) Name() (result int /*TODO*/) {
	return
}
func (v ActionEntry) Activate() (result int /*TODO*/) {
	return
}
func (v ActionEntry) ParameterType() (result int /*TODO*/) {
	return
}
func (v ActionEntry) State() (result int /*TODO*/) {
	return
}
func (v ActionEntry) ChangeState() (result int /*TODO*/) {
	return
}
func (v ActionEntry) Padding() (result int /*TODO*/) {
	return
}

// Interface ActionGroup
type ActionGroup struct {
	ActionGroupIfc
	P unsafe.Pointer
}
type ActionGroupIfc struct{}
type IActionGroup interface{ P_ActionGroup() unsafe.Pointer }

func (v ActionGroup) P_ActionGroup() unsafe.Pointer { return v.P }
func ActionGroupGetType() gi.GType {
	ret := _I.GetGType1(195, "Gio", "ActionGroup")
	return ret
}

// g_action_group_action_added
//
// [ action_name ] trans: nothing
//
func (v *ActionGroupIfc) ActionAdded(action_name string) {
	iv, err := _I.Get1(1646, "Gio", "ActionGroup", "action_added", 2, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action_name := gi.NewStringArgument(c_action_name)
	args := []gi.Argument{arg_v, arg_action_name}
	iv.Call(args, nil, nil)
	gi.Free(c_action_name)
}

// g_action_group_action_enabled_changed
//
// [ action_name ] trans: nothing
//
// [ enabled ] trans: nothing
//
func (v *ActionGroupIfc) ActionEnabledChanged(action_name string, enabled bool) {
	iv, err := _I.Get1(1647, "Gio", "ActionGroup", "action_enabled_changed", 2, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action_name := gi.NewStringArgument(c_action_name)
	arg_enabled := gi.NewBoolArgument(enabled)
	args := []gi.Argument{arg_v, arg_action_name, arg_enabled}
	iv.Call(args, nil, nil)
	gi.Free(c_action_name)
}

// g_action_group_action_removed
//
// [ action_name ] trans: nothing
//
func (v *ActionGroupIfc) ActionRemoved(action_name string) {
	iv, err := _I.Get1(1648, "Gio", "ActionGroup", "action_removed", 2, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action_name := gi.NewStringArgument(c_action_name)
	args := []gi.Argument{arg_v, arg_action_name}
	iv.Call(args, nil, nil)
	gi.Free(c_action_name)
}

// g_action_group_action_state_changed
//
// [ action_name ] trans: nothing
//
// [ state ] trans: nothing
//
func (v *ActionGroupIfc) ActionStateChanged(action_name string, state Variant) {
	iv, err := _I.Get1(1649, "Gio", "ActionGroup", "action_state_changed", 2, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action_name := gi.NewStringArgument(c_action_name)
	arg_state := gi.NewPointerArgument(state.P)
	args := []gi.Argument{arg_v, arg_action_name, arg_state}
	iv.Call(args, nil, nil)
	gi.Free(c_action_name)
}

// g_action_group_activate_action
//
// [ action_name ] trans: nothing
//
// [ parameter ] trans: nothing
//
func (v *ActionGroupIfc) ActivateAction(action_name string, parameter Variant) {
	iv, err := _I.Get1(1650, "Gio", "ActionGroup", "activate_action", 2, 4, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action_name := gi.NewStringArgument(c_action_name)
	arg_parameter := gi.NewPointerArgument(parameter.P)
	args := []gi.Argument{arg_v, arg_action_name, arg_parameter}
	iv.Call(args, nil, nil)
	gi.Free(c_action_name)
}

// g_action_group_change_action_state
//
// [ action_name ] trans: nothing
//
// [ value ] trans: nothing
//
func (v *ActionGroupIfc) ChangeActionState(action_name string, value Variant) {
	iv, err := _I.Get1(1651, "Gio", "ActionGroup", "change_action_state", 2, 5, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action_name := gi.NewStringArgument(c_action_name)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_action_name, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_action_name)
}

// g_action_group_get_action_enabled
//
// [ action_name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *ActionGroupIfc) GetActionEnabled(action_name string) (result bool) {
	iv, err := _I.Get1(1652, "Gio", "ActionGroup", "get_action_enabled", 2, 6, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action_name := gi.NewStringArgument(c_action_name)
	args := []gi.Argument{arg_v, arg_action_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_action_name)
	result = ret.Bool()
	return
}

// g_action_group_get_action_parameter_type
//
// [ action_name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *ActionGroupIfc) GetActionParameterType(action_name string) (result VariantType) {
	iv, err := _I.Get1(1653, "Gio", "ActionGroup", "get_action_parameter_type", 2, 7, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action_name := gi.NewStringArgument(c_action_name)
	args := []gi.Argument{arg_v, arg_action_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_action_name)
	result.P = ret.Pointer()
	return
}

// g_action_group_get_action_state
//
// [ action_name ] trans: nothing
//
// [ result ] trans: everything
//
func (v *ActionGroupIfc) GetActionState(action_name string) (result Variant) {
	iv, err := _I.Get1(1654, "Gio", "ActionGroup", "get_action_state", 2, 8, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action_name := gi.NewStringArgument(c_action_name)
	args := []gi.Argument{arg_v, arg_action_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_action_name)
	result.P = ret.Pointer()
	return
}

// g_action_group_get_action_state_hint
//
// [ action_name ] trans: nothing
//
// [ result ] trans: everything
//
func (v *ActionGroupIfc) GetActionStateHint(action_name string) (result Variant) {
	iv, err := _I.Get1(1655, "Gio", "ActionGroup", "get_action_state_hint", 2, 9, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action_name := gi.NewStringArgument(c_action_name)
	args := []gi.Argument{arg_v, arg_action_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_action_name)
	result.P = ret.Pointer()
	return
}

// g_action_group_get_action_state_type
//
// [ action_name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *ActionGroupIfc) GetActionStateType(action_name string) (result VariantType) {
	iv, err := _I.Get1(1656, "Gio", "ActionGroup", "get_action_state_type", 2, 10, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action_name := gi.NewStringArgument(c_action_name)
	args := []gi.Argument{arg_v, arg_action_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_action_name)
	result.P = ret.Pointer()
	return
}

// g_action_group_has_action
//
// [ action_name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *ActionGroupIfc) HasAction(action_name string) (result bool) {
	iv, err := _I.Get1(1657, "Gio", "ActionGroup", "has_action", 2, 11, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action_name := gi.NewStringArgument(c_action_name)
	args := []gi.Argument{arg_v, arg_action_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_action_name)
	result = ret.Bool()
	return
}

// g_action_group_list_actions
//
// [ result ] trans: everything
//
func (v *ActionGroupIfc) ListActions() (result gi.CStrArray) {
	iv, err := _I.Get1(1658, "Gio", "ActionGroup", "list_actions", 2, 12, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_action_group_query_action
//
// [ action_name ] trans: nothing
//
// [ enabled ] trans: everything, dir: out
//
// [ parameter_type ] trans: everything, dir: out
//
// [ state_type ] trans: everything, dir: out
//
// [ state_hint ] trans: everything, dir: out
//
// [ state ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v *ActionGroupIfc) QueryAction(action_name string) (result bool, enabled bool, parameter_type VariantType, state_type VariantType, state_hint Variant, state Variant) {
	iv, err := _I.Get1(1659, "Gio", "ActionGroup", "query_action", 2, 13, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [5]gi.Argument
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action_name := gi.NewStringArgument(c_action_name)
	arg_enabled := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_parameter_type := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_state_type := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	arg_state_hint := gi.NewPointerArgument(unsafe.Pointer(&outArgs[3]))
	arg_state := gi.NewPointerArgument(unsafe.Pointer(&outArgs[4]))
	args := []gi.Argument{arg_v, arg_action_name, arg_enabled, arg_parameter_type, arg_state_type, arg_state_hint, arg_state}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_action_name)
	enabled = outArgs[0].Bool()
	parameter_type.P = outArgs[1].Pointer()
	state_type.P = outArgs[2].Pointer()
	state_hint.P = outArgs[3].Pointer()
	state.P = outArgs[4].Pointer()
	result = ret.Bool()
	return
}

// ignore GType struct ActionGroupInterface

// ignore GType struct ActionInterface

// Interface ActionMap
type ActionMap struct {
	ActionMapIfc
	P unsafe.Pointer
}
type ActionMapIfc struct{}
type IActionMap interface{ P_ActionMap() unsafe.Pointer }

func (v ActionMap) P_ActionMap() unsafe.Pointer { return v.P }
func ActionMapGetType() gi.GType {
	ret := _I.GetGType1(196, "Gio", "ActionMap")
	return ret
}

// g_action_map_add_action
//
// [ action ] trans: nothing
//
func (v *ActionMapIfc) AddAction(action IAction) {
	iv, err := _I.Get1(1660, "Gio", "ActionMap", "add_action", 5, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if action != nil {
		tmp = action.P_Action()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_action}
	iv.Call(args, nil, nil)
}

// g_action_map_add_action_entries
//
// [ entries ] trans: nothing
//
// [ n_entries ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *ActionMapIfc) AddActionEntries(entries unsafe.Pointer, n_entries int32, user_data unsafe.Pointer) {
	iv, err := _I.Get1(1661, "Gio", "ActionMap", "add_action_entries", 5, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_entries := gi.NewPointerArgument(entries)
	arg_n_entries := gi.NewInt32Argument(n_entries)
	arg_user_data := gi.NewPointerArgument(user_data)
	args := []gi.Argument{arg_v, arg_entries, arg_n_entries, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_action_map_lookup_action
//
// [ action_name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *ActionMapIfc) LookupAction(action_name string) (result Action) {
	iv, err := _I.Get1(1662, "Gio", "ActionMap", "lookup_action", 5, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action_name := gi.NewStringArgument(c_action_name)
	args := []gi.Argument{arg_v, arg_action_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_action_name)
	result.P = ret.Pointer()
	return
}

// g_action_map_remove_action
//
// [ action_name ] trans: nothing
//
func (v *ActionMapIfc) RemoveAction(action_name string) {
	iv, err := _I.Get1(1663, "Gio", "ActionMap", "remove_action", 5, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action_name := gi.NewStringArgument(c_action_name)
	args := []gi.Argument{arg_v, arg_action_name}
	iv.Call(args, nil, nil)
	gi.Free(c_action_name)
}

// ignore GType struct ActionMapInterface

// Interface AppInfo
type AppInfo struct {
	AppInfoIfc
	P unsafe.Pointer
}
type AppInfoIfc struct{}
type IAppInfo interface{ P_AppInfo() unsafe.Pointer }

func (v AppInfo) P_AppInfo() unsafe.Pointer { return v.P }
func AppInfoGetType() gi.GType {
	ret := _I.GetGType1(197, "Gio", "AppInfo")
	return ret
}

// g_app_info_create_from_commandline
//
// [ commandline ] trans: nothing
//
// [ application_name ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: everything
//
func AppInfoCreateFromCommandline1(commandline string, application_name string, flags AppInfoCreateFlags) (result AppInfo, err error) {
	iv, err := _I.Get1(1664, "Gio", "AppInfo", "create_from_commandline", 7, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_commandline := gi.CString(commandline)
	c_application_name := gi.CString(application_name)
	arg_commandline := gi.NewStringArgument(c_commandline)
	arg_application_name := gi.NewStringArgument(c_application_name)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_commandline, arg_application_name, arg_flags, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_commandline)
	gi.Free(c_application_name)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_app_info_get_all
//
// [ result ] trans: everything
//
func AppInfoGetAll1() (result List) {
	iv, err := _I.Get1(1665, "Gio", "AppInfo", "get_all", 7, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_app_info_get_all_for_type
//
// [ content_type ] trans: nothing
//
// [ result ] trans: everything
//
func AppInfoGetAllForType1(content_type string) (result List) {
	iv, err := _I.Get1(1666, "Gio", "AppInfo", "get_all_for_type", 7, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_content_type := gi.CString(content_type)
	arg_content_type := gi.NewStringArgument(c_content_type)
	args := []gi.Argument{arg_content_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_content_type)
	result.P = ret.Pointer()
	return
}

// g_app_info_get_default_for_type
//
// [ content_type ] trans: nothing
//
// [ must_support_uris ] trans: nothing
//
// [ result ] trans: everything
//
func AppInfoGetDefaultForType1(content_type string, must_support_uris bool) (result AppInfo) {
	iv, err := _I.Get1(1667, "Gio", "AppInfo", "get_default_for_type", 7, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_content_type := gi.CString(content_type)
	arg_content_type := gi.NewStringArgument(c_content_type)
	arg_must_support_uris := gi.NewBoolArgument(must_support_uris)
	args := []gi.Argument{arg_content_type, arg_must_support_uris}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_content_type)
	result.P = ret.Pointer()
	return
}

// g_app_info_get_default_for_uri_scheme
//
// [ uri_scheme ] trans: nothing
//
// [ result ] trans: everything
//
func AppInfoGetDefaultForUriScheme1(uri_scheme string) (result AppInfo) {
	iv, err := _I.Get1(1668, "Gio", "AppInfo", "get_default_for_uri_scheme", 7, 4, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri_scheme := gi.CString(uri_scheme)
	arg_uri_scheme := gi.NewStringArgument(c_uri_scheme)
	args := []gi.Argument{arg_uri_scheme}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_uri_scheme)
	result.P = ret.Pointer()
	return
}

// g_app_info_get_fallback_for_type
//
// [ content_type ] trans: nothing
//
// [ result ] trans: everything
//
func AppInfoGetFallbackForType1(content_type string) (result List) {
	iv, err := _I.Get1(1669, "Gio", "AppInfo", "get_fallback_for_type", 7, 5, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_content_type := gi.CString(content_type)
	arg_content_type := gi.NewStringArgument(c_content_type)
	args := []gi.Argument{arg_content_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_content_type)
	result.P = ret.Pointer()
	return
}

// g_app_info_get_recommended_for_type
//
// [ content_type ] trans: nothing
//
// [ result ] trans: everything
//
func AppInfoGetRecommendedForType1(content_type string) (result List) {
	iv, err := _I.Get1(1670, "Gio", "AppInfo", "get_recommended_for_type", 7, 6, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_content_type := gi.CString(content_type)
	arg_content_type := gi.NewStringArgument(c_content_type)
	args := []gi.Argument{arg_content_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_content_type)
	result.P = ret.Pointer()
	return
}

// g_app_info_launch_default_for_uri
//
// [ uri ] trans: nothing
//
// [ context ] trans: nothing
//
// [ result ] trans: nothing
//
func AppInfoLaunchDefaultForUri1(uri string, context IAppLaunchContext) (result bool, err error) {
	iv, err := _I.Get1(1671, "Gio", "AppInfo", "launch_default_for_uri", 7, 7, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_uri := gi.CString(uri)
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_AppLaunchContext()
	}
	arg_uri := gi.NewStringArgument(c_uri)
	arg_context := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_uri, arg_context, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_uri)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_app_info_launch_default_for_uri_async
//
// [ uri ] trans: nothing
//
// [ context ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func AppInfoLaunchDefaultForUriAsync1(uri string, context IAppLaunchContext, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(1672, "Gio", "AppInfo", "launch_default_for_uri_async", 7, 8, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri := gi.CString(uri)
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_AppLaunchContext()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_uri := gi.NewStringArgument(c_uri)
	arg_context := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_uri, arg_context, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_uri)
}

// g_app_info_launch_default_for_uri_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func AppInfoLaunchDefaultForUriFinish1(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(1673, "Gio", "AppInfo", "launch_default_for_uri_finish", 7, 9, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_app_info_reset_type_associations
//
// [ content_type ] trans: nothing
//
func AppInfoResetTypeAssociations1(content_type string) {
	iv, err := _I.Get1(1674, "Gio", "AppInfo", "reset_type_associations", 7, 10, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_content_type := gi.CString(content_type)
	arg_content_type := gi.NewStringArgument(c_content_type)
	args := []gi.Argument{arg_content_type}
	iv.Call(args, nil, nil)
	gi.Free(c_content_type)
}

// g_app_info_add_supports_type
//
// [ content_type ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *AppInfoIfc) AddSupportsType(content_type string) (result bool, err error) {
	iv, err := _I.Get1(1675, "Gio", "AppInfo", "add_supports_type", 7, 11, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_content_type := gi.CString(content_type)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_content_type := gi.NewStringArgument(c_content_type)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_content_type, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_content_type)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_app_info_can_delete
//
// [ result ] trans: nothing
//
func (v *AppInfoIfc) CanDelete() (result bool) {
	iv, err := _I.Get1(1676, "Gio", "AppInfo", "can_delete", 7, 12, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_app_info_can_remove_supports_type
//
// [ result ] trans: nothing
//
func (v *AppInfoIfc) CanRemoveSupportsType() (result bool) {
	iv, err := _I.Get1(1677, "Gio", "AppInfo", "can_remove_supports_type", 7, 13, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_app_info_delete
//
// [ result ] trans: nothing
//
func (v *AppInfoIfc) Delete() (result bool) {
	iv, err := _I.Get1(1678, "Gio", "AppInfo", "delete", 7, 14, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_app_info_dup
//
// [ result ] trans: everything
//
func (v *AppInfoIfc) Dup() (result AppInfo) {
	iv, err := _I.Get1(1679, "Gio", "AppInfo", "dup", 7, 15, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_app_info_equal
//
// [ appinfo2 ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *AppInfoIfc) Equal(appinfo2 IAppInfo) (result bool) {
	iv, err := _I.Get1(1680, "Gio", "AppInfo", "equal", 7, 16, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if appinfo2 != nil {
		tmp = appinfo2.P_AppInfo()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_appinfo2 := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_appinfo2}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_app_info_get_commandline
//
// [ result ] trans: nothing
//
func (v *AppInfoIfc) GetCommandline() (result string) {
	iv, err := _I.Get1(1681, "Gio", "AppInfo", "get_commandline", 7, 17, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_app_info_get_description
//
// [ result ] trans: nothing
//
func (v *AppInfoIfc) GetDescription() (result string) {
	iv, err := _I.Get1(1682, "Gio", "AppInfo", "get_description", 7, 18, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_app_info_get_display_name
//
// [ result ] trans: nothing
//
func (v *AppInfoIfc) GetDisplayName() (result string) {
	iv, err := _I.Get1(1683, "Gio", "AppInfo", "get_display_name", 7, 19, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_app_info_get_executable
//
// [ result ] trans: nothing
//
func (v *AppInfoIfc) GetExecutable() (result string) {
	iv, err := _I.Get1(1684, "Gio", "AppInfo", "get_executable", 7, 20, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_app_info_get_icon
//
// [ result ] trans: nothing
//
func (v *AppInfoIfc) GetIcon() (result Icon) {
	iv, err := _I.Get1(1685, "Gio", "AppInfo", "get_icon", 7, 21, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_app_info_get_id
//
// [ result ] trans: nothing
//
func (v *AppInfoIfc) GetId() (result string) {
	iv, err := _I.Get1(1686, "Gio", "AppInfo", "get_id", 7, 22, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_app_info_get_name
//
// [ result ] trans: nothing
//
func (v *AppInfoIfc) GetName() (result string) {
	iv, err := _I.Get1(1687, "Gio", "AppInfo", "get_name", 7, 23, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_app_info_get_supported_types
//
// [ result ] trans: nothing
//
func (v *AppInfoIfc) GetSupportedTypes() (result gi.CStrArray) {
	iv, err := _I.Get1(1688, "Gio", "AppInfo", "get_supported_types", 7, 24, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_app_info_launch
//
// [ files ] trans: nothing
//
// [ context ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *AppInfoIfc) Launch(files List, context IAppLaunchContext) (result bool, err error) {
	iv, err := _I.Get1(1689, "Gio", "AppInfo", "launch", 7, 25, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_AppLaunchContext()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_files := gi.NewPointerArgument(files.P)
	arg_context := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_files, arg_context, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_app_info_launch_uris
//
// [ uris ] trans: nothing
//
// [ context ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *AppInfoIfc) LaunchUris(uris List, context IAppLaunchContext) (result bool, err error) {
	iv, err := _I.Get1(1690, "Gio", "AppInfo", "launch_uris", 7, 26, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_AppLaunchContext()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_uris := gi.NewPointerArgument(uris.P)
	arg_context := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_uris, arg_context, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_app_info_remove_supports_type
//
// [ content_type ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *AppInfoIfc) RemoveSupportsType(content_type string) (result bool, err error) {
	iv, err := _I.Get1(1691, "Gio", "AppInfo", "remove_supports_type", 7, 27, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_content_type := gi.CString(content_type)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_content_type := gi.NewStringArgument(c_content_type)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_content_type, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_content_type)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_app_info_set_as_default_for_extension
//
// [ extension ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *AppInfoIfc) SetAsDefaultForExtension(extension string) (result bool, err error) {
	iv, err := _I.Get1(1692, "Gio", "AppInfo", "set_as_default_for_extension", 7, 28, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_extension := gi.CString(extension)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_extension := gi.NewStringArgument(c_extension)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_extension, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_extension)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_app_info_set_as_default_for_type
//
// [ content_type ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *AppInfoIfc) SetAsDefaultForType(content_type string) (result bool, err error) {
	iv, err := _I.Get1(1693, "Gio", "AppInfo", "set_as_default_for_type", 7, 29, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_content_type := gi.CString(content_type)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_content_type := gi.NewStringArgument(c_content_type)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_content_type, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_content_type)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_app_info_set_as_last_used_for_type
//
// [ content_type ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *AppInfoIfc) SetAsLastUsedForType(content_type string) (result bool, err error) {
	iv, err := _I.Get1(1694, "Gio", "AppInfo", "set_as_last_used_for_type", 7, 30, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_content_type := gi.CString(content_type)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_content_type := gi.NewStringArgument(c_content_type)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_content_type, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_content_type)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_app_info_should_show
//
// [ result ] trans: nothing
//
func (v *AppInfoIfc) ShouldShow() (result bool) {
	iv, err := _I.Get1(1695, "Gio", "AppInfo", "should_show", 7, 31, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_app_info_supports_files
//
// [ result ] trans: nothing
//
func (v *AppInfoIfc) SupportsFiles() (result bool) {
	iv, err := _I.Get1(1696, "Gio", "AppInfo", "supports_files", 7, 32, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_app_info_supports_uris
//
// [ result ] trans: nothing
//
func (v *AppInfoIfc) SupportsUris() (result bool) {
	iv, err := _I.Get1(1697, "Gio", "AppInfo", "supports_uris", 7, 33, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Flags AppInfoCreateFlags
type AppInfoCreateFlags int

const (
	AppInfoCreateFlagsNone                        AppInfoCreateFlags = 0
	AppInfoCreateFlagsNeedsTerminal               AppInfoCreateFlags = 1
	AppInfoCreateFlagsSupportsUris                AppInfoCreateFlags = 2
	AppInfoCreateFlagsSupportsStartupNotification AppInfoCreateFlags = 4
)

func AppInfoCreateFlagsGetType() gi.GType {
	ret := _I.GetGType1(198, "Gio", "AppInfoCreateFlags")
	return ret
}

// ignore GType struct AppInfoIface

// Object AppInfoMonitor
type AppInfoMonitor struct {
	Object
}

func WrapAppInfoMonitor(p unsafe.Pointer) (r AppInfoMonitor) { r.P = p; return }

type IAppInfoMonitor interface{ P_AppInfoMonitor() unsafe.Pointer }

func (v AppInfoMonitor) P_AppInfoMonitor() unsafe.Pointer { return v.P }
func AppInfoMonitorGetType() gi.GType {
	ret := _I.GetGType1(199, "Gio", "AppInfoMonitor")
	return ret
}

// g_app_info_monitor_get
//
// [ result ] trans: everything
//
func AppInfoMonitorGet1() (result AppInfoMonitor) {
	iv, err := _I.Get1(1698, "Gio", "AppInfoMonitor", "get", 10, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Object AppLaunchContext
type AppLaunchContext struct {
	Object
}

func WrapAppLaunchContext(p unsafe.Pointer) (r AppLaunchContext) { r.P = p; return }

type IAppLaunchContext interface{ P_AppLaunchContext() unsafe.Pointer }

func (v AppLaunchContext) P_AppLaunchContext() unsafe.Pointer { return v.P }
func AppLaunchContextGetType() gi.GType {
	ret := _I.GetGType1(200, "Gio", "AppLaunchContext")
	return ret
}

// g_app_launch_context_new
//
// [ result ] trans: everything
//
func NewAppLaunchContext() (result AppLaunchContext) {
	iv, err := _I.Get1(1699, "Gio", "AppLaunchContext", "new", 11, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_app_launch_context_get_display
//
// [ info ] trans: nothing
//
// [ files ] trans: nothing
//
// [ result ] trans: everything
//
func (v AppLaunchContext) GetDisplay(info IAppInfo, files List) (result string) {
	iv, err := _I.Get1(1700, "Gio", "AppLaunchContext", "get_display", 11, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if info != nil {
		tmp = info.P_AppInfo()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_info := gi.NewPointerArgument(tmp)
	arg_files := gi.NewPointerArgument(files.P)
	args := []gi.Argument{arg_v, arg_info, arg_files}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_app_launch_context_get_environment
//
// [ result ] trans: everything
//
func (v AppLaunchContext) GetEnvironment() (result gi.CStrArray) {
	iv, err := _I.Get1(1701, "Gio", "AppLaunchContext", "get_environment", 11, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_app_launch_context_get_startup_notify_id
//
// [ info ] trans: nothing
//
// [ files ] trans: nothing
//
// [ result ] trans: everything
//
func (v AppLaunchContext) GetStartupNotifyId(info IAppInfo, files List) (result string) {
	iv, err := _I.Get1(1702, "Gio", "AppLaunchContext", "get_startup_notify_id", 11, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if info != nil {
		tmp = info.P_AppInfo()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_info := gi.NewPointerArgument(tmp)
	arg_files := gi.NewPointerArgument(files.P)
	args := []gi.Argument{arg_v, arg_info, arg_files}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_app_launch_context_launch_failed
//
// [ startup_notify_id ] trans: nothing
//
func (v AppLaunchContext) LaunchFailed(startup_notify_id string) {
	iv, err := _I.Get1(1703, "Gio", "AppLaunchContext", "launch_failed", 11, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_startup_notify_id := gi.CString(startup_notify_id)
	arg_v := gi.NewPointerArgument(v.P)
	arg_startup_notify_id := gi.NewStringArgument(c_startup_notify_id)
	args := []gi.Argument{arg_v, arg_startup_notify_id}
	iv.Call(args, nil, nil)
	gi.Free(c_startup_notify_id)
}

// g_app_launch_context_setenv
//
// [ variable ] trans: nothing
//
// [ value ] trans: nothing
//
func (v AppLaunchContext) Setenv(variable string, value string) {
	iv, err := _I.Get1(1704, "Gio", "AppLaunchContext", "setenv", 11, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_variable := gi.CString(variable)
	c_value := gi.CString(value)
	arg_v := gi.NewPointerArgument(v.P)
	arg_variable := gi.NewStringArgument(c_variable)
	arg_value := gi.NewStringArgument(c_value)
	args := []gi.Argument{arg_v, arg_variable, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_variable)
	gi.Free(c_value)
}

// g_app_launch_context_unsetenv
//
// [ variable ] trans: nothing
//
func (v AppLaunchContext) Unsetenv(variable string) {
	iv, err := _I.Get1(1705, "Gio", "AppLaunchContext", "unsetenv", 11, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_variable := gi.CString(variable)
	arg_v := gi.NewPointerArgument(v.P)
	arg_variable := gi.NewStringArgument(c_variable)
	args := []gi.Argument{arg_v, arg_variable}
	iv.Call(args, nil, nil)
	gi.Free(c_variable)
}

// ignore GType struct AppLaunchContextClass

// ignore private struct AppLaunchContextPrivate, type of AppLaunchContext is object

// Object Application
type Application struct {
	ActionGroupIfc
	ActionMapIfc
	Object
}

func WrapApplication(p unsafe.Pointer) (r Application) { r.P = p; return }

type IApplication interface{ P_Application() unsafe.Pointer }

func (v Application) P_Application() unsafe.Pointer { return v.P }
func (v Application) P_ActionGroup() unsafe.Pointer { return v.P }
func (v Application) P_ActionMap() unsafe.Pointer   { return v.P }
func ApplicationGetType() gi.GType {
	ret := _I.GetGType1(201, "Gio", "Application")
	return ret
}

// g_application_new
//
// [ application_id ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: everything
//
func NewApplication(application_id string, flags ApplicationFlags) (result Application) {
	iv, err := _I.Get1(1706, "Gio", "Application", "new", 14, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_application_id := gi.CString(application_id)
	arg_application_id := gi.NewStringArgument(c_application_id)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_application_id, arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_application_id)
	result.P = ret.Pointer()
	return
}

// g_application_get_default
//
// [ result ] trans: nothing
//
func ApplicationGetDefault1() (result Application) {
	iv, err := _I.Get1(1707, "Gio", "Application", "get_default", 14, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_application_id_is_valid
//
// [ application_id ] trans: nothing
//
// [ result ] trans: nothing
//
func ApplicationIdIsValid1(application_id string) (result bool) {
	iv, err := _I.Get1(1708, "Gio", "Application", "id_is_valid", 14, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_application_id := gi.CString(application_id)
	arg_application_id := gi.NewStringArgument(c_application_id)
	args := []gi.Argument{arg_application_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_application_id)
	result = ret.Bool()
	return
}

// g_application_activate
//
func (v Application) Activate() {
	iv, err := _I.Get1(1709, "Gio", "Application", "activate", 14, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_application_add_main_option
//
// [ long_name ] trans: nothing
//
// [ short_name ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ arg ] trans: nothing
//
// [ description ] trans: nothing
//
// [ arg_description ] trans: nothing
//
func (v Application) AddMainOption(long_name string, short_name int8, flags OptionFlags, arg OptionArgEnum, description string, arg_description string) {
	iv, err := _I.Get1(1710, "Gio", "Application", "add_main_option", 14, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_long_name := gi.CString(long_name)
	c_description := gi.CString(description)
	c_arg_description := gi.CString(arg_description)
	arg_v := gi.NewPointerArgument(v.P)
	arg_long_name := gi.NewStringArgument(c_long_name)
	arg_short_name := gi.NewInt8Argument(short_name)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_arg := gi.NewIntArgument(int(arg))
	arg_description1 := gi.NewStringArgument(c_description)
	arg_arg_description := gi.NewStringArgument(c_arg_description)
	args := []gi.Argument{arg_v, arg_long_name, arg_short_name, arg_flags, arg_arg, arg_description1, arg_arg_description}
	iv.Call(args, nil, nil)
	gi.Free(c_long_name)
	gi.Free(c_description)
	gi.Free(c_arg_description)
}

// g_application_add_main_option_entries
//
// [ entries ] trans: nothing
//
func (v Application) AddMainOptionEntries(entries unsafe.Pointer) {
	iv, err := _I.Get1(1711, "Gio", "Application", "add_main_option_entries", 14, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_entries := gi.NewPointerArgument(entries)
	args := []gi.Argument{arg_v, arg_entries}
	iv.Call(args, nil, nil)
}

// g_application_add_option_group
//
// [ group ] trans: everything
//
func (v Application) AddOptionGroup(group OptionGroup) {
	iv, err := _I.Get1(1712, "Gio", "Application", "add_option_group", 14, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_group := gi.NewPointerArgument(group.P)
	args := []gi.Argument{arg_v, arg_group}
	iv.Call(args, nil, nil)
}

// g_application_bind_busy_property
//
// [ object ] trans: nothing
//
// [ property ] trans: nothing
//
func (v Application) BindBusyProperty(object IObject, property string) {
	iv, err := _I.Get1(1713, "Gio", "Application", "bind_busy_property", 14, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if object != nil {
		tmp = object.P_Object()
	}
	c_property := gi.CString(property)
	arg_v := gi.NewPointerArgument(v.P)
	arg_object := gi.NewPointerArgument(tmp)
	arg_property := gi.NewStringArgument(c_property)
	args := []gi.Argument{arg_v, arg_object, arg_property}
	iv.Call(args, nil, nil)
	gi.Free(c_property)
}

// g_application_get_application_id
//
// [ result ] trans: nothing
//
func (v Application) GetApplicationId() (result string) {
	iv, err := _I.Get1(1714, "Gio", "Application", "get_application_id", 14, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_application_get_dbus_connection
//
// [ result ] trans: nothing
//
func (v Application) GetDbusConnection() (result DBusConnection) {
	iv, err := _I.Get1(1715, "Gio", "Application", "get_dbus_connection", 14, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_application_get_dbus_object_path
//
// [ result ] trans: nothing
//
func (v Application) GetDbusObjectPath() (result string) {
	iv, err := _I.Get1(1716, "Gio", "Application", "get_dbus_object_path", 14, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_application_get_flags
//
// [ result ] trans: nothing
//
func (v Application) GetFlags() (result ApplicationFlags) {
	iv, err := _I.Get1(1717, "Gio", "Application", "get_flags", 14, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ApplicationFlags(ret.Int())
	return
}

// g_application_get_inactivity_timeout
//
// [ result ] trans: nothing
//
func (v Application) GetInactivityTimeout() (result uint32) {
	iv, err := _I.Get1(1718, "Gio", "Application", "get_inactivity_timeout", 14, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// g_application_get_is_busy
//
// [ result ] trans: nothing
//
func (v Application) GetIsBusy() (result bool) {
	iv, err := _I.Get1(1719, "Gio", "Application", "get_is_busy", 14, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_application_get_is_registered
//
// [ result ] trans: nothing
//
func (v Application) GetIsRegistered() (result bool) {
	iv, err := _I.Get1(1720, "Gio", "Application", "get_is_registered", 14, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_application_get_is_remote
//
// [ result ] trans: nothing
//
func (v Application) GetIsRemote() (result bool) {
	iv, err := _I.Get1(1721, "Gio", "Application", "get_is_remote", 14, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_application_get_resource_base_path
//
// [ result ] trans: nothing
//
func (v Application) GetResourceBasePath() (result string) {
	iv, err := _I.Get1(1722, "Gio", "Application", "get_resource_base_path", 14, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_application_hold
//
func (v Application) Hold() {
	iv, err := _I.Get1(1723, "Gio", "Application", "hold", 14, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_application_mark_busy
//
func (v Application) MarkBusy() {
	iv, err := _I.Get1(1724, "Gio", "Application", "mark_busy", 14, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_application_open
//
// [ files ] trans: nothing
//
// [ n_files ] trans: nothing
//
// [ hint ] trans: nothing
//
func (v Application) Open(files gi.PointerArray, n_files int32, hint string) {
	iv, err := _I.Get1(1725, "Gio", "Application", "open", 14, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_hint := gi.CString(hint)
	arg_v := gi.NewPointerArgument(v.P)
	arg_files := gi.NewPointerArgument(files.P)
	arg_n_files := gi.NewInt32Argument(n_files)
	arg_hint := gi.NewStringArgument(c_hint)
	args := []gi.Argument{arg_v, arg_files, arg_n_files, arg_hint}
	iv.Call(args, nil, nil)
	gi.Free(c_hint)
}

// g_application_quit
//
func (v Application) Quit() {
	iv, err := _I.Get1(1726, "Gio", "Application", "quit", 14, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_application_register
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Application) Register(cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(1727, "Gio", "Application", "register", 14, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_application_release
//
func (v Application) Release() {
	iv, err := _I.Get1(1728, "Gio", "Application", "release", 14, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_application_run
//
// [ argc ] trans: nothing
//
// [ argv ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Application) Run(argc int32, argv gi.CStrArray) (result int32) {
	iv, err := _I.Get1(1729, "Gio", "Application", "run", 14, 23, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_argc := gi.NewInt32Argument(argc)
	arg_argv := gi.NewPointerArgument(argv.P)
	args := []gi.Argument{arg_v, arg_argc, arg_argv}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// g_application_send_notification
//
// [ id ] trans: nothing
//
// [ notification ] trans: nothing
//
func (v Application) SendNotification(id string, notification INotification) {
	iv, err := _I.Get1(1730, "Gio", "Application", "send_notification", 14, 24, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_id := gi.CString(id)
	var tmp unsafe.Pointer
	if notification != nil {
		tmp = notification.P_Notification()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_id := gi.NewStringArgument(c_id)
	arg_notification := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_id, arg_notification}
	iv.Call(args, nil, nil)
	gi.Free(c_id)
}

// Deprecated
//
// g_application_set_action_group
//
// [ action_group ] trans: nothing
//
func (v Application) SetActionGroup(action_group IActionGroup) {
	iv, err := _I.Get1(1731, "Gio", "Application", "set_action_group", 14, 25, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if action_group != nil {
		tmp = action_group.P_ActionGroup()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_action_group := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_action_group}
	iv.Call(args, nil, nil)
}

// g_application_set_application_id
//
// [ application_id ] trans: nothing
//
func (v Application) SetApplicationId(application_id string) {
	iv, err := _I.Get1(1732, "Gio", "Application", "set_application_id", 14, 26, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_application_id := gi.CString(application_id)
	arg_v := gi.NewPointerArgument(v.P)
	arg_application_id := gi.NewStringArgument(c_application_id)
	args := []gi.Argument{arg_v, arg_application_id}
	iv.Call(args, nil, nil)
	gi.Free(c_application_id)
}

// g_application_set_default
//
func (v Application) SetDefault() {
	iv, err := _I.Get1(1733, "Gio", "Application", "set_default", 14, 27, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_application_set_flags
//
// [ flags ] trans: nothing
//
func (v Application) SetFlags(flags ApplicationFlags) {
	iv, err := _I.Get1(1734, "Gio", "Application", "set_flags", 14, 28, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_flags}
	iv.Call(args, nil, nil)
}

// g_application_set_inactivity_timeout
//
// [ inactivity_timeout ] trans: nothing
//
func (v Application) SetInactivityTimeout(inactivity_timeout uint32) {
	iv, err := _I.Get1(1735, "Gio", "Application", "set_inactivity_timeout", 14, 29, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_inactivity_timeout := gi.NewUint32Argument(inactivity_timeout)
	args := []gi.Argument{arg_v, arg_inactivity_timeout}
	iv.Call(args, nil, nil)
}

// g_application_set_option_context_description
//
// [ description ] trans: nothing
//
func (v Application) SetOptionContextDescription(description string) {
	iv, err := _I.Get1(1736, "Gio", "Application", "set_option_context_description", 14, 30, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_description := gi.CString(description)
	arg_v := gi.NewPointerArgument(v.P)
	arg_description := gi.NewStringArgument(c_description)
	args := []gi.Argument{arg_v, arg_description}
	iv.Call(args, nil, nil)
	gi.Free(c_description)
}

// g_application_set_option_context_parameter_string
//
// [ parameter_string ] trans: nothing
//
func (v Application) SetOptionContextParameterString(parameter_string string) {
	iv, err := _I.Get1(1737, "Gio", "Application", "set_option_context_parameter_string", 14, 31, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_parameter_string := gi.CString(parameter_string)
	arg_v := gi.NewPointerArgument(v.P)
	arg_parameter_string := gi.NewStringArgument(c_parameter_string)
	args := []gi.Argument{arg_v, arg_parameter_string}
	iv.Call(args, nil, nil)
	gi.Free(c_parameter_string)
}

// g_application_set_option_context_summary
//
// [ summary ] trans: nothing
//
func (v Application) SetOptionContextSummary(summary string) {
	iv, err := _I.Get1(1738, "Gio", "Application", "set_option_context_summary", 14, 32, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_summary := gi.CString(summary)
	arg_v := gi.NewPointerArgument(v.P)
	arg_summary := gi.NewStringArgument(c_summary)
	args := []gi.Argument{arg_v, arg_summary}
	iv.Call(args, nil, nil)
	gi.Free(c_summary)
}

// g_application_set_resource_base_path
//
// [ resource_path ] trans: nothing
//
func (v Application) SetResourceBasePath(resource_path string) {
	iv, err := _I.Get1(1739, "Gio", "Application", "set_resource_base_path", 14, 33, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_resource_path := gi.CString(resource_path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_resource_path := gi.NewStringArgument(c_resource_path)
	args := []gi.Argument{arg_v, arg_resource_path}
	iv.Call(args, nil, nil)
	gi.Free(c_resource_path)
}

// g_application_unbind_busy_property
//
// [ object ] trans: nothing
//
// [ property ] trans: nothing
//
func (v Application) UnbindBusyProperty(object IObject, property string) {
	iv, err := _I.Get1(1740, "Gio", "Application", "unbind_busy_property", 14, 34, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if object != nil {
		tmp = object.P_Object()
	}
	c_property := gi.CString(property)
	arg_v := gi.NewPointerArgument(v.P)
	arg_object := gi.NewPointerArgument(tmp)
	arg_property := gi.NewStringArgument(c_property)
	args := []gi.Argument{arg_v, arg_object, arg_property}
	iv.Call(args, nil, nil)
	gi.Free(c_property)
}

// g_application_unmark_busy
//
func (v Application) UnmarkBusy() {
	iv, err := _I.Get1(1741, "Gio", "Application", "unmark_busy", 14, 35, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_application_withdraw_notification
//
// [ id ] trans: nothing
//
func (v Application) WithdrawNotification(id string) {
	iv, err := _I.Get1(1742, "Gio", "Application", "withdraw_notification", 14, 36, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_id := gi.CString(id)
	arg_v := gi.NewPointerArgument(v.P)
	arg_id := gi.NewStringArgument(c_id)
	args := []gi.Argument{arg_v, arg_id}
	iv.Call(args, nil, nil)
	gi.Free(c_id)
}

// ignore GType struct ApplicationClass

// Object ApplicationCommandLine
type ApplicationCommandLine struct {
	Object
}

func WrapApplicationCommandLine(p unsafe.Pointer) (r ApplicationCommandLine) { r.P = p; return }

type IApplicationCommandLine interface{ P_ApplicationCommandLine() unsafe.Pointer }

func (v ApplicationCommandLine) P_ApplicationCommandLine() unsafe.Pointer { return v.P }
func ApplicationCommandLineGetType() gi.GType {
	ret := _I.GetGType1(202, "Gio", "ApplicationCommandLine")
	return ret
}

// g_application_command_line_create_file_for_arg
//
// [ arg ] trans: nothing
//
// [ result ] trans: everything
//
func (v ApplicationCommandLine) CreateFileForArg(arg string) (result File) {
	iv, err := _I.Get1(1743, "Gio", "ApplicationCommandLine", "create_file_for_arg", 16, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_arg := gi.CString(arg)
	arg_v := gi.NewPointerArgument(v.P)
	arg_arg := gi.NewStringArgument(c_arg)
	args := []gi.Argument{arg_v, arg_arg}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_arg)
	result.P = ret.Pointer()
	return
}

// g_application_command_line_get_arguments
//
// [ argc ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func (v ApplicationCommandLine) GetArguments() (result gi.CStrArray) {
	iv, err := _I.Get1(1744, "Gio", "ApplicationCommandLine", "get_arguments", 16, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_argc := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_argc}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var argc int32
	_ = argc
	argc = outArgs[0].Int32()
	result = gi.CStrArray{P: ret.Pointer(), Len: int(argc)}
	return
}

// g_application_command_line_get_cwd
//
// [ result ] trans: nothing
//
func (v ApplicationCommandLine) GetCwd() (result string) {
	iv, err := _I.Get1(1745, "Gio", "ApplicationCommandLine", "get_cwd", 16, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_application_command_line_get_environ
//
// [ result ] trans: nothing
//
func (v ApplicationCommandLine) GetEnviron() (result gi.CStrArray) {
	iv, err := _I.Get1(1746, "Gio", "ApplicationCommandLine", "get_environ", 16, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_application_command_line_get_exit_status
//
// [ result ] trans: nothing
//
func (v ApplicationCommandLine) GetExitStatus() (result int32) {
	iv, err := _I.Get1(1747, "Gio", "ApplicationCommandLine", "get_exit_status", 16, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// g_application_command_line_get_is_remote
//
// [ result ] trans: nothing
//
func (v ApplicationCommandLine) GetIsRemote() (result bool) {
	iv, err := _I.Get1(1748, "Gio", "ApplicationCommandLine", "get_is_remote", 16, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_application_command_line_get_options_dict
//
// [ result ] trans: nothing
//
func (v ApplicationCommandLine) GetOptionsDict() (result VariantDict) {
	iv, err := _I.Get1(1749, "Gio", "ApplicationCommandLine", "get_options_dict", 16, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_application_command_line_get_platform_data
//
// [ result ] trans: everything
//
func (v ApplicationCommandLine) GetPlatformData() (result Variant) {
	iv, err := _I.Get1(1750, "Gio", "ApplicationCommandLine", "get_platform_data", 16, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_application_command_line_get_stdin
//
// [ result ] trans: everything
//
func (v ApplicationCommandLine) GetStdin() (result InputStream) {
	iv, err := _I.Get1(1751, "Gio", "ApplicationCommandLine", "get_stdin", 16, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_application_command_line_getenv
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ApplicationCommandLine) Getenv(name string) (result string) {
	iv, err := _I.Get1(1752, "Gio", "ApplicationCommandLine", "getenv", 16, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result = ret.String().Copy()
	return
}

// g_application_command_line_set_exit_status
//
// [ exit_status ] trans: nothing
//
func (v ApplicationCommandLine) SetExitStatus(exit_status int32) {
	iv, err := _I.Get1(1753, "Gio", "ApplicationCommandLine", "set_exit_status", 16, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_exit_status := gi.NewInt32Argument(exit_status)
	args := []gi.Argument{arg_v, arg_exit_status}
	iv.Call(args, nil, nil)
}

// ignore GType struct ApplicationCommandLineClass

// ignore private struct ApplicationCommandLinePrivate, type of ApplicationCommandLine is object

// Flags ApplicationFlags
type ApplicationFlags int

const (
	ApplicationFlagsFlagsNone          ApplicationFlags = 0
	ApplicationFlagsIsService          ApplicationFlags = 1
	ApplicationFlagsIsLauncher         ApplicationFlags = 2
	ApplicationFlagsHandlesOpen        ApplicationFlags = 4
	ApplicationFlagsHandlesCommandLine ApplicationFlags = 8
	ApplicationFlagsSendEnvironment    ApplicationFlags = 16
	ApplicationFlagsNonUnique          ApplicationFlags = 32
	ApplicationFlagsCanOverrideAppId   ApplicationFlags = 64
)

func ApplicationFlagsGetType() gi.GType {
	ret := _I.GetGType1(203, "Gio", "ApplicationFlags")
	return ret
}

// ignore private struct ApplicationPrivate, type of Application is object

// Flags AskPasswordFlags
type AskPasswordFlags int

const (
	AskPasswordFlagsNeedPassword       AskPasswordFlags = 1
	AskPasswordFlagsNeedUsername       AskPasswordFlags = 2
	AskPasswordFlagsNeedDomain         AskPasswordFlags = 4
	AskPasswordFlagsSavingSupported    AskPasswordFlags = 8
	AskPasswordFlagsAnonymousSupported AskPasswordFlags = 16
	AskPasswordFlagsTcrypt             AskPasswordFlags = 32
)

func AskPasswordFlagsGetType() gi.GType {
	ret := _I.GetGType1(204, "Gio", "AskPasswordFlags")
	return ret
}

// Interface AsyncInitable
type AsyncInitable struct {
	AsyncInitableIfc
	P unsafe.Pointer
}
type AsyncInitableIfc struct{}
type IAsyncInitable interface{ P_AsyncInitable() unsafe.Pointer }

func (v AsyncInitable) P_AsyncInitable() unsafe.Pointer { return v.P }
func AsyncInitableGetType() gi.GType {
	ret := _I.GetGType1(205, "Gio", "AsyncInitable")
	return ret
}

// Deprecated
//
// g_async_initable_newv_async
//
// [ object_type ] trans: nothing
//
// [ n_parameters ] trans: nothing
//
// [ parameters ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func AsyncInitableNewvAsync1(object_type gi.GType, n_parameters uint32, parameters Parameter, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(1754, "Gio", "AsyncInitable", "newv_async", 22, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_object_type := gi.NewUintArgument(uint(object_type))
	arg_n_parameters := gi.NewUint32Argument(n_parameters)
	arg_parameters := gi.NewPointerArgument(parameters.P)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_object_type, arg_n_parameters, arg_parameters, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_async_initable_init_async
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *AsyncInitableIfc) InitAsync(io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(1755, "Gio", "AsyncInitable", "init_async", 22, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_async_initable_init_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *AsyncInitableIfc) InitFinish(res IAsyncResult) (result bool, err error) {
	iv, err := _I.Get1(1756, "Gio", "AsyncInitable", "init_finish", 22, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_async_initable_new_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func (v *AsyncInitableIfc) NewFinish(res IAsyncResult) (result Object, err error) {
	iv, err := _I.Get1(1757, "Gio", "AsyncInitable", "new_finish", 22, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// ignore GType struct AsyncInitableIface

type AsyncReadyCallback func(source_object Object, res AsyncResult)

func CallAsyncReadyCallback(fn AsyncReadyCallback, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	source_object := WrapObject(*(*unsafe.Pointer)(args[0]))
	res := AsyncResult{P: *(*unsafe.Pointer)(args[1])}
	fn(source_object, res)
}

// Interface AsyncResult
type AsyncResult struct {
	AsyncResultIfc
	P unsafe.Pointer
}
type AsyncResultIfc struct{}
type IAsyncResult interface{ P_AsyncResult() unsafe.Pointer }

func (v AsyncResult) P_AsyncResult() unsafe.Pointer { return v.P }
func AsyncResultGetType() gi.GType {
	ret := _I.GetGType1(206, "Gio", "AsyncResult")
	return ret
}

// g_async_result_get_source_object
//
// [ result ] trans: everything
//
func (v *AsyncResultIfc) GetSourceObject() (result Object) {
	iv, err := _I.Get1(1758, "Gio", "AsyncResult", "get_source_object", 25, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_async_result_get_user_data
//
// [ result ] trans: everything
//
func (v *AsyncResultIfc) GetUserData() (result unsafe.Pointer) {
	iv, err := _I.Get1(1759, "Gio", "AsyncResult", "get_user_data", 25, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Pointer()
	return
}

// g_async_result_is_tagged
//
// [ source_tag ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *AsyncResultIfc) IsTagged(source_tag unsafe.Pointer) (result bool) {
	iv, err := _I.Get1(1760, "Gio", "AsyncResult", "is_tagged", 25, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_source_tag := gi.NewPointerArgument(source_tag)
	args := []gi.Argument{arg_v, arg_source_tag}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_async_result_legacy_propagate_error
//
// [ result ] trans: nothing
//
func (v *AsyncResultIfc) LegacyPropagateError() (result bool, err error) {
	iv, err := _I.Get1(1761, "Gio", "AsyncResult", "legacy_propagate_error", 25, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// ignore GType struct AsyncResultIface

// Object BufferedInputStream
type BufferedInputStream struct {
	SeekableIfc
	FilterInputStream
}

func WrapBufferedInputStream(p unsafe.Pointer) (r BufferedInputStream) { r.P = p; return }

type IBufferedInputStream interface{ P_BufferedInputStream() unsafe.Pointer }

func (v BufferedInputStream) P_BufferedInputStream() unsafe.Pointer { return v.P }
func (v BufferedInputStream) P_Seekable() unsafe.Pointer            { return v.P }
func BufferedInputStreamGetType() gi.GType {
	ret := _I.GetGType1(207, "Gio", "BufferedInputStream")
	return ret
}

// g_buffered_input_stream_new
//
// [ base_stream ] trans: nothing
//
// [ result ] trans: everything
//
func NewBufferedInputStream(base_stream IInputStream) (result BufferedInputStream) {
	iv, err := _I.Get1(1762, "Gio", "BufferedInputStream", "new", 27, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if base_stream != nil {
		tmp = base_stream.P_InputStream()
	}
	arg_base_stream := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_base_stream}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_buffered_input_stream_new_sized
//
// [ base_stream ] trans: nothing
//
// [ size ] trans: nothing
//
// [ result ] trans: everything
//
func NewBufferedInputStreamSized(base_stream IInputStream, size uint64) (result BufferedInputStream) {
	iv, err := _I.Get1(1763, "Gio", "BufferedInputStream", "new_sized", 27, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if base_stream != nil {
		tmp = base_stream.P_InputStream()
	}
	arg_base_stream := gi.NewPointerArgument(tmp)
	arg_size := gi.NewUint64Argument(size)
	args := []gi.Argument{arg_base_stream, arg_size}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_buffered_input_stream_fill
//
// [ count ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v BufferedInputStream) Fill(count int64, cancellable ICancellable) (result int64, err error) {
	iv, err := _I.Get1(1764, "Gio", "BufferedInputStream", "fill", 27, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewInt64Argument(count)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_count, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int64()
	return
}

// g_buffered_input_stream_fill_async
//
// [ count ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v BufferedInputStream) FillAsync(count int64, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(1765, "Gio", "BufferedInputStream", "fill_async", 27, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewInt64Argument(count)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_count, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_buffered_input_stream_fill_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v BufferedInputStream) FillFinish(result IAsyncResult) (result1 int64, err error) {
	iv, err := _I.Get1(1766, "Gio", "BufferedInputStream", "fill_finish", 27, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Int64()
	return
}

// g_buffered_input_stream_get_available
//
// [ result ] trans: nothing
//
func (v BufferedInputStream) GetAvailable() (result uint64) {
	iv, err := _I.Get1(1767, "Gio", "BufferedInputStream", "get_available", 27, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint64()
	return
}

// g_buffered_input_stream_get_buffer_size
//
// [ result ] trans: nothing
//
func (v BufferedInputStream) GetBufferSize() (result uint64) {
	iv, err := _I.Get1(1768, "Gio", "BufferedInputStream", "get_buffer_size", 27, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint64()
	return
}

// g_buffered_input_stream_peek
//
// [ buffer ] trans: nothing
//
// [ offset ] trans: nothing
//
// [ count ] trans: nothing
//
// [ result ] trans: nothing
//
func (v BufferedInputStream) Peek(buffer gi.Uint8Array, offset uint64, count uint64) (result uint64) {
	iv, err := _I.Get1(1769, "Gio", "BufferedInputStream", "peek", 27, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_buffer := gi.NewPointerArgument(buffer.P)
	arg_offset := gi.NewUint64Argument(offset)
	arg_count := gi.NewUint64Argument(count)
	args := []gi.Argument{arg_v, arg_buffer, arg_offset, arg_count}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint64()
	return
}

// g_buffered_input_stream_peek_buffer
//
// [ count ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v BufferedInputStream) PeekBuffer() (result gi.Uint8Array) {
	iv, err := _I.Get1(1770, "Gio", "BufferedInputStream", "peek_buffer", 27, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_count}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var count uint64
	_ = count
	count = outArgs[0].Uint64()
	result = gi.Uint8Array{P: ret.Pointer(), Len: int(count)}
	return
}

// g_buffered_input_stream_read_byte
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v BufferedInputStream) ReadByte(cancellable ICancellable) (result int32, err error) {
	iv, err := _I.Get1(1771, "Gio", "BufferedInputStream", "read_byte", 27, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int32()
	return
}

// g_buffered_input_stream_set_buffer_size
//
// [ size ] trans: nothing
//
func (v BufferedInputStream) SetBufferSize(size uint64) {
	iv, err := _I.Get1(1772, "Gio", "BufferedInputStream", "set_buffer_size", 27, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_size := gi.NewUint64Argument(size)
	args := []gi.Argument{arg_v, arg_size}
	iv.Call(args, nil, nil)
}

// ignore GType struct BufferedInputStreamClass

// ignore private struct BufferedInputStreamPrivate, type of BufferedInputStream is object

// Object BufferedOutputStream
type BufferedOutputStream struct {
	SeekableIfc
	FilterOutputStream
}

func WrapBufferedOutputStream(p unsafe.Pointer) (r BufferedOutputStream) { r.P = p; return }

type IBufferedOutputStream interface{ P_BufferedOutputStream() unsafe.Pointer }

func (v BufferedOutputStream) P_BufferedOutputStream() unsafe.Pointer { return v.P }
func (v BufferedOutputStream) P_Seekable() unsafe.Pointer             { return v.P }
func BufferedOutputStreamGetType() gi.GType {
	ret := _I.GetGType1(208, "Gio", "BufferedOutputStream")
	return ret
}

// g_buffered_output_stream_new
//
// [ base_stream ] trans: nothing
//
// [ result ] trans: everything
//
func NewBufferedOutputStream(base_stream IOutputStream) (result BufferedOutputStream) {
	iv, err := _I.Get1(1773, "Gio", "BufferedOutputStream", "new", 30, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if base_stream != nil {
		tmp = base_stream.P_OutputStream()
	}
	arg_base_stream := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_base_stream}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_buffered_output_stream_new_sized
//
// [ base_stream ] trans: nothing
//
// [ size ] trans: nothing
//
// [ result ] trans: everything
//
func NewBufferedOutputStreamSized(base_stream IOutputStream, size uint64) (result BufferedOutputStream) {
	iv, err := _I.Get1(1774, "Gio", "BufferedOutputStream", "new_sized", 30, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if base_stream != nil {
		tmp = base_stream.P_OutputStream()
	}
	arg_base_stream := gi.NewPointerArgument(tmp)
	arg_size := gi.NewUint64Argument(size)
	args := []gi.Argument{arg_base_stream, arg_size}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_buffered_output_stream_get_auto_grow
//
// [ result ] trans: nothing
//
func (v BufferedOutputStream) GetAutoGrow() (result bool) {
	iv, err := _I.Get1(1775, "Gio", "BufferedOutputStream", "get_auto_grow", 30, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_buffered_output_stream_get_buffer_size
//
// [ result ] trans: nothing
//
func (v BufferedOutputStream) GetBufferSize() (result uint64) {
	iv, err := _I.Get1(1776, "Gio", "BufferedOutputStream", "get_buffer_size", 30, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint64()
	return
}

// g_buffered_output_stream_set_auto_grow
//
// [ auto_grow ] trans: nothing
//
func (v BufferedOutputStream) SetAutoGrow(auto_grow bool) {
	iv, err := _I.Get1(1777, "Gio", "BufferedOutputStream", "set_auto_grow", 30, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_auto_grow := gi.NewBoolArgument(auto_grow)
	args := []gi.Argument{arg_v, arg_auto_grow}
	iv.Call(args, nil, nil)
}

// g_buffered_output_stream_set_buffer_size
//
// [ size ] trans: nothing
//
func (v BufferedOutputStream) SetBufferSize(size uint64) {
	iv, err := _I.Get1(1778, "Gio", "BufferedOutputStream", "set_buffer_size", 30, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_size := gi.NewUint64Argument(size)
	args := []gi.Argument{arg_v, arg_size}
	iv.Call(args, nil, nil)
}

// ignore GType struct BufferedOutputStreamClass

// ignore private struct BufferedOutputStreamPrivate, type of BufferedOutputStream is object

type BusAcquiredCallback func(connection DBusConnection, name string)

func CallBusAcquiredCallback(fn BusAcquiredCallback, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	connection := WrapDBusConnection(*(*unsafe.Pointer)(args[0]))
	name := gi.GoString(*(*unsafe.Pointer)(args[1]))
	fn(connection, name)
}

type BusNameAcquiredCallback func(connection DBusConnection, name string)

func CallBusNameAcquiredCallback(fn BusNameAcquiredCallback, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	connection := WrapDBusConnection(*(*unsafe.Pointer)(args[0]))
	name := gi.GoString(*(*unsafe.Pointer)(args[1]))
	fn(connection, name)
}

type BusNameAppearedCallback func(connection DBusConnection, name string, name_owner string)

func CallBusNameAppearedCallback(fn BusNameAppearedCallback, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	connection := WrapDBusConnection(*(*unsafe.Pointer)(args[0]))
	name := gi.GoString(*(*unsafe.Pointer)(args[1]))
	name_owner := gi.GoString(*(*unsafe.Pointer)(args[2]))
	fn(connection, name, name_owner)
}

type BusNameLostCallback func(connection DBusConnection, name string)

func CallBusNameLostCallback(fn BusNameLostCallback, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	connection := WrapDBusConnection(*(*unsafe.Pointer)(args[0]))
	name := gi.GoString(*(*unsafe.Pointer)(args[1]))
	fn(connection, name)
}

// Flags BusNameOwnerFlags
type BusNameOwnerFlags int

const (
	BusNameOwnerFlagsNone             BusNameOwnerFlags = 0
	BusNameOwnerFlagsAllowReplacement BusNameOwnerFlags = 1
	BusNameOwnerFlagsReplace          BusNameOwnerFlags = 2
	BusNameOwnerFlagsDoNotQueue       BusNameOwnerFlags = 4
)

func BusNameOwnerFlagsGetType() gi.GType {
	ret := _I.GetGType1(209, "Gio", "BusNameOwnerFlags")
	return ret
}

type BusNameVanishedCallback func(connection DBusConnection, name string)

func CallBusNameVanishedCallback(fn BusNameVanishedCallback, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	connection := WrapDBusConnection(*(*unsafe.Pointer)(args[0]))
	name := gi.GoString(*(*unsafe.Pointer)(args[1]))
	fn(connection, name)
}

// Flags BusNameWatcherFlags
type BusNameWatcherFlags int

const (
	BusNameWatcherFlagsNone      BusNameWatcherFlags = 0
	BusNameWatcherFlagsAutoStart BusNameWatcherFlags = 1
)

func BusNameWatcherFlagsGetType() gi.GType {
	ret := _I.GetGType1(210, "Gio", "BusNameWatcherFlags")
	return ret
}

// Enum BusType
type BusTypeEnum int

const (
	BusTypeStarter BusTypeEnum = -1
	BusTypeNone    BusTypeEnum = 0
	BusTypeSystem  BusTypeEnum = 1
	BusTypeSession BusTypeEnum = 2
)

func BusTypeGetType() gi.GType {
	ret := _I.GetGType1(211, "Gio", "BusType")
	return ret
}

// Object BytesIcon
type BytesIcon struct {
	IconIfc
	LoadableIconIfc
	Object
}

func WrapBytesIcon(p unsafe.Pointer) (r BytesIcon) { r.P = p; return }

type IBytesIcon interface{ P_BytesIcon() unsafe.Pointer }

func (v BytesIcon) P_BytesIcon() unsafe.Pointer    { return v.P }
func (v BytesIcon) P_Icon() unsafe.Pointer         { return v.P }
func (v BytesIcon) P_LoadableIcon() unsafe.Pointer { return v.P }
func BytesIconGetType() gi.GType {
	ret := _I.GetGType1(212, "Gio", "BytesIcon")
	return ret
}

// g_bytes_icon_new
//
// [ bytes ] trans: nothing
//
// [ result ] trans: everything
//
func NewBytesIcon(bytes Bytes) (result BytesIcon) {
	iv, err := _I.Get1(1779, "Gio", "BytesIcon", "new", 41, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_bytes := gi.NewPointerArgument(bytes.P)
	args := []gi.Argument{arg_bytes}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_bytes_icon_get_bytes
//
// [ result ] trans: nothing
//
func (v BytesIcon) GetBytes() (result Bytes) {
	iv, err := _I.Get1(1780, "Gio", "BytesIcon", "get_bytes", 41, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Object Cancellable
type Cancellable struct {
	Object
}

func WrapCancellable(p unsafe.Pointer) (r Cancellable) { r.P = p; return }

type ICancellable interface{ P_Cancellable() unsafe.Pointer }

func (v Cancellable) P_Cancellable() unsafe.Pointer { return v.P }
func CancellableGetType() gi.GType {
	ret := _I.GetGType1(213, "Gio", "Cancellable")
	return ret
}

// g_cancellable_new
//
// [ result ] trans: everything
//
func NewCancellable() (result Cancellable) {
	iv, err := _I.Get1(1781, "Gio", "Cancellable", "new", 42, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_cancellable_get_current
//
// [ result ] trans: nothing
//
func CancellableGetCurrent1() (result Cancellable) {
	iv, err := _I.Get1(1782, "Gio", "Cancellable", "get_current", 42, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_cancellable_cancel
//
func (v Cancellable) Cancel() {
	iv, err := _I.Get1(1783, "Gio", "Cancellable", "cancel", 42, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_cancellable_connect
//
// [ callback ] trans: nothing
//
// [ data ] trans: nothing
//
// [ data_destroy_func ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Cancellable) Connect(callback Callback) (result uint64) {
	iv, err := _I.Get1(1784, "Gio", "Cancellable", "connect", 42, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var cId uint
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("GObject", "Callback")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallCallback(callback, __result, __args)
		}, gi.ScopeNotified, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_data := gi.NewPointerArgument(gi.Uint2Ptr(cId))
	arg_data_destroy_func := gi.NewPointerArgument(gi.GetClosureDestroyNotifyPtr())
	args := []gi.Argument{arg_v, arg_callback, arg_data, arg_data_destroy_func}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint64()
	return
}

// g_cancellable_disconnect
//
// [ handler_id ] trans: nothing
//
func (v Cancellable) Disconnect(handler_id uint64) {
	iv, err := _I.Get1(1785, "Gio", "Cancellable", "disconnect", 42, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_handler_id := gi.NewUint64Argument(handler_id)
	args := []gi.Argument{arg_v, arg_handler_id}
	iv.Call(args, nil, nil)
}

// g_cancellable_get_fd
//
// [ result ] trans: nothing
//
func (v Cancellable) GetFd() (result int32) {
	iv, err := _I.Get1(1786, "Gio", "Cancellable", "get_fd", 42, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// g_cancellable_is_cancelled
//
// [ result ] trans: nothing
//
func (v Cancellable) IsCancelled() (result bool) {
	iv, err := _I.Get1(1787, "Gio", "Cancellable", "is_cancelled", 42, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_cancellable_make_pollfd
//
// [ pollfd ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Cancellable) MakePollfd(pollfd PollFD) (result bool) {
	iv, err := _I.Get1(1788, "Gio", "Cancellable", "make_pollfd", 42, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pollfd := gi.NewPointerArgument(pollfd.P)
	args := []gi.Argument{arg_v, arg_pollfd}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_cancellable_pop_current
//
func (v Cancellable) PopCurrent() {
	iv, err := _I.Get1(1789, "Gio", "Cancellable", "pop_current", 42, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_cancellable_push_current
//
func (v Cancellable) PushCurrent() {
	iv, err := _I.Get1(1790, "Gio", "Cancellable", "push_current", 42, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_cancellable_release_fd
//
func (v Cancellable) ReleaseFd() {
	iv, err := _I.Get1(1791, "Gio", "Cancellable", "release_fd", 42, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_cancellable_reset
//
func (v Cancellable) Reset() {
	iv, err := _I.Get1(1792, "Gio", "Cancellable", "reset", 42, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_cancellable_set_error_if_cancelled
//
// [ result ] trans: nothing
//
func (v Cancellable) SetErrorIfCancelled() (result bool, err error) {
	iv, err := _I.Get1(1793, "Gio", "Cancellable", "set_error_if_cancelled", 42, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// ignore GType struct CancellableClass

// ignore private struct CancellablePrivate, type of Cancellable is object

type CancellableSourceFunc func(cancellable Cancellable) (result bool)

func CallCancellableSourceFunc(fn CancellableSourceFunc, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	cancellable := WrapCancellable(*(*unsafe.Pointer)(args[0]))
	fnRet := fn(cancellable)
	*(*int32)(result) = int32(gi.Bool2Int(fnRet))
}

// Object CharsetConverter
type CharsetConverter struct {
	ConverterIfc
	InitableIfc
	Object
}

func WrapCharsetConverter(p unsafe.Pointer) (r CharsetConverter) { r.P = p; return }

type ICharsetConverter interface{ P_CharsetConverter() unsafe.Pointer }

func (v CharsetConverter) P_CharsetConverter() unsafe.Pointer { return v.P }
func (v CharsetConverter) P_Converter() unsafe.Pointer        { return v.P }
func (v CharsetConverter) P_Initable() unsafe.Pointer         { return v.P }
func CharsetConverterGetType() gi.GType {
	ret := _I.GetGType1(214, "Gio", "CharsetConverter")
	return ret
}

// g_charset_converter_new
//
// [ to_charset ] trans: nothing
//
// [ from_charset ] trans: nothing
//
// [ result ] trans: everything
//
func NewCharsetConverter(to_charset string, from_charset string) (result CharsetConverter, err error) {
	iv, err := _I.Get1(1794, "Gio", "CharsetConverter", "new", 46, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_to_charset := gi.CString(to_charset)
	c_from_charset := gi.CString(from_charset)
	arg_to_charset := gi.NewStringArgument(c_to_charset)
	arg_from_charset := gi.NewStringArgument(c_from_charset)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_to_charset, arg_from_charset, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_to_charset)
	gi.Free(c_from_charset)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_charset_converter_get_num_fallbacks
//
// [ result ] trans: nothing
//
func (v CharsetConverter) GetNumFallbacks() (result uint32) {
	iv, err := _I.Get1(1795, "Gio", "CharsetConverter", "get_num_fallbacks", 46, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// g_charset_converter_get_use_fallback
//
// [ result ] trans: nothing
//
func (v CharsetConverter) GetUseFallback() (result bool) {
	iv, err := _I.Get1(1796, "Gio", "CharsetConverter", "get_use_fallback", 46, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_charset_converter_set_use_fallback
//
// [ use_fallback ] trans: nothing
//
func (v CharsetConverter) SetUseFallback(use_fallback bool) {
	iv, err := _I.Get1(1797, "Gio", "CharsetConverter", "set_use_fallback", 46, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_use_fallback := gi.NewBoolArgument(use_fallback)
	args := []gi.Argument{arg_v, arg_use_fallback}
	iv.Call(args, nil, nil)
}

// ignore GType struct CharsetConverterClass

// Interface Converter
type Converter struct {
	ConverterIfc
	P unsafe.Pointer
}
type ConverterIfc struct{}
type IConverter interface{ P_Converter() unsafe.Pointer }

func (v Converter) P_Converter() unsafe.Pointer { return v.P }
func ConverterGetType() gi.GType {
	ret := _I.GetGType1(215, "Gio", "Converter")
	return ret
}

// g_converter_convert
//
// [ inbuf ] trans: nothing
//
// [ inbuf_size ] trans: nothing
//
// [ outbuf ] trans: nothing
//
// [ outbuf_size ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ bytes_read ] trans: everything, dir: out
//
// [ bytes_written ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v *ConverterIfc) Convert(inbuf gi.Uint8Array, inbuf_size uint64, outbuf gi.Uint8Array, outbuf_size uint64, flags ConverterFlags) (result ConverterResultEnum, bytes_read uint64, bytes_written uint64, err error) {
	iv, err := _I.Get1(1798, "Gio", "Converter", "convert", 48, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [3]gi.Argument
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_inbuf := gi.NewPointerArgument(inbuf.P)
	arg_inbuf_size := gi.NewUint64Argument(inbuf_size)
	arg_outbuf := gi.NewPointerArgument(outbuf.P)
	arg_outbuf_size := gi.NewUint64Argument(outbuf_size)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_bytes_read := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_bytes_written := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	args := []gi.Argument{arg_v, arg_inbuf, arg_inbuf_size, arg_outbuf, arg_outbuf_size, arg_flags, arg_bytes_read, arg_bytes_written, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[2].Pointer())
	bytes_read = outArgs[0].Uint64()
	bytes_written = outArgs[1].Uint64()
	result = ConverterResultEnum(ret.Int())
	return
}

// g_converter_reset
//
func (v *ConverterIfc) Reset() {
	iv, err := _I.Get1(1799, "Gio", "Converter", "reset", 48, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Flags ConverterFlags
type ConverterFlags int

const (
	ConverterFlagsNone       ConverterFlags = 0
	ConverterFlagsInputAtEnd ConverterFlags = 1
	ConverterFlagsFlush      ConverterFlags = 2
)

func ConverterFlagsGetType() gi.GType {
	ret := _I.GetGType1(216, "Gio", "ConverterFlags")
	return ret
}

// ignore GType struct ConverterIface

// Object ConverterInputStream
type ConverterInputStream struct {
	PollableInputStreamIfc
	FilterInputStream
}

func WrapConverterInputStream(p unsafe.Pointer) (r ConverterInputStream) { r.P = p; return }

type IConverterInputStream interface{ P_ConverterInputStream() unsafe.Pointer }

func (v ConverterInputStream) P_ConverterInputStream() unsafe.Pointer { return v.P }
func (v ConverterInputStream) P_PollableInputStream() unsafe.Pointer  { return v.P }
func ConverterInputStreamGetType() gi.GType {
	ret := _I.GetGType1(217, "Gio", "ConverterInputStream")
	return ret
}

// g_converter_input_stream_new
//
// [ base_stream ] trans: nothing
//
// [ converter ] trans: nothing
//
// [ result ] trans: everything
//
func NewConverterInputStream(base_stream IInputStream, converter IConverter) (result ConverterInputStream) {
	iv, err := _I.Get1(1800, "Gio", "ConverterInputStream", "new", 51, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if base_stream != nil {
		tmp = base_stream.P_InputStream()
	}
	var tmp1 unsafe.Pointer
	if converter != nil {
		tmp1 = converter.P_Converter()
	}
	arg_base_stream := gi.NewPointerArgument(tmp)
	arg_converter := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_base_stream, arg_converter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_converter_input_stream_get_converter
//
// [ result ] trans: nothing
//
func (v ConverterInputStream) GetConverter() (result Converter) {
	iv, err := _I.Get1(1801, "Gio", "ConverterInputStream", "get_converter", 51, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct ConverterInputStreamClass

// ignore private struct ConverterInputStreamPrivate, type of ConverterInputStream is object

// Object ConverterOutputStream
type ConverterOutputStream struct {
	PollableOutputStreamIfc
	FilterOutputStream
}

func WrapConverterOutputStream(p unsafe.Pointer) (r ConverterOutputStream) { r.P = p; return }

type IConverterOutputStream interface{ P_ConverterOutputStream() unsafe.Pointer }

func (v ConverterOutputStream) P_ConverterOutputStream() unsafe.Pointer { return v.P }
func (v ConverterOutputStream) P_PollableOutputStream() unsafe.Pointer  { return v.P }
func ConverterOutputStreamGetType() gi.GType {
	ret := _I.GetGType1(218, "Gio", "ConverterOutputStream")
	return ret
}

// g_converter_output_stream_new
//
// [ base_stream ] trans: nothing
//
// [ converter ] trans: nothing
//
// [ result ] trans: everything
//
func NewConverterOutputStream(base_stream IOutputStream, converter IConverter) (result ConverterOutputStream) {
	iv, err := _I.Get1(1802, "Gio", "ConverterOutputStream", "new", 54, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if base_stream != nil {
		tmp = base_stream.P_OutputStream()
	}
	var tmp1 unsafe.Pointer
	if converter != nil {
		tmp1 = converter.P_Converter()
	}
	arg_base_stream := gi.NewPointerArgument(tmp)
	arg_converter := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_base_stream, arg_converter}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_converter_output_stream_get_converter
//
// [ result ] trans: nothing
//
func (v ConverterOutputStream) GetConverter() (result Converter) {
	iv, err := _I.Get1(1803, "Gio", "ConverterOutputStream", "get_converter", 54, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct ConverterOutputStreamClass

// ignore private struct ConverterOutputStreamPrivate, type of ConverterOutputStream is object

// Enum ConverterResult
type ConverterResultEnum int

const (
	ConverterResultError     ConverterResultEnum = 0
	ConverterResultConverted ConverterResultEnum = 1
	ConverterResultFinished  ConverterResultEnum = 2
	ConverterResultFlushed   ConverterResultEnum = 3
)

func ConverterResultGetType() gi.GType {
	ret := _I.GetGType1(219, "Gio", "ConverterResult")
	return ret
}

// Object Credentials
type Credentials struct {
	Object
}

func WrapCredentials(p unsafe.Pointer) (r Credentials) { r.P = p; return }

type ICredentials interface{ P_Credentials() unsafe.Pointer }

func (v Credentials) P_Credentials() unsafe.Pointer { return v.P }
func CredentialsGetType() gi.GType {
	ret := _I.GetGType1(220, "Gio", "Credentials")
	return ret
}

// g_credentials_new
//
// [ result ] trans: everything
//
func NewCredentials() (result Credentials) {
	iv, err := _I.Get1(1804, "Gio", "Credentials", "new", 58, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_credentials_get_unix_pid
//
// [ result ] trans: nothing
//
func (v Credentials) GetUnixPid() (result int32, err error) {
	iv, err := _I.Get1(1805, "Gio", "Credentials", "get_unix_pid", 58, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int32()
	return
}

// g_credentials_get_unix_user
//
// [ result ] trans: nothing
//
func (v Credentials) GetUnixUser() (result uint32, err error) {
	iv, err := _I.Get1(1806, "Gio", "Credentials", "get_unix_user", 58, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Uint32()
	return
}

// g_credentials_is_same_user
//
// [ other_credentials ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Credentials) IsSameUser(other_credentials ICredentials) (result bool, err error) {
	iv, err := _I.Get1(1807, "Gio", "Credentials", "is_same_user", 58, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if other_credentials != nil {
		tmp = other_credentials.P_Credentials()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_other_credentials := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_other_credentials, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_credentials_set_native
//
// [ native_type ] trans: nothing
//
// [ native ] trans: nothing
//
func (v Credentials) SetNative(native_type CredentialsTypeEnum, native unsafe.Pointer) {
	iv, err := _I.Get1(1808, "Gio", "Credentials", "set_native", 58, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_native_type := gi.NewIntArgument(int(native_type))
	arg_native := gi.NewPointerArgument(native)
	args := []gi.Argument{arg_v, arg_native_type, arg_native}
	iv.Call(args, nil, nil)
}

// g_credentials_set_unix_user
//
// [ uid ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Credentials) SetUnixUser(uid uint32) (result bool, err error) {
	iv, err := _I.Get1(1809, "Gio", "Credentials", "set_unix_user", 58, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_uid := gi.NewUint32Argument(uid)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_uid, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_credentials_to_string
//
// [ result ] trans: everything
//
func (v Credentials) ToString() (result string) {
	iv, err := _I.Get1(1810, "Gio", "Credentials", "to_string", 58, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// ignore GType struct CredentialsClass

// Enum CredentialsType
type CredentialsTypeEnum int

const (
	CredentialsTypeInvalid             CredentialsTypeEnum = 0
	CredentialsTypeLinuxUcred          CredentialsTypeEnum = 1
	CredentialsTypeFreebsdCmsgcred     CredentialsTypeEnum = 2
	CredentialsTypeOpenbsdSockpeercred CredentialsTypeEnum = 3
	CredentialsTypeSolarisUcred        CredentialsTypeEnum = 4
	CredentialsTypeNetbsdUnpcbid       CredentialsTypeEnum = 5
)

func CredentialsTypeGetType() gi.GType {
	ret := _I.GetGType1(221, "Gio", "CredentialsType")
	return ret
}

// Object DBusActionGroup
type DBusActionGroup struct {
	ActionGroupIfc
	RemoteActionGroupIfc
	Object
}

func WrapDBusActionGroup(p unsafe.Pointer) (r DBusActionGroup) { r.P = p; return }

type IDBusActionGroup interface{ P_DBusActionGroup() unsafe.Pointer }

func (v DBusActionGroup) P_DBusActionGroup() unsafe.Pointer   { return v.P }
func (v DBusActionGroup) P_ActionGroup() unsafe.Pointer       { return v.P }
func (v DBusActionGroup) P_RemoteActionGroup() unsafe.Pointer { return v.P }
func DBusActionGroupGetType() gi.GType {
	ret := _I.GetGType1(222, "Gio", "DBusActionGroup")
	return ret
}

// g_dbus_action_group_get
//
// [ connection ] trans: nothing
//
// [ bus_name ] trans: nothing
//
// [ object_path ] trans: nothing
//
// [ result ] trans: everything
//
func DBusActionGroupGet1(connection IDBusConnection, bus_name string, object_path string) (result DBusActionGroup) {
	iv, err := _I.Get1(1811, "Gio", "DBusActionGroup", "get", 61, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_DBusConnection()
	}
	c_bus_name := gi.CString(bus_name)
	c_object_path := gi.CString(object_path)
	arg_connection := gi.NewPointerArgument(tmp)
	arg_bus_name := gi.NewStringArgument(c_bus_name)
	arg_object_path := gi.NewStringArgument(c_object_path)
	args := []gi.Argument{arg_connection, arg_bus_name, arg_object_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_bus_name)
	gi.Free(c_object_path)
	result.P = ret.Pointer()
	return
}

// Struct DBusAnnotationInfo
type DBusAnnotationInfo struct {
	P unsafe.Pointer
}

const SizeOfStructDBusAnnotationInfo = 32

func DBusAnnotationInfoGetType() gi.GType {
	ret := _I.GetGType1(223, "Gio", "DBusAnnotationInfo")
	return ret
}

// g_dbus_annotation_info_ref
//
// [ result ] trans: everything
//
func (v DBusAnnotationInfo) Ref() (result DBusAnnotationInfo) {
	iv, err := _I.Get1(1812, "Gio", "DBusAnnotationInfo", "ref", 62, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_annotation_info_unref
//
func (v DBusAnnotationInfo) Unref() {
	iv, err := _I.Get1(1813, "Gio", "DBusAnnotationInfo", "unref", 62, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_dbus_annotation_info_lookup
//
// [ annotations ] trans: nothing
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func DBusAnnotationInfoLookup1(annotations gi.PointerArray, name string) (result string) {
	iv, err := _I.Get1(1814, "Gio", "DBusAnnotationInfo", "lookup", 62, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_annotations := gi.NewPointerArgument(annotations.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_annotations, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result = ret.String().Copy()
	return
}

func (v DBusAnnotationInfo) p() *C.GDBusAnnotationInfo {
	return (*C.GDBusAnnotationInfo)(v.P)
}
func (v DBusAnnotationInfo) RefCount() (result int32) {
	result = int32(v.p().ref_count)
	return
}
func (v DBusAnnotationInfo) Key() (result int /*TODO*/) {
	return
}
func (v DBusAnnotationInfo) Value() (result int /*TODO*/) {
	return
}
func (v DBusAnnotationInfo) Annotations() (result int /*TODO*/) {
	return
}

// Struct DBusArgInfo
type DBusArgInfo struct {
	P unsafe.Pointer
}

const SizeOfStructDBusArgInfo = 32

func DBusArgInfoGetType() gi.GType {
	ret := _I.GetGType1(224, "Gio", "DBusArgInfo")
	return ret
}

// g_dbus_arg_info_ref
//
// [ result ] trans: everything
//
func (v DBusArgInfo) Ref() (result DBusArgInfo) {
	iv, err := _I.Get1(1815, "Gio", "DBusArgInfo", "ref", 63, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_arg_info_unref
//
func (v DBusArgInfo) Unref() {
	iv, err := _I.Get1(1816, "Gio", "DBusArgInfo", "unref", 63, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

func (v DBusArgInfo) p() *C.GDBusArgInfo {
	return (*C.GDBusArgInfo)(v.P)
}
func (v DBusArgInfo) RefCount() (result int32) {
	result = int32(v.p().ref_count)
	return
}
func (v DBusArgInfo) Name() (result int /*TODO*/) {
	return
}
func (v DBusArgInfo) Signature() (result int /*TODO*/) {
	return
}
func (v DBusArgInfo) Annotations() (result int /*TODO*/) {
	return
}

// Object DBusAuthObserver
type DBusAuthObserver struct {
	Object
}

func WrapDBusAuthObserver(p unsafe.Pointer) (r DBusAuthObserver) { r.P = p; return }

type IDBusAuthObserver interface{ P_DBusAuthObserver() unsafe.Pointer }

func (v DBusAuthObserver) P_DBusAuthObserver() unsafe.Pointer { return v.P }
func DBusAuthObserverGetType() gi.GType {
	ret := _I.GetGType1(225, "Gio", "DBusAuthObserver")
	return ret
}

// g_dbus_auth_observer_new
//
// [ result ] trans: everything
//
func NewDBusAuthObserver() (result DBusAuthObserver) {
	iv, err := _I.Get1(1817, "Gio", "DBusAuthObserver", "new", 64, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_auth_observer_allow_mechanism
//
// [ mechanism ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusAuthObserver) AllowMechanism(mechanism string) (result bool) {
	iv, err := _I.Get1(1818, "Gio", "DBusAuthObserver", "allow_mechanism", 64, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_mechanism := gi.CString(mechanism)
	arg_v := gi.NewPointerArgument(v.P)
	arg_mechanism := gi.NewStringArgument(c_mechanism)
	args := []gi.Argument{arg_v, arg_mechanism}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_mechanism)
	result = ret.Bool()
	return
}

// g_dbus_auth_observer_authorize_authenticated_peer
//
// [ stream ] trans: nothing
//
// [ credentials ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusAuthObserver) AuthorizeAuthenticatedPeer(stream IIOStream, credentials ICredentials) (result bool) {
	iv, err := _I.Get1(1819, "Gio", "DBusAuthObserver", "authorize_authenticated_peer", 64, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if stream != nil {
		tmp = stream.P_IOStream()
	}
	var tmp1 unsafe.Pointer
	if credentials != nil {
		tmp1 = credentials.P_Credentials()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_stream := gi.NewPointerArgument(tmp)
	arg_credentials := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_v, arg_stream, arg_credentials}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Flags DBusCallFlags
type DBusCallFlags int

const (
	DBusCallFlagsNone                          DBusCallFlags = 0
	DBusCallFlagsNoAutoStart                   DBusCallFlags = 1
	DBusCallFlagsAllowInteractiveAuthorization DBusCallFlags = 2
)

func DBusCallFlagsGetType() gi.GType {
	ret := _I.GetGType1(226, "Gio", "DBusCallFlags")
	return ret
}

// Flags DBusCapabilityFlags
type DBusCapabilityFlags int

const (
	DBusCapabilityFlagsNone          DBusCapabilityFlags = 0
	DBusCapabilityFlagsUnixFdPassing DBusCapabilityFlags = 1
)

func DBusCapabilityFlagsGetType() gi.GType {
	ret := _I.GetGType1(227, "Gio", "DBusCapabilityFlags")
	return ret
}

// Object DBusConnection
type DBusConnection struct {
	AsyncInitableIfc
	InitableIfc
	Object
}

func WrapDBusConnection(p unsafe.Pointer) (r DBusConnection) { r.P = p; return }

type IDBusConnection interface{ P_DBusConnection() unsafe.Pointer }

func (v DBusConnection) P_DBusConnection() unsafe.Pointer { return v.P }
func (v DBusConnection) P_AsyncInitable() unsafe.Pointer  { return v.P }
func (v DBusConnection) P_Initable() unsafe.Pointer       { return v.P }
func DBusConnectionGetType() gi.GType {
	ret := _I.GetGType1(228, "Gio", "DBusConnection")
	return ret
}

// g_dbus_connection_new_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func NewDBusConnectionFinish(res IAsyncResult) (result DBusConnection, err error) {
	iv, err := _I.Get1(1820, "Gio", "DBusConnection", "new_finish", 67, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dbus_connection_new_for_address_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func NewDBusConnectionForAddressFinish(res IAsyncResult) (result DBusConnection, err error) {
	iv, err := _I.Get1(1821, "Gio", "DBusConnection", "new_for_address_finish", 67, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dbus_connection_new_for_address_sync
//
// [ address ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ observer ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func NewDBusConnectionForAddressSync(address string, flags DBusConnectionFlags, observer IDBusAuthObserver, cancellable ICancellable) (result DBusConnection, err error) {
	iv, err := _I.Get1(1822, "Gio", "DBusConnection", "new_for_address_sync", 67, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_address := gi.CString(address)
	var tmp unsafe.Pointer
	if observer != nil {
		tmp = observer.P_DBusAuthObserver()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_address := gi.NewStringArgument(c_address)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_observer := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_address, arg_flags, arg_observer, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_address)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dbus_connection_new_sync
//
// [ stream ] trans: nothing
//
// [ guid ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ observer ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func NewDBusConnectionSync(stream IIOStream, guid string, flags DBusConnectionFlags, observer IDBusAuthObserver, cancellable ICancellable) (result DBusConnection, err error) {
	iv, err := _I.Get1(1823, "Gio", "DBusConnection", "new_sync", 67, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if stream != nil {
		tmp = stream.P_IOStream()
	}
	c_guid := gi.CString(guid)
	var tmp1 unsafe.Pointer
	if observer != nil {
		tmp1 = observer.P_DBusAuthObserver()
	}
	var tmp2 unsafe.Pointer
	if cancellable != nil {
		tmp2 = cancellable.P_Cancellable()
	}
	arg_stream := gi.NewPointerArgument(tmp)
	arg_guid := gi.NewStringArgument(c_guid)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_observer := gi.NewPointerArgument(tmp1)
	arg_cancellable := gi.NewPointerArgument(tmp2)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_stream, arg_guid, arg_flags, arg_observer, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_guid)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dbus_connection_new
//
// [ stream ] trans: nothing
//
// [ guid ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ observer ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func DBusConnectionNew1(stream IIOStream, guid string, flags DBusConnectionFlags, observer IDBusAuthObserver, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(1824, "Gio", "DBusConnection", "new", 67, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if stream != nil {
		tmp = stream.P_IOStream()
	}
	c_guid := gi.CString(guid)
	var tmp1 unsafe.Pointer
	if observer != nil {
		tmp1 = observer.P_DBusAuthObserver()
	}
	var tmp2 unsafe.Pointer
	if cancellable != nil {
		tmp2 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_stream := gi.NewPointerArgument(tmp)
	arg_guid := gi.NewStringArgument(c_guid)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_observer := gi.NewPointerArgument(tmp1)
	arg_cancellable := gi.NewPointerArgument(tmp2)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_stream, arg_guid, arg_flags, arg_observer, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_guid)
}

// g_dbus_connection_new_for_address
//
// [ address ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ observer ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func DBusConnectionNewForAddress1(address string, flags DBusConnectionFlags, observer IDBusAuthObserver, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(1825, "Gio", "DBusConnection", "new_for_address", 67, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_address := gi.CString(address)
	var tmp unsafe.Pointer
	if observer != nil {
		tmp = observer.P_DBusAuthObserver()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_address := gi.NewStringArgument(c_address)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_observer := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_address, arg_flags, arg_observer, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_address)
}

// g_dbus_connection_add_filter
//
// [ filter_function ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ user_data_free_func ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusConnection) AddFilter(filter_function DBusMessageFilterFunction) (result uint32) {
	iv, err := _I.Get1(1826, "Gio", "DBusConnection", "add_filter", 67, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var cId uint
	var funcPtr unsafe.Pointer
	if filter_function != nil {
		callableInfo := gi.GetCallableInfo("Gio", "DBusMessageFilterFunction")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallDBusMessageFilterFunction(filter_function, __result, __args)
		}, gi.ScopeNotified, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_filter_function := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(gi.Uint2Ptr(cId))
	arg_user_data_free_func := gi.NewPointerArgument(gi.GetClosureDestroyNotifyPtr())
	args := []gi.Argument{arg_v, arg_filter_function, arg_user_data, arg_user_data_free_func}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// g_dbus_connection_call
//
// [ bus_name ] trans: nothing
//
// [ object_path ] trans: nothing
//
// [ interface_name ] trans: nothing
//
// [ method_name ] trans: nothing
//
// [ parameters ] trans: nothing
//
// [ reply_type ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ timeout_msec ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v DBusConnection) Call(bus_name string, object_path string, interface_name string, method_name string, parameters Variant, reply_type VariantType, flags DBusCallFlags, timeout_msec int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(1827, "Gio", "DBusConnection", "call", 67, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_bus_name := gi.CString(bus_name)
	c_object_path := gi.CString(object_path)
	c_interface_name := gi.CString(interface_name)
	c_method_name := gi.CString(method_name)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_bus_name := gi.NewStringArgument(c_bus_name)
	arg_object_path := gi.NewStringArgument(c_object_path)
	arg_interface_name := gi.NewStringArgument(c_interface_name)
	arg_method_name := gi.NewStringArgument(c_method_name)
	arg_parameters := gi.NewPointerArgument(parameters.P)
	arg_reply_type := gi.NewPointerArgument(reply_type.P)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_timeout_msec := gi.NewInt32Argument(timeout_msec)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_bus_name, arg_object_path, arg_interface_name, arg_method_name, arg_parameters, arg_reply_type, arg_flags, arg_timeout_msec, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_bus_name)
	gi.Free(c_object_path)
	gi.Free(c_interface_name)
	gi.Free(c_method_name)
}

// g_dbus_connection_call_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func (v DBusConnection) CallFinish(res IAsyncResult) (result Variant, err error) {
	iv, err := _I.Get1(1828, "Gio", "DBusConnection", "call_finish", 67, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dbus_connection_call_sync
//
// [ bus_name ] trans: nothing
//
// [ object_path ] trans: nothing
//
// [ interface_name ] trans: nothing
//
// [ method_name ] trans: nothing
//
// [ parameters ] trans: nothing
//
// [ reply_type ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ timeout_msec ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v DBusConnection) CallSync(bus_name string, object_path string, interface_name string, method_name string, parameters Variant, reply_type VariantType, flags DBusCallFlags, timeout_msec int32, cancellable ICancellable) (result Variant, err error) {
	iv, err := _I.Get1(1829, "Gio", "DBusConnection", "call_sync", 67, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_bus_name := gi.CString(bus_name)
	c_object_path := gi.CString(object_path)
	c_interface_name := gi.CString(interface_name)
	c_method_name := gi.CString(method_name)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_bus_name := gi.NewStringArgument(c_bus_name)
	arg_object_path := gi.NewStringArgument(c_object_path)
	arg_interface_name := gi.NewStringArgument(c_interface_name)
	arg_method_name := gi.NewStringArgument(c_method_name)
	arg_parameters := gi.NewPointerArgument(parameters.P)
	arg_reply_type := gi.NewPointerArgument(reply_type.P)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_timeout_msec := gi.NewInt32Argument(timeout_msec)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_bus_name, arg_object_path, arg_interface_name, arg_method_name, arg_parameters, arg_reply_type, arg_flags, arg_timeout_msec, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_bus_name)
	gi.Free(c_object_path)
	gi.Free(c_interface_name)
	gi.Free(c_method_name)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dbus_connection_call_with_unix_fd_list
//
// [ bus_name ] trans: nothing
//
// [ object_path ] trans: nothing
//
// [ interface_name ] trans: nothing
//
// [ method_name ] trans: nothing
//
// [ parameters ] trans: nothing
//
// [ reply_type ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ timeout_msec ] trans: nothing
//
// [ fd_list ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v DBusConnection) CallWithUnixFdList(bus_name string, object_path string, interface_name string, method_name string, parameters Variant, reply_type VariantType, flags DBusCallFlags, timeout_msec int32, fd_list IUnixFDList, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(1830, "Gio", "DBusConnection", "call_with_unix_fd_list", 67, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_bus_name := gi.CString(bus_name)
	c_object_path := gi.CString(object_path)
	c_interface_name := gi.CString(interface_name)
	c_method_name := gi.CString(method_name)
	var tmp unsafe.Pointer
	if fd_list != nil {
		tmp = fd_list.P_UnixFDList()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_bus_name := gi.NewStringArgument(c_bus_name)
	arg_object_path := gi.NewStringArgument(c_object_path)
	arg_interface_name := gi.NewStringArgument(c_interface_name)
	arg_method_name := gi.NewStringArgument(c_method_name)
	arg_parameters := gi.NewPointerArgument(parameters.P)
	arg_reply_type := gi.NewPointerArgument(reply_type.P)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_timeout_msec := gi.NewInt32Argument(timeout_msec)
	arg_fd_list := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_bus_name, arg_object_path, arg_interface_name, arg_method_name, arg_parameters, arg_reply_type, arg_flags, arg_timeout_msec, arg_fd_list, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_bus_name)
	gi.Free(c_object_path)
	gi.Free(c_interface_name)
	gi.Free(c_method_name)
}

// g_dbus_connection_call_with_unix_fd_list_finish
//
// [ out_fd_list ] trans: everything, dir: out
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func (v DBusConnection) CallWithUnixFdListFinish(res IAsyncResult) (result Variant, out_fd_list UnixFDList, err error) {
	iv, err := _I.Get1(1831, "Gio", "DBusConnection", "call_with_unix_fd_list_finish", 67, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_out_fd_list := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_out_fd_list, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	out_fd_list.P = outArgs[0].Pointer()
	result.P = ret.Pointer()
	return
}

// g_dbus_connection_call_with_unix_fd_list_sync
//
// [ bus_name ] trans: nothing
//
// [ object_path ] trans: nothing
//
// [ interface_name ] trans: nothing
//
// [ method_name ] trans: nothing
//
// [ parameters ] trans: nothing
//
// [ reply_type ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ timeout_msec ] trans: nothing
//
// [ fd_list ] trans: nothing
//
// [ out_fd_list ] trans: everything, dir: out
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v DBusConnection) CallWithUnixFdListSync(bus_name string, object_path string, interface_name string, method_name string, parameters Variant, reply_type VariantType, flags DBusCallFlags, timeout_msec int32, fd_list IUnixFDList, cancellable ICancellable) (result Variant, out_fd_list UnixFDList, err error) {
	iv, err := _I.Get1(1832, "Gio", "DBusConnection", "call_with_unix_fd_list_sync", 67, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	c_bus_name := gi.CString(bus_name)
	c_object_path := gi.CString(object_path)
	c_interface_name := gi.CString(interface_name)
	c_method_name := gi.CString(method_name)
	var tmp unsafe.Pointer
	if fd_list != nil {
		tmp = fd_list.P_UnixFDList()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_bus_name := gi.NewStringArgument(c_bus_name)
	arg_object_path := gi.NewStringArgument(c_object_path)
	arg_interface_name := gi.NewStringArgument(c_interface_name)
	arg_method_name := gi.NewStringArgument(c_method_name)
	arg_parameters := gi.NewPointerArgument(parameters.P)
	arg_reply_type := gi.NewPointerArgument(reply_type.P)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_timeout_msec := gi.NewInt32Argument(timeout_msec)
	arg_fd_list := gi.NewPointerArgument(tmp)
	arg_out_fd_list := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_bus_name, arg_object_path, arg_interface_name, arg_method_name, arg_parameters, arg_reply_type, arg_flags, arg_timeout_msec, arg_fd_list, arg_out_fd_list, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_bus_name)
	gi.Free(c_object_path)
	gi.Free(c_interface_name)
	gi.Free(c_method_name)
	err = gi.ToError(outArgs[1].Pointer())
	out_fd_list.P = outArgs[0].Pointer()
	result.P = ret.Pointer()
	return
}

// g_dbus_connection_close
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v DBusConnection) Close(cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(1833, "Gio", "DBusConnection", "close", 67, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_dbus_connection_close_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusConnection) CloseFinish(res IAsyncResult) (result bool, err error) {
	iv, err := _I.Get1(1834, "Gio", "DBusConnection", "close_finish", 67, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_dbus_connection_close_sync
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusConnection) CloseSync(cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(1835, "Gio", "DBusConnection", "close_sync", 67, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_dbus_connection_emit_signal
//
// [ destination_bus_name ] trans: nothing
//
// [ object_path ] trans: nothing
//
// [ interface_name ] trans: nothing
//
// [ signal_name ] trans: nothing
//
// [ parameters ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusConnection) EmitSignal(destination_bus_name string, object_path string, interface_name string, signal_name string, parameters Variant) (result bool, err error) {
	iv, err := _I.Get1(1836, "Gio", "DBusConnection", "emit_signal", 67, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_destination_bus_name := gi.CString(destination_bus_name)
	c_object_path := gi.CString(object_path)
	c_interface_name := gi.CString(interface_name)
	c_signal_name := gi.CString(signal_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_destination_bus_name := gi.NewStringArgument(c_destination_bus_name)
	arg_object_path := gi.NewStringArgument(c_object_path)
	arg_interface_name := gi.NewStringArgument(c_interface_name)
	arg_signal_name := gi.NewStringArgument(c_signal_name)
	arg_parameters := gi.NewPointerArgument(parameters.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_destination_bus_name, arg_object_path, arg_interface_name, arg_signal_name, arg_parameters, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_destination_bus_name)
	gi.Free(c_object_path)
	gi.Free(c_interface_name)
	gi.Free(c_signal_name)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_dbus_connection_export_action_group
//
// [ object_path ] trans: nothing
//
// [ action_group ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusConnection) ExportActionGroup(object_path string, action_group IActionGroup) (result uint32, err error) {
	iv, err := _I.Get1(1837, "Gio", "DBusConnection", "export_action_group", 67, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_object_path := gi.CString(object_path)
	var tmp unsafe.Pointer
	if action_group != nil {
		tmp = action_group.P_ActionGroup()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_object_path := gi.NewStringArgument(c_object_path)
	arg_action_group := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_object_path, arg_action_group, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_object_path)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Uint32()
	return
}

// g_dbus_connection_export_menu_model
//
// [ object_path ] trans: nothing
//
// [ menu ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusConnection) ExportMenuModel(object_path string, menu IMenuModel) (result uint32, err error) {
	iv, err := _I.Get1(1838, "Gio", "DBusConnection", "export_menu_model", 67, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_object_path := gi.CString(object_path)
	var tmp unsafe.Pointer
	if menu != nil {
		tmp = menu.P_MenuModel()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_object_path := gi.NewStringArgument(c_object_path)
	arg_menu := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_object_path, arg_menu, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_object_path)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Uint32()
	return
}

// g_dbus_connection_flush
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v DBusConnection) Flush(cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(1839, "Gio", "DBusConnection", "flush", 67, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_dbus_connection_flush_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusConnection) FlushFinish(res IAsyncResult) (result bool, err error) {
	iv, err := _I.Get1(1840, "Gio", "DBusConnection", "flush_finish", 67, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_dbus_connection_flush_sync
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusConnection) FlushSync(cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(1841, "Gio", "DBusConnection", "flush_sync", 67, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_dbus_connection_get_capabilities
//
// [ result ] trans: nothing
//
func (v DBusConnection) GetCapabilities() (result DBusCapabilityFlags) {
	iv, err := _I.Get1(1842, "Gio", "DBusConnection", "get_capabilities", 67, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = DBusCapabilityFlags(ret.Int())
	return
}

// g_dbus_connection_get_exit_on_close
//
// [ result ] trans: nothing
//
func (v DBusConnection) GetExitOnClose() (result bool) {
	iv, err := _I.Get1(1843, "Gio", "DBusConnection", "get_exit_on_close", 67, 23, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_dbus_connection_get_guid
//
// [ result ] trans: nothing
//
func (v DBusConnection) GetGuid() (result string) {
	iv, err := _I.Get1(1844, "Gio", "DBusConnection", "get_guid", 67, 24, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_dbus_connection_get_last_serial
//
// [ result ] trans: nothing
//
func (v DBusConnection) GetLastSerial() (result uint32) {
	iv, err := _I.Get1(1845, "Gio", "DBusConnection", "get_last_serial", 67, 25, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// g_dbus_connection_get_peer_credentials
//
// [ result ] trans: nothing
//
func (v DBusConnection) GetPeerCredentials() (result Credentials) {
	iv, err := _I.Get1(1846, "Gio", "DBusConnection", "get_peer_credentials", 67, 26, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_connection_get_stream
//
// [ result ] trans: nothing
//
func (v DBusConnection) GetStream() (result IOStream) {
	iv, err := _I.Get1(1847, "Gio", "DBusConnection", "get_stream", 67, 27, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_connection_get_unique_name
//
// [ result ] trans: nothing
//
func (v DBusConnection) GetUniqueName() (result string) {
	iv, err := _I.Get1(1848, "Gio", "DBusConnection", "get_unique_name", 67, 28, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_dbus_connection_is_closed
//
// [ result ] trans: nothing
//
func (v DBusConnection) IsClosed() (result bool) {
	iv, err := _I.Get1(1849, "Gio", "DBusConnection", "is_closed", 67, 29, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_dbus_connection_register_object_with_closures
//
// [ object_path ] trans: nothing
//
// [ interface_info ] trans: nothing
//
// [ method_call_closure ] trans: nothing
//
// [ get_property_closure ] trans: nothing
//
// [ set_property_closure ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusConnection) RegisterObject(object_path string, interface_info DBusInterfaceInfo, method_call_closure Closure, get_property_closure Closure, set_property_closure Closure) (result uint32, err error) {
	iv, err := _I.Get1(1850, "Gio", "DBusConnection", "register_object", 67, 30, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_object_path := gi.CString(object_path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_object_path := gi.NewStringArgument(c_object_path)
	arg_interface_info := gi.NewPointerArgument(interface_info.P)
	arg_method_call_closure := gi.NewPointerArgument(method_call_closure.P)
	arg_get_property_closure := gi.NewPointerArgument(get_property_closure.P)
	arg_set_property_closure := gi.NewPointerArgument(set_property_closure.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_object_path, arg_interface_info, arg_method_call_closure, arg_get_property_closure, arg_set_property_closure, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_object_path)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Uint32()
	return
}

// g_dbus_connection_register_subtree
//
// [ object_path ] trans: nothing
//
// [ vtable ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ user_data_free_func ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusConnection) RegisterSubtree(object_path string, vtable DBusSubtreeVTable, flags DBusSubtreeFlags, user_data unsafe.Pointer, user_data_free_func DestroyNotify) (result uint32, err error) {
	iv, err := _I.Get1(1851, "Gio", "DBusConnection", "register_subtree", 67, 31, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_object_path := gi.CString(object_path)
	var funcPtr unsafe.Pointer
	if user_data_free_func != nil {
		callableInfo := gi.GetCallableInfo("GLib", "DestroyNotify")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallDestroyNotify(user_data_free_func, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_object_path := gi.NewStringArgument(c_object_path)
	arg_vtable := gi.NewPointerArgument(vtable.P)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_user_data := gi.NewPointerArgument(user_data)
	arg_user_data_free_func := gi.NewPointerArgument(funcPtr)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_object_path, arg_vtable, arg_flags, arg_user_data, arg_user_data_free_func, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_object_path)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Uint32()
	return
}

// g_dbus_connection_remove_filter
//
// [ filter_id ] trans: nothing
//
func (v DBusConnection) RemoveFilter(filter_id uint32) {
	iv, err := _I.Get1(1852, "Gio", "DBusConnection", "remove_filter", 67, 32, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_filter_id := gi.NewUint32Argument(filter_id)
	args := []gi.Argument{arg_v, arg_filter_id}
	iv.Call(args, nil, nil)
}

// g_dbus_connection_send_message
//
// [ message ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ out_serial ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v DBusConnection) SendMessage(message IDBusMessage, flags DBusSendMessageFlags) (result bool, out_serial uint32, err error) {
	iv, err := _I.Get1(1853, "Gio", "DBusConnection", "send_message", 67, 33, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if message != nil {
		tmp = message.P_DBusMessage()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_message := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_out_serial := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_message, arg_flags, arg_out_serial, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	out_serial = outArgs[0].Uint32()
	result = ret.Bool()
	return
}

// g_dbus_connection_send_message_with_reply
//
// [ message ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ timeout_msec ] trans: nothing
//
// [ out_serial ] trans: everything, dir: out
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v DBusConnection) SendMessageWithReply(message IDBusMessage, flags DBusSendMessageFlags, timeout_msec int32, cancellable ICancellable, callback AsyncReadyCallback) (out_serial uint32) {
	iv, err := _I.Get1(1854, "Gio", "DBusConnection", "send_message_with_reply", 67, 34, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if message != nil {
		tmp = message.P_DBusMessage()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_message := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_timeout_msec := gi.NewInt32Argument(timeout_msec)
	arg_out_serial := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_message, arg_flags, arg_timeout_msec, arg_out_serial, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, &outArgs[0])
	out_serial = outArgs[0].Uint32()
	return
}

// g_dbus_connection_send_message_with_reply_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func (v DBusConnection) SendMessageWithReplyFinish(res IAsyncResult) (result DBusMessage, err error) {
	iv, err := _I.Get1(1855, "Gio", "DBusConnection", "send_message_with_reply_finish", 67, 35, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dbus_connection_send_message_with_reply_sync
//
// [ message ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ timeout_msec ] trans: nothing
//
// [ out_serial ] trans: everything, dir: out
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v DBusConnection) SendMessageWithReplySync(message IDBusMessage, flags DBusSendMessageFlags, timeout_msec int32, cancellable ICancellable) (result DBusMessage, out_serial uint32, err error) {
	iv, err := _I.Get1(1856, "Gio", "DBusConnection", "send_message_with_reply_sync", 67, 36, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if message != nil {
		tmp = message.P_DBusMessage()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_message := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_timeout_msec := gi.NewInt32Argument(timeout_msec)
	arg_out_serial := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_message, arg_flags, arg_timeout_msec, arg_out_serial, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	out_serial = outArgs[0].Uint32()
	result.P = ret.Pointer()
	return
}

// g_dbus_connection_set_exit_on_close
//
// [ exit_on_close ] trans: nothing
//
func (v DBusConnection) SetExitOnClose(exit_on_close bool) {
	iv, err := _I.Get1(1857, "Gio", "DBusConnection", "set_exit_on_close", 67, 37, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_exit_on_close := gi.NewBoolArgument(exit_on_close)
	args := []gi.Argument{arg_v, arg_exit_on_close}
	iv.Call(args, nil, nil)
}

// g_dbus_connection_signal_subscribe
//
// [ sender ] trans: nothing
//
// [ interface_name ] trans: nothing
//
// [ member ] trans: nothing
//
// [ object_path ] trans: nothing
//
// [ arg0 ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ user_data_free_func ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusConnection) SignalSubscribe(sender string, interface_name string, member string, object_path string, arg0 string, flags DBusSignalFlags, callback DBusSignalCallback) (result uint32) {
	iv, err := _I.Get1(1858, "Gio", "DBusConnection", "signal_subscribe", 67, 38, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_sender := gi.CString(sender)
	c_interface_name := gi.CString(interface_name)
	c_member := gi.CString(member)
	c_object_path := gi.CString(object_path)
	c_arg0 := gi.CString(arg0)
	var cId uint
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "DBusSignalCallback")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallDBusSignalCallback(callback, __result, __args)
		}, gi.ScopeNotified, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_sender := gi.NewStringArgument(c_sender)
	arg_interface_name := gi.NewStringArgument(c_interface_name)
	arg_member := gi.NewStringArgument(c_member)
	arg_object_path := gi.NewStringArgument(c_object_path)
	arg_arg0 := gi.NewStringArgument(c_arg0)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(gi.Uint2Ptr(cId))
	arg_user_data_free_func := gi.NewPointerArgument(gi.GetClosureDestroyNotifyPtr())
	args := []gi.Argument{arg_v, arg_sender, arg_interface_name, arg_member, arg_object_path, arg_arg0, arg_flags, arg_callback, arg_user_data, arg_user_data_free_func}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_sender)
	gi.Free(c_interface_name)
	gi.Free(c_member)
	gi.Free(c_object_path)
	gi.Free(c_arg0)
	result = ret.Uint32()
	return
}

// g_dbus_connection_signal_unsubscribe
//
// [ subscription_id ] trans: nothing
//
func (v DBusConnection) SignalUnsubscribe(subscription_id uint32) {
	iv, err := _I.Get1(1859, "Gio", "DBusConnection", "signal_unsubscribe", 67, 39, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_subscription_id := gi.NewUint32Argument(subscription_id)
	args := []gi.Argument{arg_v, arg_subscription_id}
	iv.Call(args, nil, nil)
}

// g_dbus_connection_start_message_processing
//
func (v DBusConnection) StartMessageProcessing() {
	iv, err := _I.Get1(1860, "Gio", "DBusConnection", "start_message_processing", 67, 40, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_dbus_connection_unexport_action_group
//
// [ export_id ] trans: nothing
//
func (v DBusConnection) UnexportActionGroup(export_id uint32) {
	iv, err := _I.Get1(1861, "Gio", "DBusConnection", "unexport_action_group", 67, 41, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_export_id := gi.NewUint32Argument(export_id)
	args := []gi.Argument{arg_v, arg_export_id}
	iv.Call(args, nil, nil)
}

// g_dbus_connection_unexport_menu_model
//
// [ export_id ] trans: nothing
//
func (v DBusConnection) UnexportMenuModel(export_id uint32) {
	iv, err := _I.Get1(1862, "Gio", "DBusConnection", "unexport_menu_model", 67, 42, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_export_id := gi.NewUint32Argument(export_id)
	args := []gi.Argument{arg_v, arg_export_id}
	iv.Call(args, nil, nil)
}

// g_dbus_connection_unregister_object
//
// [ registration_id ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusConnection) UnregisterObject(registration_id uint32) (result bool) {
	iv, err := _I.Get1(1863, "Gio", "DBusConnection", "unregister_object", 67, 43, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_registration_id := gi.NewUint32Argument(registration_id)
	args := []gi.Argument{arg_v, arg_registration_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_dbus_connection_unregister_subtree
//
// [ registration_id ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusConnection) UnregisterSubtree(registration_id uint32) (result bool) {
	iv, err := _I.Get1(1864, "Gio", "DBusConnection", "unregister_subtree", 67, 44, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_registration_id := gi.NewUint32Argument(registration_id)
	args := []gi.Argument{arg_v, arg_registration_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Flags DBusConnectionFlags
type DBusConnectionFlags int

const (
	DBusConnectionFlagsNone                         DBusConnectionFlags = 0
	DBusConnectionFlagsAuthenticationClient         DBusConnectionFlags = 1
	DBusConnectionFlagsAuthenticationServer         DBusConnectionFlags = 2
	DBusConnectionFlagsAuthenticationAllowAnonymous DBusConnectionFlags = 4
	DBusConnectionFlagsMessageBusConnection         DBusConnectionFlags = 8
	DBusConnectionFlagsDelayMessageProcessing       DBusConnectionFlags = 16
)

func DBusConnectionFlagsGetType() gi.GType {
	ret := _I.GetGType1(229, "Gio", "DBusConnectionFlags")
	return ret
}

// Enum DBusError
type DBusErrorEnum int

const (
	DBusErrorFailed                        DBusErrorEnum = 0
	DBusErrorNoMemory                      DBusErrorEnum = 1
	DBusErrorServiceUnknown                DBusErrorEnum = 2
	DBusErrorNameHasNoOwner                DBusErrorEnum = 3
	DBusErrorNoReply                       DBusErrorEnum = 4
	DBusErrorIoError                       DBusErrorEnum = 5
	DBusErrorBadAddress                    DBusErrorEnum = 6
	DBusErrorNotSupported                  DBusErrorEnum = 7
	DBusErrorLimitsExceeded                DBusErrorEnum = 8
	DBusErrorAccessDenied                  DBusErrorEnum = 9
	DBusErrorAuthFailed                    DBusErrorEnum = 10
	DBusErrorNoServer                      DBusErrorEnum = 11
	DBusErrorTimeout                       DBusErrorEnum = 12
	DBusErrorNoNetwork                     DBusErrorEnum = 13
	DBusErrorAddressInUse                  DBusErrorEnum = 14
	DBusErrorDisconnected                  DBusErrorEnum = 15
	DBusErrorInvalidArgs                   DBusErrorEnum = 16
	DBusErrorFileNotFound                  DBusErrorEnum = 17
	DBusErrorFileExists                    DBusErrorEnum = 18
	DBusErrorUnknownMethod                 DBusErrorEnum = 19
	DBusErrorTimedOut                      DBusErrorEnum = 20
	DBusErrorMatchRuleNotFound             DBusErrorEnum = 21
	DBusErrorMatchRuleInvalid              DBusErrorEnum = 22
	DBusErrorSpawnExecFailed               DBusErrorEnum = 23
	DBusErrorSpawnForkFailed               DBusErrorEnum = 24
	DBusErrorSpawnChildExited              DBusErrorEnum = 25
	DBusErrorSpawnChildSignaled            DBusErrorEnum = 26
	DBusErrorSpawnFailed                   DBusErrorEnum = 27
	DBusErrorSpawnSetupFailed              DBusErrorEnum = 28
	DBusErrorSpawnConfigInvalid            DBusErrorEnum = 29
	DBusErrorSpawnServiceInvalid           DBusErrorEnum = 30
	DBusErrorSpawnServiceNotFound          DBusErrorEnum = 31
	DBusErrorSpawnPermissionsInvalid       DBusErrorEnum = 32
	DBusErrorSpawnFileInvalid              DBusErrorEnum = 33
	DBusErrorSpawnNoMemory                 DBusErrorEnum = 34
	DBusErrorUnixProcessIdUnknown          DBusErrorEnum = 35
	DBusErrorInvalidSignature              DBusErrorEnum = 36
	DBusErrorInvalidFileContent            DBusErrorEnum = 37
	DBusErrorSelinuxSecurityContextUnknown DBusErrorEnum = 38
	DBusErrorAdtAuditDataUnknown           DBusErrorEnum = 39
	DBusErrorObjectPathInUse               DBusErrorEnum = 40
	DBusErrorUnknownObject                 DBusErrorEnum = 41
	DBusErrorUnknownInterface              DBusErrorEnum = 42
	DBusErrorUnknownProperty               DBusErrorEnum = 43
	DBusErrorPropertyReadOnly              DBusErrorEnum = 44
)

func DBusErrorGetType() gi.GType {
	ret := _I.GetGType1(230, "Gio", "DBusError")
	return ret
}

// Struct DBusErrorEntry
type DBusErrorEntry struct {
	P unsafe.Pointer
}

const SizeOfStructDBusErrorEntry = 16

func DBusErrorEntryGetType() gi.GType {
	ret := _I.GetGType1(231, "Gio", "DBusErrorEntry")
	return ret
}

func (v DBusErrorEntry) p() *C.GDBusErrorEntry {
	return (*C.GDBusErrorEntry)(v.P)
}
func (v DBusErrorEntry) ErrorCode() (result int32) {
	result = int32(v.p().error_code)
	return
}
func (v DBusErrorEntry) DbusErrorName() (result int /*TODO*/) {
	return
}

// Interface DBusInterface
type DBusInterface struct {
	DBusInterfaceIfc
	P unsafe.Pointer
}
type DBusInterfaceIfc struct{}
type IDBusInterface interface{ P_DBusInterface() unsafe.Pointer }

func (v DBusInterface) P_DBusInterface() unsafe.Pointer { return v.P }
func DBusInterfaceGetType() gi.GType {
	ret := _I.GetGType1(232, "Gio", "DBusInterface")
	return ret
}

// g_dbus_interface_dup_object
//
// [ result ] trans: everything
//
func (v *DBusInterfaceIfc) GetObject() (result DBusObject) {
	iv, err := _I.Get1(1865, "Gio", "DBusInterface", "get_object", 71, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_interface_get_info
//
// [ result ] trans: nothing
//
func (v *DBusInterfaceIfc) GetInfo() (result DBusInterfaceInfo) {
	iv, err := _I.Get1(1866, "Gio", "DBusInterface", "get_info", 71, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_interface_set_object
//
// [ object ] trans: nothing
//
func (v *DBusInterfaceIfc) SetObject(object IDBusObject) {
	iv, err := _I.Get1(1867, "Gio", "DBusInterface", "set_object", 71, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if object != nil {
		tmp = object.P_DBusObject()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_object := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_object}
	iv.Call(args, nil, nil)
}

type DBusInterfaceGetPropertyFunc func(connection DBusConnection, sender string, object_path string, interface_name string, property_name string) (result Variant, error error)

func CallDBusInterfaceGetPropertyFunc(fn DBusInterfaceGetPropertyFunc, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	connection := WrapDBusConnection(*(*unsafe.Pointer)(args[0]))
	sender := gi.GoString(*(*unsafe.Pointer)(args[1]))
	object_path := gi.GoString(*(*unsafe.Pointer)(args[2]))
	interface_name := gi.GoString(*(*unsafe.Pointer)(args[3]))
	property_name := gi.GoString(*(*unsafe.Pointer)(args[4]))
	fnRet, error := fn(connection, sender, object_path, interface_name, property_name)
	*(*unsafe.Pointer)(result) = fnRet.P
	_ = error
}

// ignore GType struct DBusInterfaceIface

// Struct DBusInterfaceInfo
type DBusInterfaceInfo struct {
	P unsafe.Pointer
}

const SizeOfStructDBusInterfaceInfo = 48

func DBusInterfaceInfoGetType() gi.GType {
	ret := _I.GetGType1(233, "Gio", "DBusInterfaceInfo")
	return ret
}

// g_dbus_interface_info_cache_build
//
func (v DBusInterfaceInfo) CacheBuild() {
	iv, err := _I.Get1(1868, "Gio", "DBusInterfaceInfo", "cache_build", 74, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_dbus_interface_info_cache_release
//
func (v DBusInterfaceInfo) CacheRelease() {
	iv, err := _I.Get1(1869, "Gio", "DBusInterfaceInfo", "cache_release", 74, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_dbus_interface_info_generate_xml
//
// [ indent ] trans: nothing
//
// [ string_builder ] trans: nothing
//
func (v DBusInterfaceInfo) GenerateXml(indent uint32, string_builder String) {
	iv, err := _I.Get1(1870, "Gio", "DBusInterfaceInfo", "generate_xml", 74, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_indent := gi.NewUint32Argument(indent)
	arg_string_builder := gi.NewPointerArgument(string_builder.P)
	args := []gi.Argument{arg_v, arg_indent, arg_string_builder}
	iv.Call(args, nil, nil)
}

// g_dbus_interface_info_lookup_method
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusInterfaceInfo) LookupMethod(name string) (result DBusMethodInfo) {
	iv, err := _I.Get1(1871, "Gio", "DBusInterfaceInfo", "lookup_method", 74, 3, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// g_dbus_interface_info_lookup_property
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusInterfaceInfo) LookupProperty(name string) (result DBusPropertyInfo) {
	iv, err := _I.Get1(1872, "Gio", "DBusInterfaceInfo", "lookup_property", 74, 4, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// g_dbus_interface_info_lookup_signal
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusInterfaceInfo) LookupSignal(name string) (result DBusSignalInfo) {
	iv, err := _I.Get1(1873, "Gio", "DBusInterfaceInfo", "lookup_signal", 74, 5, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// g_dbus_interface_info_ref
//
// [ result ] trans: everything
//
func (v DBusInterfaceInfo) Ref() (result DBusInterfaceInfo) {
	iv, err := _I.Get1(1874, "Gio", "DBusInterfaceInfo", "ref", 74, 6, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_interface_info_unref
//
func (v DBusInterfaceInfo) Unref() {
	iv, err := _I.Get1(1875, "Gio", "DBusInterfaceInfo", "unref", 74, 7, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

func (v DBusInterfaceInfo) p() *C.GDBusInterfaceInfo {
	return (*C.GDBusInterfaceInfo)(v.P)
}
func (v DBusInterfaceInfo) RefCount() (result int32) {
	result = int32(v.p().ref_count)
	return
}
func (v DBusInterfaceInfo) Name() (result int /*TODO*/) {
	return
}
func (v DBusInterfaceInfo) Methods() (result int /*TODO*/) {
	return
}
func (v DBusInterfaceInfo) Signals() (result int /*TODO*/) {
	return
}
func (v DBusInterfaceInfo) Properties() (result int /*TODO*/) {
	return
}
func (v DBusInterfaceInfo) Annotations() (result int /*TODO*/) {
	return
}

type DBusInterfaceMethodCallFunc func(connection DBusConnection, sender string, object_path string, interface_name string, method_name string, parameters Variant, invocation DBusMethodInvocation)

func CallDBusInterfaceMethodCallFunc(fn DBusInterfaceMethodCallFunc, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	connection := WrapDBusConnection(*(*unsafe.Pointer)(args[0]))
	sender := gi.GoString(*(*unsafe.Pointer)(args[1]))
	object_path := gi.GoString(*(*unsafe.Pointer)(args[2]))
	interface_name := gi.GoString(*(*unsafe.Pointer)(args[3]))
	method_name := gi.GoString(*(*unsafe.Pointer)(args[4]))
	parameters := Variant{P: *(*unsafe.Pointer)(args[5])}
	invocation := WrapDBusMethodInvocation(*(*unsafe.Pointer)(args[6]))
	fn(connection, sender, object_path, interface_name, method_name, parameters, invocation)
}

type DBusInterfaceSetPropertyFunc func(connection DBusConnection, sender string, object_path string, interface_name string, property_name string, value Variant) (result bool, error error)

func CallDBusInterfaceSetPropertyFunc(fn DBusInterfaceSetPropertyFunc, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	connection := WrapDBusConnection(*(*unsafe.Pointer)(args[0]))
	sender := gi.GoString(*(*unsafe.Pointer)(args[1]))
	object_path := gi.GoString(*(*unsafe.Pointer)(args[2]))
	interface_name := gi.GoString(*(*unsafe.Pointer)(args[3]))
	property_name := gi.GoString(*(*unsafe.Pointer)(args[4]))
	value := Variant{P: *(*unsafe.Pointer)(args[5])}
	fnRet, error := fn(connection, sender, object_path, interface_name, property_name, value)
	*(*int32)(result) = int32(gi.Bool2Int(fnRet))
	_ = error
}

// Object DBusInterfaceSkeleton
type DBusInterfaceSkeleton struct {
	DBusInterfaceIfc
	Object
}

func WrapDBusInterfaceSkeleton(p unsafe.Pointer) (r DBusInterfaceSkeleton) { r.P = p; return }

type IDBusInterfaceSkeleton interface{ P_DBusInterfaceSkeleton() unsafe.Pointer }

func (v DBusInterfaceSkeleton) P_DBusInterfaceSkeleton() unsafe.Pointer { return v.P }
func (v DBusInterfaceSkeleton) P_DBusInterface() unsafe.Pointer         { return v.P }
func DBusInterfaceSkeletonGetType() gi.GType {
	ret := _I.GetGType1(234, "Gio", "DBusInterfaceSkeleton")
	return ret
}

// g_dbus_interface_skeleton_export
//
// [ connection ] trans: nothing
//
// [ object_path ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusInterfaceSkeleton) Export(connection IDBusConnection, object_path string) (result bool, err error) {
	iv, err := _I.Get1(1876, "Gio", "DBusInterfaceSkeleton", "export", 77, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_DBusConnection()
	}
	c_object_path := gi.CString(object_path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_connection := gi.NewPointerArgument(tmp)
	arg_object_path := gi.NewStringArgument(c_object_path)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_connection, arg_object_path, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_object_path)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_dbus_interface_skeleton_flush
//
func (v DBusInterfaceSkeleton) Flush() {
	iv, err := _I.Get1(1877, "Gio", "DBusInterfaceSkeleton", "flush", 77, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_dbus_interface_skeleton_get_connection
//
// [ result ] trans: nothing
//
func (v DBusInterfaceSkeleton) GetConnection() (result DBusConnection) {
	iv, err := _I.Get1(1878, "Gio", "DBusInterfaceSkeleton", "get_connection", 77, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_interface_skeleton_get_connections
//
// [ result ] trans: everything
//
func (v DBusInterfaceSkeleton) GetConnections() (result List) {
	iv, err := _I.Get1(1879, "Gio", "DBusInterfaceSkeleton", "get_connections", 77, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_interface_skeleton_get_flags
//
// [ result ] trans: nothing
//
func (v DBusInterfaceSkeleton) GetFlags() (result DBusInterfaceSkeletonFlags) {
	iv, err := _I.Get1(1880, "Gio", "DBusInterfaceSkeleton", "get_flags", 77, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = DBusInterfaceSkeletonFlags(ret.Int())
	return
}

// g_dbus_interface_skeleton_get_info
//
// [ result ] trans: nothing
//
func (v DBusInterfaceSkeleton) GetInfo() (result DBusInterfaceInfo) {
	iv, err := _I.Get1(1881, "Gio", "DBusInterfaceSkeleton", "get_info", 77, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_interface_skeleton_get_object_path
//
// [ result ] trans: nothing
//
func (v DBusInterfaceSkeleton) GetObjectPath() (result string) {
	iv, err := _I.Get1(1882, "Gio", "DBusInterfaceSkeleton", "get_object_path", 77, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_dbus_interface_skeleton_get_properties
//
// [ result ] trans: everything
//
func (v DBusInterfaceSkeleton) GetProperties() (result Variant) {
	iv, err := _I.Get1(1883, "Gio", "DBusInterfaceSkeleton", "get_properties", 77, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_interface_skeleton_has_connection
//
// [ connection ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusInterfaceSkeleton) HasConnection(connection IDBusConnection) (result bool) {
	iv, err := _I.Get1(1884, "Gio", "DBusInterfaceSkeleton", "has_connection", 77, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_DBusConnection()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connection := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_connection}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_dbus_interface_skeleton_set_flags
//
// [ flags ] trans: nothing
//
func (v DBusInterfaceSkeleton) SetFlags(flags DBusInterfaceSkeletonFlags) {
	iv, err := _I.Get1(1885, "Gio", "DBusInterfaceSkeleton", "set_flags", 77, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_flags}
	iv.Call(args, nil, nil)
}

// g_dbus_interface_skeleton_unexport
//
func (v DBusInterfaceSkeleton) Unexport() {
	iv, err := _I.Get1(1886, "Gio", "DBusInterfaceSkeleton", "unexport", 77, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_dbus_interface_skeleton_unexport_from_connection
//
// [ connection ] trans: nothing
//
func (v DBusInterfaceSkeleton) UnexportFromConnection(connection IDBusConnection) {
	iv, err := _I.Get1(1887, "Gio", "DBusInterfaceSkeleton", "unexport_from_connection", 77, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_DBusConnection()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connection := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_connection}
	iv.Call(args, nil, nil)
}

// ignore GType struct DBusInterfaceSkeletonClass

// Flags DBusInterfaceSkeletonFlags
type DBusInterfaceSkeletonFlags int

const (
	DBusInterfaceSkeletonFlagsNone                            DBusInterfaceSkeletonFlags = 0
	DBusInterfaceSkeletonFlagsHandleMethodInvocationsInThread DBusInterfaceSkeletonFlags = 1
)

func DBusInterfaceSkeletonFlagsGetType() gi.GType {
	ret := _I.GetGType1(235, "Gio", "DBusInterfaceSkeletonFlags")
	return ret
}

// ignore private struct DBusInterfaceSkeletonPrivate, type of DBusInterfaceSkeleton is object

// Struct DBusInterfaceVTable
type DBusInterfaceVTable struct {
	P unsafe.Pointer
}

const SizeOfStructDBusInterfaceVTable = 88

func DBusInterfaceVTableGetType() gi.GType {
	ret := _I.GetGType1(236, "Gio", "DBusInterfaceVTable")
	return ret
}

func (v DBusInterfaceVTable) p() *C.GDBusInterfaceVTable {
	return (*C.GDBusInterfaceVTable)(v.P)
}
func (v DBusInterfaceVTable) MethodCall() (result int /*TODO*/) {
	return
}
func (v DBusInterfaceVTable) GetProperty() (result int /*TODO*/) {
	return
}
func (v DBusInterfaceVTable) SetProperty() (result int /*TODO*/) {
	return
}
func (v DBusInterfaceVTable) Padding() (result int /*TODO*/) {
	return
}

// Object DBusMenuModel
type DBusMenuModel struct {
	MenuModel
}

func WrapDBusMenuModel(p unsafe.Pointer) (r DBusMenuModel) { r.P = p; return }

type IDBusMenuModel interface{ P_DBusMenuModel() unsafe.Pointer }

func (v DBusMenuModel) P_DBusMenuModel() unsafe.Pointer { return v.P }
func DBusMenuModelGetType() gi.GType {
	ret := _I.GetGType1(237, "Gio", "DBusMenuModel")
	return ret
}

// g_dbus_menu_model_get
//
// [ connection ] trans: nothing
//
// [ bus_name ] trans: nothing
//
// [ object_path ] trans: nothing
//
// [ result ] trans: everything
//
func DBusMenuModelGet1(connection IDBusConnection, bus_name string, object_path string) (result DBusMenuModel) {
	iv, err := _I.Get1(1888, "Gio", "DBusMenuModel", "get", 82, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_DBusConnection()
	}
	c_bus_name := gi.CString(bus_name)
	c_object_path := gi.CString(object_path)
	arg_connection := gi.NewPointerArgument(tmp)
	arg_bus_name := gi.NewStringArgument(c_bus_name)
	arg_object_path := gi.NewStringArgument(c_object_path)
	args := []gi.Argument{arg_connection, arg_bus_name, arg_object_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_bus_name)
	gi.Free(c_object_path)
	result.P = ret.Pointer()
	return
}

// Object DBusMessage
type DBusMessage struct {
	Object
}

func WrapDBusMessage(p unsafe.Pointer) (r DBusMessage) { r.P = p; return }

type IDBusMessage interface{ P_DBusMessage() unsafe.Pointer }

func (v DBusMessage) P_DBusMessage() unsafe.Pointer { return v.P }
func DBusMessageGetType() gi.GType {
	ret := _I.GetGType1(238, "Gio", "DBusMessage")
	return ret
}

// g_dbus_message_new
//
// [ result ] trans: everything
//
func NewDBusMessage() (result DBusMessage) {
	iv, err := _I.Get1(1889, "Gio", "DBusMessage", "new", 83, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_message_new_from_blob
//
// [ blob ] trans: nothing
//
// [ blob_len ] trans: nothing
//
// [ capabilities ] trans: nothing
//
// [ result ] trans: everything
//
func NewDBusMessageFromBlob(blob gi.Uint8Array, blob_len uint64, capabilities DBusCapabilityFlags) (result DBusMessage, err error) {
	iv, err := _I.Get1(1890, "Gio", "DBusMessage", "new_from_blob", 83, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_blob := gi.NewPointerArgument(blob.P)
	arg_blob_len := gi.NewUint64Argument(blob_len)
	arg_capabilities := gi.NewIntArgument(int(capabilities))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_blob, arg_blob_len, arg_capabilities, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dbus_message_new_method_call
//
// [ name ] trans: nothing
//
// [ path ] trans: nothing
//
// [ interface_ ] trans: nothing
//
// [ method ] trans: nothing
//
// [ result ] trans: everything
//
func NewDBusMessageMethodCall(name string, path string, interface_ string, method string) (result DBusMessage) {
	iv, err := _I.Get1(1891, "Gio", "DBusMessage", "new_method_call", 83, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	c_path := gi.CString(path)
	c_interface_ := gi.CString(interface_)
	c_method := gi.CString(method)
	arg_name := gi.NewStringArgument(c_name)
	arg_path := gi.NewStringArgument(c_path)
	arg_interface_ := gi.NewStringArgument(c_interface_)
	arg_method := gi.NewStringArgument(c_method)
	args := []gi.Argument{arg_name, arg_path, arg_interface_, arg_method}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	gi.Free(c_path)
	gi.Free(c_interface_)
	gi.Free(c_method)
	result.P = ret.Pointer()
	return
}

// g_dbus_message_new_signal
//
// [ path ] trans: nothing
//
// [ interface_ ] trans: nothing
//
// [ signal ] trans: nothing
//
// [ result ] trans: everything
//
func NewDBusMessageSignal(path string, interface_ string, signal string) (result DBusMessage) {
	iv, err := _I.Get1(1892, "Gio", "DBusMessage", "new_signal", 83, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	c_interface_ := gi.CString(interface_)
	c_signal := gi.CString(signal)
	arg_path := gi.NewStringArgument(c_path)
	arg_interface_ := gi.NewStringArgument(c_interface_)
	arg_signal := gi.NewStringArgument(c_signal)
	args := []gi.Argument{arg_path, arg_interface_, arg_signal}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_path)
	gi.Free(c_interface_)
	gi.Free(c_signal)
	result.P = ret.Pointer()
	return
}

// g_dbus_message_bytes_needed
//
// [ blob ] trans: nothing
//
// [ blob_len ] trans: nothing
//
// [ result ] trans: nothing
//
func DBusMessageBytesNeeded1(blob gi.Uint8Array, blob_len uint64) (result int64, err error) {
	iv, err := _I.Get1(1893, "Gio", "DBusMessage", "bytes_needed", 83, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_blob := gi.NewPointerArgument(blob.P)
	arg_blob_len := gi.NewUint64Argument(blob_len)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_blob, arg_blob_len, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int64()
	return
}

// g_dbus_message_copy
//
// [ result ] trans: everything
//
func (v DBusMessage) Copy() (result DBusMessage, err error) {
	iv, err := _I.Get1(1894, "Gio", "DBusMessage", "copy", 83, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dbus_message_get_arg0
//
// [ result ] trans: nothing
//
func (v DBusMessage) GetArg0() (result string) {
	iv, err := _I.Get1(1895, "Gio", "DBusMessage", "get_arg0", 83, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_dbus_message_get_body
//
// [ result ] trans: nothing
//
func (v DBusMessage) GetBody() (result Variant) {
	iv, err := _I.Get1(1896, "Gio", "DBusMessage", "get_body", 83, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_message_get_byte_order
//
// [ result ] trans: nothing
//
func (v DBusMessage) GetByteOrder() (result DBusMessageByteOrderEnum) {
	iv, err := _I.Get1(1897, "Gio", "DBusMessage", "get_byte_order", 83, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = DBusMessageByteOrderEnum(ret.Int())
	return
}

// g_dbus_message_get_destination
//
// [ result ] trans: nothing
//
func (v DBusMessage) GetDestination() (result string) {
	iv, err := _I.Get1(1898, "Gio", "DBusMessage", "get_destination", 83, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_dbus_message_get_error_name
//
// [ result ] trans: nothing
//
func (v DBusMessage) GetErrorName() (result string) {
	iv, err := _I.Get1(1899, "Gio", "DBusMessage", "get_error_name", 83, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_dbus_message_get_flags
//
// [ result ] trans: nothing
//
func (v DBusMessage) GetFlags() (result DBusMessageFlags) {
	iv, err := _I.Get1(1900, "Gio", "DBusMessage", "get_flags", 83, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = DBusMessageFlags(ret.Int())
	return
}

// g_dbus_message_get_header
//
// [ header_field ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusMessage) GetHeader(header_field DBusMessageHeaderFieldEnum) (result Variant) {
	iv, err := _I.Get1(1901, "Gio", "DBusMessage", "get_header", 83, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_header_field := gi.NewIntArgument(int(header_field))
	args := []gi.Argument{arg_v, arg_header_field}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_message_get_header_fields
//
// [ result ] trans: nothing
//
func (v DBusMessage) GetHeaderFields() (result gi.Uint8Array) {
	iv, err := _I.Get1(1902, "Gio", "DBusMessage", "get_header_fields", 83, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.Uint8Array{P: ret.Pointer()}
	result.SetLenZT()
	return
}

// g_dbus_message_get_interface
//
// [ result ] trans: nothing
//
func (v DBusMessage) GetInterface() (result string) {
	iv, err := _I.Get1(1903, "Gio", "DBusMessage", "get_interface", 83, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_dbus_message_get_locked
//
// [ result ] trans: nothing
//
func (v DBusMessage) GetLocked() (result bool) {
	iv, err := _I.Get1(1904, "Gio", "DBusMessage", "get_locked", 83, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_dbus_message_get_member
//
// [ result ] trans: nothing
//
func (v DBusMessage) GetMember() (result string) {
	iv, err := _I.Get1(1905, "Gio", "DBusMessage", "get_member", 83, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_dbus_message_get_message_type
//
// [ result ] trans: nothing
//
func (v DBusMessage) GetMessageType() (result DBusMessageTypeEnum) {
	iv, err := _I.Get1(1906, "Gio", "DBusMessage", "get_message_type", 83, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = DBusMessageTypeEnum(ret.Int())
	return
}

// g_dbus_message_get_num_unix_fds
//
// [ result ] trans: nothing
//
func (v DBusMessage) GetNumUnixFds() (result uint32) {
	iv, err := _I.Get1(1907, "Gio", "DBusMessage", "get_num_unix_fds", 83, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// g_dbus_message_get_path
//
// [ result ] trans: nothing
//
func (v DBusMessage) GetPath() (result string) {
	iv, err := _I.Get1(1908, "Gio", "DBusMessage", "get_path", 83, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_dbus_message_get_reply_serial
//
// [ result ] trans: nothing
//
func (v DBusMessage) GetReplySerial() (result uint32) {
	iv, err := _I.Get1(1909, "Gio", "DBusMessage", "get_reply_serial", 83, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// g_dbus_message_get_sender
//
// [ result ] trans: nothing
//
func (v DBusMessage) GetSender() (result string) {
	iv, err := _I.Get1(1910, "Gio", "DBusMessage", "get_sender", 83, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_dbus_message_get_serial
//
// [ result ] trans: nothing
//
func (v DBusMessage) GetSerial() (result uint32) {
	iv, err := _I.Get1(1911, "Gio", "DBusMessage", "get_serial", 83, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// g_dbus_message_get_signature
//
// [ result ] trans: nothing
//
func (v DBusMessage) GetSignature() (result string) {
	iv, err := _I.Get1(1912, "Gio", "DBusMessage", "get_signature", 83, 23, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_dbus_message_get_unix_fd_list
//
// [ result ] trans: nothing
//
func (v DBusMessage) GetUnixFdList() (result UnixFDList) {
	iv, err := _I.Get1(1913, "Gio", "DBusMessage", "get_unix_fd_list", 83, 24, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_message_lock
//
func (v DBusMessage) Lock() {
	iv, err := _I.Get1(1914, "Gio", "DBusMessage", "lock", 83, 25, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_dbus_message_new_method_error_literal
//
// [ error_name ] trans: nothing
//
// [ error_message ] trans: nothing
//
// [ result ] trans: everything
//
func (v DBusMessage) NewMethodErrorLiteral(error_name string, error_message string) (result DBusMessage) {
	iv, err := _I.Get1(1915, "Gio", "DBusMessage", "new_method_error_literal", 83, 26, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_error_name := gi.CString(error_name)
	c_error_message := gi.CString(error_message)
	arg_v := gi.NewPointerArgument(v.P)
	arg_error_name := gi.NewStringArgument(c_error_name)
	arg_error_message := gi.NewStringArgument(c_error_message)
	args := []gi.Argument{arg_v, arg_error_name, arg_error_message}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_error_name)
	gi.Free(c_error_message)
	result.P = ret.Pointer()
	return
}

// g_dbus_message_new_method_reply
//
// [ result ] trans: everything
//
func (v DBusMessage) NewMethodReply() (result DBusMessage) {
	iv, err := _I.Get1(1916, "Gio", "DBusMessage", "new_method_reply", 83, 27, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_message_print
//
// [ indent ] trans: nothing
//
// [ result ] trans: everything
//
func (v DBusMessage) Print(indent uint32) (result string) {
	iv, err := _I.Get1(1917, "Gio", "DBusMessage", "print", 83, 28, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_indent := gi.NewUint32Argument(indent)
	args := []gi.Argument{arg_v, arg_indent}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_dbus_message_set_body
//
// [ body ] trans: nothing
//
func (v DBusMessage) SetBody(body Variant) {
	iv, err := _I.Get1(1918, "Gio", "DBusMessage", "set_body", 83, 29, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_body := gi.NewPointerArgument(body.P)
	args := []gi.Argument{arg_v, arg_body}
	iv.Call(args, nil, nil)
}

// g_dbus_message_set_byte_order
//
// [ byte_order ] trans: nothing
//
func (v DBusMessage) SetByteOrder(byte_order DBusMessageByteOrderEnum) {
	iv, err := _I.Get1(1919, "Gio", "DBusMessage", "set_byte_order", 83, 30, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_byte_order := gi.NewIntArgument(int(byte_order))
	args := []gi.Argument{arg_v, arg_byte_order}
	iv.Call(args, nil, nil)
}

// g_dbus_message_set_destination
//
// [ value ] trans: nothing
//
func (v DBusMessage) SetDestination(value string) {
	iv, err := _I.Get1(1920, "Gio", "DBusMessage", "set_destination", 83, 31, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_value := gi.CString(value)
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewStringArgument(c_value)
	args := []gi.Argument{arg_v, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_value)
}

// g_dbus_message_set_error_name
//
// [ value ] trans: nothing
//
func (v DBusMessage) SetErrorName(value string) {
	iv, err := _I.Get1(1921, "Gio", "DBusMessage", "set_error_name", 83, 32, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_value := gi.CString(value)
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewStringArgument(c_value)
	args := []gi.Argument{arg_v, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_value)
}

// g_dbus_message_set_flags
//
// [ flags ] trans: nothing
//
func (v DBusMessage) SetFlags(flags DBusMessageFlags) {
	iv, err := _I.Get1(1922, "Gio", "DBusMessage", "set_flags", 83, 33, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_flags}
	iv.Call(args, nil, nil)
}

// g_dbus_message_set_header
//
// [ header_field ] trans: nothing
//
// [ value ] trans: nothing
//
func (v DBusMessage) SetHeader(header_field DBusMessageHeaderFieldEnum, value Variant) {
	iv, err := _I.Get1(1923, "Gio", "DBusMessage", "set_header", 83, 34, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_header_field := gi.NewIntArgument(int(header_field))
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_header_field, arg_value}
	iv.Call(args, nil, nil)
}

// g_dbus_message_set_interface
//
// [ value ] trans: nothing
//
func (v DBusMessage) SetInterface(value string) {
	iv, err := _I.Get1(1924, "Gio", "DBusMessage", "set_interface", 83, 35, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_value := gi.CString(value)
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewStringArgument(c_value)
	args := []gi.Argument{arg_v, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_value)
}

// g_dbus_message_set_member
//
// [ value ] trans: nothing
//
func (v DBusMessage) SetMember(value string) {
	iv, err := _I.Get1(1925, "Gio", "DBusMessage", "set_member", 83, 36, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_value := gi.CString(value)
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewStringArgument(c_value)
	args := []gi.Argument{arg_v, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_value)
}

// g_dbus_message_set_message_type
//
// [ type1 ] trans: nothing
//
func (v DBusMessage) SetMessageType(type1 DBusMessageTypeEnum) {
	iv, err := _I.Get1(1926, "Gio", "DBusMessage", "set_message_type", 83, 37, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_type1 := gi.NewIntArgument(int(type1))
	args := []gi.Argument{arg_v, arg_type1}
	iv.Call(args, nil, nil)
}

// g_dbus_message_set_num_unix_fds
//
// [ value ] trans: nothing
//
func (v DBusMessage) SetNumUnixFds(value uint32) {
	iv, err := _I.Get1(1927, "Gio", "DBusMessage", "set_num_unix_fds", 83, 38, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewUint32Argument(value)
	args := []gi.Argument{arg_v, arg_value}
	iv.Call(args, nil, nil)
}

// g_dbus_message_set_path
//
// [ value ] trans: nothing
//
func (v DBusMessage) SetPath(value string) {
	iv, err := _I.Get1(1928, "Gio", "DBusMessage", "set_path", 83, 39, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_value := gi.CString(value)
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewStringArgument(c_value)
	args := []gi.Argument{arg_v, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_value)
}

// g_dbus_message_set_reply_serial
//
// [ value ] trans: nothing
//
func (v DBusMessage) SetReplySerial(value uint32) {
	iv, err := _I.Get1(1929, "Gio", "DBusMessage", "set_reply_serial", 83, 40, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewUint32Argument(value)
	args := []gi.Argument{arg_v, arg_value}
	iv.Call(args, nil, nil)
}

// g_dbus_message_set_sender
//
// [ value ] trans: nothing
//
func (v DBusMessage) SetSender(value string) {
	iv, err := _I.Get1(1930, "Gio", "DBusMessage", "set_sender", 83, 41, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_value := gi.CString(value)
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewStringArgument(c_value)
	args := []gi.Argument{arg_v, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_value)
}

// g_dbus_message_set_serial
//
// [ serial ] trans: nothing
//
func (v DBusMessage) SetSerial(serial uint32) {
	iv, err := _I.Get1(1931, "Gio", "DBusMessage", "set_serial", 83, 42, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_serial := gi.NewUint32Argument(serial)
	args := []gi.Argument{arg_v, arg_serial}
	iv.Call(args, nil, nil)
}

// g_dbus_message_set_signature
//
// [ value ] trans: nothing
//
func (v DBusMessage) SetSignature(value string) {
	iv, err := _I.Get1(1932, "Gio", "DBusMessage", "set_signature", 83, 43, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_value := gi.CString(value)
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewStringArgument(c_value)
	args := []gi.Argument{arg_v, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_value)
}

// g_dbus_message_set_unix_fd_list
//
// [ fd_list ] trans: nothing
//
func (v DBusMessage) SetUnixFdList(fd_list IUnixFDList) {
	iv, err := _I.Get1(1933, "Gio", "DBusMessage", "set_unix_fd_list", 83, 44, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if fd_list != nil {
		tmp = fd_list.P_UnixFDList()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_fd_list := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_fd_list}
	iv.Call(args, nil, nil)
}

// g_dbus_message_to_blob
//
// [ out_size ] trans: everything, dir: out
//
// [ capabilities ] trans: nothing
//
// [ result ] trans: everything
//
func (v DBusMessage) ToBlob(capabilities DBusCapabilityFlags) (result gi.Uint8Array, err error) {
	iv, err := _I.Get1(1934, "Gio", "DBusMessage", "to_blob", 83, 45, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_out_size := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_capabilities := gi.NewIntArgument(int(capabilities))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_out_size, arg_capabilities, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var out_size uint64
	_ = out_size
	err = gi.ToError(outArgs[1].Pointer())
	out_size = outArgs[0].Uint64()
	result = gi.Uint8Array{P: ret.Pointer(), Len: int(out_size)}
	return
}

// g_dbus_message_to_gerror
//
// [ result ] trans: nothing
//
func (v DBusMessage) ToGerror() (result bool, err error) {
	iv, err := _I.Get1(1935, "Gio", "DBusMessage", "to_gerror", 83, 46, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// Enum DBusMessageByteOrder
type DBusMessageByteOrderEnum int

const (
	DBusMessageByteOrderBigEndian    DBusMessageByteOrderEnum = 66
	DBusMessageByteOrderLittleEndian DBusMessageByteOrderEnum = 108
)

func DBusMessageByteOrderGetType() gi.GType {
	ret := _I.GetGType1(239, "Gio", "DBusMessageByteOrder")
	return ret
}

type DBusMessageFilterFunction func(connection DBusConnection, message DBusMessage, incoming bool) (result DBusMessage)

func CallDBusMessageFilterFunction(fn DBusMessageFilterFunction, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	connection := WrapDBusConnection(*(*unsafe.Pointer)(args[0]))
	message := WrapDBusMessage(*(*unsafe.Pointer)(args[1]))
	incoming := *(*bool)(args[2])
	fnRet := fn(connection, message, incoming)
	*(*unsafe.Pointer)(result) = fnRet.P
}

// Flags DBusMessageFlags
type DBusMessageFlags int

const (
	DBusMessageFlagsNone                          DBusMessageFlags = 0
	DBusMessageFlagsNoReplyExpected               DBusMessageFlags = 1
	DBusMessageFlagsNoAutoStart                   DBusMessageFlags = 2
	DBusMessageFlagsAllowInteractiveAuthorization DBusMessageFlags = 4
)

func DBusMessageFlagsGetType() gi.GType {
	ret := _I.GetGType1(240, "Gio", "DBusMessageFlags")
	return ret
}

// Enum DBusMessageHeaderField
type DBusMessageHeaderFieldEnum int

const (
	DBusMessageHeaderFieldInvalid     DBusMessageHeaderFieldEnum = 0
	DBusMessageHeaderFieldPath        DBusMessageHeaderFieldEnum = 1
	DBusMessageHeaderFieldInterface   DBusMessageHeaderFieldEnum = 2
	DBusMessageHeaderFieldMember      DBusMessageHeaderFieldEnum = 3
	DBusMessageHeaderFieldErrorName   DBusMessageHeaderFieldEnum = 4
	DBusMessageHeaderFieldReplySerial DBusMessageHeaderFieldEnum = 5
	DBusMessageHeaderFieldDestination DBusMessageHeaderFieldEnum = 6
	DBusMessageHeaderFieldSender      DBusMessageHeaderFieldEnum = 7
	DBusMessageHeaderFieldSignature   DBusMessageHeaderFieldEnum = 8
	DBusMessageHeaderFieldNumUnixFds  DBusMessageHeaderFieldEnum = 9
)

func DBusMessageHeaderFieldGetType() gi.GType {
	ret := _I.GetGType1(241, "Gio", "DBusMessageHeaderField")
	return ret
}

// Enum DBusMessageType
type DBusMessageTypeEnum int

const (
	DBusMessageTypeInvalid      DBusMessageTypeEnum = 0
	DBusMessageTypeMethodCall   DBusMessageTypeEnum = 1
	DBusMessageTypeMethodReturn DBusMessageTypeEnum = 2
	DBusMessageTypeError        DBusMessageTypeEnum = 3
	DBusMessageTypeSignal       DBusMessageTypeEnum = 4
)

func DBusMessageTypeGetType() gi.GType {
	ret := _I.GetGType1(242, "Gio", "DBusMessageType")
	return ret
}

// Struct DBusMethodInfo
type DBusMethodInfo struct {
	P unsafe.Pointer
}

const SizeOfStructDBusMethodInfo = 40

func DBusMethodInfoGetType() gi.GType {
	ret := _I.GetGType1(243, "Gio", "DBusMethodInfo")
	return ret
}

// g_dbus_method_info_ref
//
// [ result ] trans: everything
//
func (v DBusMethodInfo) Ref() (result DBusMethodInfo) {
	iv, err := _I.Get1(1936, "Gio", "DBusMethodInfo", "ref", 89, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_method_info_unref
//
func (v DBusMethodInfo) Unref() {
	iv, err := _I.Get1(1937, "Gio", "DBusMethodInfo", "unref", 89, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

func (v DBusMethodInfo) p() *C.GDBusMethodInfo {
	return (*C.GDBusMethodInfo)(v.P)
}
func (v DBusMethodInfo) RefCount() (result int32) {
	result = int32(v.p().ref_count)
	return
}
func (v DBusMethodInfo) Name() (result int /*TODO*/) {
	return
}
func (v DBusMethodInfo) InArgs() (result int /*TODO*/) {
	return
}
func (v DBusMethodInfo) OutArgs() (result int /*TODO*/) {
	return
}
func (v DBusMethodInfo) Annotations() (result int /*TODO*/) {
	return
}

// Object DBusMethodInvocation
type DBusMethodInvocation struct {
	Object
}

func WrapDBusMethodInvocation(p unsafe.Pointer) (r DBusMethodInvocation) { r.P = p; return }

type IDBusMethodInvocation interface{ P_DBusMethodInvocation() unsafe.Pointer }

func (v DBusMethodInvocation) P_DBusMethodInvocation() unsafe.Pointer { return v.P }
func DBusMethodInvocationGetType() gi.GType {
	ret := _I.GetGType1(244, "Gio", "DBusMethodInvocation")
	return ret
}

// g_dbus_method_invocation_get_connection
//
// [ result ] trans: nothing
//
func (v DBusMethodInvocation) GetConnection() (result DBusConnection) {
	iv, err := _I.Get1(1938, "Gio", "DBusMethodInvocation", "get_connection", 90, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_method_invocation_get_interface_name
//
// [ result ] trans: nothing
//
func (v DBusMethodInvocation) GetInterfaceName() (result string) {
	iv, err := _I.Get1(1939, "Gio", "DBusMethodInvocation", "get_interface_name", 90, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_dbus_method_invocation_get_message
//
// [ result ] trans: nothing
//
func (v DBusMethodInvocation) GetMessage() (result DBusMessage) {
	iv, err := _I.Get1(1940, "Gio", "DBusMethodInvocation", "get_message", 90, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_method_invocation_get_method_info
//
// [ result ] trans: nothing
//
func (v DBusMethodInvocation) GetMethodInfo() (result DBusMethodInfo) {
	iv, err := _I.Get1(1941, "Gio", "DBusMethodInvocation", "get_method_info", 90, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_method_invocation_get_method_name
//
// [ result ] trans: nothing
//
func (v DBusMethodInvocation) GetMethodName() (result string) {
	iv, err := _I.Get1(1942, "Gio", "DBusMethodInvocation", "get_method_name", 90, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_dbus_method_invocation_get_object_path
//
// [ result ] trans: nothing
//
func (v DBusMethodInvocation) GetObjectPath() (result string) {
	iv, err := _I.Get1(1943, "Gio", "DBusMethodInvocation", "get_object_path", 90, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_dbus_method_invocation_get_parameters
//
// [ result ] trans: nothing
//
func (v DBusMethodInvocation) GetParameters() (result Variant) {
	iv, err := _I.Get1(1944, "Gio", "DBusMethodInvocation", "get_parameters", 90, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_method_invocation_get_property_info
//
// [ result ] trans: nothing
//
func (v DBusMethodInvocation) GetPropertyInfo() (result DBusPropertyInfo) {
	iv, err := _I.Get1(1945, "Gio", "DBusMethodInvocation", "get_property_info", 90, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_method_invocation_get_sender
//
// [ result ] trans: nothing
//
func (v DBusMethodInvocation) GetSender() (result string) {
	iv, err := _I.Get1(1946, "Gio", "DBusMethodInvocation", "get_sender", 90, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_dbus_method_invocation_return_dbus_error
//
// [ error_name ] trans: nothing
//
// [ error_message ] trans: nothing
//
func (v DBusMethodInvocation) ReturnDbusError(error_name string, error_message string) {
	iv, err := _I.Get1(1947, "Gio", "DBusMethodInvocation", "return_dbus_error", 90, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_error_name := gi.CString(error_name)
	c_error_message := gi.CString(error_message)
	arg_v := gi.NewPointerArgument(v.P)
	arg_error_name := gi.NewStringArgument(c_error_name)
	arg_error_message := gi.NewStringArgument(c_error_message)
	args := []gi.Argument{arg_v, arg_error_name, arg_error_message}
	iv.Call(args, nil, nil)
	gi.Free(c_error_name)
	gi.Free(c_error_message)
}

// g_dbus_method_invocation_return_error_literal
//
// [ domain ] trans: nothing
//
// [ code ] trans: nothing
//
// [ message ] trans: nothing
//
func (v DBusMethodInvocation) ReturnErrorLiteral(domain uint32, code int32, message string) {
	iv, err := _I.Get1(1948, "Gio", "DBusMethodInvocation", "return_error_literal", 90, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_message := gi.CString(message)
	arg_v := gi.NewPointerArgument(v.P)
	arg_domain := gi.NewUint32Argument(domain)
	arg_code := gi.NewInt32Argument(code)
	arg_message := gi.NewStringArgument(c_message)
	args := []gi.Argument{arg_v, arg_domain, arg_code, arg_message}
	iv.Call(args, nil, nil)
	gi.Free(c_message)
}

// g_dbus_method_invocation_return_gerror
//
// [ error ] trans: nothing
//
func (v DBusMethodInvocation) ReturnGerror(error Error) {
	iv, err := _I.Get1(1949, "Gio", "DBusMethodInvocation", "return_gerror", 90, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_error := gi.NewPointerArgument(error.P)
	args := []gi.Argument{arg_v, arg_error}
	iv.Call(args, nil, nil)
}

// g_dbus_method_invocation_return_value
//
// [ parameters ] trans: nothing
//
func (v DBusMethodInvocation) ReturnValue(parameters Variant) {
	iv, err := _I.Get1(1950, "Gio", "DBusMethodInvocation", "return_value", 90, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_parameters := gi.NewPointerArgument(parameters.P)
	args := []gi.Argument{arg_v, arg_parameters}
	iv.Call(args, nil, nil)
}

// g_dbus_method_invocation_return_value_with_unix_fd_list
//
// [ parameters ] trans: nothing
//
// [ fd_list ] trans: nothing
//
func (v DBusMethodInvocation) ReturnValueWithUnixFdList(parameters Variant, fd_list IUnixFDList) {
	iv, err := _I.Get1(1951, "Gio", "DBusMethodInvocation", "return_value_with_unix_fd_list", 90, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if fd_list != nil {
		tmp = fd_list.P_UnixFDList()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_parameters := gi.NewPointerArgument(parameters.P)
	arg_fd_list := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_parameters, arg_fd_list}
	iv.Call(args, nil, nil)
}

// Struct DBusNodeInfo
type DBusNodeInfo struct {
	P unsafe.Pointer
}

const SizeOfStructDBusNodeInfo = 40

func DBusNodeInfoGetType() gi.GType {
	ret := _I.GetGType1(245, "Gio", "DBusNodeInfo")
	return ret
}

// g_dbus_node_info_new_for_xml
//
// [ xml_data ] trans: nothing
//
// [ result ] trans: everything
//
func NewDBusNodeInfoForXml(xml_data string) (result DBusNodeInfo, err error) {
	iv, err := _I.Get1(1952, "Gio", "DBusNodeInfo", "new_for_xml", 91, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_xml_data := gi.CString(xml_data)
	arg_xml_data := gi.NewStringArgument(c_xml_data)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_xml_data, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_xml_data)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dbus_node_info_generate_xml
//
// [ indent ] trans: nothing
//
// [ string_builder ] trans: nothing
//
func (v DBusNodeInfo) GenerateXml(indent uint32, string_builder String) {
	iv, err := _I.Get1(1953, "Gio", "DBusNodeInfo", "generate_xml", 91, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_indent := gi.NewUint32Argument(indent)
	arg_string_builder := gi.NewPointerArgument(string_builder.P)
	args := []gi.Argument{arg_v, arg_indent, arg_string_builder}
	iv.Call(args, nil, nil)
}

// g_dbus_node_info_lookup_interface
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusNodeInfo) LookupInterface(name string) (result DBusInterfaceInfo) {
	iv, err := _I.Get1(1954, "Gio", "DBusNodeInfo", "lookup_interface", 91, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// g_dbus_node_info_ref
//
// [ result ] trans: everything
//
func (v DBusNodeInfo) Ref() (result DBusNodeInfo) {
	iv, err := _I.Get1(1955, "Gio", "DBusNodeInfo", "ref", 91, 3, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_node_info_unref
//
func (v DBusNodeInfo) Unref() {
	iv, err := _I.Get1(1956, "Gio", "DBusNodeInfo", "unref", 91, 4, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

func (v DBusNodeInfo) p() *C.GDBusNodeInfo {
	return (*C.GDBusNodeInfo)(v.P)
}
func (v DBusNodeInfo) RefCount() (result int32) {
	result = int32(v.p().ref_count)
	return
}
func (v DBusNodeInfo) Path() (result int /*TODO*/) {
	return
}
func (v DBusNodeInfo) Interfaces() (result int /*TODO*/) {
	return
}
func (v DBusNodeInfo) Nodes() (result int /*TODO*/) {
	return
}
func (v DBusNodeInfo) Annotations() (result int /*TODO*/) {
	return
}

// Interface DBusObject
type DBusObject struct {
	DBusObjectIfc
	P unsafe.Pointer
}
type DBusObjectIfc struct{}
type IDBusObject interface{ P_DBusObject() unsafe.Pointer }

func (v DBusObject) P_DBusObject() unsafe.Pointer { return v.P }
func DBusObjectGetType() gi.GType {
	ret := _I.GetGType1(246, "Gio", "DBusObject")
	return ret
}

// g_dbus_object_get_interface
//
// [ interface_name ] trans: nothing
//
// [ result ] trans: everything
//
func (v *DBusObjectIfc) GetInterface(interface_name string) (result DBusInterface) {
	iv, err := _I.Get1(1957, "Gio", "DBusObject", "get_interface", 92, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_interface_name := gi.CString(interface_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_interface_name := gi.NewStringArgument(c_interface_name)
	args := []gi.Argument{arg_v, arg_interface_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_interface_name)
	result.P = ret.Pointer()
	return
}

// g_dbus_object_get_interfaces
//
// [ result ] trans: everything
//
func (v *DBusObjectIfc) GetInterfaces() (result List) {
	iv, err := _I.Get1(1958, "Gio", "DBusObject", "get_interfaces", 92, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_object_get_object_path
//
// [ result ] trans: nothing
//
func (v *DBusObjectIfc) GetObjectPath() (result string) {
	iv, err := _I.Get1(1959, "Gio", "DBusObject", "get_object_path", 92, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// ignore GType struct DBusObjectIface

// Interface DBusObjectManager
type DBusObjectManager struct {
	DBusObjectManagerIfc
	P unsafe.Pointer
}
type DBusObjectManagerIfc struct{}
type IDBusObjectManager interface{ P_DBusObjectManager() unsafe.Pointer }

func (v DBusObjectManager) P_DBusObjectManager() unsafe.Pointer { return v.P }
func DBusObjectManagerGetType() gi.GType {
	ret := _I.GetGType1(247, "Gio", "DBusObjectManager")
	return ret
}

// g_dbus_object_manager_get_interface
//
// [ object_path ] trans: nothing
//
// [ interface_name ] trans: nothing
//
// [ result ] trans: everything
//
func (v *DBusObjectManagerIfc) GetInterface(object_path string, interface_name string) (result DBusInterface) {
	iv, err := _I.Get1(1960, "Gio", "DBusObjectManager", "get_interface", 94, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_object_path := gi.CString(object_path)
	c_interface_name := gi.CString(interface_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_object_path := gi.NewStringArgument(c_object_path)
	arg_interface_name := gi.NewStringArgument(c_interface_name)
	args := []gi.Argument{arg_v, arg_object_path, arg_interface_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_object_path)
	gi.Free(c_interface_name)
	result.P = ret.Pointer()
	return
}

// g_dbus_object_manager_get_object
//
// [ object_path ] trans: nothing
//
// [ result ] trans: everything
//
func (v *DBusObjectManagerIfc) GetObject(object_path string) (result DBusObject) {
	iv, err := _I.Get1(1961, "Gio", "DBusObjectManager", "get_object", 94, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_object_path := gi.CString(object_path)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_object_path := gi.NewStringArgument(c_object_path)
	args := []gi.Argument{arg_v, arg_object_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_object_path)
	result.P = ret.Pointer()
	return
}

// g_dbus_object_manager_get_object_path
//
// [ result ] trans: nothing
//
func (v *DBusObjectManagerIfc) GetObjectPath() (result string) {
	iv, err := _I.Get1(1962, "Gio", "DBusObjectManager", "get_object_path", 94, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_dbus_object_manager_get_objects
//
// [ result ] trans: everything
//
func (v *DBusObjectManagerIfc) GetObjects() (result List) {
	iv, err := _I.Get1(1963, "Gio", "DBusObjectManager", "get_objects", 94, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Object DBusObjectManagerClient
type DBusObjectManagerClient struct {
	AsyncInitableIfc
	DBusObjectManagerIfc
	InitableIfc
	Object
}

func WrapDBusObjectManagerClient(p unsafe.Pointer) (r DBusObjectManagerClient) { r.P = p; return }

type IDBusObjectManagerClient interface{ P_DBusObjectManagerClient() unsafe.Pointer }

func (v DBusObjectManagerClient) P_DBusObjectManagerClient() unsafe.Pointer { return v.P }
func (v DBusObjectManagerClient) P_AsyncInitable() unsafe.Pointer           { return v.P }
func (v DBusObjectManagerClient) P_DBusObjectManager() unsafe.Pointer       { return v.P }
func (v DBusObjectManagerClient) P_Initable() unsafe.Pointer                { return v.P }
func DBusObjectManagerClientGetType() gi.GType {
	ret := _I.GetGType1(248, "Gio", "DBusObjectManagerClient")
	return ret
}

// g_dbus_object_manager_client_new_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func NewDBusObjectManagerClientFinish(res IAsyncResult) (result DBusObjectManagerClient, err error) {
	iv, err := _I.Get1(1964, "Gio", "DBusObjectManagerClient", "new_finish", 95, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dbus_object_manager_client_new_for_bus_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func NewDBusObjectManagerClientForBusFinish(res IAsyncResult) (result DBusObjectManagerClient, err error) {
	iv, err := _I.Get1(1965, "Gio", "DBusObjectManagerClient", "new_for_bus_finish", 95, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dbus_object_manager_client_new_for_bus_sync
//
// [ bus_type ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ name ] trans: nothing
//
// [ object_path ] trans: nothing
//
// [ get_proxy_type_func ] trans: nothing
//
// [ get_proxy_type_user_data ] trans: nothing
//
// [ get_proxy_type_destroy_notify ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func NewDBusObjectManagerClientForBusSync(bus_type BusTypeEnum, flags DBusObjectManagerClientFlags, name string, object_path string, get_proxy_type_func DBusProxyTypeFunc, cancellable ICancellable) (result DBusObjectManagerClient, err error) {
	iv, err := _I.Get1(1966, "Gio", "DBusObjectManagerClient", "new_for_bus_sync", 95, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_name := gi.CString(name)
	c_object_path := gi.CString(object_path)
	var cId uint
	var funcPtr unsafe.Pointer
	if get_proxy_type_func != nil {
		callableInfo := gi.GetCallableInfo("Gio", "DBusProxyTypeFunc")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallDBusProxyTypeFunc(get_proxy_type_func, __result, __args)
		}, gi.ScopeNotified, callableInfo)
		callableInfo.Unref()
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_bus_type := gi.NewIntArgument(int(bus_type))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_name := gi.NewStringArgument(c_name)
	arg_object_path := gi.NewStringArgument(c_object_path)
	arg_get_proxy_type_func := gi.NewPointerArgument(funcPtr)
	arg_get_proxy_type_user_data := gi.NewPointerArgument(gi.Uint2Ptr(cId))
	arg_get_proxy_type_destroy_notify := gi.NewPointerArgument(gi.GetClosureDestroyNotifyPtr())
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_bus_type, arg_flags, arg_name, arg_object_path, arg_get_proxy_type_func, arg_get_proxy_type_user_data, arg_get_proxy_type_destroy_notify, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_name)
	gi.Free(c_object_path)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dbus_object_manager_client_new_sync
//
// [ connection ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ name ] trans: nothing
//
// [ object_path ] trans: nothing
//
// [ get_proxy_type_func ] trans: nothing
//
// [ get_proxy_type_user_data ] trans: nothing
//
// [ get_proxy_type_destroy_notify ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func NewDBusObjectManagerClientSync(connection IDBusConnection, flags DBusObjectManagerClientFlags, name string, object_path string, get_proxy_type_func DBusProxyTypeFunc, cancellable ICancellable) (result DBusObjectManagerClient, err error) {
	iv, err := _I.Get1(1967, "Gio", "DBusObjectManagerClient", "new_sync", 95, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_DBusConnection()
	}
	c_name := gi.CString(name)
	c_object_path := gi.CString(object_path)
	var cId uint
	var funcPtr unsafe.Pointer
	if get_proxy_type_func != nil {
		callableInfo := gi.GetCallableInfo("Gio", "DBusProxyTypeFunc")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallDBusProxyTypeFunc(get_proxy_type_func, __result, __args)
		}, gi.ScopeNotified, callableInfo)
		callableInfo.Unref()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_connection := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_name := gi.NewStringArgument(c_name)
	arg_object_path := gi.NewStringArgument(c_object_path)
	arg_get_proxy_type_func := gi.NewPointerArgument(funcPtr)
	arg_get_proxy_type_user_data := gi.NewPointerArgument(gi.Uint2Ptr(cId))
	arg_get_proxy_type_destroy_notify := gi.NewPointerArgument(gi.GetClosureDestroyNotifyPtr())
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_connection, arg_flags, arg_name, arg_object_path, arg_get_proxy_type_func, arg_get_proxy_type_user_data, arg_get_proxy_type_destroy_notify, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_name)
	gi.Free(c_object_path)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dbus_object_manager_client_new
//
// [ connection ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ name ] trans: nothing
//
// [ object_path ] trans: nothing
//
// [ get_proxy_type_func ] trans: nothing
//
// [ get_proxy_type_user_data ] trans: nothing
//
// [ get_proxy_type_destroy_notify ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func DBusObjectManagerClientNew1(connection IDBusConnection, flags DBusObjectManagerClientFlags, name string, object_path string, get_proxy_type_func DBusProxyTypeFunc, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(1968, "Gio", "DBusObjectManagerClient", "new", 95, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_DBusConnection()
	}
	c_name := gi.CString(name)
	c_object_path := gi.CString(object_path)
	var cId uint
	var funcPtr unsafe.Pointer
	if get_proxy_type_func != nil {
		callableInfo := gi.GetCallableInfo("Gio", "DBusProxyTypeFunc")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallDBusProxyTypeFunc(get_proxy_type_func, __result, __args)
		}, gi.ScopeNotified, callableInfo)
		callableInfo.Unref()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr1 unsafe.Pointer
	if callback != nil {
		callableInfo1 := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr1 = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo1)
		callableInfo1.Unref()
	}
	arg_connection := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_name := gi.NewStringArgument(c_name)
	arg_object_path := gi.NewStringArgument(c_object_path)
	arg_get_proxy_type_func := gi.NewPointerArgument(funcPtr)
	arg_get_proxy_type_user_data := gi.NewPointerArgument(gi.Uint2Ptr(cId))
	arg_get_proxy_type_destroy_notify := gi.NewPointerArgument(gi.GetClosureDestroyNotifyPtr())
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr1)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_connection, arg_flags, arg_name, arg_object_path, arg_get_proxy_type_func, arg_get_proxy_type_user_data, arg_get_proxy_type_destroy_notify, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
	gi.Free(c_object_path)
}

// g_dbus_object_manager_client_new_for_bus
//
// [ bus_type ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ name ] trans: nothing
//
// [ object_path ] trans: nothing
//
// [ get_proxy_type_func ] trans: nothing
//
// [ get_proxy_type_user_data ] trans: nothing
//
// [ get_proxy_type_destroy_notify ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func DBusObjectManagerClientNewForBus1(bus_type BusTypeEnum, flags DBusObjectManagerClientFlags, name string, object_path string, get_proxy_type_func DBusProxyTypeFunc, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(1969, "Gio", "DBusObjectManagerClient", "new_for_bus", 95, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	c_object_path := gi.CString(object_path)
	var cId uint
	var funcPtr unsafe.Pointer
	if get_proxy_type_func != nil {
		callableInfo := gi.GetCallableInfo("Gio", "DBusProxyTypeFunc")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallDBusProxyTypeFunc(get_proxy_type_func, __result, __args)
		}, gi.ScopeNotified, callableInfo)
		callableInfo.Unref()
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr1 unsafe.Pointer
	if callback != nil {
		callableInfo1 := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr1 = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo1)
		callableInfo1.Unref()
	}
	arg_bus_type := gi.NewIntArgument(int(bus_type))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_name := gi.NewStringArgument(c_name)
	arg_object_path := gi.NewStringArgument(c_object_path)
	arg_get_proxy_type_func := gi.NewPointerArgument(funcPtr)
	arg_get_proxy_type_user_data := gi.NewPointerArgument(gi.Uint2Ptr(cId))
	arg_get_proxy_type_destroy_notify := gi.NewPointerArgument(gi.GetClosureDestroyNotifyPtr())
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr1)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_bus_type, arg_flags, arg_name, arg_object_path, arg_get_proxy_type_func, arg_get_proxy_type_user_data, arg_get_proxy_type_destroy_notify, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
	gi.Free(c_object_path)
}

// g_dbus_object_manager_client_get_connection
//
// [ result ] trans: nothing
//
func (v DBusObjectManagerClient) GetConnection() (result DBusConnection) {
	iv, err := _I.Get1(1970, "Gio", "DBusObjectManagerClient", "get_connection", 95, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_object_manager_client_get_flags
//
// [ result ] trans: nothing
//
func (v DBusObjectManagerClient) GetFlags() (result DBusObjectManagerClientFlags) {
	iv, err := _I.Get1(1971, "Gio", "DBusObjectManagerClient", "get_flags", 95, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = DBusObjectManagerClientFlags(ret.Int())
	return
}

// g_dbus_object_manager_client_get_name
//
// [ result ] trans: nothing
//
func (v DBusObjectManagerClient) GetName() (result string) {
	iv, err := _I.Get1(1972, "Gio", "DBusObjectManagerClient", "get_name", 95, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_dbus_object_manager_client_get_name_owner
//
// [ result ] trans: everything
//
func (v DBusObjectManagerClient) GetNameOwner() (result string) {
	iv, err := _I.Get1(1973, "Gio", "DBusObjectManagerClient", "get_name_owner", 95, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// ignore GType struct DBusObjectManagerClientClass

// Flags DBusObjectManagerClientFlags
type DBusObjectManagerClientFlags int

const (
	DBusObjectManagerClientFlagsNone           DBusObjectManagerClientFlags = 0
	DBusObjectManagerClientFlagsDoNotAutoStart DBusObjectManagerClientFlags = 1
)

func DBusObjectManagerClientFlagsGetType() gi.GType {
	ret := _I.GetGType1(249, "Gio", "DBusObjectManagerClientFlags")
	return ret
}

// ignore private struct DBusObjectManagerClientPrivate, type of DBusObjectManagerClient is object

// ignore GType struct DBusObjectManagerIface

// Object DBusObjectManagerServer
type DBusObjectManagerServer struct {
	DBusObjectManagerIfc
	Object
}

func WrapDBusObjectManagerServer(p unsafe.Pointer) (r DBusObjectManagerServer) { r.P = p; return }

type IDBusObjectManagerServer interface{ P_DBusObjectManagerServer() unsafe.Pointer }

func (v DBusObjectManagerServer) P_DBusObjectManagerServer() unsafe.Pointer { return v.P }
func (v DBusObjectManagerServer) P_DBusObjectManager() unsafe.Pointer       { return v.P }
func DBusObjectManagerServerGetType() gi.GType {
	ret := _I.GetGType1(250, "Gio", "DBusObjectManagerServer")
	return ret
}

// g_dbus_object_manager_server_new
//
// [ object_path ] trans: nothing
//
// [ result ] trans: everything
//
func NewDBusObjectManagerServer(object_path string) (result DBusObjectManagerServer) {
	iv, err := _I.Get1(1974, "Gio", "DBusObjectManagerServer", "new", 100, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_object_path := gi.CString(object_path)
	arg_object_path := gi.NewStringArgument(c_object_path)
	args := []gi.Argument{arg_object_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_object_path)
	result.P = ret.Pointer()
	return
}

// g_dbus_object_manager_server_export
//
// [ object ] trans: nothing
//
func (v DBusObjectManagerServer) Export(object IDBusObjectSkeleton) {
	iv, err := _I.Get1(1975, "Gio", "DBusObjectManagerServer", "export", 100, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if object != nil {
		tmp = object.P_DBusObjectSkeleton()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_object := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_object}
	iv.Call(args, nil, nil)
}

// g_dbus_object_manager_server_export_uniquely
//
// [ object ] trans: nothing
//
func (v DBusObjectManagerServer) ExportUniquely(object IDBusObjectSkeleton) {
	iv, err := _I.Get1(1976, "Gio", "DBusObjectManagerServer", "export_uniquely", 100, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if object != nil {
		tmp = object.P_DBusObjectSkeleton()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_object := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_object}
	iv.Call(args, nil, nil)
}

// g_dbus_object_manager_server_get_connection
//
// [ result ] trans: everything
//
func (v DBusObjectManagerServer) GetConnection() (result DBusConnection) {
	iv, err := _I.Get1(1977, "Gio", "DBusObjectManagerServer", "get_connection", 100, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_object_manager_server_is_exported
//
// [ object ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusObjectManagerServer) IsExported(object IDBusObjectSkeleton) (result bool) {
	iv, err := _I.Get1(1978, "Gio", "DBusObjectManagerServer", "is_exported", 100, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if object != nil {
		tmp = object.P_DBusObjectSkeleton()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_object := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_object}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_dbus_object_manager_server_set_connection
//
// [ connection ] trans: nothing
//
func (v DBusObjectManagerServer) SetConnection(connection IDBusConnection) {
	iv, err := _I.Get1(1979, "Gio", "DBusObjectManagerServer", "set_connection", 100, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_DBusConnection()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connection := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_connection}
	iv.Call(args, nil, nil)
}

// g_dbus_object_manager_server_unexport
//
// [ object_path ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DBusObjectManagerServer) Unexport(object_path string) (result bool) {
	iv, err := _I.Get1(1980, "Gio", "DBusObjectManagerServer", "unexport", 100, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_object_path := gi.CString(object_path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_object_path := gi.NewStringArgument(c_object_path)
	args := []gi.Argument{arg_v, arg_object_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_object_path)
	result = ret.Bool()
	return
}

// ignore GType struct DBusObjectManagerServerClass

// ignore private struct DBusObjectManagerServerPrivate, type of DBusObjectManagerServer is object

// Object DBusObjectProxy
type DBusObjectProxy struct {
	DBusObjectIfc
	Object
}

func WrapDBusObjectProxy(p unsafe.Pointer) (r DBusObjectProxy) { r.P = p; return }

type IDBusObjectProxy interface{ P_DBusObjectProxy() unsafe.Pointer }

func (v DBusObjectProxy) P_DBusObjectProxy() unsafe.Pointer { return v.P }
func (v DBusObjectProxy) P_DBusObject() unsafe.Pointer      { return v.P }
func DBusObjectProxyGetType() gi.GType {
	ret := _I.GetGType1(251, "Gio", "DBusObjectProxy")
	return ret
}

// g_dbus_object_proxy_new
//
// [ connection ] trans: nothing
//
// [ object_path ] trans: nothing
//
// [ result ] trans: everything
//
func NewDBusObjectProxy(connection IDBusConnection, object_path string) (result DBusObjectProxy) {
	iv, err := _I.Get1(1981, "Gio", "DBusObjectProxy", "new", 103, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_DBusConnection()
	}
	c_object_path := gi.CString(object_path)
	arg_connection := gi.NewPointerArgument(tmp)
	arg_object_path := gi.NewStringArgument(c_object_path)
	args := []gi.Argument{arg_connection, arg_object_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_object_path)
	result.P = ret.Pointer()
	return
}

// g_dbus_object_proxy_get_connection
//
// [ result ] trans: nothing
//
func (v DBusObjectProxy) GetConnection() (result DBusConnection) {
	iv, err := _I.Get1(1982, "Gio", "DBusObjectProxy", "get_connection", 103, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct DBusObjectProxyClass

// ignore private struct DBusObjectProxyPrivate, type of DBusObjectProxy is object

// Object DBusObjectSkeleton
type DBusObjectSkeleton struct {
	DBusObjectIfc
	Object
}

func WrapDBusObjectSkeleton(p unsafe.Pointer) (r DBusObjectSkeleton) { r.P = p; return }

type IDBusObjectSkeleton interface{ P_DBusObjectSkeleton() unsafe.Pointer }

func (v DBusObjectSkeleton) P_DBusObjectSkeleton() unsafe.Pointer { return v.P }
func (v DBusObjectSkeleton) P_DBusObject() unsafe.Pointer         { return v.P }
func DBusObjectSkeletonGetType() gi.GType {
	ret := _I.GetGType1(252, "Gio", "DBusObjectSkeleton")
	return ret
}

// g_dbus_object_skeleton_new
//
// [ object_path ] trans: nothing
//
// [ result ] trans: everything
//
func NewDBusObjectSkeleton(object_path string) (result DBusObjectSkeleton) {
	iv, err := _I.Get1(1983, "Gio", "DBusObjectSkeleton", "new", 106, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_object_path := gi.CString(object_path)
	arg_object_path := gi.NewStringArgument(c_object_path)
	args := []gi.Argument{arg_object_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_object_path)
	result.P = ret.Pointer()
	return
}

// g_dbus_object_skeleton_add_interface
//
// [ interface_ ] trans: nothing
//
func (v DBusObjectSkeleton) AddInterface(interface_ IDBusInterfaceSkeleton) {
	iv, err := _I.Get1(1984, "Gio", "DBusObjectSkeleton", "add_interface", 106, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if interface_ != nil {
		tmp = interface_.P_DBusInterfaceSkeleton()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_interface_ := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_interface_}
	iv.Call(args, nil, nil)
}

// g_dbus_object_skeleton_flush
//
func (v DBusObjectSkeleton) Flush() {
	iv, err := _I.Get1(1985, "Gio", "DBusObjectSkeleton", "flush", 106, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_dbus_object_skeleton_remove_interface
//
// [ interface_ ] trans: nothing
//
func (v DBusObjectSkeleton) RemoveInterface(interface_ IDBusInterfaceSkeleton) {
	iv, err := _I.Get1(1986, "Gio", "DBusObjectSkeleton", "remove_interface", 106, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if interface_ != nil {
		tmp = interface_.P_DBusInterfaceSkeleton()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_interface_ := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_interface_}
	iv.Call(args, nil, nil)
}

// g_dbus_object_skeleton_remove_interface_by_name
//
// [ interface_name ] trans: nothing
//
func (v DBusObjectSkeleton) RemoveInterfaceByName(interface_name string) {
	iv, err := _I.Get1(1987, "Gio", "DBusObjectSkeleton", "remove_interface_by_name", 106, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_interface_name := gi.CString(interface_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_interface_name := gi.NewStringArgument(c_interface_name)
	args := []gi.Argument{arg_v, arg_interface_name}
	iv.Call(args, nil, nil)
	gi.Free(c_interface_name)
}

// g_dbus_object_skeleton_set_object_path
//
// [ object_path ] trans: nothing
//
func (v DBusObjectSkeleton) SetObjectPath(object_path string) {
	iv, err := _I.Get1(1988, "Gio", "DBusObjectSkeleton", "set_object_path", 106, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_object_path := gi.CString(object_path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_object_path := gi.NewStringArgument(c_object_path)
	args := []gi.Argument{arg_v, arg_object_path}
	iv.Call(args, nil, nil)
	gi.Free(c_object_path)
}

// ignore GType struct DBusObjectSkeletonClass

// ignore private struct DBusObjectSkeletonPrivate, type of DBusObjectSkeleton is object

// Struct DBusPropertyInfo
type DBusPropertyInfo struct {
	P unsafe.Pointer
}

const SizeOfStructDBusPropertyInfo = 40

func DBusPropertyInfoGetType() gi.GType {
	ret := _I.GetGType1(253, "Gio", "DBusPropertyInfo")
	return ret
}

// g_dbus_property_info_ref
//
// [ result ] trans: everything
//
func (v DBusPropertyInfo) Ref() (result DBusPropertyInfo) {
	iv, err := _I.Get1(1989, "Gio", "DBusPropertyInfo", "ref", 109, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_property_info_unref
//
func (v DBusPropertyInfo) Unref() {
	iv, err := _I.Get1(1990, "Gio", "DBusPropertyInfo", "unref", 109, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

func (v DBusPropertyInfo) p() *C.GDBusPropertyInfo {
	return (*C.GDBusPropertyInfo)(v.P)
}
func (v DBusPropertyInfo) RefCount() (result int32) {
	result = int32(v.p().ref_count)
	return
}
func (v DBusPropertyInfo) Name() (result int /*TODO*/) {
	return
}
func (v DBusPropertyInfo) Signature() (result int /*TODO*/) {
	return
}
func (v DBusPropertyInfo) Flags() (result int /*TODO*/) {
	return
}
func (v DBusPropertyInfo) Annotations() (result int /*TODO*/) {
	return
}

// Flags DBusPropertyInfoFlags
type DBusPropertyInfoFlags int

const (
	DBusPropertyInfoFlagsNone     DBusPropertyInfoFlags = 0
	DBusPropertyInfoFlagsReadable DBusPropertyInfoFlags = 1
	DBusPropertyInfoFlagsWritable DBusPropertyInfoFlags = 2
)

func DBusPropertyInfoFlagsGetType() gi.GType {
	ret := _I.GetGType1(254, "Gio", "DBusPropertyInfoFlags")
	return ret
}

// Object DBusProxy
type DBusProxy struct {
	AsyncInitableIfc
	DBusInterfaceIfc
	InitableIfc
	Object
}

func WrapDBusProxy(p unsafe.Pointer) (r DBusProxy) { r.P = p; return }

type IDBusProxy interface{ P_DBusProxy() unsafe.Pointer }

func (v DBusProxy) P_DBusProxy() unsafe.Pointer     { return v.P }
func (v DBusProxy) P_AsyncInitable() unsafe.Pointer { return v.P }
func (v DBusProxy) P_DBusInterface() unsafe.Pointer { return v.P }
func (v DBusProxy) P_Initable() unsafe.Pointer      { return v.P }
func DBusProxyGetType() gi.GType {
	ret := _I.GetGType1(255, "Gio", "DBusProxy")
	return ret
}

// g_dbus_proxy_new_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func NewDBusProxyFinish(res IAsyncResult) (result DBusProxy, err error) {
	iv, err := _I.Get1(1991, "Gio", "DBusProxy", "new_finish", 111, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dbus_proxy_new_for_bus_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func NewDBusProxyForBusFinish(res IAsyncResult) (result DBusProxy, err error) {
	iv, err := _I.Get1(1992, "Gio", "DBusProxy", "new_for_bus_finish", 111, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dbus_proxy_new_for_bus_sync
//
// [ bus_type ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ info ] trans: nothing
//
// [ name ] trans: nothing
//
// [ object_path ] trans: nothing
//
// [ interface_name ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func NewDBusProxyForBusSync(bus_type BusTypeEnum, flags DBusProxyFlags, info DBusInterfaceInfo, name string, object_path string, interface_name string, cancellable ICancellable) (result DBusProxy, err error) {
	iv, err := _I.Get1(1993, "Gio", "DBusProxy", "new_for_bus_sync", 111, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_name := gi.CString(name)
	c_object_path := gi.CString(object_path)
	c_interface_name := gi.CString(interface_name)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_bus_type := gi.NewIntArgument(int(bus_type))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_info := gi.NewPointerArgument(info.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_object_path := gi.NewStringArgument(c_object_path)
	arg_interface_name := gi.NewStringArgument(c_interface_name)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_bus_type, arg_flags, arg_info, arg_name, arg_object_path, arg_interface_name, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_name)
	gi.Free(c_object_path)
	gi.Free(c_interface_name)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dbus_proxy_new_sync
//
// [ connection ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ info ] trans: nothing
//
// [ name ] trans: nothing
//
// [ object_path ] trans: nothing
//
// [ interface_name ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func NewDBusProxySync(connection IDBusConnection, flags DBusProxyFlags, info DBusInterfaceInfo, name string, object_path string, interface_name string, cancellable ICancellable) (result DBusProxy, err error) {
	iv, err := _I.Get1(1994, "Gio", "DBusProxy", "new_sync", 111, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_DBusConnection()
	}
	c_name := gi.CString(name)
	c_object_path := gi.CString(object_path)
	c_interface_name := gi.CString(interface_name)
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_connection := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_info := gi.NewPointerArgument(info.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_object_path := gi.NewStringArgument(c_object_path)
	arg_interface_name := gi.NewStringArgument(c_interface_name)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_connection, arg_flags, arg_info, arg_name, arg_object_path, arg_interface_name, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_name)
	gi.Free(c_object_path)
	gi.Free(c_interface_name)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dbus_proxy_new
//
// [ connection ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ info ] trans: nothing
//
// [ name ] trans: nothing
//
// [ object_path ] trans: nothing
//
// [ interface_name ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func DBusProxyNew1(connection IDBusConnection, flags DBusProxyFlags, info DBusInterfaceInfo, name string, object_path string, interface_name string, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(1995, "Gio", "DBusProxy", "new", 111, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_DBusConnection()
	}
	c_name := gi.CString(name)
	c_object_path := gi.CString(object_path)
	c_interface_name := gi.CString(interface_name)
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_connection := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_info := gi.NewPointerArgument(info.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_object_path := gi.NewStringArgument(c_object_path)
	arg_interface_name := gi.NewStringArgument(c_interface_name)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_connection, arg_flags, arg_info, arg_name, arg_object_path, arg_interface_name, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
	gi.Free(c_object_path)
	gi.Free(c_interface_name)
}

// g_dbus_proxy_new_for_bus
//
// [ bus_type ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ info ] trans: nothing
//
// [ name ] trans: nothing
//
// [ object_path ] trans: nothing
//
// [ interface_name ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func DBusProxyNewForBus1(bus_type BusTypeEnum, flags DBusProxyFlags, info DBusInterfaceInfo, name string, object_path string, interface_name string, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(1996, "Gio", "DBusProxy", "new_for_bus", 111, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	c_object_path := gi.CString(object_path)
	c_interface_name := gi.CString(interface_name)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_bus_type := gi.NewIntArgument(int(bus_type))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_info := gi.NewPointerArgument(info.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_object_path := gi.NewStringArgument(c_object_path)
	arg_interface_name := gi.NewStringArgument(c_interface_name)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_bus_type, arg_flags, arg_info, arg_name, arg_object_path, arg_interface_name, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
	gi.Free(c_object_path)
	gi.Free(c_interface_name)
}

// g_dbus_proxy_call
//
// [ method_name ] trans: nothing
//
// [ parameters ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ timeout_msec ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v DBusProxy) Call(method_name string, parameters Variant, flags DBusCallFlags, timeout_msec int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(1997, "Gio", "DBusProxy", "call", 111, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_method_name := gi.CString(method_name)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_method_name := gi.NewStringArgument(c_method_name)
	arg_parameters := gi.NewPointerArgument(parameters.P)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_timeout_msec := gi.NewInt32Argument(timeout_msec)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_method_name, arg_parameters, arg_flags, arg_timeout_msec, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_method_name)
}

// g_dbus_proxy_call_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func (v DBusProxy) CallFinish(res IAsyncResult) (result Variant, err error) {
	iv, err := _I.Get1(1998, "Gio", "DBusProxy", "call_finish", 111, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dbus_proxy_call_sync
//
// [ method_name ] trans: nothing
//
// [ parameters ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ timeout_msec ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v DBusProxy) CallSync(method_name string, parameters Variant, flags DBusCallFlags, timeout_msec int32, cancellable ICancellable) (result Variant, err error) {
	iv, err := _I.Get1(1999, "Gio", "DBusProxy", "call_sync", 111, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_method_name := gi.CString(method_name)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_method_name := gi.NewStringArgument(c_method_name)
	arg_parameters := gi.NewPointerArgument(parameters.P)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_timeout_msec := gi.NewInt32Argument(timeout_msec)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_method_name, arg_parameters, arg_flags, arg_timeout_msec, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_method_name)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dbus_proxy_call_with_unix_fd_list
//
// [ method_name ] trans: nothing
//
// [ parameters ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ timeout_msec ] trans: nothing
//
// [ fd_list ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v DBusProxy) CallWithUnixFdList(method_name string, parameters Variant, flags DBusCallFlags, timeout_msec int32, fd_list IUnixFDList, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2000, "Gio", "DBusProxy", "call_with_unix_fd_list", 111, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_method_name := gi.CString(method_name)
	var tmp unsafe.Pointer
	if fd_list != nil {
		tmp = fd_list.P_UnixFDList()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_method_name := gi.NewStringArgument(c_method_name)
	arg_parameters := gi.NewPointerArgument(parameters.P)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_timeout_msec := gi.NewInt32Argument(timeout_msec)
	arg_fd_list := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_method_name, arg_parameters, arg_flags, arg_timeout_msec, arg_fd_list, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_method_name)
}

// g_dbus_proxy_call_with_unix_fd_list_finish
//
// [ out_fd_list ] trans: everything, dir: out
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func (v DBusProxy) CallWithUnixFdListFinish(res IAsyncResult) (result Variant, out_fd_list UnixFDList, err error) {
	iv, err := _I.Get1(2001, "Gio", "DBusProxy", "call_with_unix_fd_list_finish", 111, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_out_fd_list := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_out_fd_list, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	out_fd_list.P = outArgs[0].Pointer()
	result.P = ret.Pointer()
	return
}

// g_dbus_proxy_call_with_unix_fd_list_sync
//
// [ method_name ] trans: nothing
//
// [ parameters ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ timeout_msec ] trans: nothing
//
// [ fd_list ] trans: nothing
//
// [ out_fd_list ] trans: everything, dir: out
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v DBusProxy) CallWithUnixFdListSync(method_name string, parameters Variant, flags DBusCallFlags, timeout_msec int32, fd_list IUnixFDList, cancellable ICancellable) (result Variant, out_fd_list UnixFDList, err error) {
	iv, err := _I.Get1(2002, "Gio", "DBusProxy", "call_with_unix_fd_list_sync", 111, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	c_method_name := gi.CString(method_name)
	var tmp unsafe.Pointer
	if fd_list != nil {
		tmp = fd_list.P_UnixFDList()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_method_name := gi.NewStringArgument(c_method_name)
	arg_parameters := gi.NewPointerArgument(parameters.P)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_timeout_msec := gi.NewInt32Argument(timeout_msec)
	arg_fd_list := gi.NewPointerArgument(tmp)
	arg_out_fd_list := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_method_name, arg_parameters, arg_flags, arg_timeout_msec, arg_fd_list, arg_out_fd_list, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_method_name)
	err = gi.ToError(outArgs[1].Pointer())
	out_fd_list.P = outArgs[0].Pointer()
	result.P = ret.Pointer()
	return
}

// g_dbus_proxy_get_cached_property
//
// [ property_name ] trans: nothing
//
// [ result ] trans: everything
//
func (v DBusProxy) GetCachedProperty(property_name string) (result Variant) {
	iv, err := _I.Get1(2003, "Gio", "DBusProxy", "get_cached_property", 111, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_property_name := gi.CString(property_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_property_name := gi.NewStringArgument(c_property_name)
	args := []gi.Argument{arg_v, arg_property_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_property_name)
	result.P = ret.Pointer()
	return
}

// g_dbus_proxy_get_cached_property_names
//
// [ result ] trans: everything
//
func (v DBusProxy) GetCachedPropertyNames() (result gi.CStrArray) {
	iv, err := _I.Get1(2004, "Gio", "DBusProxy", "get_cached_property_names", 111, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_dbus_proxy_get_connection
//
// [ result ] trans: nothing
//
func (v DBusProxy) GetConnection() (result DBusConnection) {
	iv, err := _I.Get1(2005, "Gio", "DBusProxy", "get_connection", 111, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_proxy_get_default_timeout
//
// [ result ] trans: nothing
//
func (v DBusProxy) GetDefaultTimeout() (result int32) {
	iv, err := _I.Get1(2006, "Gio", "DBusProxy", "get_default_timeout", 111, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// g_dbus_proxy_get_flags
//
// [ result ] trans: nothing
//
func (v DBusProxy) GetFlags() (result DBusProxyFlags) {
	iv, err := _I.Get1(2007, "Gio", "DBusProxy", "get_flags", 111, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = DBusProxyFlags(ret.Int())
	return
}

// g_dbus_proxy_get_interface_info
//
// [ result ] trans: nothing
//
func (v DBusProxy) GetInterfaceInfo() (result DBusInterfaceInfo) {
	iv, err := _I.Get1(2008, "Gio", "DBusProxy", "get_interface_info", 111, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_proxy_get_interface_name
//
// [ result ] trans: nothing
//
func (v DBusProxy) GetInterfaceName() (result string) {
	iv, err := _I.Get1(2009, "Gio", "DBusProxy", "get_interface_name", 111, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_dbus_proxy_get_name
//
// [ result ] trans: nothing
//
func (v DBusProxy) GetName() (result string) {
	iv, err := _I.Get1(2010, "Gio", "DBusProxy", "get_name", 111, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_dbus_proxy_get_name_owner
//
// [ result ] trans: everything
//
func (v DBusProxy) GetNameOwner() (result string) {
	iv, err := _I.Get1(2011, "Gio", "DBusProxy", "get_name_owner", 111, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_dbus_proxy_get_object_path
//
// [ result ] trans: nothing
//
func (v DBusProxy) GetObjectPath() (result string) {
	iv, err := _I.Get1(2012, "Gio", "DBusProxy", "get_object_path", 111, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_dbus_proxy_set_cached_property
//
// [ property_name ] trans: nothing
//
// [ value ] trans: nothing
//
func (v DBusProxy) SetCachedProperty(property_name string, value Variant) {
	iv, err := _I.Get1(2013, "Gio", "DBusProxy", "set_cached_property", 111, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_property_name := gi.CString(property_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_property_name := gi.NewStringArgument(c_property_name)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_property_name, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_property_name)
}

// g_dbus_proxy_set_default_timeout
//
// [ timeout_msec ] trans: nothing
//
func (v DBusProxy) SetDefaultTimeout(timeout_msec int32) {
	iv, err := _I.Get1(2014, "Gio", "DBusProxy", "set_default_timeout", 111, 23, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_timeout_msec := gi.NewInt32Argument(timeout_msec)
	args := []gi.Argument{arg_v, arg_timeout_msec}
	iv.Call(args, nil, nil)
}

// g_dbus_proxy_set_interface_info
//
// [ info ] trans: nothing
//
func (v DBusProxy) SetInterfaceInfo(info DBusInterfaceInfo) {
	iv, err := _I.Get1(2015, "Gio", "DBusProxy", "set_interface_info", 111, 24, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_info := gi.NewPointerArgument(info.P)
	args := []gi.Argument{arg_v, arg_info}
	iv.Call(args, nil, nil)
}

// ignore GType struct DBusProxyClass

// Flags DBusProxyFlags
type DBusProxyFlags int

const (
	DBusProxyFlagsNone                         DBusProxyFlags = 0
	DBusProxyFlagsDoNotLoadProperties          DBusProxyFlags = 1
	DBusProxyFlagsDoNotConnectSignals          DBusProxyFlags = 2
	DBusProxyFlagsDoNotAutoStart               DBusProxyFlags = 4
	DBusProxyFlagsGetInvalidatedProperties     DBusProxyFlags = 8
	DBusProxyFlagsDoNotAutoStartAtConstruction DBusProxyFlags = 16
)

func DBusProxyFlagsGetType() gi.GType {
	ret := _I.GetGType1(256, "Gio", "DBusProxyFlags")
	return ret
}

// ignore private struct DBusProxyPrivate, type of DBusProxy is object

type DBusProxyTypeFunc func(manager DBusObjectManagerClient, object_path string, interface_name string) (result gi.GType)

func CallDBusProxyTypeFunc(fn DBusProxyTypeFunc, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	manager := WrapDBusObjectManagerClient(*(*unsafe.Pointer)(args[0]))
	object_path := gi.GoString(*(*unsafe.Pointer)(args[1]))
	interface_name := gi.GoString(*(*unsafe.Pointer)(args[2]))
	fnRet := fn(manager, object_path, interface_name)
	*(*gi.GType)(result) = fnRet
}

// Flags DBusSendMessageFlags
type DBusSendMessageFlags int

const (
	DBusSendMessageFlagsNone           DBusSendMessageFlags = 0
	DBusSendMessageFlagsPreserveSerial DBusSendMessageFlags = 1
)

func DBusSendMessageFlagsGetType() gi.GType {
	ret := _I.GetGType1(257, "Gio", "DBusSendMessageFlags")
	return ret
}

// Object DBusServer
type DBusServer struct {
	InitableIfc
	Object
}

func WrapDBusServer(p unsafe.Pointer) (r DBusServer) { r.P = p; return }

type IDBusServer interface{ P_DBusServer() unsafe.Pointer }

func (v DBusServer) P_DBusServer() unsafe.Pointer { return v.P }
func (v DBusServer) P_Initable() unsafe.Pointer   { return v.P }
func DBusServerGetType() gi.GType {
	ret := _I.GetGType1(258, "Gio", "DBusServer")
	return ret
}

// g_dbus_server_new_sync
//
// [ address ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ guid ] trans: nothing
//
// [ observer ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func NewDBusServerSync(address string, flags DBusServerFlags, guid string, observer IDBusAuthObserver, cancellable ICancellable) (result DBusServer, err error) {
	iv, err := _I.Get1(2016, "Gio", "DBusServer", "new_sync", 117, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_address := gi.CString(address)
	c_guid := gi.CString(guid)
	var tmp unsafe.Pointer
	if observer != nil {
		tmp = observer.P_DBusAuthObserver()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_address := gi.NewStringArgument(c_address)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_guid := gi.NewStringArgument(c_guid)
	arg_observer := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_address, arg_flags, arg_guid, arg_observer, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_address)
	gi.Free(c_guid)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dbus_server_get_client_address
//
// [ result ] trans: nothing
//
func (v DBusServer) GetClientAddress() (result string) {
	iv, err := _I.Get1(2017, "Gio", "DBusServer", "get_client_address", 117, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_dbus_server_get_flags
//
// [ result ] trans: nothing
//
func (v DBusServer) GetFlags() (result DBusServerFlags) {
	iv, err := _I.Get1(2018, "Gio", "DBusServer", "get_flags", 117, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = DBusServerFlags(ret.Int())
	return
}

// g_dbus_server_get_guid
//
// [ result ] trans: nothing
//
func (v DBusServer) GetGuid() (result string) {
	iv, err := _I.Get1(2019, "Gio", "DBusServer", "get_guid", 117, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_dbus_server_is_active
//
// [ result ] trans: nothing
//
func (v DBusServer) IsActive() (result bool) {
	iv, err := _I.Get1(2020, "Gio", "DBusServer", "is_active", 117, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_dbus_server_start
//
func (v DBusServer) Start() {
	iv, err := _I.Get1(2021, "Gio", "DBusServer", "start", 117, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_dbus_server_stop
//
func (v DBusServer) Stop() {
	iv, err := _I.Get1(2022, "Gio", "DBusServer", "stop", 117, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Flags DBusServerFlags
type DBusServerFlags int

const (
	DBusServerFlagsNone                         DBusServerFlags = 0
	DBusServerFlagsRunInThread                  DBusServerFlags = 1
	DBusServerFlagsAuthenticationAllowAnonymous DBusServerFlags = 2
)

func DBusServerFlagsGetType() gi.GType {
	ret := _I.GetGType1(259, "Gio", "DBusServerFlags")
	return ret
}

type DBusSignalCallback func(connection DBusConnection, sender_name string, object_path string, interface_name string, signal_name string, parameters Variant)

func CallDBusSignalCallback(fn DBusSignalCallback, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	connection := WrapDBusConnection(*(*unsafe.Pointer)(args[0]))
	sender_name := gi.GoString(*(*unsafe.Pointer)(args[1]))
	object_path := gi.GoString(*(*unsafe.Pointer)(args[2]))
	interface_name := gi.GoString(*(*unsafe.Pointer)(args[3]))
	signal_name := gi.GoString(*(*unsafe.Pointer)(args[4]))
	parameters := Variant{P: *(*unsafe.Pointer)(args[5])}
	fn(connection, sender_name, object_path, interface_name, signal_name, parameters)
}

// Flags DBusSignalFlags
type DBusSignalFlags int

const (
	DBusSignalFlagsNone               DBusSignalFlags = 0
	DBusSignalFlagsNoMatchRule        DBusSignalFlags = 1
	DBusSignalFlagsMatchArg0Namespace DBusSignalFlags = 2
	DBusSignalFlagsMatchArg0Path      DBusSignalFlags = 4
)

func DBusSignalFlagsGetType() gi.GType {
	ret := _I.GetGType1(260, "Gio", "DBusSignalFlags")
	return ret
}

// Struct DBusSignalInfo
type DBusSignalInfo struct {
	P unsafe.Pointer
}

const SizeOfStructDBusSignalInfo = 32

func DBusSignalInfoGetType() gi.GType {
	ret := _I.GetGType1(261, "Gio", "DBusSignalInfo")
	return ret
}

// g_dbus_signal_info_ref
//
// [ result ] trans: everything
//
func (v DBusSignalInfo) Ref() (result DBusSignalInfo) {
	iv, err := _I.Get1(2023, "Gio", "DBusSignalInfo", "ref", 121, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_signal_info_unref
//
func (v DBusSignalInfo) Unref() {
	iv, err := _I.Get1(2024, "Gio", "DBusSignalInfo", "unref", 121, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

func (v DBusSignalInfo) p() *C.GDBusSignalInfo {
	return (*C.GDBusSignalInfo)(v.P)
}
func (v DBusSignalInfo) RefCount() (result int32) {
	result = int32(v.p().ref_count)
	return
}
func (v DBusSignalInfo) Name() (result int /*TODO*/) {
	return
}
func (v DBusSignalInfo) Args() (result int /*TODO*/) {
	return
}
func (v DBusSignalInfo) Annotations() (result int /*TODO*/) {
	return
}

type DBusSubtreeDispatchFunc func(connection DBusConnection, sender string, object_path string, interface_name string, node string, out_user_data unsafe.Pointer) (result DBusInterfaceVTable)

func CallDBusSubtreeDispatchFunc(fn DBusSubtreeDispatchFunc, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	connection := WrapDBusConnection(*(*unsafe.Pointer)(args[0]))
	sender := gi.GoString(*(*unsafe.Pointer)(args[1]))
	object_path := gi.GoString(*(*unsafe.Pointer)(args[2]))
	interface_name := gi.GoString(*(*unsafe.Pointer)(args[3]))
	node := gi.GoString(*(*unsafe.Pointer)(args[4]))
	out_user_data := *(*unsafe.Pointer)(args[5])
	fnRet := fn(connection, sender, object_path, interface_name, node, out_user_data)
	*(*unsafe.Pointer)(result) = fnRet.P
}

// Flags DBusSubtreeFlags
type DBusSubtreeFlags int

const (
	DBusSubtreeFlagsNone                        DBusSubtreeFlags = 0
	DBusSubtreeFlagsDispatchToUnenumeratedNodes DBusSubtreeFlags = 1
)

func DBusSubtreeFlagsGetType() gi.GType {
	ret := _I.GetGType1(262, "Gio", "DBusSubtreeFlags")
	return ret
}

type DBusSubtreeIntrospectFunc func(connection DBusConnection, sender string, object_path string, node string) (result DBusInterfaceInfo)

func CallDBusSubtreeIntrospectFunc(fn DBusSubtreeIntrospectFunc, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	connection := WrapDBusConnection(*(*unsafe.Pointer)(args[0]))
	sender := gi.GoString(*(*unsafe.Pointer)(args[1]))
	object_path := gi.GoString(*(*unsafe.Pointer)(args[2]))
	node := gi.GoString(*(*unsafe.Pointer)(args[3]))
	fnRet := fn(connection, sender, object_path, node)
	*(*unsafe.Pointer)(result) = fnRet.P
}

// Struct DBusSubtreeVTable
type DBusSubtreeVTable struct {
	P unsafe.Pointer
}

const SizeOfStructDBusSubtreeVTable = 88

func DBusSubtreeVTableGetType() gi.GType {
	ret := _I.GetGType1(263, "Gio", "DBusSubtreeVTable")
	return ret
}

func (v DBusSubtreeVTable) p() *C.GDBusSubtreeVTable {
	return (*C.GDBusSubtreeVTable)(v.P)
}
func (v DBusSubtreeVTable) Enumerate() (result unsafe.Pointer) {
	result = unsafe.Pointer(v.p().enumerate)
	return
}
func (v DBusSubtreeVTable) Introspect() (result int /*TODO*/) {
	return
}
func (v DBusSubtreeVTable) Dispatch() (result int /*TODO*/) {
	return
}
func (v DBusSubtreeVTable) Padding() (result int /*TODO*/) {
	return
}

// Object DataInputStream
type DataInputStream struct {
	BufferedInputStream
}

func WrapDataInputStream(p unsafe.Pointer) (r DataInputStream) { r.P = p; return }

type IDataInputStream interface{ P_DataInputStream() unsafe.Pointer }

func (v DataInputStream) P_DataInputStream() unsafe.Pointer { return v.P }
func DataInputStreamGetType() gi.GType {
	ret := _I.GetGType1(264, "Gio", "DataInputStream")
	return ret
}

// g_data_input_stream_new
//
// [ base_stream ] trans: nothing
//
// [ result ] trans: everything
//
func NewDataInputStream(base_stream IInputStream) (result DataInputStream) {
	iv, err := _I.Get1(2025, "Gio", "DataInputStream", "new", 128, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if base_stream != nil {
		tmp = base_stream.P_InputStream()
	}
	arg_base_stream := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_base_stream}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_data_input_stream_get_byte_order
//
// [ result ] trans: nothing
//
func (v DataInputStream) GetByteOrder() (result DataStreamByteOrderEnum) {
	iv, err := _I.Get1(2026, "Gio", "DataInputStream", "get_byte_order", 128, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = DataStreamByteOrderEnum(ret.Int())
	return
}

// g_data_input_stream_get_newline_type
//
// [ result ] trans: nothing
//
func (v DataInputStream) GetNewlineType() (result DataStreamNewlineTypeEnum) {
	iv, err := _I.Get1(2027, "Gio", "DataInputStream", "get_newline_type", 128, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = DataStreamNewlineTypeEnum(ret.Int())
	return
}

// g_data_input_stream_read_byte
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DataInputStream) ReadByte(cancellable ICancellable) (result uint8, err error) {
	iv, err := _I.Get1(2028, "Gio", "DataInputStream", "read_byte", 128, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Uint8()
	return
}

// g_data_input_stream_read_int16
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DataInputStream) ReadInt16(cancellable ICancellable) (result int16, err error) {
	iv, err := _I.Get1(2029, "Gio", "DataInputStream", "read_int16", 128, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int16()
	return
}

// g_data_input_stream_read_int32
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DataInputStream) ReadInt32(cancellable ICancellable) (result int32, err error) {
	iv, err := _I.Get1(2030, "Gio", "DataInputStream", "read_int32", 128, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int32()
	return
}

// g_data_input_stream_read_int64
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DataInputStream) ReadInt64(cancellable ICancellable) (result int64, err error) {
	iv, err := _I.Get1(2031, "Gio", "DataInputStream", "read_int64", 128, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int64()
	return
}

// g_data_input_stream_read_line
//
// [ length ] trans: everything, dir: out
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v DataInputStream) ReadLine(cancellable ICancellable) (result gi.Uint8Array, length uint64, err error) {
	iv, err := _I.Get1(2032, "Gio", "DataInputStream", "read_line", 128, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_length, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	length = outArgs[0].Uint64()
	result = gi.Uint8Array{P: ret.Pointer()}
	result.SetLenZT()
	return
}

// g_data_input_stream_read_line_async
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v DataInputStream) ReadLineAsync(io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2033, "Gio", "DataInputStream", "read_line_async", 128, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_data_input_stream_read_line_finish
//
// [ result ] trans: nothing
//
// [ length ] trans: everything, dir: out
//
// [ result1 ] trans: everything
//
func (v DataInputStream) ReadLineFinish(result IAsyncResult) (result1 gi.Uint8Array, length uint64, err error) {
	iv, err := _I.Get1(2034, "Gio", "DataInputStream", "read_line_finish", 128, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_result, arg_length, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	length = outArgs[0].Uint64()
	result1 = gi.Uint8Array{P: ret.Pointer()}
	result1.SetLenZT()
	return
}

// g_data_input_stream_read_line_finish_utf8
//
// [ result ] trans: nothing
//
// [ length ] trans: everything, dir: out
//
// [ result1 ] trans: everything
//
func (v DataInputStream) ReadLineFinishUtf8(result IAsyncResult) (result1 string, length uint64, err error) {
	iv, err := _I.Get1(2035, "Gio", "DataInputStream", "read_line_finish_utf8", 128, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_result, arg_length, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	length = outArgs[0].Uint64()
	result1 = ret.String().Take()
	return
}

// g_data_input_stream_read_line_utf8
//
// [ length ] trans: everything, dir: out
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v DataInputStream) ReadLineUtf8(cancellable ICancellable) (result string, length uint64, err error) {
	iv, err := _I.Get1(2036, "Gio", "DataInputStream", "read_line_utf8", 128, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_length, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	length = outArgs[0].Uint64()
	result = ret.String().Take()
	return
}

// g_data_input_stream_read_uint16
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DataInputStream) ReadUint16(cancellable ICancellable) (result uint16, err error) {
	iv, err := _I.Get1(2037, "Gio", "DataInputStream", "read_uint16", 128, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Uint16()
	return
}

// g_data_input_stream_read_uint32
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DataInputStream) ReadUint32(cancellable ICancellable) (result uint32, err error) {
	iv, err := _I.Get1(2038, "Gio", "DataInputStream", "read_uint32", 128, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Uint32()
	return
}

// g_data_input_stream_read_uint64
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DataInputStream) ReadUint64(cancellable ICancellable) (result uint64, err error) {
	iv, err := _I.Get1(2039, "Gio", "DataInputStream", "read_uint64", 128, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Uint64()
	return
}

// Deprecated
//
// g_data_input_stream_read_until
//
// [ stop_chars ] trans: nothing
//
// [ length ] trans: everything, dir: out
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v DataInputStream) ReadUntil(stop_chars string, cancellable ICancellable) (result string, length uint64, err error) {
	iv, err := _I.Get1(2040, "Gio", "DataInputStream", "read_until", 128, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	c_stop_chars := gi.CString(stop_chars)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_stop_chars := gi.NewStringArgument(c_stop_chars)
	arg_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_stop_chars, arg_length, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_stop_chars)
	err = gi.ToError(outArgs[1].Pointer())
	length = outArgs[0].Uint64()
	result = ret.String().Take()
	return
}

// Deprecated
//
// g_data_input_stream_read_until_async
//
// [ stop_chars ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v DataInputStream) ReadUntilAsync(stop_chars string, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2041, "Gio", "DataInputStream", "read_until_async", 128, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stop_chars := gi.CString(stop_chars)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_stop_chars := gi.NewStringArgument(c_stop_chars)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_stop_chars, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_stop_chars)
}

// Deprecated
//
// g_data_input_stream_read_until_finish
//
// [ result ] trans: nothing
//
// [ length ] trans: everything, dir: out
//
// [ result1 ] trans: everything
//
func (v DataInputStream) ReadUntilFinish(result IAsyncResult) (result1 string, length uint64, err error) {
	iv, err := _I.Get1(2042, "Gio", "DataInputStream", "read_until_finish", 128, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_result, arg_length, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	length = outArgs[0].Uint64()
	result1 = ret.String().Take()
	return
}

// g_data_input_stream_read_upto
//
// [ stop_chars ] trans: nothing
//
// [ stop_chars_len ] trans: nothing
//
// [ length ] trans: everything, dir: out
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v DataInputStream) ReadUpto(stop_chars string, stop_chars_len int64, cancellable ICancellable) (result string, length uint64, err error) {
	iv, err := _I.Get1(2043, "Gio", "DataInputStream", "read_upto", 128, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	c_stop_chars := gi.CString(stop_chars)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_stop_chars := gi.NewStringArgument(c_stop_chars)
	arg_stop_chars_len := gi.NewInt64Argument(stop_chars_len)
	arg_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_stop_chars, arg_stop_chars_len, arg_length, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_stop_chars)
	err = gi.ToError(outArgs[1].Pointer())
	length = outArgs[0].Uint64()
	result = ret.String().Take()
	return
}

// g_data_input_stream_read_upto_async
//
// [ stop_chars ] trans: nothing
//
// [ stop_chars_len ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v DataInputStream) ReadUptoAsync(stop_chars string, stop_chars_len int64, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2044, "Gio", "DataInputStream", "read_upto_async", 128, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stop_chars := gi.CString(stop_chars)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_stop_chars := gi.NewStringArgument(c_stop_chars)
	arg_stop_chars_len := gi.NewInt64Argument(stop_chars_len)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_stop_chars, arg_stop_chars_len, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_stop_chars)
}

// g_data_input_stream_read_upto_finish
//
// [ result ] trans: nothing
//
// [ length ] trans: everything, dir: out
//
// [ result1 ] trans: everything
//
func (v DataInputStream) ReadUptoFinish(result IAsyncResult) (result1 string, length uint64, err error) {
	iv, err := _I.Get1(2045, "Gio", "DataInputStream", "read_upto_finish", 128, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_result, arg_length, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	length = outArgs[0].Uint64()
	result1 = ret.String().Take()
	return
}

// g_data_input_stream_set_byte_order
//
// [ order ] trans: nothing
//
func (v DataInputStream) SetByteOrder(order DataStreamByteOrderEnum) {
	iv, err := _I.Get1(2046, "Gio", "DataInputStream", "set_byte_order", 128, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_order := gi.NewIntArgument(int(order))
	args := []gi.Argument{arg_v, arg_order}
	iv.Call(args, nil, nil)
}

// g_data_input_stream_set_newline_type
//
// [ type1 ] trans: nothing
//
func (v DataInputStream) SetNewlineType(type1 DataStreamNewlineTypeEnum) {
	iv, err := _I.Get1(2047, "Gio", "DataInputStream", "set_newline_type", 128, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_type1 := gi.NewIntArgument(int(type1))
	args := []gi.Argument{arg_v, arg_type1}
	iv.Call(args, nil, nil)
}

// ignore GType struct DataInputStreamClass

// ignore private struct DataInputStreamPrivate, type of DataInputStream is object

// Object DataOutputStream
type DataOutputStream struct {
	SeekableIfc
	FilterOutputStream
}

func WrapDataOutputStream(p unsafe.Pointer) (r DataOutputStream) { r.P = p; return }

type IDataOutputStream interface{ P_DataOutputStream() unsafe.Pointer }

func (v DataOutputStream) P_DataOutputStream() unsafe.Pointer { return v.P }
func (v DataOutputStream) P_Seekable() unsafe.Pointer         { return v.P }
func DataOutputStreamGetType() gi.GType {
	ret := _I.GetGType1(265, "Gio", "DataOutputStream")
	return ret
}

// g_data_output_stream_new
//
// [ base_stream ] trans: nothing
//
// [ result ] trans: everything
//
func NewDataOutputStream(base_stream IOutputStream) (result DataOutputStream) {
	iv, err := _I.Get1(2048, "Gio", "DataOutputStream", "new", 131, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if base_stream != nil {
		tmp = base_stream.P_OutputStream()
	}
	arg_base_stream := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_base_stream}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_data_output_stream_get_byte_order
//
// [ result ] trans: nothing
//
func (v DataOutputStream) GetByteOrder() (result DataStreamByteOrderEnum) {
	iv, err := _I.Get1(2049, "Gio", "DataOutputStream", "get_byte_order", 131, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = DataStreamByteOrderEnum(ret.Int())
	return
}

// g_data_output_stream_put_byte
//
// [ data ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DataOutputStream) PutByte(data uint8, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2050, "Gio", "DataOutputStream", "put_byte", 131, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_data := gi.NewUint8Argument(data)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_data, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_data_output_stream_put_int16
//
// [ data ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DataOutputStream) PutInt16(data int16, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2051, "Gio", "DataOutputStream", "put_int16", 131, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_data := gi.NewInt16Argument(data)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_data, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_data_output_stream_put_int32
//
// [ data ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DataOutputStream) PutInt32(data int32, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2052, "Gio", "DataOutputStream", "put_int32", 131, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_data := gi.NewInt32Argument(data)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_data, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_data_output_stream_put_int64
//
// [ data ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DataOutputStream) PutInt64(data int64, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2053, "Gio", "DataOutputStream", "put_int64", 131, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_data := gi.NewInt64Argument(data)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_data, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_data_output_stream_put_string
//
// [ str ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DataOutputStream) PutString(str string, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2054, "Gio", "DataOutputStream", "put_string", 131, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_str := gi.CString(str)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_str := gi.NewStringArgument(c_str)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_str, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_str)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_data_output_stream_put_uint16
//
// [ data ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DataOutputStream) PutUint16(data uint16, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2055, "Gio", "DataOutputStream", "put_uint16", 131, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_data := gi.NewUint16Argument(data)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_data, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_data_output_stream_put_uint32
//
// [ data ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DataOutputStream) PutUint32(data uint32, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2056, "Gio", "DataOutputStream", "put_uint32", 131, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_data := gi.NewUint32Argument(data)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_data, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_data_output_stream_put_uint64
//
// [ data ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DataOutputStream) PutUint64(data uint64, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2057, "Gio", "DataOutputStream", "put_uint64", 131, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_data := gi.NewUint64Argument(data)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_data, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_data_output_stream_set_byte_order
//
// [ order ] trans: nothing
//
func (v DataOutputStream) SetByteOrder(order DataStreamByteOrderEnum) {
	iv, err := _I.Get1(2058, "Gio", "DataOutputStream", "set_byte_order", 131, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_order := gi.NewIntArgument(int(order))
	args := []gi.Argument{arg_v, arg_order}
	iv.Call(args, nil, nil)
}

// ignore GType struct DataOutputStreamClass

// ignore private struct DataOutputStreamPrivate, type of DataOutputStream is object

// Enum DataStreamByteOrder
type DataStreamByteOrderEnum int

const (
	DataStreamByteOrderBigEndian    DataStreamByteOrderEnum = 0
	DataStreamByteOrderLittleEndian DataStreamByteOrderEnum = 1
	DataStreamByteOrderHostEndian   DataStreamByteOrderEnum = 2
)

func DataStreamByteOrderGetType() gi.GType {
	ret := _I.GetGType1(266, "Gio", "DataStreamByteOrder")
	return ret
}

// Enum DataStreamNewlineType
type DataStreamNewlineTypeEnum int

const (
	DataStreamNewlineTypeLf   DataStreamNewlineTypeEnum = 0
	DataStreamNewlineTypeCr   DataStreamNewlineTypeEnum = 1
	DataStreamNewlineTypeCrLf DataStreamNewlineTypeEnum = 2
	DataStreamNewlineTypeAny  DataStreamNewlineTypeEnum = 3
)

func DataStreamNewlineTypeGetType() gi.GType {
	ret := _I.GetGType1(267, "Gio", "DataStreamNewlineType")
	return ret
}

// Interface DatagramBased
type DatagramBased struct {
	DatagramBasedIfc
	P unsafe.Pointer
}
type DatagramBasedIfc struct{}
type IDatagramBased interface{ P_DatagramBased() unsafe.Pointer }

func (v DatagramBased) P_DatagramBased() unsafe.Pointer { return v.P }
func DatagramBasedGetType() gi.GType {
	ret := _I.GetGType1(268, "Gio", "DatagramBased")
	return ret
}

// g_datagram_based_condition_check
//
// [ condition ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *DatagramBasedIfc) ConditionCheck(condition IOConditionFlags) (result IOConditionFlags) {
	iv, err := _I.Get1(2059, "Gio", "DatagramBased", "condition_check", 136, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_condition := gi.NewIntArgument(int(condition))
	args := []gi.Argument{arg_v, arg_condition}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = IOConditionFlags(ret.Int())
	return
}

// g_datagram_based_condition_wait
//
// [ condition ] trans: nothing
//
// [ timeout ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *DatagramBasedIfc) ConditionWait(condition IOConditionFlags, timeout int64, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2060, "Gio", "DatagramBased", "condition_wait", 136, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_condition := gi.NewIntArgument(int(condition))
	arg_timeout := gi.NewInt64Argument(timeout)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_condition, arg_timeout, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_datagram_based_create_source
//
// [ condition ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *DatagramBasedIfc) CreateSource(condition IOConditionFlags, cancellable ICancellable) (result Source) {
	iv, err := _I.Get1(2061, "Gio", "DatagramBased", "create_source", 136, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_condition := gi.NewIntArgument(int(condition))
	arg_cancellable := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_condition, arg_cancellable}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_datagram_based_receive_messages
//
// [ messages ] trans: nothing
//
// [ num_messages ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ timeout ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *DatagramBasedIfc) ReceiveMessages(messages unsafe.Pointer, num_messages uint32, flags int32, timeout int64, cancellable ICancellable) (result int32, err error) {
	iv, err := _I.Get1(2062, "Gio", "DatagramBased", "receive_messages", 136, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_messages := gi.NewPointerArgument(messages)
	arg_num_messages := gi.NewUint32Argument(num_messages)
	arg_flags := gi.NewInt32Argument(flags)
	arg_timeout := gi.NewInt64Argument(timeout)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_messages, arg_num_messages, arg_flags, arg_timeout, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int32()
	return
}

// g_datagram_based_send_messages
//
// [ messages ] trans: nothing
//
// [ num_messages ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ timeout ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *DatagramBasedIfc) SendMessages(messages unsafe.Pointer, num_messages uint32, flags int32, timeout int64, cancellable ICancellable) (result int32, err error) {
	iv, err := _I.Get1(2063, "Gio", "DatagramBased", "send_messages", 136, 4, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_messages := gi.NewPointerArgument(messages)
	arg_num_messages := gi.NewUint32Argument(num_messages)
	arg_flags := gi.NewInt32Argument(flags)
	arg_timeout := gi.NewInt64Argument(timeout)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_messages, arg_num_messages, arg_flags, arg_timeout, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int32()
	return
}

// ignore GType struct DatagramBasedInterface

type DatagramBasedSourceFunc func(datagram_based DatagramBased, condition IOConditionFlags) (result bool)

func CallDatagramBasedSourceFunc(fn DatagramBasedSourceFunc, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	datagram_based := DatagramBased{P: *(*unsafe.Pointer)(args[0])}
	condition := *(*IOConditionFlags)(args[1])
	fnRet := fn(datagram_based, condition)
	*(*int32)(result) = int32(gi.Bool2Int(fnRet))
}

// Object DesktopAppInfo
type DesktopAppInfo struct {
	AppInfoIfc
	Object
}

func WrapDesktopAppInfo(p unsafe.Pointer) (r DesktopAppInfo) { r.P = p; return }

type IDesktopAppInfo interface{ P_DesktopAppInfo() unsafe.Pointer }

func (v DesktopAppInfo) P_DesktopAppInfo() unsafe.Pointer { return v.P }
func (v DesktopAppInfo) P_AppInfo() unsafe.Pointer        { return v.P }
func DesktopAppInfoGetType() gi.GType {
	ret := _I.GetGType1(269, "Gio", "DesktopAppInfo")
	return ret
}

// g_desktop_app_info_new
//
// [ desktop_id ] trans: nothing
//
// [ result ] trans: everything
//
func NewDesktopAppInfo(desktop_id string) (result DesktopAppInfo) {
	iv, err := _I.Get1(2064, "Gio", "DesktopAppInfo", "new", 139, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_desktop_id := gi.CString(desktop_id)
	arg_desktop_id := gi.NewStringArgument(c_desktop_id)
	args := []gi.Argument{arg_desktop_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_desktop_id)
	result.P = ret.Pointer()
	return
}

// g_desktop_app_info_new_from_filename
//
// [ filename ] trans: nothing
//
// [ result ] trans: everything
//
func NewDesktopAppInfoFromFilename(filename string) (result DesktopAppInfo) {
	iv, err := _I.Get1(2065, "Gio", "DesktopAppInfo", "new_from_filename", 139, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_filename := gi.CString(filename)
	arg_filename := gi.NewStringArgument(c_filename)
	args := []gi.Argument{arg_filename}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_filename)
	result.P = ret.Pointer()
	return
}

// g_desktop_app_info_new_from_keyfile
//
// [ key_file ] trans: nothing
//
// [ result ] trans: everything
//
func NewDesktopAppInfoFromKeyfile(key_file KeyFile) (result DesktopAppInfo) {
	iv, err := _I.Get1(2066, "Gio", "DesktopAppInfo", "new_from_keyfile", 139, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_key_file := gi.NewPointerArgument(key_file.P)
	args := []gi.Argument{arg_key_file}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_desktop_app_info_get_implementations
//
// [ interface1 ] trans: nothing
//
// [ result ] trans: everything
//
func DesktopAppInfoGetImplementations1(interface1 string) (result List) {
	iv, err := _I.Get1(2067, "Gio", "DesktopAppInfo", "get_implementations", 139, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_interface1 := gi.CString(interface1)
	arg_interface1 := gi.NewStringArgument(c_interface1)
	args := []gi.Argument{arg_interface1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_interface1)
	result.P = ret.Pointer()
	return
}

// g_desktop_app_info_search
//
// [ search_string ] trans: nothing
//
// [ result ] trans: everything
//
func DesktopAppInfoSearch1(search_string string) (result gi.CStrvArray) {
	iv, err := _I.Get1(2068, "Gio", "DesktopAppInfo", "search", 139, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_search_string := gi.CString(search_string)
	arg_search_string := gi.NewStringArgument(c_search_string)
	args := []gi.Argument{arg_search_string}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_search_string)
	result = gi.CStrvArray{P: ret.Pointer()}
	result.SetLenZT()
	return
}

// Deprecated
//
// g_desktop_app_info_set_desktop_env
//
// [ desktop_env ] trans: nothing
//
func DesktopAppInfoSetDesktopEnv1(desktop_env string) {
	iv, err := _I.Get1(2069, "Gio", "DesktopAppInfo", "set_desktop_env", 139, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_desktop_env := gi.CString(desktop_env)
	arg_desktop_env := gi.NewStringArgument(c_desktop_env)
	args := []gi.Argument{arg_desktop_env}
	iv.Call(args, nil, nil)
	gi.Free(c_desktop_env)
}

// g_desktop_app_info_get_action_name
//
// [ action_name ] trans: nothing
//
// [ result ] trans: everything
//
func (v DesktopAppInfo) GetActionName(action_name string) (result string) {
	iv, err := _I.Get1(2070, "Gio", "DesktopAppInfo", "get_action_name", 139, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_action_name := gi.NewStringArgument(c_action_name)
	args := []gi.Argument{arg_v, arg_action_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_action_name)
	result = ret.String().Take()
	return
}

// g_desktop_app_info_get_boolean
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DesktopAppInfo) GetBoolean(key string) (result bool) {
	iv, err := _I.Get1(2071, "Gio", "DesktopAppInfo", "get_boolean", 139, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Bool()
	return
}

// g_desktop_app_info_get_categories
//
// [ result ] trans: nothing
//
func (v DesktopAppInfo) GetCategories() (result string) {
	iv, err := _I.Get1(2072, "Gio", "DesktopAppInfo", "get_categories", 139, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_desktop_app_info_get_filename
//
// [ result ] trans: nothing
//
func (v DesktopAppInfo) GetFilename() (result string) {
	iv, err := _I.Get1(2073, "Gio", "DesktopAppInfo", "get_filename", 139, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_desktop_app_info_get_generic_name
//
// [ result ] trans: nothing
//
func (v DesktopAppInfo) GetGenericName() (result string) {
	iv, err := _I.Get1(2074, "Gio", "DesktopAppInfo", "get_generic_name", 139, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_desktop_app_info_get_is_hidden
//
// [ result ] trans: nothing
//
func (v DesktopAppInfo) GetIsHidden() (result bool) {
	iv, err := _I.Get1(2075, "Gio", "DesktopAppInfo", "get_is_hidden", 139, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_desktop_app_info_get_keywords
//
// [ result ] trans: nothing
//
func (v DesktopAppInfo) GetKeywords() (result gi.CStrArray) {
	iv, err := _I.Get1(2076, "Gio", "DesktopAppInfo", "get_keywords", 139, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_desktop_app_info_get_locale_string
//
// [ key ] trans: nothing
//
// [ result ] trans: everything
//
func (v DesktopAppInfo) GetLocaleString(key string) (result string) {
	iv, err := _I.Get1(2077, "Gio", "DesktopAppInfo", "get_locale_string", 139, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.String().Take()
	return
}

// g_desktop_app_info_get_nodisplay
//
// [ result ] trans: nothing
//
func (v DesktopAppInfo) GetNodisplay() (result bool) {
	iv, err := _I.Get1(2078, "Gio", "DesktopAppInfo", "get_nodisplay", 139, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_desktop_app_info_get_show_in
//
// [ desktop_env ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DesktopAppInfo) GetShowIn(desktop_env string) (result bool) {
	iv, err := _I.Get1(2079, "Gio", "DesktopAppInfo", "get_show_in", 139, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_desktop_env := gi.CString(desktop_env)
	arg_v := gi.NewPointerArgument(v.P)
	arg_desktop_env := gi.NewStringArgument(c_desktop_env)
	args := []gi.Argument{arg_v, arg_desktop_env}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_desktop_env)
	result = ret.Bool()
	return
}

// g_desktop_app_info_get_startup_wm_class
//
// [ result ] trans: nothing
//
func (v DesktopAppInfo) GetStartupWmClass() (result string) {
	iv, err := _I.Get1(2080, "Gio", "DesktopAppInfo", "get_startup_wm_class", 139, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_desktop_app_info_get_string
//
// [ key ] trans: nothing
//
// [ result ] trans: everything
//
func (v DesktopAppInfo) GetString(key string) (result string) {
	iv, err := _I.Get1(2081, "Gio", "DesktopAppInfo", "get_string", 139, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.String().Take()
	return
}

// g_desktop_app_info_has_key
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DesktopAppInfo) HasKey(key string) (result bool) {
	iv, err := _I.Get1(2082, "Gio", "DesktopAppInfo", "has_key", 139, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Bool()
	return
}

// g_desktop_app_info_launch_action
//
// [ action_name ] trans: nothing
//
// [ launch_context ] trans: nothing
//
func (v DesktopAppInfo) LaunchAction(action_name string, launch_context IAppLaunchContext) {
	iv, err := _I.Get1(2083, "Gio", "DesktopAppInfo", "launch_action", 139, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	var tmp unsafe.Pointer
	if launch_context != nil {
		tmp = launch_context.P_AppLaunchContext()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_action_name := gi.NewStringArgument(c_action_name)
	arg_launch_context := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_action_name, arg_launch_context}
	iv.Call(args, nil, nil)
	gi.Free(c_action_name)
}

// g_desktop_app_info_launch_uris_as_manager
//
// [ uris ] trans: nothing
//
// [ launch_context ] trans: nothing
//
// [ spawn_flags ] trans: nothing
//
// [ user_setup ] trans: nothing
//
// [ user_setup_data ] trans: nothing
//
// [ pid_callback ] trans: nothing
//
// [ pid_callback_data ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DesktopAppInfo) LaunchUrisAsManager(uris List, launch_context IAppLaunchContext, spawn_flags SpawnFlags, user_setup SpawnChildSetupFunc, pid_callback DesktopAppLaunchCallback) (result bool, err error) {
	iv, err := _I.Get1(2084, "Gio", "DesktopAppInfo", "launch_uris_as_manager", 139, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if launch_context != nil {
		tmp = launch_context.P_AppLaunchContext()
	}
	var funcPtr unsafe.Pointer
	if user_setup != nil {
		callableInfo := gi.GetCallableInfo("GLib", "SpawnChildSetupFunc")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallSpawnChildSetupFunc(user_setup, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	var cId1 uint
	var funcPtr1 unsafe.Pointer
	if pid_callback != nil {
		callableInfo1 := gi.GetCallableInfo("Gio", "DesktopAppLaunchCallback")
		cId1, funcPtr1 = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallDesktopAppLaunchCallback(pid_callback, __result, __args)
		}, gi.ScopeCall, callableInfo1)
		callableInfo1.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_uris := gi.NewPointerArgument(uris.P)
	arg_launch_context := gi.NewPointerArgument(tmp)
	arg_spawn_flags := gi.NewIntArgument(int(spawn_flags))
	arg_user_setup := gi.NewPointerArgument(funcPtr)
	arg_user_setup_data := gi.NewPointerArgument(nil)
	arg_pid_callback := gi.NewPointerArgument(funcPtr1)
	arg_pid_callback_data := gi.NewPointerArgument(nil)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_uris, arg_launch_context, arg_spawn_flags, arg_user_setup, arg_user_setup_data, arg_pid_callback, arg_pid_callback_data, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.UnregisterFClosure(cId1)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_desktop_app_info_launch_uris_as_manager_with_fds
//
// [ uris ] trans: nothing
//
// [ launch_context ] trans: nothing
//
// [ spawn_flags ] trans: nothing
//
// [ user_setup ] trans: nothing
//
// [ user_setup_data ] trans: nothing
//
// [ pid_callback ] trans: nothing
//
// [ pid_callback_data ] trans: nothing
//
// [ stdin_fd ] trans: nothing
//
// [ stdout_fd ] trans: nothing
//
// [ stderr_fd ] trans: nothing
//
// [ result ] trans: nothing
//
func (v DesktopAppInfo) LaunchUrisAsManagerWithFds(uris List, launch_context IAppLaunchContext, spawn_flags SpawnFlags, user_setup SpawnChildSetupFunc, pid_callback DesktopAppLaunchCallback, stdin_fd int32, stdout_fd int32, stderr_fd int32) (result bool, err error) {
	iv, err := _I.Get1(2085, "Gio", "DesktopAppInfo", "launch_uris_as_manager_with_fds", 139, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if launch_context != nil {
		tmp = launch_context.P_AppLaunchContext()
	}
	var funcPtr unsafe.Pointer
	if user_setup != nil {
		callableInfo := gi.GetCallableInfo("GLib", "SpawnChildSetupFunc")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallSpawnChildSetupFunc(user_setup, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	var cId1 uint
	var funcPtr1 unsafe.Pointer
	if pid_callback != nil {
		callableInfo1 := gi.GetCallableInfo("Gio", "DesktopAppLaunchCallback")
		cId1, funcPtr1 = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallDesktopAppLaunchCallback(pid_callback, __result, __args)
		}, gi.ScopeCall, callableInfo1)
		callableInfo1.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_uris := gi.NewPointerArgument(uris.P)
	arg_launch_context := gi.NewPointerArgument(tmp)
	arg_spawn_flags := gi.NewIntArgument(int(spawn_flags))
	arg_user_setup := gi.NewPointerArgument(funcPtr)
	arg_user_setup_data := gi.NewPointerArgument(nil)
	arg_pid_callback := gi.NewPointerArgument(funcPtr1)
	arg_pid_callback_data := gi.NewPointerArgument(nil)
	arg_stdin_fd := gi.NewInt32Argument(stdin_fd)
	arg_stdout_fd := gi.NewInt32Argument(stdout_fd)
	arg_stderr_fd := gi.NewInt32Argument(stderr_fd)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_uris, arg_launch_context, arg_spawn_flags, arg_user_setup, arg_user_setup_data, arg_pid_callback, arg_pid_callback_data, arg_stdin_fd, arg_stdout_fd, arg_stderr_fd, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.UnregisterFClosure(cId1)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_desktop_app_info_list_actions
//
// [ result ] trans: nothing
//
func (v DesktopAppInfo) ListActions() (result gi.CStrArray) {
	iv, err := _I.Get1(2086, "Gio", "DesktopAppInfo", "list_actions", 139, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// ignore GType struct DesktopAppInfoClass

// Interface DesktopAppInfoLookup
type DesktopAppInfoLookup struct {
	DesktopAppInfoLookupIfc
	P unsafe.Pointer
}
type DesktopAppInfoLookupIfc struct{}
type IDesktopAppInfoLookup interface{ P_DesktopAppInfoLookup() unsafe.Pointer }

func (v DesktopAppInfoLookup) P_DesktopAppInfoLookup() unsafe.Pointer { return v.P }
func DesktopAppInfoLookupGetType() gi.GType {
	ret := _I.GetGType1(270, "Gio", "DesktopAppInfoLookup")
	return ret
}

// Deprecated
//
// g_desktop_app_info_lookup_get_default_for_uri_scheme
//
// [ uri_scheme ] trans: nothing
//
// [ result ] trans: everything
//
func (v *DesktopAppInfoLookupIfc) GetDefaultForUriScheme(uri_scheme string) (result AppInfo) {
	iv, err := _I.Get1(2087, "Gio", "DesktopAppInfoLookup", "get_default_for_uri_scheme", 141, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri_scheme := gi.CString(uri_scheme)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_uri_scheme := gi.NewStringArgument(c_uri_scheme)
	args := []gi.Argument{arg_v, arg_uri_scheme}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_uri_scheme)
	result.P = ret.Pointer()
	return
}

// ignore GType struct DesktopAppInfoLookupIface

type DesktopAppLaunchCallback func(appinfo DesktopAppInfo, pid int32)

func CallDesktopAppLaunchCallback(fn DesktopAppLaunchCallback, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	appinfo := WrapDesktopAppInfo(*(*unsafe.Pointer)(args[0]))
	pid := *(*int32)(args[1])
	fn(appinfo, pid)
}

// Interface Drive
type Drive struct {
	DriveIfc
	P unsafe.Pointer
}
type DriveIfc struct{}
type IDrive interface{ P_Drive() unsafe.Pointer }

func (v Drive) P_Drive() unsafe.Pointer { return v.P }
func DriveGetType() gi.GType {
	ret := _I.GetGType1(271, "Gio", "Drive")
	return ret
}

// g_drive_can_eject
//
// [ result ] trans: nothing
//
func (v *DriveIfc) CanEject() (result bool) {
	iv, err := _I.Get1(2088, "Gio", "Drive", "can_eject", 144, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_drive_can_poll_for_media
//
// [ result ] trans: nothing
//
func (v *DriveIfc) CanPollForMedia() (result bool) {
	iv, err := _I.Get1(2089, "Gio", "Drive", "can_poll_for_media", 144, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_drive_can_start
//
// [ result ] trans: nothing
//
func (v *DriveIfc) CanStart() (result bool) {
	iv, err := _I.Get1(2090, "Gio", "Drive", "can_start", 144, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_drive_can_start_degraded
//
// [ result ] trans: nothing
//
func (v *DriveIfc) CanStartDegraded() (result bool) {
	iv, err := _I.Get1(2091, "Gio", "Drive", "can_start_degraded", 144, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_drive_can_stop
//
// [ result ] trans: nothing
//
func (v *DriveIfc) CanStop() (result bool) {
	iv, err := _I.Get1(2092, "Gio", "Drive", "can_stop", 144, 4, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// g_drive_eject
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *DriveIfc) Eject(flags MountUnmountFlags, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2093, "Gio", "Drive", "eject", 144, 5, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// g_drive_eject_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *DriveIfc) EjectFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2094, "Gio", "Drive", "eject_finish", 144, 6, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_drive_eject_with_operation
//
// [ flags ] trans: nothing
//
// [ mount_operation ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *DriveIfc) EjectWithOperation(flags MountUnmountFlags, mount_operation IMountOperation, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2095, "Gio", "Drive", "eject_with_operation", 144, 7, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if mount_operation != nil {
		tmp = mount_operation.P_MountOperation()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_mount_operation := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_mount_operation, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_drive_eject_with_operation_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *DriveIfc) EjectWithOperationFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2096, "Gio", "Drive", "eject_with_operation_finish", 144, 8, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_drive_enumerate_identifiers
//
// [ result ] trans: everything
//
func (v *DriveIfc) EnumerateIdentifiers() (result gi.CStrArray) {
	iv, err := _I.Get1(2097, "Gio", "Drive", "enumerate_identifiers", 144, 9, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_drive_get_icon
//
// [ result ] trans: everything
//
func (v *DriveIfc) GetIcon() (result Icon) {
	iv, err := _I.Get1(2098, "Gio", "Drive", "get_icon", 144, 10, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_drive_get_identifier
//
// [ kind ] trans: nothing
//
// [ result ] trans: everything
//
func (v *DriveIfc) GetIdentifier(kind string) (result string) {
	iv, err := _I.Get1(2099, "Gio", "Drive", "get_identifier", 144, 11, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_kind := gi.CString(kind)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_kind := gi.NewStringArgument(c_kind)
	args := []gi.Argument{arg_v, arg_kind}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_kind)
	result = ret.String().Take()
	return
}

// g_drive_get_name
//
// [ result ] trans: everything
//
func (v *DriveIfc) GetName() (result string) {
	iv, err := _I.Get1(2100, "Gio", "Drive", "get_name", 144, 12, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_drive_get_sort_key
//
// [ result ] trans: nothing
//
func (v *DriveIfc) GetSortKey() (result string) {
	iv, err := _I.Get1(2101, "Gio", "Drive", "get_sort_key", 144, 13, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_drive_get_start_stop_type
//
// [ result ] trans: nothing
//
func (v *DriveIfc) GetStartStopType() (result DriveStartStopTypeEnum) {
	iv, err := _I.Get1(2102, "Gio", "Drive", "get_start_stop_type", 144, 14, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = DriveStartStopTypeEnum(ret.Int())
	return
}

// g_drive_get_symbolic_icon
//
// [ result ] trans: everything
//
func (v *DriveIfc) GetSymbolicIcon() (result Icon) {
	iv, err := _I.Get1(2103, "Gio", "Drive", "get_symbolic_icon", 144, 15, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_drive_get_volumes
//
// [ result ] trans: everything
//
func (v *DriveIfc) GetVolumes() (result List) {
	iv, err := _I.Get1(2104, "Gio", "Drive", "get_volumes", 144, 16, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_drive_has_media
//
// [ result ] trans: nothing
//
func (v *DriveIfc) HasMedia() (result bool) {
	iv, err := _I.Get1(2105, "Gio", "Drive", "has_media", 144, 17, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_drive_has_volumes
//
// [ result ] trans: nothing
//
func (v *DriveIfc) HasVolumes() (result bool) {
	iv, err := _I.Get1(2106, "Gio", "Drive", "has_volumes", 144, 18, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_drive_is_media_check_automatic
//
// [ result ] trans: nothing
//
func (v *DriveIfc) IsMediaCheckAutomatic() (result bool) {
	iv, err := _I.Get1(2107, "Gio", "Drive", "is_media_check_automatic", 144, 19, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_drive_is_media_removable
//
// [ result ] trans: nothing
//
func (v *DriveIfc) IsMediaRemovable() (result bool) {
	iv, err := _I.Get1(2108, "Gio", "Drive", "is_media_removable", 144, 20, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_drive_is_removable
//
// [ result ] trans: nothing
//
func (v *DriveIfc) IsRemovable() (result bool) {
	iv, err := _I.Get1(2109, "Gio", "Drive", "is_removable", 144, 21, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_drive_poll_for_media
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *DriveIfc) PollForMedia(cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2110, "Gio", "Drive", "poll_for_media", 144, 22, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_drive_poll_for_media_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *DriveIfc) PollForMediaFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2111, "Gio", "Drive", "poll_for_media_finish", 144, 23, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_drive_start
//
// [ flags ] trans: nothing
//
// [ mount_operation ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *DriveIfc) Start(flags DriveStartFlags, mount_operation IMountOperation, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2112, "Gio", "Drive", "start", 144, 24, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if mount_operation != nil {
		tmp = mount_operation.P_MountOperation()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_mount_operation := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_mount_operation, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_drive_start_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *DriveIfc) StartFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2113, "Gio", "Drive", "start_finish", 144, 25, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_drive_stop
//
// [ flags ] trans: nothing
//
// [ mount_operation ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *DriveIfc) Stop(flags MountUnmountFlags, mount_operation IMountOperation, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2114, "Gio", "Drive", "stop", 144, 26, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if mount_operation != nil {
		tmp = mount_operation.P_MountOperation()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_mount_operation := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_mount_operation, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_drive_stop_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *DriveIfc) StopFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2115, "Gio", "Drive", "stop_finish", 144, 27, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// ignore GType struct DriveIface

// Flags DriveStartFlags
type DriveStartFlags int

const (
	DriveStartFlagsNone DriveStartFlags = 0
)

func DriveStartFlagsGetType() gi.GType {
	ret := _I.GetGType1(272, "Gio", "DriveStartFlags")
	return ret
}

// Enum DriveStartStopType
type DriveStartStopTypeEnum int

const (
	DriveStartStopTypeUnknown   DriveStartStopTypeEnum = 0
	DriveStartStopTypeShutdown  DriveStartStopTypeEnum = 1
	DriveStartStopTypeNetwork   DriveStartStopTypeEnum = 2
	DriveStartStopTypeMultidisk DriveStartStopTypeEnum = 3
	DriveStartStopTypePassword  DriveStartStopTypeEnum = 4
)

func DriveStartStopTypeGetType() gi.GType {
	ret := _I.GetGType1(273, "Gio", "DriveStartStopType")
	return ret
}

// Interface DtlsClientConnection
type DtlsClientConnection struct {
	DtlsClientConnectionIfc
	P unsafe.Pointer
}
type DtlsClientConnectionIfc struct{}
type IDtlsClientConnection interface{ P_DtlsClientConnection() unsafe.Pointer }

func (v DtlsClientConnection) P_DtlsClientConnection() unsafe.Pointer { return v.P }
func DtlsClientConnectionGetType() gi.GType {
	ret := _I.GetGType1(274, "Gio", "DtlsClientConnection")
	return ret
}

// g_dtls_client_connection_new
//
// [ base_socket ] trans: nothing
//
// [ server_identity ] trans: nothing
//
// [ result ] trans: everything
//
func DtlsClientConnectionNew1(base_socket IDatagramBased, server_identity ISocketConnectable) (result DtlsClientConnection, err error) {
	iv, err := _I.Get1(2116, "Gio", "DtlsClientConnection", "new", 148, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if base_socket != nil {
		tmp = base_socket.P_DatagramBased()
	}
	var tmp1 unsafe.Pointer
	if server_identity != nil {
		tmp1 = server_identity.P_SocketConnectable()
	}
	arg_base_socket := gi.NewPointerArgument(tmp)
	arg_server_identity := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_base_socket, arg_server_identity, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dtls_client_connection_get_accepted_cas
//
// [ result ] trans: everything
//
func (v *DtlsClientConnectionIfc) GetAcceptedCas() (result List) {
	iv, err := _I.Get1(2117, "Gio", "DtlsClientConnection", "get_accepted_cas", 148, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dtls_client_connection_get_server_identity
//
// [ result ] trans: nothing
//
func (v *DtlsClientConnectionIfc) GetServerIdentity() (result SocketConnectable) {
	iv, err := _I.Get1(2118, "Gio", "DtlsClientConnection", "get_server_identity", 148, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dtls_client_connection_get_validation_flags
//
// [ result ] trans: nothing
//
func (v *DtlsClientConnectionIfc) GetValidationFlags() (result TlsCertificateFlags) {
	iv, err := _I.Get1(2119, "Gio", "DtlsClientConnection", "get_validation_flags", 148, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = TlsCertificateFlags(ret.Int())
	return
}

// g_dtls_client_connection_set_server_identity
//
// [ identity ] trans: nothing
//
func (v *DtlsClientConnectionIfc) SetServerIdentity(identity ISocketConnectable) {
	iv, err := _I.Get1(2120, "Gio", "DtlsClientConnection", "set_server_identity", 148, 4, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if identity != nil {
		tmp = identity.P_SocketConnectable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_identity := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_identity}
	iv.Call(args, nil, nil)
}

// g_dtls_client_connection_set_validation_flags
//
// [ flags ] trans: nothing
//
func (v *DtlsClientConnectionIfc) SetValidationFlags(flags TlsCertificateFlags) {
	iv, err := _I.Get1(2121, "Gio", "DtlsClientConnection", "set_validation_flags", 148, 5, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_flags}
	iv.Call(args, nil, nil)
}

// ignore GType struct DtlsClientConnectionInterface

// Interface DtlsConnection
type DtlsConnection struct {
	DtlsConnectionIfc
	P unsafe.Pointer
}
type DtlsConnectionIfc struct{}
type IDtlsConnection interface{ P_DtlsConnection() unsafe.Pointer }

func (v DtlsConnection) P_DtlsConnection() unsafe.Pointer { return v.P }
func DtlsConnectionGetType() gi.GType {
	ret := _I.GetGType1(275, "Gio", "DtlsConnection")
	return ret
}

// g_dtls_connection_close
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *DtlsConnectionIfc) Close(cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2122, "Gio", "DtlsConnection", "close", 150, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_dtls_connection_close_async
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *DtlsConnectionIfc) CloseAsync(io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2123, "Gio", "DtlsConnection", "close_async", 150, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_dtls_connection_close_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *DtlsConnectionIfc) CloseFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2124, "Gio", "DtlsConnection", "close_finish", 150, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_dtls_connection_emit_accept_certificate
//
// [ peer_cert ] trans: nothing
//
// [ errors ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *DtlsConnectionIfc) EmitAcceptCertificate(peer_cert ITlsCertificate, errors TlsCertificateFlags) (result bool) {
	iv, err := _I.Get1(2125, "Gio", "DtlsConnection", "emit_accept_certificate", 150, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if peer_cert != nil {
		tmp = peer_cert.P_TlsCertificate()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_peer_cert := gi.NewPointerArgument(tmp)
	arg_errors := gi.NewIntArgument(int(errors))
	args := []gi.Argument{arg_v, arg_peer_cert, arg_errors}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_dtls_connection_get_certificate
//
// [ result ] trans: nothing
//
func (v *DtlsConnectionIfc) GetCertificate() (result TlsCertificate) {
	iv, err := _I.Get1(2126, "Gio", "DtlsConnection", "get_certificate", 150, 4, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dtls_connection_get_database
//
// [ result ] trans: nothing
//
func (v *DtlsConnectionIfc) GetDatabase() (result TlsDatabase) {
	iv, err := _I.Get1(2127, "Gio", "DtlsConnection", "get_database", 150, 5, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dtls_connection_get_interaction
//
// [ result ] trans: nothing
//
func (v *DtlsConnectionIfc) GetInteraction() (result TlsInteraction) {
	iv, err := _I.Get1(2128, "Gio", "DtlsConnection", "get_interaction", 150, 6, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dtls_connection_get_peer_certificate
//
// [ result ] trans: nothing
//
func (v *DtlsConnectionIfc) GetPeerCertificate() (result TlsCertificate) {
	iv, err := _I.Get1(2129, "Gio", "DtlsConnection", "get_peer_certificate", 150, 7, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dtls_connection_get_peer_certificate_errors
//
// [ result ] trans: nothing
//
func (v *DtlsConnectionIfc) GetPeerCertificateErrors() (result TlsCertificateFlags) {
	iv, err := _I.Get1(2130, "Gio", "DtlsConnection", "get_peer_certificate_errors", 150, 8, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = TlsCertificateFlags(ret.Int())
	return
}

// g_dtls_connection_get_rehandshake_mode
//
// [ result ] trans: nothing
//
func (v *DtlsConnectionIfc) GetRehandshakeMode() (result TlsRehandshakeModeEnum) {
	iv, err := _I.Get1(2131, "Gio", "DtlsConnection", "get_rehandshake_mode", 150, 9, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = TlsRehandshakeModeEnum(ret.Int())
	return
}

// g_dtls_connection_get_require_close_notify
//
// [ result ] trans: nothing
//
func (v *DtlsConnectionIfc) GetRequireCloseNotify() (result bool) {
	iv, err := _I.Get1(2132, "Gio", "DtlsConnection", "get_require_close_notify", 150, 10, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_dtls_connection_handshake
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *DtlsConnectionIfc) Handshake(cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2133, "Gio", "DtlsConnection", "handshake", 150, 11, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_dtls_connection_handshake_async
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *DtlsConnectionIfc) HandshakeAsync(io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2134, "Gio", "DtlsConnection", "handshake_async", 150, 12, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_dtls_connection_handshake_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *DtlsConnectionIfc) HandshakeFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2135, "Gio", "DtlsConnection", "handshake_finish", 150, 13, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_dtls_connection_set_certificate
//
// [ certificate ] trans: nothing
//
func (v *DtlsConnectionIfc) SetCertificate(certificate ITlsCertificate) {
	iv, err := _I.Get1(2136, "Gio", "DtlsConnection", "set_certificate", 150, 14, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if certificate != nil {
		tmp = certificate.P_TlsCertificate()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_certificate := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_certificate}
	iv.Call(args, nil, nil)
}

// g_dtls_connection_set_database
//
// [ database ] trans: nothing
//
func (v *DtlsConnectionIfc) SetDatabase(database ITlsDatabase) {
	iv, err := _I.Get1(2137, "Gio", "DtlsConnection", "set_database", 150, 15, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if database != nil {
		tmp = database.P_TlsDatabase()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_database := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_database}
	iv.Call(args, nil, nil)
}

// g_dtls_connection_set_interaction
//
// [ interaction ] trans: nothing
//
func (v *DtlsConnectionIfc) SetInteraction(interaction ITlsInteraction) {
	iv, err := _I.Get1(2138, "Gio", "DtlsConnection", "set_interaction", 150, 16, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if interaction != nil {
		tmp = interaction.P_TlsInteraction()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_interaction := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_interaction}
	iv.Call(args, nil, nil)
}

// g_dtls_connection_set_rehandshake_mode
//
// [ mode ] trans: nothing
//
func (v *DtlsConnectionIfc) SetRehandshakeMode(mode TlsRehandshakeModeEnum) {
	iv, err := _I.Get1(2139, "Gio", "DtlsConnection", "set_rehandshake_mode", 150, 17, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_mode := gi.NewIntArgument(int(mode))
	args := []gi.Argument{arg_v, arg_mode}
	iv.Call(args, nil, nil)
}

// g_dtls_connection_set_require_close_notify
//
// [ require_close_notify ] trans: nothing
//
func (v *DtlsConnectionIfc) SetRequireCloseNotify(require_close_notify bool) {
	iv, err := _I.Get1(2140, "Gio", "DtlsConnection", "set_require_close_notify", 150, 18, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_require_close_notify := gi.NewBoolArgument(require_close_notify)
	args := []gi.Argument{arg_v, arg_require_close_notify}
	iv.Call(args, nil, nil)
}

// g_dtls_connection_shutdown
//
// [ shutdown_read ] trans: nothing
//
// [ shutdown_write ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *DtlsConnectionIfc) Shutdown(shutdown_read bool, shutdown_write bool, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2141, "Gio", "DtlsConnection", "shutdown", 150, 19, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_shutdown_read := gi.NewBoolArgument(shutdown_read)
	arg_shutdown_write := gi.NewBoolArgument(shutdown_write)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_shutdown_read, arg_shutdown_write, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_dtls_connection_shutdown_async
//
// [ shutdown_read ] trans: nothing
//
// [ shutdown_write ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *DtlsConnectionIfc) ShutdownAsync(shutdown_read bool, shutdown_write bool, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2142, "Gio", "DtlsConnection", "shutdown_async", 150, 20, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_shutdown_read := gi.NewBoolArgument(shutdown_read)
	arg_shutdown_write := gi.NewBoolArgument(shutdown_write)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_shutdown_read, arg_shutdown_write, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_dtls_connection_shutdown_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *DtlsConnectionIfc) ShutdownFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2143, "Gio", "DtlsConnection", "shutdown_finish", 150, 21, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// ignore GType struct DtlsConnectionInterface

// Interface DtlsServerConnection
type DtlsServerConnection struct {
	DtlsServerConnectionIfc
	P unsafe.Pointer
}
type DtlsServerConnectionIfc struct{}
type IDtlsServerConnection interface{ P_DtlsServerConnection() unsafe.Pointer }

func (v DtlsServerConnection) P_DtlsServerConnection() unsafe.Pointer { return v.P }
func DtlsServerConnectionGetType() gi.GType {
	ret := _I.GetGType1(276, "Gio", "DtlsServerConnection")
	return ret
}

// g_dtls_server_connection_new
//
// [ base_socket ] trans: nothing
//
// [ certificate ] trans: nothing
//
// [ result ] trans: everything
//
func DtlsServerConnectionNew1(base_socket IDatagramBased, certificate ITlsCertificate) (result DtlsServerConnection, err error) {
	iv, err := _I.Get1(2144, "Gio", "DtlsServerConnection", "new", 152, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if base_socket != nil {
		tmp = base_socket.P_DatagramBased()
	}
	var tmp1 unsafe.Pointer
	if certificate != nil {
		tmp1 = certificate.P_TlsCertificate()
	}
	arg_base_socket := gi.NewPointerArgument(tmp)
	arg_certificate := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_base_socket, arg_certificate, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// ignore GType struct DtlsServerConnectionInterface

// Object Emblem
type Emblem struct {
	IconIfc
	Object
}

func WrapEmblem(p unsafe.Pointer) (r Emblem) { r.P = p; return }

type IEmblem interface{ P_Emblem() unsafe.Pointer }

func (v Emblem) P_Emblem() unsafe.Pointer { return v.P }
func (v Emblem) P_Icon() unsafe.Pointer   { return v.P }
func EmblemGetType() gi.GType {
	ret := _I.GetGType1(277, "Gio", "Emblem")
	return ret
}

// g_emblem_new
//
// [ icon ] trans: nothing
//
// [ result ] trans: everything
//
func NewEmblem(icon IIcon) (result Emblem) {
	iv, err := _I.Get1(2145, "Gio", "Emblem", "new", 154, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon != nil {
		tmp = icon.P_Icon()
	}
	arg_icon := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_icon}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_emblem_new_with_origin
//
// [ icon ] trans: nothing
//
// [ origin ] trans: nothing
//
// [ result ] trans: everything
//
func NewEmblemWithOrigin(icon IIcon, origin EmblemOriginEnum) (result Emblem) {
	iv, err := _I.Get1(2146, "Gio", "Emblem", "new_with_origin", 154, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon != nil {
		tmp = icon.P_Icon()
	}
	arg_icon := gi.NewPointerArgument(tmp)
	arg_origin := gi.NewIntArgument(int(origin))
	args := []gi.Argument{arg_icon, arg_origin}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_emblem_get_icon
//
// [ result ] trans: nothing
//
func (v Emblem) GetIcon() (result Icon) {
	iv, err := _I.Get1(2147, "Gio", "Emblem", "get_icon", 154, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_emblem_get_origin
//
// [ result ] trans: nothing
//
func (v Emblem) GetOrigin() (result EmblemOriginEnum) {
	iv, err := _I.Get1(2148, "Gio", "Emblem", "get_origin", 154, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = EmblemOriginEnum(ret.Int())
	return
}

// ignore GType struct EmblemClass

// Enum EmblemOrigin
type EmblemOriginEnum int

const (
	EmblemOriginUnknown      EmblemOriginEnum = 0
	EmblemOriginDevice       EmblemOriginEnum = 1
	EmblemOriginLivemetadata EmblemOriginEnum = 2
	EmblemOriginTag          EmblemOriginEnum = 3
)

func EmblemOriginGetType() gi.GType {
	ret := _I.GetGType1(278, "Gio", "EmblemOrigin")
	return ret
}

// Object EmblemedIcon
type EmblemedIcon struct {
	IconIfc
	Object
}

func WrapEmblemedIcon(p unsafe.Pointer) (r EmblemedIcon) { r.P = p; return }

type IEmblemedIcon interface{ P_EmblemedIcon() unsafe.Pointer }

func (v EmblemedIcon) P_EmblemedIcon() unsafe.Pointer { return v.P }
func (v EmblemedIcon) P_Icon() unsafe.Pointer         { return v.P }
func EmblemedIconGetType() gi.GType {
	ret := _I.GetGType1(279, "Gio", "EmblemedIcon")
	return ret
}

// g_emblemed_icon_new
//
// [ icon ] trans: nothing
//
// [ emblem ] trans: nothing
//
// [ result ] trans: everything
//
func NewEmblemedIcon(icon IIcon, emblem IEmblem) (result EmblemedIcon) {
	iv, err := _I.Get1(2149, "Gio", "EmblemedIcon", "new", 157, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon != nil {
		tmp = icon.P_Icon()
	}
	var tmp1 unsafe.Pointer
	if emblem != nil {
		tmp1 = emblem.P_Emblem()
	}
	arg_icon := gi.NewPointerArgument(tmp)
	arg_emblem := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_icon, arg_emblem}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_emblemed_icon_add_emblem
//
// [ emblem ] trans: nothing
//
func (v EmblemedIcon) AddEmblem(emblem IEmblem) {
	iv, err := _I.Get1(2150, "Gio", "EmblemedIcon", "add_emblem", 157, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if emblem != nil {
		tmp = emblem.P_Emblem()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_emblem := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_emblem}
	iv.Call(args, nil, nil)
}

// g_emblemed_icon_clear_emblems
//
func (v EmblemedIcon) ClearEmblems() {
	iv, err := _I.Get1(2151, "Gio", "EmblemedIcon", "clear_emblems", 157, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_emblemed_icon_get_emblems
//
// [ result ] trans: nothing
//
func (v EmblemedIcon) GetEmblems() (result List) {
	iv, err := _I.Get1(2152, "Gio", "EmblemedIcon", "get_emblems", 157, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_emblemed_icon_get_icon
//
// [ result ] trans: nothing
//
func (v EmblemedIcon) GetIcon() (result Icon) {
	iv, err := _I.Get1(2153, "Gio", "EmblemedIcon", "get_icon", 157, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct EmblemedIconClass

// ignore private struct EmblemedIconPrivate, type of EmblemedIcon is object

// Interface File
type File struct {
	FileIfc
	P unsafe.Pointer
}
type FileIfc struct{}
type IFile interface{ P_File() unsafe.Pointer }

func (v File) P_File() unsafe.Pointer { return v.P }
func FileGetType() gi.GType {
	ret := _I.GetGType1(280, "Gio", "File")
	return ret
}

// g_file_new_for_commandline_arg
//
// [ arg ] trans: nothing
//
// [ result ] trans: everything
//
func FileNewForCommandlineArg1(arg string) (result File) {
	iv, err := _I.Get1(2154, "Gio", "File", "new_for_commandline_arg", 241, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_arg := gi.CString(arg)
	arg_arg := gi.NewStringArgument(c_arg)
	args := []gi.Argument{arg_arg}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_arg)
	result.P = ret.Pointer()
	return
}

// g_file_new_for_commandline_arg_and_cwd
//
// [ arg ] trans: nothing
//
// [ cwd ] trans: nothing
//
// [ result ] trans: everything
//
func FileNewForCommandlineArgAndCwd1(arg string, cwd string) (result File) {
	iv, err := _I.Get1(2155, "Gio", "File", "new_for_commandline_arg_and_cwd", 241, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_arg := gi.CString(arg)
	c_cwd := gi.CString(cwd)
	arg_arg := gi.NewStringArgument(c_arg)
	arg_cwd := gi.NewStringArgument(c_cwd)
	args := []gi.Argument{arg_arg, arg_cwd}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_arg)
	gi.Free(c_cwd)
	result.P = ret.Pointer()
	return
}

// g_file_new_for_path
//
// [ path ] trans: nothing
//
// [ result ] trans: everything
//
func FileNewForPath1(path string) (result File) {
	iv, err := _I.Get1(2156, "Gio", "File", "new_for_path", 241, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	arg_path := gi.NewStringArgument(c_path)
	args := []gi.Argument{arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_path)
	result.P = ret.Pointer()
	return
}

// g_file_new_for_uri
//
// [ uri ] trans: nothing
//
// [ result ] trans: everything
//
func FileNewForUri1(uri string) (result File) {
	iv, err := _I.Get1(2157, "Gio", "File", "new_for_uri", 241, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri := gi.CString(uri)
	arg_uri := gi.NewStringArgument(c_uri)
	args := []gi.Argument{arg_uri}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_uri)
	result.P = ret.Pointer()
	return
}

// g_file_new_tmp
//
// [ tmpl ] trans: nothing
//
// [ iostream ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func FileNewTmp1(tmpl string) (result File, iostream FileIOStream, err error) {
	iv, err := _I.Get1(2158, "Gio", "File", "new_tmp", 241, 4, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	c_tmpl := gi.CString(tmpl)
	arg_tmpl := gi.NewStringArgument(c_tmpl)
	arg_iostream := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_tmpl, arg_iostream, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_tmpl)
	err = gi.ToError(outArgs[1].Pointer())
	iostream.P = outArgs[0].Pointer()
	result.P = ret.Pointer()
	return
}

// g_file_parse_name
//
// [ parse_name ] trans: nothing
//
// [ result ] trans: everything
//
func FileParseName1(parse_name string) (result File) {
	iv, err := _I.Get1(2159, "Gio", "File", "parse_name", 241, 5, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_parse_name := gi.CString(parse_name)
	arg_parse_name := gi.NewStringArgument(c_parse_name)
	args := []gi.Argument{arg_parse_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_parse_name)
	result.P = ret.Pointer()
	return
}

// g_file_append_to
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) AppendTo(flags FileCreateFlags, cancellable ICancellable) (result FileOutputStream, err error) {
	iv, err := _I.Get1(2160, "Gio", "File", "append_to", 241, 6, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_append_to_async
//
// [ flags ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) AppendToAsync(flags FileCreateFlags, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2161, "Gio", "File", "append_to_async", 241, 7, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_file_append_to_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) AppendToFinish(res IAsyncResult) (result FileOutputStream, err error) {
	iv, err := _I.Get1(2162, "Gio", "File", "append_to_finish", 241, 8, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_copy
//
// [ destination ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ progress_callback ] trans: nothing
//
// [ progress_callback_data ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) Copy(destination IFile, flags FileCopyFlags, cancellable ICancellable, progress_callback FileProgressCallback) (result bool, err error) {
	iv, err := _I.Get1(2163, "Gio", "File", "copy", 241, 9, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if destination != nil {
		tmp = destination.P_File()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var cId uint
	var funcPtr unsafe.Pointer
	if progress_callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "FileProgressCallback")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallFileProgressCallback(progress_callback, __result, __args)
		}, gi.ScopeCall, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_destination := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_progress_callback := gi.NewPointerArgument(funcPtr)
	arg_progress_callback_data := gi.NewPointerArgument(nil)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_destination, arg_flags, arg_cancellable, arg_progress_callback, arg_progress_callback_data, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.UnregisterFClosure(cId)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_file_copy_async
//
// [ destination ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ progress_callback ] trans: nothing
//
// [ progress_callback_data ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) CopyAsync(destination IFile, flags FileCopyFlags, io_priority int32, cancellable ICancellable, progress_callback FileProgressCallback, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2164, "Gio", "File", "copy_async", 241, 10, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if destination != nil {
		tmp = destination.P_File()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if progress_callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "FileProgressCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallFileProgressCallback(progress_callback, __result, __args)
		}, gi.ScopeNotified, callableInfo)
		callableInfo.Unref()
	}
	var funcPtr1 unsafe.Pointer
	if callback != nil {
		callableInfo1 := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr1 = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo1)
		callableInfo1.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_destination := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_progress_callback := gi.NewPointerArgument(funcPtr)
	arg_progress_callback_data := gi.NewPointerArgument(nil)
	arg_callback := gi.NewPointerArgument(funcPtr1)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_destination, arg_flags, arg_io_priority, arg_cancellable, arg_progress_callback, arg_progress_callback_data, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_file_copy_attributes
//
// [ destination ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) CopyAttributes(destination IFile, flags FileCopyFlags, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2165, "Gio", "File", "copy_attributes", 241, 11, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if destination != nil {
		tmp = destination.P_File()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_destination := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_destination, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_file_copy_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) CopyFinish(res IAsyncResult) (result bool, err error) {
	iv, err := _I.Get1(2166, "Gio", "File", "copy_finish", 241, 12, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_file_create
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) Create(flags FileCreateFlags, cancellable ICancellable) (result FileOutputStream, err error) {
	iv, err := _I.Get1(2167, "Gio", "File", "create", 241, 13, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_create_async
//
// [ flags ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) CreateAsync(flags FileCreateFlags, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2168, "Gio", "File", "create_async", 241, 14, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_file_create_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) CreateFinish(res IAsyncResult) (result FileOutputStream, err error) {
	iv, err := _I.Get1(2169, "Gio", "File", "create_finish", 241, 15, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_create_readwrite
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) CreateReadwrite(flags FileCreateFlags, cancellable ICancellable) (result FileIOStream, err error) {
	iv, err := _I.Get1(2170, "Gio", "File", "create_readwrite", 241, 16, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_create_readwrite_async
//
// [ flags ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) CreateReadwriteAsync(flags FileCreateFlags, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2171, "Gio", "File", "create_readwrite_async", 241, 17, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_file_create_readwrite_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) CreateReadwriteFinish(res IAsyncResult) (result FileIOStream, err error) {
	iv, err := _I.Get1(2172, "Gio", "File", "create_readwrite_finish", 241, 18, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_delete
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) Delete(cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2173, "Gio", "File", "delete", 241, 19, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_file_delete_async
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) DeleteAsync(io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2174, "Gio", "File", "delete_async", 241, 20, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_file_delete_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *FileIfc) DeleteFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2175, "Gio", "File", "delete_finish", 241, 21, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_file_dup
//
// [ result ] trans: everything
//
func (v *FileIfc) Dup() (result File) {
	iv, err := _I.Get1(2176, "Gio", "File", "dup", 241, 22, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// g_file_eject_mountable
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) EjectMountable(flags MountUnmountFlags, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2177, "Gio", "File", "eject_mountable", 241, 23, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// g_file_eject_mountable_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *FileIfc) EjectMountableFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2178, "Gio", "File", "eject_mountable_finish", 241, 24, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_file_eject_mountable_with_operation
//
// [ flags ] trans: nothing
//
// [ mount_operation ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) EjectMountableWithOperation(flags MountUnmountFlags, mount_operation IMountOperation, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2179, "Gio", "File", "eject_mountable_with_operation", 241, 25, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if mount_operation != nil {
		tmp = mount_operation.P_MountOperation()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_mount_operation := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_mount_operation, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_file_eject_mountable_with_operation_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *FileIfc) EjectMountableWithOperationFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2180, "Gio", "File", "eject_mountable_with_operation_finish", 241, 26, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_file_enumerate_children
//
// [ attributes ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) EnumerateChildren(attributes string, flags FileQueryInfoFlags, cancellable ICancellable) (result FileEnumerator, err error) {
	iv, err := _I.Get1(2181, "Gio", "File", "enumerate_children", 241, 27, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_attributes := gi.CString(attributes)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_attributes := gi.NewStringArgument(c_attributes)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_attributes, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_attributes)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_enumerate_children_async
//
// [ attributes ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) EnumerateChildrenAsync(attributes string, flags FileQueryInfoFlags, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2182, "Gio", "File", "enumerate_children_async", 241, 28, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attributes := gi.CString(attributes)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_attributes := gi.NewStringArgument(c_attributes)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_attributes, arg_flags, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_attributes)
}

// g_file_enumerate_children_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) EnumerateChildrenFinish(res IAsyncResult) (result FileEnumerator, err error) {
	iv, err := _I.Get1(2183, "Gio", "File", "enumerate_children_finish", 241, 29, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_equal
//
// [ file2 ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) Equal(file2 IFile) (result bool) {
	iv, err := _I.Get1(2184, "Gio", "File", "equal", 241, 30, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if file2 != nil {
		tmp = file2.P_File()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_file2 := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_file2}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_file_find_enclosing_mount
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) FindEnclosingMount(cancellable ICancellable) (result Mount, err error) {
	iv, err := _I.Get1(2185, "Gio", "File", "find_enclosing_mount", 241, 31, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_find_enclosing_mount_async
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) FindEnclosingMountAsync(io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2186, "Gio", "File", "find_enclosing_mount_async", 241, 32, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_file_find_enclosing_mount_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) FindEnclosingMountFinish(res IAsyncResult) (result Mount, err error) {
	iv, err := _I.Get1(2187, "Gio", "File", "find_enclosing_mount_finish", 241, 33, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_get_basename
//
// [ result ] trans: everything
//
func (v *FileIfc) GetBasename() (result string) {
	iv, err := _I.Get1(2188, "Gio", "File", "get_basename", 241, 34, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_file_get_child
//
// [ name ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) GetChild(name string) (result File) {
	iv, err := _I.Get1(2189, "Gio", "File", "get_child", 241, 35, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// g_file_get_child_for_display_name
//
// [ display_name ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) GetChildForDisplayName(display_name string) (result File, err error) {
	iv, err := _I.Get1(2190, "Gio", "File", "get_child_for_display_name", 241, 36, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_display_name := gi.CString(display_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_display_name := gi.NewStringArgument(c_display_name)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_display_name, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_display_name)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_get_parent
//
// [ result ] trans: everything
//
func (v *FileIfc) GetParent() (result File) {
	iv, err := _I.Get1(2191, "Gio", "File", "get_parent", 241, 37, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_file_get_parse_name
//
// [ result ] trans: everything
//
func (v *FileIfc) GetParseName() (result string) {
	iv, err := _I.Get1(2192, "Gio", "File", "get_parse_name", 241, 38, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_file_get_path
//
// [ result ] trans: everything
//
func (v *FileIfc) GetPath() (result string) {
	iv, err := _I.Get1(2193, "Gio", "File", "get_path", 241, 39, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_file_get_relative_path
//
// [ descendant ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) GetRelativePath(descendant IFile) (result string) {
	iv, err := _I.Get1(2194, "Gio", "File", "get_relative_path", 241, 40, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if descendant != nil {
		tmp = descendant.P_File()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_descendant := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_descendant}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_file_get_uri
//
// [ result ] trans: everything
//
func (v *FileIfc) GetUri() (result string) {
	iv, err := _I.Get1(2195, "Gio", "File", "get_uri", 241, 41, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_file_get_uri_scheme
//
// [ result ] trans: everything
//
func (v *FileIfc) GetUriScheme() (result string) {
	iv, err := _I.Get1(2196, "Gio", "File", "get_uri_scheme", 241, 42, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_file_has_parent
//
// [ parent ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) HasParent(parent IFile) (result bool) {
	iv, err := _I.Get1(2197, "Gio", "File", "has_parent", 241, 43, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if parent != nil {
		tmp = parent.P_File()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_parent := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_parent}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_file_has_prefix
//
// [ prefix ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) HasPrefix(prefix IFile) (result bool) {
	iv, err := _I.Get1(2198, "Gio", "File", "has_prefix", 241, 44, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if prefix != nil {
		tmp = prefix.P_File()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_prefix := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_prefix}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_file_has_uri_scheme
//
// [ uri_scheme ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) HasUriScheme(uri_scheme string) (result bool) {
	iv, err := _I.Get1(2199, "Gio", "File", "has_uri_scheme", 241, 45, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri_scheme := gi.CString(uri_scheme)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_uri_scheme := gi.NewStringArgument(c_uri_scheme)
	args := []gi.Argument{arg_v, arg_uri_scheme}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_uri_scheme)
	result = ret.Bool()
	return
}

// g_file_hash
//
// [ result ] trans: nothing
//
func (v *FileIfc) Hash() (result uint32) {
	iv, err := _I.Get1(2200, "Gio", "File", "hash", 241, 46, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// g_file_is_native
//
// [ result ] trans: nothing
//
func (v *FileIfc) IsNative() (result bool) {
	iv, err := _I.Get1(2201, "Gio", "File", "is_native", 241, 47, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_file_load_bytes
//
// [ cancellable ] trans: nothing
//
// [ etag_out ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func (v *FileIfc) LoadBytes(cancellable ICancellable) (result Bytes, etag_out string, err error) {
	iv, err := _I.Get1(2202, "Gio", "File", "load_bytes", 241, 48, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_etag_out := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_etag_out, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	etag_out = outArgs[0].String().Take()
	result.P = ret.Pointer()
	return
}

// g_file_load_bytes_async
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) LoadBytesAsync(cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2203, "Gio", "File", "load_bytes_async", 241, 49, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_file_load_bytes_finish
//
// [ result ] trans: nothing
//
// [ etag_out ] trans: everything, dir: out
//
// [ result1 ] trans: everything
//
func (v *FileIfc) LoadBytesFinish(result IAsyncResult) (result1 Bytes, etag_out string, err error) {
	iv, err := _I.Get1(2204, "Gio", "File", "load_bytes_finish", 241, 50, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_etag_out := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_result, arg_etag_out, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	etag_out = outArgs[0].String().Take()
	result1.P = ret.Pointer()
	return
}

// g_file_load_contents
//
// [ cancellable ] trans: nothing
//
// [ contents ] trans: everything, dir: out
//
// [ length ] trans: everything, dir: out
//
// [ etag_out ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v *FileIfc) LoadContents(cancellable ICancellable) (result bool, contents gi.Uint8Array, etag_out string, err error) {
	iv, err := _I.Get1(2205, "Gio", "File", "load_contents", 241, 51, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [4]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_contents := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_etag_out := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[3]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_contents, arg_length, arg_etag_out, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var length uint64
	_ = length
	err = gi.ToError(outArgs[3].Pointer())
	contents.P = outArgs[0].Pointer()
	length = outArgs[1].Uint64()
	etag_out = outArgs[2].String().Take()
	contents.Len = int(length)
	result = ret.Bool()
	return
}

// g_file_load_contents_async
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) LoadContentsAsync(cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2206, "Gio", "File", "load_contents_async", 241, 52, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_file_load_contents_finish
//
// [ res ] trans: nothing
//
// [ contents ] trans: everything, dir: out
//
// [ length ] trans: everything, dir: out
//
// [ etag_out ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v *FileIfc) LoadContentsFinish(res IAsyncResult) (result bool, contents gi.Uint8Array, etag_out string, err error) {
	iv, err := _I.Get1(2207, "Gio", "File", "load_contents_finish", 241, 53, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [4]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_res := gi.NewPointerArgument(tmp)
	arg_contents := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_etag_out := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[3]))
	args := []gi.Argument{arg_v, arg_res, arg_contents, arg_length, arg_etag_out, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var length uint64
	_ = length
	err = gi.ToError(outArgs[3].Pointer())
	contents.P = outArgs[0].Pointer()
	length = outArgs[1].Uint64()
	etag_out = outArgs[2].String().Take()
	contents.Len = int(length)
	result = ret.Bool()
	return
}

// g_file_load_partial_contents_finish
//
// [ res ] trans: nothing
//
// [ contents ] trans: everything, dir: out
//
// [ length ] trans: everything, dir: out
//
// [ etag_out ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v *FileIfc) LoadPartialContentsFinish(res IAsyncResult) (result bool, contents gi.Uint8Array, etag_out string, err error) {
	iv, err := _I.Get1(2208, "Gio", "File", "load_partial_contents_finish", 241, 54, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [4]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_res := gi.NewPointerArgument(tmp)
	arg_contents := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_etag_out := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[3]))
	args := []gi.Argument{arg_v, arg_res, arg_contents, arg_length, arg_etag_out, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var length uint64
	_ = length
	err = gi.ToError(outArgs[3].Pointer())
	contents.P = outArgs[0].Pointer()
	length = outArgs[1].Uint64()
	etag_out = outArgs[2].String().Take()
	contents.Len = int(length)
	result = ret.Bool()
	return
}

// g_file_make_directory
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) MakeDirectory(cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2209, "Gio", "File", "make_directory", 241, 55, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_file_make_directory_async
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) MakeDirectoryAsync(io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2210, "Gio", "File", "make_directory_async", 241, 56, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_file_make_directory_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *FileIfc) MakeDirectoryFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2211, "Gio", "File", "make_directory_finish", 241, 57, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_file_make_directory_with_parents
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) MakeDirectoryWithParents(cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2212, "Gio", "File", "make_directory_with_parents", 241, 58, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_file_make_symbolic_link
//
// [ symlink_value ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) MakeSymbolicLink(symlink_value string, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2213, "Gio", "File", "make_symbolic_link", 241, 59, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_symlink_value := gi.CString(symlink_value)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_symlink_value := gi.NewStringArgument(c_symlink_value)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_symlink_value, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_symlink_value)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_file_measure_disk_usage_finish
//
// [ result ] trans: nothing
//
// [ disk_usage ] trans: everything, dir: out
//
// [ num_dirs ] trans: everything, dir: out
//
// [ num_files ] trans: everything, dir: out
//
// [ result1 ] trans: nothing
//
func (v *FileIfc) MeasureDiskUsageFinish(result IAsyncResult) (result1 bool, disk_usage uint64, num_dirs uint64, num_files uint64, err error) {
	iv, err := _I.Get1(2214, "Gio", "File", "measure_disk_usage_finish", 241, 60, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [4]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_disk_usage := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_num_dirs := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_num_files := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[3]))
	args := []gi.Argument{arg_v, arg_result, arg_disk_usage, arg_num_dirs, arg_num_files, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[3].Pointer())
	disk_usage = outArgs[0].Uint64()
	num_dirs = outArgs[1].Uint64()
	num_files = outArgs[2].Uint64()
	result1 = ret.Bool()
	return
}

// g_file_monitor
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) Monitor(flags FileMonitorFlags, cancellable ICancellable) (result FileMonitor, err error) {
	iv, err := _I.Get1(2215, "Gio", "File", "monitor", 241, 61, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_monitor_directory
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) MonitorDirectory(flags FileMonitorFlags, cancellable ICancellable) (result FileMonitor, err error) {
	iv, err := _I.Get1(2216, "Gio", "File", "monitor_directory", 241, 62, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_monitor_file
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) MonitorFile(flags FileMonitorFlags, cancellable ICancellable) (result FileMonitor, err error) {
	iv, err := _I.Get1(2217, "Gio", "File", "monitor_file", 241, 63, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_mount_enclosing_volume
//
// [ flags ] trans: nothing
//
// [ mount_operation ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) MountEnclosingVolume(flags MountMountFlags, mount_operation IMountOperation, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2218, "Gio", "File", "mount_enclosing_volume", 241, 64, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if mount_operation != nil {
		tmp = mount_operation.P_MountOperation()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_mount_operation := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_mount_operation, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_file_mount_enclosing_volume_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *FileIfc) MountEnclosingVolumeFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2219, "Gio", "File", "mount_enclosing_volume_finish", 241, 65, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_file_mount_mountable
//
// [ flags ] trans: nothing
//
// [ mount_operation ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) MountMountable(flags MountMountFlags, mount_operation IMountOperation, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2220, "Gio", "File", "mount_mountable", 241, 66, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if mount_operation != nil {
		tmp = mount_operation.P_MountOperation()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_mount_operation := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_mount_operation, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_file_mount_mountable_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v *FileIfc) MountMountableFinish(result IAsyncResult) (result1 File, err error) {
	iv, err := _I.Get1(2221, "Gio", "File", "mount_mountable_finish", 241, 67, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// g_file_move
//
// [ destination ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ progress_callback ] trans: nothing
//
// [ progress_callback_data ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) Move(destination IFile, flags FileCopyFlags, cancellable ICancellable, progress_callback FileProgressCallback) (result bool, err error) {
	iv, err := _I.Get1(2222, "Gio", "File", "move", 241, 68, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if destination != nil {
		tmp = destination.P_File()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var cId uint
	var funcPtr unsafe.Pointer
	if progress_callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "FileProgressCallback")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallFileProgressCallback(progress_callback, __result, __args)
		}, gi.ScopeCall, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_destination := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_progress_callback := gi.NewPointerArgument(funcPtr)
	arg_progress_callback_data := gi.NewPointerArgument(nil)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_destination, arg_flags, arg_cancellable, arg_progress_callback, arg_progress_callback_data, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.UnregisterFClosure(cId)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_file_open_readwrite
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) OpenReadwrite(cancellable ICancellable) (result FileIOStream, err error) {
	iv, err := _I.Get1(2223, "Gio", "File", "open_readwrite", 241, 69, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_open_readwrite_async
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) OpenReadwriteAsync(io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2224, "Gio", "File", "open_readwrite_async", 241, 70, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_file_open_readwrite_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) OpenReadwriteFinish(res IAsyncResult) (result FileIOStream, err error) {
	iv, err := _I.Get1(2225, "Gio", "File", "open_readwrite_finish", 241, 71, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_peek_path
//
// [ result ] trans: nothing
//
func (v *FileIfc) PeekPath() (result string) {
	iv, err := _I.Get1(2226, "Gio", "File", "peek_path", 241, 72, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_file_poll_mountable
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) PollMountable(cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2227, "Gio", "File", "poll_mountable", 241, 73, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_file_poll_mountable_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *FileIfc) PollMountableFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2228, "Gio", "File", "poll_mountable_finish", 241, 74, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_file_query_default_handler
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) QueryDefaultHandler(cancellable ICancellable) (result AppInfo, err error) {
	iv, err := _I.Get1(2229, "Gio", "File", "query_default_handler", 241, 75, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_query_exists
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) QueryExists(cancellable ICancellable) (result bool) {
	iv, err := _I.Get1(2230, "Gio", "File", "query_exists", 241, 76, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cancellable := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_cancellable}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_file_query_file_type
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) QueryFileType(flags FileQueryInfoFlags, cancellable ICancellable) (result FileTypeEnum) {
	iv, err := _I.Get1(2231, "Gio", "File", "query_file_type", 241, 77, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_flags, arg_cancellable}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = FileTypeEnum(ret.Int())
	return
}

// g_file_query_filesystem_info
//
// [ attributes ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) QueryFilesystemInfo(attributes string, cancellable ICancellable) (result FileInfo, err error) {
	iv, err := _I.Get1(2232, "Gio", "File", "query_filesystem_info", 241, 78, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_attributes := gi.CString(attributes)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_attributes := gi.NewStringArgument(c_attributes)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_attributes, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_attributes)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_query_filesystem_info_async
//
// [ attributes ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) QueryFilesystemInfoAsync(attributes string, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2233, "Gio", "File", "query_filesystem_info_async", 241, 79, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attributes := gi.CString(attributes)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_attributes := gi.NewStringArgument(c_attributes)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_attributes, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_attributes)
}

// g_file_query_filesystem_info_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) QueryFilesystemInfoFinish(res IAsyncResult) (result FileInfo, err error) {
	iv, err := _I.Get1(2234, "Gio", "File", "query_filesystem_info_finish", 241, 80, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_query_info
//
// [ attributes ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) QueryInfo(attributes string, flags FileQueryInfoFlags, cancellable ICancellable) (result FileInfo, err error) {
	iv, err := _I.Get1(2235, "Gio", "File", "query_info", 241, 81, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_attributes := gi.CString(attributes)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_attributes := gi.NewStringArgument(c_attributes)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_attributes, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_attributes)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_query_info_async
//
// [ attributes ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) QueryInfoAsync(attributes string, flags FileQueryInfoFlags, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2236, "Gio", "File", "query_info_async", 241, 82, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attributes := gi.CString(attributes)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_attributes := gi.NewStringArgument(c_attributes)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_attributes, arg_flags, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_attributes)
}

// g_file_query_info_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) QueryInfoFinish(res IAsyncResult) (result FileInfo, err error) {
	iv, err := _I.Get1(2237, "Gio", "File", "query_info_finish", 241, 83, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_query_settable_attributes
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) QuerySettableAttributes(cancellable ICancellable) (result FileAttributeInfoList, err error) {
	iv, err := _I.Get1(2238, "Gio", "File", "query_settable_attributes", 241, 84, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_query_writable_namespaces
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) QueryWritableNamespaces(cancellable ICancellable) (result FileAttributeInfoList, err error) {
	iv, err := _I.Get1(2239, "Gio", "File", "query_writable_namespaces", 241, 85, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_read
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) Read(cancellable ICancellable) (result FileInputStream, err error) {
	iv, err := _I.Get1(2240, "Gio", "File", "read", 241, 86, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_read_async
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) ReadAsync(io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2241, "Gio", "File", "read_async", 241, 87, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_file_read_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) ReadFinish(res IAsyncResult) (result FileInputStream, err error) {
	iv, err := _I.Get1(2242, "Gio", "File", "read_finish", 241, 88, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_replace
//
// [ etag ] trans: nothing
//
// [ make_backup ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) Replace(etag string, make_backup bool, flags FileCreateFlags, cancellable ICancellable) (result FileOutputStream, err error) {
	iv, err := _I.Get1(2243, "Gio", "File", "replace", 241, 89, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_etag := gi.CString(etag)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_etag := gi.NewStringArgument(c_etag)
	arg_make_backup := gi.NewBoolArgument(make_backup)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_etag, arg_make_backup, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_etag)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_replace_async
//
// [ etag ] trans: nothing
//
// [ make_backup ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) ReplaceAsync(etag string, make_backup bool, flags FileCreateFlags, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2244, "Gio", "File", "replace_async", 241, 90, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_etag := gi.CString(etag)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_etag := gi.NewStringArgument(c_etag)
	arg_make_backup := gi.NewBoolArgument(make_backup)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_etag, arg_make_backup, arg_flags, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_etag)
}

// g_file_replace_contents
//
// [ contents ] trans: nothing
//
// [ length ] trans: nothing
//
// [ etag ] trans: nothing
//
// [ make_backup ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ new_etag ] trans: everything, dir: out
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) ReplaceContents(contents gi.Uint8Array, length uint64, etag string, make_backup bool, flags FileCreateFlags, cancellable ICancellable) (result bool, new_etag string, err error) {
	iv, err := _I.Get1(2245, "Gio", "File", "replace_contents", 241, 91, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	c_etag := gi.CString(etag)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_contents := gi.NewPointerArgument(contents.P)
	arg_length := gi.NewUint64Argument(length)
	arg_etag := gi.NewStringArgument(c_etag)
	arg_make_backup := gi.NewBoolArgument(make_backup)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_new_etag := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_contents, arg_length, arg_etag, arg_make_backup, arg_flags, arg_new_etag, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_etag)
	err = gi.ToError(outArgs[1].Pointer())
	new_etag = outArgs[0].String().Take()
	result = ret.Bool()
	return
}

// g_file_replace_contents_async
//
// [ contents ] trans: nothing
//
// [ length ] trans: nothing
//
// [ etag ] trans: nothing
//
// [ make_backup ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) ReplaceContentsAsync(contents gi.Uint8Array, length uint64, etag string, make_backup bool, flags FileCreateFlags, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2246, "Gio", "File", "replace_contents_async", 241, 92, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_etag := gi.CString(etag)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_contents := gi.NewPointerArgument(contents.P)
	arg_length := gi.NewUint64Argument(length)
	arg_etag := gi.NewStringArgument(c_etag)
	arg_make_backup := gi.NewBoolArgument(make_backup)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_contents, arg_length, arg_etag, arg_make_backup, arg_flags, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_etag)
}

// g_file_replace_contents_bytes_async
//
// [ contents ] trans: nothing
//
// [ etag ] trans: nothing
//
// [ make_backup ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) ReplaceContentsBytesAsync(contents Bytes, etag string, make_backup bool, flags FileCreateFlags, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2247, "Gio", "File", "replace_contents_bytes_async", 241, 93, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_etag := gi.CString(etag)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_contents := gi.NewPointerArgument(contents.P)
	arg_etag := gi.NewStringArgument(c_etag)
	arg_make_backup := gi.NewBoolArgument(make_backup)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_contents, arg_etag, arg_make_backup, arg_flags, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_etag)
}

// g_file_replace_contents_finish
//
// [ res ] trans: nothing
//
// [ new_etag ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v *FileIfc) ReplaceContentsFinish(res IAsyncResult) (result bool, new_etag string, err error) {
	iv, err := _I.Get1(2248, "Gio", "File", "replace_contents_finish", 241, 94, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_res := gi.NewPointerArgument(tmp)
	arg_new_etag := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_res, arg_new_etag, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	new_etag = outArgs[0].String().Take()
	result = ret.Bool()
	return
}

// g_file_replace_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) ReplaceFinish(res IAsyncResult) (result FileOutputStream, err error) {
	iv, err := _I.Get1(2249, "Gio", "File", "replace_finish", 241, 95, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_replace_readwrite
//
// [ etag ] trans: nothing
//
// [ make_backup ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) ReplaceReadwrite(etag string, make_backup bool, flags FileCreateFlags, cancellable ICancellable) (result FileIOStream, err error) {
	iv, err := _I.Get1(2250, "Gio", "File", "replace_readwrite", 241, 96, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_etag := gi.CString(etag)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_etag := gi.NewStringArgument(c_etag)
	arg_make_backup := gi.NewBoolArgument(make_backup)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_etag, arg_make_backup, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_etag)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_replace_readwrite_async
//
// [ etag ] trans: nothing
//
// [ make_backup ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) ReplaceReadwriteAsync(etag string, make_backup bool, flags FileCreateFlags, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2251, "Gio", "File", "replace_readwrite_async", 241, 97, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_etag := gi.CString(etag)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_etag := gi.NewStringArgument(c_etag)
	arg_make_backup := gi.NewBoolArgument(make_backup)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_etag, arg_make_backup, arg_flags, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_etag)
}

// g_file_replace_readwrite_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) ReplaceReadwriteFinish(res IAsyncResult) (result FileIOStream, err error) {
	iv, err := _I.Get1(2252, "Gio", "File", "replace_readwrite_finish", 241, 98, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_resolve_relative_path
//
// [ relative_path ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) ResolveRelativePath(relative_path string) (result File) {
	iv, err := _I.Get1(2253, "Gio", "File", "resolve_relative_path", 241, 99, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_relative_path := gi.CString(relative_path)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_relative_path := gi.NewStringArgument(c_relative_path)
	args := []gi.Argument{arg_v, arg_relative_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_relative_path)
	result.P = ret.Pointer()
	return
}

// g_file_set_attribute
//
// [ attribute ] trans: nothing
//
// [ type1 ] trans: nothing
//
// [ value_p ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) SetAttribute(attribute string, type1 FileAttributeTypeEnum, value_p unsafe.Pointer, flags FileQueryInfoFlags, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2254, "Gio", "File", "set_attribute", 241, 100, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_attribute := gi.CString(attribute)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_type1 := gi.NewIntArgument(int(type1))
	arg_value_p := gi.NewPointerArgument(value_p)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_attribute, arg_type1, arg_value_p, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_attribute)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_file_set_attribute_byte_string
//
// [ attribute ] trans: nothing
//
// [ value ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) SetAttributeByteString(attribute string, value string, flags FileQueryInfoFlags, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2255, "Gio", "File", "set_attribute_byte_string", 241, 101, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_attribute := gi.CString(attribute)
	c_value := gi.CString(value)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_value := gi.NewStringArgument(c_value)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_attribute, arg_value, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_attribute)
	gi.Free(c_value)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_file_set_attribute_int32
//
// [ attribute ] trans: nothing
//
// [ value ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) SetAttributeInt32(attribute string, value int32, flags FileQueryInfoFlags, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2256, "Gio", "File", "set_attribute_int32", 241, 102, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_attribute := gi.CString(attribute)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_value := gi.NewInt32Argument(value)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_attribute, arg_value, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_attribute)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_file_set_attribute_int64
//
// [ attribute ] trans: nothing
//
// [ value ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) SetAttributeInt64(attribute string, value int64, flags FileQueryInfoFlags, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2257, "Gio", "File", "set_attribute_int64", 241, 103, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_attribute := gi.CString(attribute)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_value := gi.NewInt64Argument(value)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_attribute, arg_value, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_attribute)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_file_set_attribute_string
//
// [ attribute ] trans: nothing
//
// [ value ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) SetAttributeString(attribute string, value string, flags FileQueryInfoFlags, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2258, "Gio", "File", "set_attribute_string", 241, 104, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_attribute := gi.CString(attribute)
	c_value := gi.CString(value)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_value := gi.NewStringArgument(c_value)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_attribute, arg_value, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_attribute)
	gi.Free(c_value)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_file_set_attribute_uint32
//
// [ attribute ] trans: nothing
//
// [ value ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) SetAttributeUint32(attribute string, value uint32, flags FileQueryInfoFlags, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2259, "Gio", "File", "set_attribute_uint32", 241, 105, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_attribute := gi.CString(attribute)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_value := gi.NewUint32Argument(value)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_attribute, arg_value, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_attribute)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_file_set_attribute_uint64
//
// [ attribute ] trans: nothing
//
// [ value ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) SetAttributeUint64(attribute string, value uint64, flags FileQueryInfoFlags, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2260, "Gio", "File", "set_attribute_uint64", 241, 106, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_attribute := gi.CString(attribute)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_value := gi.NewUint64Argument(value)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_attribute, arg_value, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_attribute)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_file_set_attributes_async
//
// [ info ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) SetAttributesAsync(info IFileInfo, flags FileQueryInfoFlags, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2261, "Gio", "File", "set_attributes_async", 241, 107, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if info != nil {
		tmp = info.P_FileInfo()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_info := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_info, arg_flags, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_file_set_attributes_finish
//
// [ result ] trans: nothing
//
// [ info ] trans: everything, dir: out
//
// [ result1 ] trans: nothing
//
func (v *FileIfc) SetAttributesFinish(result IAsyncResult) (result1 bool, info FileInfo, err error) {
	iv, err := _I.Get1(2262, "Gio", "File", "set_attributes_finish", 241, 108, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_info := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_result, arg_info, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	info.P = outArgs[0].Pointer()
	result1 = ret.Bool()
	return
}

// g_file_set_attributes_from_info
//
// [ info ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) SetAttributesFromInfo(info IFileInfo, flags FileQueryInfoFlags, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2263, "Gio", "File", "set_attributes_from_info", 241, 109, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if info != nil {
		tmp = info.P_FileInfo()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_info := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_info, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_file_set_display_name
//
// [ display_name ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) SetDisplayName(display_name string, cancellable ICancellable) (result File, err error) {
	iv, err := _I.Get1(2264, "Gio", "File", "set_display_name", 241, 110, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_display_name := gi.CString(display_name)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_display_name := gi.NewStringArgument(c_display_name)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_display_name, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_display_name)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_set_display_name_async
//
// [ display_name ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) SetDisplayNameAsync(display_name string, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2265, "Gio", "File", "set_display_name_async", 241, 111, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_display_name := gi.CString(display_name)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_display_name := gi.NewStringArgument(c_display_name)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_display_name, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_display_name)
}

// g_file_set_display_name_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func (v *FileIfc) SetDisplayNameFinish(res IAsyncResult) (result File, err error) {
	iv, err := _I.Get1(2266, "Gio", "File", "set_display_name_finish", 241, 112, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_start_mountable
//
// [ flags ] trans: nothing
//
// [ start_operation ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) StartMountable(flags DriveStartFlags, start_operation IMountOperation, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2267, "Gio", "File", "start_mountable", 241, 113, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if start_operation != nil {
		tmp = start_operation.P_MountOperation()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_start_operation := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_start_operation, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_file_start_mountable_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *FileIfc) StartMountableFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2268, "Gio", "File", "start_mountable_finish", 241, 114, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_file_stop_mountable
//
// [ flags ] trans: nothing
//
// [ mount_operation ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) StopMountable(flags MountUnmountFlags, mount_operation IMountOperation, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2269, "Gio", "File", "stop_mountable", 241, 115, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if mount_operation != nil {
		tmp = mount_operation.P_MountOperation()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_mount_operation := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_mount_operation, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_file_stop_mountable_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *FileIfc) StopMountableFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2270, "Gio", "File", "stop_mountable_finish", 241, 116, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_file_supports_thread_contexts
//
// [ result ] trans: nothing
//
func (v *FileIfc) SupportsThreadContexts() (result bool) {
	iv, err := _I.Get1(2271, "Gio", "File", "supports_thread_contexts", 241, 117, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_file_trash
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *FileIfc) Trash(cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2272, "Gio", "File", "trash", 241, 118, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_file_trash_async
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) TrashAsync(io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2273, "Gio", "File", "trash_async", 241, 119, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_file_trash_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *FileIfc) TrashFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2274, "Gio", "File", "trash_finish", 241, 120, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// Deprecated
//
// g_file_unmount_mountable
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) UnmountMountable(flags MountUnmountFlags, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2275, "Gio", "File", "unmount_mountable", 241, 121, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// g_file_unmount_mountable_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *FileIfc) UnmountMountableFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2276, "Gio", "File", "unmount_mountable_finish", 241, 122, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_file_unmount_mountable_with_operation
//
// [ flags ] trans: nothing
//
// [ mount_operation ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *FileIfc) UnmountMountableWithOperation(flags MountUnmountFlags, mount_operation IMountOperation, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2277, "Gio", "File", "unmount_mountable_with_operation", 241, 123, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if mount_operation != nil {
		tmp = mount_operation.P_MountOperation()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_mount_operation := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_mount_operation, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_file_unmount_mountable_with_operation_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *FileIfc) UnmountMountableWithOperationFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2278, "Gio", "File", "unmount_mountable_with_operation_finish", 241, 124, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// Struct FileAttributeInfo
type FileAttributeInfo struct {
	P unsafe.Pointer
}

const SizeOfStructFileAttributeInfo = 16

func FileAttributeInfoGetType() gi.GType {
	ret := _I.GetGType1(281, "Gio", "FileAttributeInfo")
	return ret
}

func (v FileAttributeInfo) p() *C.GFileAttributeInfo {
	return (*C.GFileAttributeInfo)(v.P)
}
func (v FileAttributeInfo) Name() (result int /*TODO*/) {
	return
}
func (v FileAttributeInfo) Type() (result int /*TODO*/) {
	return
}
func (v FileAttributeInfo) Flags() (result int /*TODO*/) {
	return
}

// Flags FileAttributeInfoFlags
type FileAttributeInfoFlags int

const (
	FileAttributeInfoFlagsNone          FileAttributeInfoFlags = 0
	FileAttributeInfoFlagsCopyWithFile  FileAttributeInfoFlags = 1
	FileAttributeInfoFlagsCopyWhenMoved FileAttributeInfoFlags = 2
)

func FileAttributeInfoFlagsGetType() gi.GType {
	ret := _I.GetGType1(282, "Gio", "FileAttributeInfoFlags")
	return ret
}

// Struct FileAttributeInfoList
type FileAttributeInfoList struct {
	P unsafe.Pointer
}

const SizeOfStructFileAttributeInfoList = 16

func FileAttributeInfoListGetType() gi.GType {
	ret := _I.GetGType1(283, "Gio", "FileAttributeInfoList")
	return ret
}

// g_file_attribute_info_list_new
//
// [ result ] trans: everything
//
func NewFileAttributeInfoList() (result FileAttributeInfoList) {
	iv, err := _I.Get1(2279, "Gio", "FileAttributeInfoList", "new", 244, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_file_attribute_info_list_add
//
// [ name ] trans: nothing
//
// [ type1 ] trans: nothing
//
// [ flags ] trans: nothing
//
func (v FileAttributeInfoList) Add(name string, type1 FileAttributeTypeEnum, flags FileAttributeInfoFlags) {
	iv, err := _I.Get1(2280, "Gio", "FileAttributeInfoList", "add", 244, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	arg_type1 := gi.NewIntArgument(int(type1))
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_name, arg_type1, arg_flags}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// g_file_attribute_info_list_dup
//
// [ result ] trans: everything
//
func (v FileAttributeInfoList) Dup() (result FileAttributeInfoList) {
	iv, err := _I.Get1(2281, "Gio", "FileAttributeInfoList", "dup", 244, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_file_attribute_info_list_lookup
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FileAttributeInfoList) Lookup(name string) (result FileAttributeInfo) {
	iv, err := _I.Get1(2282, "Gio", "FileAttributeInfoList", "lookup", 244, 3, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// g_file_attribute_info_list_ref
//
// [ result ] trans: everything
//
func (v FileAttributeInfoList) Ref() (result FileAttributeInfoList) {
	iv, err := _I.Get1(2283, "Gio", "FileAttributeInfoList", "ref", 244, 4, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_file_attribute_info_list_unref
//
func (v FileAttributeInfoList) Unref() {
	iv, err := _I.Get1(2284, "Gio", "FileAttributeInfoList", "unref", 244, 5, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

func (v FileAttributeInfoList) p() *C.GFileAttributeInfoList {
	return (*C.GFileAttributeInfoList)(v.P)
}
func (v FileAttributeInfoList) Infos() (result int /*TODO*/) {
	return
}
func (v FileAttributeInfoList) NInfos() (result int32) {
	result = int32(v.p().n_infos)
	return
}

// Struct FileAttributeMatcher
type FileAttributeMatcher struct {
	P unsafe.Pointer
}

func FileAttributeMatcherGetType() gi.GType {
	ret := _I.GetGType1(284, "Gio", "FileAttributeMatcher")
	return ret
}

// g_file_attribute_matcher_new
//
// [ attributes ] trans: nothing
//
// [ result ] trans: everything
//
func NewFileAttributeMatcher(attributes string) (result FileAttributeMatcher) {
	iv, err := _I.Get1(2285, "Gio", "FileAttributeMatcher", "new", 245, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attributes := gi.CString(attributes)
	arg_attributes := gi.NewStringArgument(c_attributes)
	args := []gi.Argument{arg_attributes}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_attributes)
	result.P = ret.Pointer()
	return
}

// g_file_attribute_matcher_enumerate_namespace
//
// [ ns ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FileAttributeMatcher) EnumerateNamespace(ns string) (result bool) {
	iv, err := _I.Get1(2286, "Gio", "FileAttributeMatcher", "enumerate_namespace", 245, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_ns := gi.CString(ns)
	arg_v := gi.NewPointerArgument(v.P)
	arg_ns := gi.NewStringArgument(c_ns)
	args := []gi.Argument{arg_v, arg_ns}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_ns)
	result = ret.Bool()
	return
}

// g_file_attribute_matcher_enumerate_next
//
// [ result ] trans: nothing
//
func (v FileAttributeMatcher) EnumerateNext() (result string) {
	iv, err := _I.Get1(2287, "Gio", "FileAttributeMatcher", "enumerate_next", 245, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_file_attribute_matcher_matches
//
// [ attribute ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FileAttributeMatcher) Matches(attribute string) (result bool) {
	iv, err := _I.Get1(2288, "Gio", "FileAttributeMatcher", "matches", 245, 3, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	args := []gi.Argument{arg_v, arg_attribute}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_attribute)
	result = ret.Bool()
	return
}

// g_file_attribute_matcher_matches_only
//
// [ attribute ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FileAttributeMatcher) MatchesOnly(attribute string) (result bool) {
	iv, err := _I.Get1(2289, "Gio", "FileAttributeMatcher", "matches_only", 245, 4, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	args := []gi.Argument{arg_v, arg_attribute}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_attribute)
	result = ret.Bool()
	return
}

// g_file_attribute_matcher_ref
//
// [ result ] trans: everything
//
func (v FileAttributeMatcher) Ref() (result FileAttributeMatcher) {
	iv, err := _I.Get1(2290, "Gio", "FileAttributeMatcher", "ref", 245, 5, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_file_attribute_matcher_subtract
//
// [ subtract ] trans: nothing
//
// [ result ] trans: everything
//
func (v FileAttributeMatcher) Subtract(subtract FileAttributeMatcher) (result FileAttributeMatcher) {
	iv, err := _I.Get1(2291, "Gio", "FileAttributeMatcher", "subtract", 245, 6, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_subtract := gi.NewPointerArgument(subtract.P)
	args := []gi.Argument{arg_v, arg_subtract}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_file_attribute_matcher_to_string
//
// [ result ] trans: everything
//
func (v FileAttributeMatcher) ToString() (result string) {
	iv, err := _I.Get1(2292, "Gio", "FileAttributeMatcher", "to_string", 245, 7, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_file_attribute_matcher_unref
//
func (v FileAttributeMatcher) Unref() {
	iv, err := _I.Get1(2293, "Gio", "FileAttributeMatcher", "unref", 245, 8, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Enum FileAttributeStatus
type FileAttributeStatusEnum int

const (
	FileAttributeStatusUnset        FileAttributeStatusEnum = 0
	FileAttributeStatusSet          FileAttributeStatusEnum = 1
	FileAttributeStatusErrorSetting FileAttributeStatusEnum = 2
)

func FileAttributeStatusGetType() gi.GType {
	ret := _I.GetGType1(285, "Gio", "FileAttributeStatus")
	return ret
}

// Enum FileAttributeType
type FileAttributeTypeEnum int

const (
	FileAttributeTypeInvalid    FileAttributeTypeEnum = 0
	FileAttributeTypeString     FileAttributeTypeEnum = 1
	FileAttributeTypeByteString FileAttributeTypeEnum = 2
	FileAttributeTypeBoolean    FileAttributeTypeEnum = 3
	FileAttributeTypeUint32     FileAttributeTypeEnum = 4
	FileAttributeTypeInt32      FileAttributeTypeEnum = 5
	FileAttributeTypeUint64     FileAttributeTypeEnum = 6
	FileAttributeTypeInt64      FileAttributeTypeEnum = 7
	FileAttributeTypeObject     FileAttributeTypeEnum = 8
	FileAttributeTypeStringv    FileAttributeTypeEnum = 9
)

func FileAttributeTypeGetType() gi.GType {
	ret := _I.GetGType1(286, "Gio", "FileAttributeType")
	return ret
}

// Flags FileCopyFlags
type FileCopyFlags int

const (
	FileCopyFlagsNone               FileCopyFlags = 0
	FileCopyFlagsOverwrite          FileCopyFlags = 1
	FileCopyFlagsBackup             FileCopyFlags = 2
	FileCopyFlagsNofollowSymlinks   FileCopyFlags = 4
	FileCopyFlagsAllMetadata        FileCopyFlags = 8
	FileCopyFlagsNoFallbackForMove  FileCopyFlags = 16
	FileCopyFlagsTargetDefaultPerms FileCopyFlags = 32
)

func FileCopyFlagsGetType() gi.GType {
	ret := _I.GetGType1(287, "Gio", "FileCopyFlags")
	return ret
}

// Flags FileCreateFlags
type FileCreateFlags int

const (
	FileCreateFlagsNone               FileCreateFlags = 0
	FileCreateFlagsPrivate            FileCreateFlags = 1
	FileCreateFlagsReplaceDestination FileCreateFlags = 2
)

func FileCreateFlagsGetType() gi.GType {
	ret := _I.GetGType1(288, "Gio", "FileCreateFlags")
	return ret
}

// Interface FileDescriptorBased
type FileDescriptorBased struct {
	FileDescriptorBasedIfc
	P unsafe.Pointer
}
type FileDescriptorBasedIfc struct{}
type IFileDescriptorBased interface{ P_FileDescriptorBased() unsafe.Pointer }

func (v FileDescriptorBased) P_FileDescriptorBased() unsafe.Pointer { return v.P }
func FileDescriptorBasedGetType() gi.GType {
	ret := _I.GetGType1(289, "Gio", "FileDescriptorBased")
	return ret
}

// g_file_descriptor_based_get_fd
//
// [ result ] trans: nothing
//
func (v *FileDescriptorBasedIfc) GetFd() (result int32) {
	iv, err := _I.Get1(2294, "Gio", "FileDescriptorBased", "get_fd", 250, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// ignore GType struct FileDescriptorBasedIface

// Object FileEnumerator
type FileEnumerator struct {
	Object
}

func WrapFileEnumerator(p unsafe.Pointer) (r FileEnumerator) { r.P = p; return }

type IFileEnumerator interface{ P_FileEnumerator() unsafe.Pointer }

func (v FileEnumerator) P_FileEnumerator() unsafe.Pointer { return v.P }
func FileEnumeratorGetType() gi.GType {
	ret := _I.GetGType1(290, "Gio", "FileEnumerator")
	return ret
}

// g_file_enumerator_close
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FileEnumerator) Close(cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2295, "Gio", "FileEnumerator", "close", 252, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_file_enumerator_close_async
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v FileEnumerator) CloseAsync(io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2296, "Gio", "FileEnumerator", "close_async", 252, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_file_enumerator_close_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v FileEnumerator) CloseFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2297, "Gio", "FileEnumerator", "close_finish", 252, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_file_enumerator_get_child
//
// [ info ] trans: nothing
//
// [ result ] trans: everything
//
func (v FileEnumerator) GetChild(info IFileInfo) (result File) {
	iv, err := _I.Get1(2298, "Gio", "FileEnumerator", "get_child", 252, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if info != nil {
		tmp = info.P_FileInfo()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_info := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_info}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_file_enumerator_get_container
//
// [ result ] trans: nothing
//
func (v FileEnumerator) GetContainer() (result File) {
	iv, err := _I.Get1(2299, "Gio", "FileEnumerator", "get_container", 252, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_file_enumerator_has_pending
//
// [ result ] trans: nothing
//
func (v FileEnumerator) HasPending() (result bool) {
	iv, err := _I.Get1(2300, "Gio", "FileEnumerator", "has_pending", 252, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_file_enumerator_is_closed
//
// [ result ] trans: nothing
//
func (v FileEnumerator) IsClosed() (result bool) {
	iv, err := _I.Get1(2301, "Gio", "FileEnumerator", "is_closed", 252, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_file_enumerator_iterate
//
// [ out_info ] trans: nothing, dir: out
//
// [ out_child ] trans: nothing, dir: out
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FileEnumerator) Iterate(cancellable ICancellable) (result bool, out_info FileInfo, out_child File, err error) {
	iv, err := _I.Get1(2302, "Gio", "FileEnumerator", "iterate", 252, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [3]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_out_info := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_out_child := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	args := []gi.Argument{arg_v, arg_out_info, arg_out_child, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[2].Pointer())
	out_info.P = outArgs[0].Pointer()
	out_child.P = outArgs[1].Pointer()
	result = ret.Bool()
	return
}

// g_file_enumerator_next_file
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v FileEnumerator) NextFile(cancellable ICancellable) (result FileInfo, err error) {
	iv, err := _I.Get1(2303, "Gio", "FileEnumerator", "next_file", 252, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_enumerator_next_files_async
//
// [ num_files ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v FileEnumerator) NextFilesAsync(num_files int32, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2304, "Gio", "FileEnumerator", "next_files_async", 252, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_num_files := gi.NewInt32Argument(num_files)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_num_files, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_file_enumerator_next_files_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v FileEnumerator) NextFilesFinish(result IAsyncResult) (result1 List, err error) {
	iv, err := _I.Get1(2305, "Gio", "FileEnumerator", "next_files_finish", 252, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// g_file_enumerator_set_pending
//
// [ pending ] trans: nothing
//
func (v FileEnumerator) SetPending(pending bool) {
	iv, err := _I.Get1(2306, "Gio", "FileEnumerator", "set_pending", 252, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pending := gi.NewBoolArgument(pending)
	args := []gi.Argument{arg_v, arg_pending}
	iv.Call(args, nil, nil)
}

// ignore GType struct FileEnumeratorClass

// ignore private struct FileEnumeratorPrivate, type of FileEnumerator is object

// Object FileIOStream
type FileIOStream struct {
	SeekableIfc
	IOStream
}

func WrapFileIOStream(p unsafe.Pointer) (r FileIOStream) { r.P = p; return }

type IFileIOStream interface{ P_FileIOStream() unsafe.Pointer }

func (v FileIOStream) P_FileIOStream() unsafe.Pointer { return v.P }
func (v FileIOStream) P_Seekable() unsafe.Pointer     { return v.P }
func FileIOStreamGetType() gi.GType {
	ret := _I.GetGType1(291, "Gio", "FileIOStream")
	return ret
}

// g_file_io_stream_get_etag
//
// [ result ] trans: everything
//
func (v FileIOStream) GetEtag() (result string) {
	iv, err := _I.Get1(2307, "Gio", "FileIOStream", "get_etag", 255, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_file_io_stream_query_info
//
// [ attributes ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v FileIOStream) QueryInfo(attributes string, cancellable ICancellable) (result FileInfo, err error) {
	iv, err := _I.Get1(2308, "Gio", "FileIOStream", "query_info", 255, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_attributes := gi.CString(attributes)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_attributes := gi.NewStringArgument(c_attributes)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_attributes, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_attributes)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_io_stream_query_info_async
//
// [ attributes ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v FileIOStream) QueryInfoAsync(attributes string, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2309, "Gio", "FileIOStream", "query_info_async", 255, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attributes := gi.CString(attributes)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_attributes := gi.NewStringArgument(c_attributes)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_attributes, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_attributes)
}

// g_file_io_stream_query_info_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v FileIOStream) QueryInfoFinish(result IAsyncResult) (result1 FileInfo, err error) {
	iv, err := _I.Get1(2310, "Gio", "FileIOStream", "query_info_finish", 255, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// ignore GType struct FileIOStreamClass

// ignore private struct FileIOStreamPrivate, type of FileIOStream is object

// Object FileIcon
type FileIcon struct {
	IconIfc
	LoadableIconIfc
	Object
}

func WrapFileIcon(p unsafe.Pointer) (r FileIcon) { r.P = p; return }

type IFileIcon interface{ P_FileIcon() unsafe.Pointer }

func (v FileIcon) P_FileIcon() unsafe.Pointer     { return v.P }
func (v FileIcon) P_Icon() unsafe.Pointer         { return v.P }
func (v FileIcon) P_LoadableIcon() unsafe.Pointer { return v.P }
func FileIconGetType() gi.GType {
	ret := _I.GetGType1(292, "Gio", "FileIcon")
	return ret
}

// g_file_icon_new
//
// [ file ] trans: nothing
//
// [ result ] trans: everything
//
func NewFileIcon(file IFile) (result FileIcon) {
	iv, err := _I.Get1(2311, "Gio", "FileIcon", "new", 258, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if file != nil {
		tmp = file.P_File()
	}
	arg_file := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_file}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_file_icon_get_file
//
// [ result ] trans: nothing
//
func (v FileIcon) GetFile() (result File) {
	iv, err := _I.Get1(2312, "Gio", "FileIcon", "get_file", 258, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct FileIconClass

// ignore GType struct FileIface

// Object FileInfo
type FileInfo struct {
	Object
}

func WrapFileInfo(p unsafe.Pointer) (r FileInfo) { r.P = p; return }

type IFileInfo interface{ P_FileInfo() unsafe.Pointer }

func (v FileInfo) P_FileInfo() unsafe.Pointer { return v.P }
func FileInfoGetType() gi.GType {
	ret := _I.GetGType1(293, "Gio", "FileInfo")
	return ret
}

// g_file_info_new
//
// [ result ] trans: everything
//
func NewFileInfo() (result FileInfo) {
	iv, err := _I.Get1(2313, "Gio", "FileInfo", "new", 261, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_file_info_clear_status
//
func (v FileInfo) ClearStatus() {
	iv, err := _I.Get1(2314, "Gio", "FileInfo", "clear_status", 261, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_file_info_copy_into
//
// [ dest_info ] trans: nothing
//
func (v FileInfo) CopyInto(dest_info IFileInfo) {
	iv, err := _I.Get1(2315, "Gio", "FileInfo", "copy_into", 261, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if dest_info != nil {
		tmp = dest_info.P_FileInfo()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_dest_info := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_dest_info}
	iv.Call(args, nil, nil)
}

// g_file_info_dup
//
// [ result ] trans: everything
//
func (v FileInfo) Dup() (result FileInfo) {
	iv, err := _I.Get1(2316, "Gio", "FileInfo", "dup", 261, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_file_info_get_attribute_as_string
//
// [ attribute ] trans: nothing
//
// [ result ] trans: everything
//
func (v FileInfo) GetAttributeAsString(attribute string) (result string) {
	iv, err := _I.Get1(2317, "Gio", "FileInfo", "get_attribute_as_string", 261, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	args := []gi.Argument{arg_v, arg_attribute}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_attribute)
	result = ret.String().Take()
	return
}

// g_file_info_get_attribute_boolean
//
// [ attribute ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FileInfo) GetAttributeBoolean(attribute string) (result bool) {
	iv, err := _I.Get1(2318, "Gio", "FileInfo", "get_attribute_boolean", 261, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	args := []gi.Argument{arg_v, arg_attribute}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_attribute)
	result = ret.Bool()
	return
}

// g_file_info_get_attribute_byte_string
//
// [ attribute ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FileInfo) GetAttributeByteString(attribute string) (result string) {
	iv, err := _I.Get1(2319, "Gio", "FileInfo", "get_attribute_byte_string", 261, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	args := []gi.Argument{arg_v, arg_attribute}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_attribute)
	result = ret.String().Copy()
	return
}

// g_file_info_get_attribute_data
//
// [ attribute ] trans: nothing
//
// [ type1 ] trans: everything, dir: out
//
// [ value_pp ] trans: everything, dir: out
//
// [ status ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v FileInfo) GetAttributeData(attribute string) (result bool, type1 FileAttributeTypeEnum, value_pp unsafe.Pointer, status FileAttributeStatusEnum) {
	iv, err := _I.Get1(2320, "Gio", "FileInfo", "get_attribute_data", 261, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [3]gi.Argument
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_type1 := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_value_pp := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_status := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	args := []gi.Argument{arg_v, arg_attribute, arg_type1, arg_value_pp, arg_status}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_attribute)
	type1 = FileAttributeTypeEnum(outArgs[0].Int())
	value_pp = outArgs[1].Pointer()
	status = FileAttributeStatusEnum(outArgs[2].Int())
	result = ret.Bool()
	return
}

// g_file_info_get_attribute_int32
//
// [ attribute ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FileInfo) GetAttributeInt32(attribute string) (result int32) {
	iv, err := _I.Get1(2321, "Gio", "FileInfo", "get_attribute_int32", 261, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	args := []gi.Argument{arg_v, arg_attribute}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_attribute)
	result = ret.Int32()
	return
}

// g_file_info_get_attribute_int64
//
// [ attribute ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FileInfo) GetAttributeInt64(attribute string) (result int64) {
	iv, err := _I.Get1(2322, "Gio", "FileInfo", "get_attribute_int64", 261, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	args := []gi.Argument{arg_v, arg_attribute}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_attribute)
	result = ret.Int64()
	return
}

// g_file_info_get_attribute_object
//
// [ attribute ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FileInfo) GetAttributeObject(attribute string) (result Object) {
	iv, err := _I.Get1(2323, "Gio", "FileInfo", "get_attribute_object", 261, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	args := []gi.Argument{arg_v, arg_attribute}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_attribute)
	result.P = ret.Pointer()
	return
}

// g_file_info_get_attribute_status
//
// [ attribute ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FileInfo) GetAttributeStatus(attribute string) (result FileAttributeStatusEnum) {
	iv, err := _I.Get1(2324, "Gio", "FileInfo", "get_attribute_status", 261, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	args := []gi.Argument{arg_v, arg_attribute}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_attribute)
	result = FileAttributeStatusEnum(ret.Int())
	return
}

// g_file_info_get_attribute_string
//
// [ attribute ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FileInfo) GetAttributeString(attribute string) (result string) {
	iv, err := _I.Get1(2325, "Gio", "FileInfo", "get_attribute_string", 261, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	args := []gi.Argument{arg_v, arg_attribute}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_attribute)
	result = ret.String().Copy()
	return
}

// g_file_info_get_attribute_stringv
//
// [ attribute ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FileInfo) GetAttributeStringv(attribute string) (result gi.CStrArray) {
	iv, err := _I.Get1(2326, "Gio", "FileInfo", "get_attribute_stringv", 261, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	args := []gi.Argument{arg_v, arg_attribute}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_attribute)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_file_info_get_attribute_type
//
// [ attribute ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FileInfo) GetAttributeType(attribute string) (result FileAttributeTypeEnum) {
	iv, err := _I.Get1(2327, "Gio", "FileInfo", "get_attribute_type", 261, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	args := []gi.Argument{arg_v, arg_attribute}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_attribute)
	result = FileAttributeTypeEnum(ret.Int())
	return
}

// g_file_info_get_attribute_uint32
//
// [ attribute ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FileInfo) GetAttributeUint32(attribute string) (result uint32) {
	iv, err := _I.Get1(2328, "Gio", "FileInfo", "get_attribute_uint32", 261, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	args := []gi.Argument{arg_v, arg_attribute}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_attribute)
	result = ret.Uint32()
	return
}

// g_file_info_get_attribute_uint64
//
// [ attribute ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FileInfo) GetAttributeUint64(attribute string) (result uint64) {
	iv, err := _I.Get1(2329, "Gio", "FileInfo", "get_attribute_uint64", 261, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	args := []gi.Argument{arg_v, arg_attribute}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_attribute)
	result = ret.Uint64()
	return
}

// g_file_info_get_content_type
//
// [ result ] trans: nothing
//
func (v FileInfo) GetContentType() (result string) {
	iv, err := _I.Get1(2330, "Gio", "FileInfo", "get_content_type", 261, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_file_info_get_deletion_date
//
// [ result ] trans: everything
//
func (v FileInfo) GetDeletionDate() (result DateTime) {
	iv, err := _I.Get1(2331, "Gio", "FileInfo", "get_deletion_date", 261, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_file_info_get_display_name
//
// [ result ] trans: nothing
//
func (v FileInfo) GetDisplayName() (result string) {
	iv, err := _I.Get1(2332, "Gio", "FileInfo", "get_display_name", 261, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_file_info_get_edit_name
//
// [ result ] trans: nothing
//
func (v FileInfo) GetEditName() (result string) {
	iv, err := _I.Get1(2333, "Gio", "FileInfo", "get_edit_name", 261, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_file_info_get_etag
//
// [ result ] trans: nothing
//
func (v FileInfo) GetEtag() (result string) {
	iv, err := _I.Get1(2334, "Gio", "FileInfo", "get_etag", 261, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_file_info_get_file_type
//
// [ result ] trans: nothing
//
func (v FileInfo) GetFileType() (result FileTypeEnum) {
	iv, err := _I.Get1(2335, "Gio", "FileInfo", "get_file_type", 261, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = FileTypeEnum(ret.Int())
	return
}

// g_file_info_get_icon
//
// [ result ] trans: nothing
//
func (v FileInfo) GetIcon() (result Icon) {
	iv, err := _I.Get1(2336, "Gio", "FileInfo", "get_icon", 261, 23, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_file_info_get_is_backup
//
// [ result ] trans: nothing
//
func (v FileInfo) GetIsBackup() (result bool) {
	iv, err := _I.Get1(2337, "Gio", "FileInfo", "get_is_backup", 261, 24, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_file_info_get_is_hidden
//
// [ result ] trans: nothing
//
func (v FileInfo) GetIsHidden() (result bool) {
	iv, err := _I.Get1(2338, "Gio", "FileInfo", "get_is_hidden", 261, 25, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_file_info_get_is_symlink
//
// [ result ] trans: nothing
//
func (v FileInfo) GetIsSymlink() (result bool) {
	iv, err := _I.Get1(2339, "Gio", "FileInfo", "get_is_symlink", 261, 26, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_file_info_get_modification_time
//
// [ result ] trans: nothing, dir: out
//
func (v FileInfo) GetModificationTime(result TimeVal) {
	iv, err := _I.Get1(2340, "Gio", "FileInfo", "get_modification_time", 261, 27, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(result.P)
	args := []gi.Argument{arg_v, arg_result}
	iv.Call(args, nil, nil)
}

// g_file_info_get_name
//
// [ result ] trans: nothing
//
func (v FileInfo) GetName() (result string) {
	iv, err := _I.Get1(2341, "Gio", "FileInfo", "get_name", 261, 28, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_file_info_get_size
//
// [ result ] trans: nothing
//
func (v FileInfo) GetSize() (result int64) {
	iv, err := _I.Get1(2342, "Gio", "FileInfo", "get_size", 261, 29, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int64()
	return
}

// g_file_info_get_sort_order
//
// [ result ] trans: nothing
//
func (v FileInfo) GetSortOrder() (result int32) {
	iv, err := _I.Get1(2343, "Gio", "FileInfo", "get_sort_order", 261, 30, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// g_file_info_get_symbolic_icon
//
// [ result ] trans: nothing
//
func (v FileInfo) GetSymbolicIcon() (result Icon) {
	iv, err := _I.Get1(2344, "Gio", "FileInfo", "get_symbolic_icon", 261, 31, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_file_info_get_symlink_target
//
// [ result ] trans: nothing
//
func (v FileInfo) GetSymlinkTarget() (result string) {
	iv, err := _I.Get1(2345, "Gio", "FileInfo", "get_symlink_target", 261, 32, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_file_info_has_attribute
//
// [ attribute ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FileInfo) HasAttribute(attribute string) (result bool) {
	iv, err := _I.Get1(2346, "Gio", "FileInfo", "has_attribute", 261, 33, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	args := []gi.Argument{arg_v, arg_attribute}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_attribute)
	result = ret.Bool()
	return
}

// g_file_info_has_namespace
//
// [ name_space ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FileInfo) HasNamespace(name_space string) (result bool) {
	iv, err := _I.Get1(2347, "Gio", "FileInfo", "has_namespace", 261, 34, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name_space := gi.CString(name_space)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name_space := gi.NewStringArgument(c_name_space)
	args := []gi.Argument{arg_v, arg_name_space}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name_space)
	result = ret.Bool()
	return
}

// g_file_info_list_attributes
//
// [ name_space ] trans: nothing
//
// [ result ] trans: everything
//
func (v FileInfo) ListAttributes(name_space string) (result gi.CStrArray) {
	iv, err := _I.Get1(2348, "Gio", "FileInfo", "list_attributes", 261, 35, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name_space := gi.CString(name_space)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name_space := gi.NewStringArgument(c_name_space)
	args := []gi.Argument{arg_v, arg_name_space}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name_space)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_file_info_remove_attribute
//
// [ attribute ] trans: nothing
//
func (v FileInfo) RemoveAttribute(attribute string) {
	iv, err := _I.Get1(2349, "Gio", "FileInfo", "remove_attribute", 261, 36, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	args := []gi.Argument{arg_v, arg_attribute}
	iv.Call(args, nil, nil)
	gi.Free(c_attribute)
}

// g_file_info_set_attribute
//
// [ attribute ] trans: nothing
//
// [ type1 ] trans: nothing
//
// [ value_p ] trans: nothing
//
func (v FileInfo) SetAttribute(attribute string, type1 FileAttributeTypeEnum, value_p unsafe.Pointer) {
	iv, err := _I.Get1(2350, "Gio", "FileInfo", "set_attribute", 261, 37, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_type1 := gi.NewIntArgument(int(type1))
	arg_value_p := gi.NewPointerArgument(value_p)
	args := []gi.Argument{arg_v, arg_attribute, arg_type1, arg_value_p}
	iv.Call(args, nil, nil)
	gi.Free(c_attribute)
}

// g_file_info_set_attribute_boolean
//
// [ attribute ] trans: nothing
//
// [ attr_value ] trans: nothing
//
func (v FileInfo) SetAttributeBoolean(attribute string, attr_value bool) {
	iv, err := _I.Get1(2351, "Gio", "FileInfo", "set_attribute_boolean", 261, 38, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_attr_value := gi.NewBoolArgument(attr_value)
	args := []gi.Argument{arg_v, arg_attribute, arg_attr_value}
	iv.Call(args, nil, nil)
	gi.Free(c_attribute)
}

// g_file_info_set_attribute_byte_string
//
// [ attribute ] trans: nothing
//
// [ attr_value ] trans: nothing
//
func (v FileInfo) SetAttributeByteString(attribute string, attr_value string) {
	iv, err := _I.Get1(2352, "Gio", "FileInfo", "set_attribute_byte_string", 261, 39, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	c_attr_value := gi.CString(attr_value)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_attr_value := gi.NewStringArgument(c_attr_value)
	args := []gi.Argument{arg_v, arg_attribute, arg_attr_value}
	iv.Call(args, nil, nil)
	gi.Free(c_attribute)
	gi.Free(c_attr_value)
}

// g_file_info_set_attribute_int32
//
// [ attribute ] trans: nothing
//
// [ attr_value ] trans: nothing
//
func (v FileInfo) SetAttributeInt32(attribute string, attr_value int32) {
	iv, err := _I.Get1(2353, "Gio", "FileInfo", "set_attribute_int32", 261, 40, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_attr_value := gi.NewInt32Argument(attr_value)
	args := []gi.Argument{arg_v, arg_attribute, arg_attr_value}
	iv.Call(args, nil, nil)
	gi.Free(c_attribute)
}

// g_file_info_set_attribute_int64
//
// [ attribute ] trans: nothing
//
// [ attr_value ] trans: nothing
//
func (v FileInfo) SetAttributeInt64(attribute string, attr_value int64) {
	iv, err := _I.Get1(2354, "Gio", "FileInfo", "set_attribute_int64", 261, 41, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_attr_value := gi.NewInt64Argument(attr_value)
	args := []gi.Argument{arg_v, arg_attribute, arg_attr_value}
	iv.Call(args, nil, nil)
	gi.Free(c_attribute)
}

// g_file_info_set_attribute_mask
//
// [ mask ] trans: nothing
//
func (v FileInfo) SetAttributeMask(mask FileAttributeMatcher) {
	iv, err := _I.Get1(2355, "Gio", "FileInfo", "set_attribute_mask", 261, 42, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_mask := gi.NewPointerArgument(mask.P)
	args := []gi.Argument{arg_v, arg_mask}
	iv.Call(args, nil, nil)
}

// g_file_info_set_attribute_object
//
// [ attribute ] trans: nothing
//
// [ attr_value ] trans: nothing
//
func (v FileInfo) SetAttributeObject(attribute string, attr_value IObject) {
	iv, err := _I.Get1(2356, "Gio", "FileInfo", "set_attribute_object", 261, 43, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	var tmp unsafe.Pointer
	if attr_value != nil {
		tmp = attr_value.P_Object()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_attr_value := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_attribute, arg_attr_value}
	iv.Call(args, nil, nil)
	gi.Free(c_attribute)
}

// g_file_info_set_attribute_status
//
// [ attribute ] trans: nothing
//
// [ status ] trans: nothing
//
// [ result ] trans: nothing
//
func (v FileInfo) SetAttributeStatus(attribute string, status FileAttributeStatusEnum) (result bool) {
	iv, err := _I.Get1(2357, "Gio", "FileInfo", "set_attribute_status", 261, 44, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_status := gi.NewIntArgument(int(status))
	args := []gi.Argument{arg_v, arg_attribute, arg_status}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_attribute)
	result = ret.Bool()
	return
}

// g_file_info_set_attribute_string
//
// [ attribute ] trans: nothing
//
// [ attr_value ] trans: nothing
//
func (v FileInfo) SetAttributeString(attribute string, attr_value string) {
	iv, err := _I.Get1(2358, "Gio", "FileInfo", "set_attribute_string", 261, 45, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	c_attr_value := gi.CString(attr_value)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_attr_value := gi.NewStringArgument(c_attr_value)
	args := []gi.Argument{arg_v, arg_attribute, arg_attr_value}
	iv.Call(args, nil, nil)
	gi.Free(c_attribute)
	gi.Free(c_attr_value)
}

// g_file_info_set_attribute_stringv
//
// [ attribute ] trans: nothing
//
// [ attr_value ] trans: nothing
//
func (v FileInfo) SetAttributeStringv(attribute string, attr_value gi.CStrArray) {
	iv, err := _I.Get1(2359, "Gio", "FileInfo", "set_attribute_stringv", 261, 46, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_attr_value := gi.NewPointerArgument(attr_value.P)
	args := []gi.Argument{arg_v, arg_attribute, arg_attr_value}
	iv.Call(args, nil, nil)
	gi.Free(c_attribute)
}

// g_file_info_set_attribute_uint32
//
// [ attribute ] trans: nothing
//
// [ attr_value ] trans: nothing
//
func (v FileInfo) SetAttributeUint32(attribute string, attr_value uint32) {
	iv, err := _I.Get1(2360, "Gio", "FileInfo", "set_attribute_uint32", 261, 47, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_attr_value := gi.NewUint32Argument(attr_value)
	args := []gi.Argument{arg_v, arg_attribute, arg_attr_value}
	iv.Call(args, nil, nil)
	gi.Free(c_attribute)
}

// g_file_info_set_attribute_uint64
//
// [ attribute ] trans: nothing
//
// [ attr_value ] trans: nothing
//
func (v FileInfo) SetAttributeUint64(attribute string, attr_value uint64) {
	iv, err := _I.Get1(2361, "Gio", "FileInfo", "set_attribute_uint64", 261, 48, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_attr_value := gi.NewUint64Argument(attr_value)
	args := []gi.Argument{arg_v, arg_attribute, arg_attr_value}
	iv.Call(args, nil, nil)
	gi.Free(c_attribute)
}

// g_file_info_set_content_type
//
// [ content_type ] trans: nothing
//
func (v FileInfo) SetContentType(content_type string) {
	iv, err := _I.Get1(2362, "Gio", "FileInfo", "set_content_type", 261, 49, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_content_type := gi.CString(content_type)
	arg_v := gi.NewPointerArgument(v.P)
	arg_content_type := gi.NewStringArgument(c_content_type)
	args := []gi.Argument{arg_v, arg_content_type}
	iv.Call(args, nil, nil)
	gi.Free(c_content_type)
}

// g_file_info_set_display_name
//
// [ display_name ] trans: nothing
//
func (v FileInfo) SetDisplayName(display_name string) {
	iv, err := _I.Get1(2363, "Gio", "FileInfo", "set_display_name", 261, 50, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_display_name := gi.CString(display_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_display_name := gi.NewStringArgument(c_display_name)
	args := []gi.Argument{arg_v, arg_display_name}
	iv.Call(args, nil, nil)
	gi.Free(c_display_name)
}

// g_file_info_set_edit_name
//
// [ edit_name ] trans: nothing
//
func (v FileInfo) SetEditName(edit_name string) {
	iv, err := _I.Get1(2364, "Gio", "FileInfo", "set_edit_name", 261, 51, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_edit_name := gi.CString(edit_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_edit_name := gi.NewStringArgument(c_edit_name)
	args := []gi.Argument{arg_v, arg_edit_name}
	iv.Call(args, nil, nil)
	gi.Free(c_edit_name)
}

// g_file_info_set_file_type
//
// [ type1 ] trans: nothing
//
func (v FileInfo) SetFileType(type1 FileTypeEnum) {
	iv, err := _I.Get1(2365, "Gio", "FileInfo", "set_file_type", 261, 52, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_type1 := gi.NewIntArgument(int(type1))
	args := []gi.Argument{arg_v, arg_type1}
	iv.Call(args, nil, nil)
}

// g_file_info_set_icon
//
// [ icon ] trans: nothing
//
func (v FileInfo) SetIcon(icon IIcon) {
	iv, err := _I.Get1(2366, "Gio", "FileInfo", "set_icon", 261, 53, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon != nil {
		tmp = icon.P_Icon()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_icon}
	iv.Call(args, nil, nil)
}

// g_file_info_set_is_hidden
//
// [ is_hidden ] trans: nothing
//
func (v FileInfo) SetIsHidden(is_hidden bool) {
	iv, err := _I.Get1(2367, "Gio", "FileInfo", "set_is_hidden", 261, 54, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_is_hidden := gi.NewBoolArgument(is_hidden)
	args := []gi.Argument{arg_v, arg_is_hidden}
	iv.Call(args, nil, nil)
}

// g_file_info_set_is_symlink
//
// [ is_symlink ] trans: nothing
//
func (v FileInfo) SetIsSymlink(is_symlink bool) {
	iv, err := _I.Get1(2368, "Gio", "FileInfo", "set_is_symlink", 261, 55, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_is_symlink := gi.NewBoolArgument(is_symlink)
	args := []gi.Argument{arg_v, arg_is_symlink}
	iv.Call(args, nil, nil)
}

// g_file_info_set_modification_time
//
// [ mtime ] trans: nothing
//
func (v FileInfo) SetModificationTime(mtime TimeVal) {
	iv, err := _I.Get1(2369, "Gio", "FileInfo", "set_modification_time", 261, 56, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_mtime := gi.NewPointerArgument(mtime.P)
	args := []gi.Argument{arg_v, arg_mtime}
	iv.Call(args, nil, nil)
}

// g_file_info_set_name
//
// [ name ] trans: nothing
//
func (v FileInfo) SetName(name string) {
	iv, err := _I.Get1(2370, "Gio", "FileInfo", "set_name", 261, 57, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	iv.Call(args, nil, nil)
	gi.Free(c_name)
}

// g_file_info_set_size
//
// [ size ] trans: nothing
//
func (v FileInfo) SetSize(size int64) {
	iv, err := _I.Get1(2371, "Gio", "FileInfo", "set_size", 261, 58, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_size := gi.NewInt64Argument(size)
	args := []gi.Argument{arg_v, arg_size}
	iv.Call(args, nil, nil)
}

// g_file_info_set_sort_order
//
// [ sort_order ] trans: nothing
//
func (v FileInfo) SetSortOrder(sort_order int32) {
	iv, err := _I.Get1(2372, "Gio", "FileInfo", "set_sort_order", 261, 59, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_sort_order := gi.NewInt32Argument(sort_order)
	args := []gi.Argument{arg_v, arg_sort_order}
	iv.Call(args, nil, nil)
}

// g_file_info_set_symbolic_icon
//
// [ icon ] trans: nothing
//
func (v FileInfo) SetSymbolicIcon(icon IIcon) {
	iv, err := _I.Get1(2373, "Gio", "FileInfo", "set_symbolic_icon", 261, 60, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon != nil {
		tmp = icon.P_Icon()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_icon}
	iv.Call(args, nil, nil)
}

// g_file_info_set_symlink_target
//
// [ symlink_target ] trans: nothing
//
func (v FileInfo) SetSymlinkTarget(symlink_target string) {
	iv, err := _I.Get1(2374, "Gio", "FileInfo", "set_symlink_target", 261, 61, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_symlink_target := gi.CString(symlink_target)
	arg_v := gi.NewPointerArgument(v.P)
	arg_symlink_target := gi.NewStringArgument(c_symlink_target)
	args := []gi.Argument{arg_v, arg_symlink_target}
	iv.Call(args, nil, nil)
	gi.Free(c_symlink_target)
}

// g_file_info_unset_attribute_mask
//
func (v FileInfo) UnsetAttributeMask() {
	iv, err := _I.Get1(2375, "Gio", "FileInfo", "unset_attribute_mask", 261, 62, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// ignore GType struct FileInfoClass

// Object FileInputStream
type FileInputStream struct {
	SeekableIfc
	InputStream
}

func WrapFileInputStream(p unsafe.Pointer) (r FileInputStream) { r.P = p; return }

type IFileInputStream interface{ P_FileInputStream() unsafe.Pointer }

func (v FileInputStream) P_FileInputStream() unsafe.Pointer { return v.P }
func (v FileInputStream) P_Seekable() unsafe.Pointer        { return v.P }
func FileInputStreamGetType() gi.GType {
	ret := _I.GetGType1(294, "Gio", "FileInputStream")
	return ret
}

// g_file_input_stream_query_info
//
// [ attributes ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v FileInputStream) QueryInfo(attributes string, cancellable ICancellable) (result FileInfo, err error) {
	iv, err := _I.Get1(2376, "Gio", "FileInputStream", "query_info", 263, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_attributes := gi.CString(attributes)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_attributes := gi.NewStringArgument(c_attributes)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_attributes, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_attributes)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_input_stream_query_info_async
//
// [ attributes ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v FileInputStream) QueryInfoAsync(attributes string, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2377, "Gio", "FileInputStream", "query_info_async", 263, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attributes := gi.CString(attributes)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_attributes := gi.NewStringArgument(c_attributes)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_attributes, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_attributes)
}

// g_file_input_stream_query_info_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v FileInputStream) QueryInfoFinish(result IAsyncResult) (result1 FileInfo, err error) {
	iv, err := _I.Get1(2378, "Gio", "FileInputStream", "query_info_finish", 263, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// ignore GType struct FileInputStreamClass

// ignore private struct FileInputStreamPrivate, type of FileInputStream is object

// Flags FileMeasureFlags
type FileMeasureFlags int

const (
	FileMeasureFlagsNone           FileMeasureFlags = 0
	FileMeasureFlagsReportAnyError FileMeasureFlags = 2
	FileMeasureFlagsApparentSize   FileMeasureFlags = 4
	FileMeasureFlagsNoXdev         FileMeasureFlags = 8
)

func FileMeasureFlagsGetType() gi.GType {
	ret := _I.GetGType1(295, "Gio", "FileMeasureFlags")
	return ret
}

type FileMeasureProgressCallback func(reporting bool, current_size uint64, num_dirs uint64, num_files uint64)

func CallFileMeasureProgressCallback(fn FileMeasureProgressCallback, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	reporting := *(*bool)(args[0])
	current_size := *(*uint64)(args[1])
	num_dirs := *(*uint64)(args[2])
	num_files := *(*uint64)(args[3])
	fn(reporting, current_size, num_dirs, num_files)
}

// Object FileMonitor
type FileMonitor struct {
	Object
}

func WrapFileMonitor(p unsafe.Pointer) (r FileMonitor) { r.P = p; return }

type IFileMonitor interface{ P_FileMonitor() unsafe.Pointer }

func (v FileMonitor) P_FileMonitor() unsafe.Pointer { return v.P }
func FileMonitorGetType() gi.GType {
	ret := _I.GetGType1(296, "Gio", "FileMonitor")
	return ret
}

// g_file_monitor_cancel
//
// [ result ] trans: nothing
//
func (v FileMonitor) Cancel() (result bool) {
	iv, err := _I.Get1(2379, "Gio", "FileMonitor", "cancel", 268, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_file_monitor_emit_event
//
// [ child ] trans: nothing
//
// [ other_file ] trans: nothing
//
// [ event_type ] trans: nothing
//
func (v FileMonitor) EmitEvent(child IFile, other_file IFile, event_type FileMonitorEventEnum) {
	iv, err := _I.Get1(2380, "Gio", "FileMonitor", "emit_event", 268, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if child != nil {
		tmp = child.P_File()
	}
	var tmp1 unsafe.Pointer
	if other_file != nil {
		tmp1 = other_file.P_File()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_child := gi.NewPointerArgument(tmp)
	arg_other_file := gi.NewPointerArgument(tmp1)
	arg_event_type := gi.NewIntArgument(int(event_type))
	args := []gi.Argument{arg_v, arg_child, arg_other_file, arg_event_type}
	iv.Call(args, nil, nil)
}

// g_file_monitor_is_cancelled
//
// [ result ] trans: nothing
//
func (v FileMonitor) IsCancelled() (result bool) {
	iv, err := _I.Get1(2381, "Gio", "FileMonitor", "is_cancelled", 268, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_file_monitor_set_rate_limit
//
// [ limit_msecs ] trans: nothing
//
func (v FileMonitor) SetRateLimit(limit_msecs int32) {
	iv, err := _I.Get1(2382, "Gio", "FileMonitor", "set_rate_limit", 268, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_limit_msecs := gi.NewInt32Argument(limit_msecs)
	args := []gi.Argument{arg_v, arg_limit_msecs}
	iv.Call(args, nil, nil)
}

// ignore GType struct FileMonitorClass

// Enum FileMonitorEvent
type FileMonitorEventEnum int

const (
	FileMonitorEventChanged          FileMonitorEventEnum = 0
	FileMonitorEventChangesDoneHint  FileMonitorEventEnum = 1
	FileMonitorEventDeleted          FileMonitorEventEnum = 2
	FileMonitorEventCreated          FileMonitorEventEnum = 3
	FileMonitorEventAttributeChanged FileMonitorEventEnum = 4
	FileMonitorEventPreUnmount       FileMonitorEventEnum = 5
	FileMonitorEventUnmounted        FileMonitorEventEnum = 6
	FileMonitorEventMoved            FileMonitorEventEnum = 7
	FileMonitorEventRenamed          FileMonitorEventEnum = 8
	FileMonitorEventMovedIn          FileMonitorEventEnum = 9
	FileMonitorEventMovedOut         FileMonitorEventEnum = 10
)

func FileMonitorEventGetType() gi.GType {
	ret := _I.GetGType1(297, "Gio", "FileMonitorEvent")
	return ret
}

// Flags FileMonitorFlags
type FileMonitorFlags int

const (
	FileMonitorFlagsNone           FileMonitorFlags = 0
	FileMonitorFlagsWatchMounts    FileMonitorFlags = 1
	FileMonitorFlagsSendMoved      FileMonitorFlags = 2
	FileMonitorFlagsWatchHardLinks FileMonitorFlags = 4
	FileMonitorFlagsWatchMoves     FileMonitorFlags = 8
)

func FileMonitorFlagsGetType() gi.GType {
	ret := _I.GetGType1(298, "Gio", "FileMonitorFlags")
	return ret
}

// ignore private struct FileMonitorPrivate, type of FileMonitor is object

// Object FileOutputStream
type FileOutputStream struct {
	SeekableIfc
	OutputStream
}

func WrapFileOutputStream(p unsafe.Pointer) (r FileOutputStream) { r.P = p; return }

type IFileOutputStream interface{ P_FileOutputStream() unsafe.Pointer }

func (v FileOutputStream) P_FileOutputStream() unsafe.Pointer { return v.P }
func (v FileOutputStream) P_Seekable() unsafe.Pointer         { return v.P }
func FileOutputStreamGetType() gi.GType {
	ret := _I.GetGType1(299, "Gio", "FileOutputStream")
	return ret
}

// g_file_output_stream_get_etag
//
// [ result ] trans: everything
//
func (v FileOutputStream) GetEtag() (result string) {
	iv, err := _I.Get1(2383, "Gio", "FileOutputStream", "get_etag", 273, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_file_output_stream_query_info
//
// [ attributes ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v FileOutputStream) QueryInfo(attributes string, cancellable ICancellable) (result FileInfo, err error) {
	iv, err := _I.Get1(2384, "Gio", "FileOutputStream", "query_info", 273, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_attributes := gi.CString(attributes)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_attributes := gi.NewStringArgument(c_attributes)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_attributes, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_attributes)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_output_stream_query_info_async
//
// [ attributes ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v FileOutputStream) QueryInfoAsync(attributes string, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2385, "Gio", "FileOutputStream", "query_info_async", 273, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attributes := gi.CString(attributes)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_attributes := gi.NewStringArgument(c_attributes)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_attributes, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_attributes)
}

// g_file_output_stream_query_info_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v FileOutputStream) QueryInfoFinish(result IAsyncResult) (result1 FileInfo, err error) {
	iv, err := _I.Get1(2386, "Gio", "FileOutputStream", "query_info_finish", 273, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// ignore GType struct FileOutputStreamClass

// ignore private struct FileOutputStreamPrivate, type of FileOutputStream is object

type FileProgressCallback func(current_num_bytes int64, total_num_bytes int64)

func CallFileProgressCallback(fn FileProgressCallback, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	current_num_bytes := *(*int64)(args[0])
	total_num_bytes := *(*int64)(args[1])
	fn(current_num_bytes, total_num_bytes)
}

// Flags FileQueryInfoFlags
type FileQueryInfoFlags int

const (
	FileQueryInfoFlagsNone             FileQueryInfoFlags = 0
	FileQueryInfoFlagsNofollowSymlinks FileQueryInfoFlags = 1
)

func FileQueryInfoFlagsGetType() gi.GType {
	ret := _I.GetGType1(300, "Gio", "FileQueryInfoFlags")
	return ret
}

type FileReadMoreCallback func(file_contents string, file_size int64) (result bool)

func CallFileReadMoreCallback(fn FileReadMoreCallback, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	file_contents := gi.GoString(*(*unsafe.Pointer)(args[0]))
	file_size := *(*int64)(args[1])
	fnRet := fn(file_contents, file_size)
	*(*int32)(result) = int32(gi.Bool2Int(fnRet))
}

// Enum FileType
type FileTypeEnum int

const (
	FileTypeUnknown      FileTypeEnum = 0
	FileTypeRegular      FileTypeEnum = 1
	FileTypeDirectory    FileTypeEnum = 2
	FileTypeSymbolicLink FileTypeEnum = 3
	FileTypeSpecial      FileTypeEnum = 4
	FileTypeShortcut     FileTypeEnum = 5
	FileTypeMountable    FileTypeEnum = 6
)

func FileTypeGetType() gi.GType {
	ret := _I.GetGType1(301, "Gio", "FileType")
	return ret
}

// Object FilenameCompleter
type FilenameCompleter struct {
	Object
}

func WrapFilenameCompleter(p unsafe.Pointer) (r FilenameCompleter) { r.P = p; return }

type IFilenameCompleter interface{ P_FilenameCompleter() unsafe.Pointer }

func (v FilenameCompleter) P_FilenameCompleter() unsafe.Pointer { return v.P }
func FilenameCompleterGetType() gi.GType {
	ret := _I.GetGType1(302, "Gio", "FilenameCompleter")
	return ret
}

// g_filename_completer_new
//
// [ result ] trans: everything
//
func NewFilenameCompleter() (result FilenameCompleter) {
	iv, err := _I.Get1(2387, "Gio", "FilenameCompleter", "new", 280, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_filename_completer_get_completion_suffix
//
// [ initial_text ] trans: nothing
//
// [ result ] trans: everything
//
func (v FilenameCompleter) GetCompletionSuffix(initial_text string) (result string) {
	iv, err := _I.Get1(2388, "Gio", "FilenameCompleter", "get_completion_suffix", 280, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_initial_text := gi.CString(initial_text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_initial_text := gi.NewStringArgument(c_initial_text)
	args := []gi.Argument{arg_v, arg_initial_text}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_initial_text)
	result = ret.String().Take()
	return
}

// g_filename_completer_get_completions
//
// [ initial_text ] trans: nothing
//
// [ result ] trans: everything
//
func (v FilenameCompleter) GetCompletions(initial_text string) (result gi.CStrArray) {
	iv, err := _I.Get1(2389, "Gio", "FilenameCompleter", "get_completions", 280, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_initial_text := gi.CString(initial_text)
	arg_v := gi.NewPointerArgument(v.P)
	arg_initial_text := gi.NewStringArgument(c_initial_text)
	args := []gi.Argument{arg_v, arg_initial_text}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_initial_text)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_filename_completer_set_dirs_only
//
// [ dirs_only ] trans: nothing
//
func (v FilenameCompleter) SetDirsOnly(dirs_only bool) {
	iv, err := _I.Get1(2390, "Gio", "FilenameCompleter", "set_dirs_only", 280, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_dirs_only := gi.NewBoolArgument(dirs_only)
	args := []gi.Argument{arg_v, arg_dirs_only}
	iv.Call(args, nil, nil)
}

// ignore GType struct FilenameCompleterClass

// Enum FilesystemPreviewType
type FilesystemPreviewTypeEnum int

const (
	FilesystemPreviewTypeIfAlways FilesystemPreviewTypeEnum = 0
	FilesystemPreviewTypeIfLocal  FilesystemPreviewTypeEnum = 1
	FilesystemPreviewTypeNever    FilesystemPreviewTypeEnum = 2
)

func FilesystemPreviewTypeGetType() gi.GType {
	ret := _I.GetGType1(303, "Gio", "FilesystemPreviewType")
	return ret
}

// Object FilterInputStream
type FilterInputStream struct {
	InputStream
}

func WrapFilterInputStream(p unsafe.Pointer) (r FilterInputStream) { r.P = p; return }

type IFilterInputStream interface{ P_FilterInputStream() unsafe.Pointer }

func (v FilterInputStream) P_FilterInputStream() unsafe.Pointer { return v.P }
func FilterInputStreamGetType() gi.GType {
	ret := _I.GetGType1(304, "Gio", "FilterInputStream")
	return ret
}

// g_filter_input_stream_get_base_stream
//
// [ result ] trans: nothing
//
func (v FilterInputStream) GetBaseStream() (result InputStream) {
	iv, err := _I.Get1(2391, "Gio", "FilterInputStream", "get_base_stream", 283, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_filter_input_stream_get_close_base_stream
//
// [ result ] trans: nothing
//
func (v FilterInputStream) GetCloseBaseStream() (result bool) {
	iv, err := _I.Get1(2392, "Gio", "FilterInputStream", "get_close_base_stream", 283, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_filter_input_stream_set_close_base_stream
//
// [ close_base ] trans: nothing
//
func (v FilterInputStream) SetCloseBaseStream(close_base bool) {
	iv, err := _I.Get1(2393, "Gio", "FilterInputStream", "set_close_base_stream", 283, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_close_base := gi.NewBoolArgument(close_base)
	args := []gi.Argument{arg_v, arg_close_base}
	iv.Call(args, nil, nil)
}

// ignore GType struct FilterInputStreamClass

// Object FilterOutputStream
type FilterOutputStream struct {
	OutputStream
}

func WrapFilterOutputStream(p unsafe.Pointer) (r FilterOutputStream) { r.P = p; return }

type IFilterOutputStream interface{ P_FilterOutputStream() unsafe.Pointer }

func (v FilterOutputStream) P_FilterOutputStream() unsafe.Pointer { return v.P }
func FilterOutputStreamGetType() gi.GType {
	ret := _I.GetGType1(305, "Gio", "FilterOutputStream")
	return ret
}

// g_filter_output_stream_get_base_stream
//
// [ result ] trans: nothing
//
func (v FilterOutputStream) GetBaseStream() (result OutputStream) {
	iv, err := _I.Get1(2394, "Gio", "FilterOutputStream", "get_base_stream", 285, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_filter_output_stream_get_close_base_stream
//
// [ result ] trans: nothing
//
func (v FilterOutputStream) GetCloseBaseStream() (result bool) {
	iv, err := _I.Get1(2395, "Gio", "FilterOutputStream", "get_close_base_stream", 285, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_filter_output_stream_set_close_base_stream
//
// [ close_base ] trans: nothing
//
func (v FilterOutputStream) SetCloseBaseStream(close_base bool) {
	iv, err := _I.Get1(2396, "Gio", "FilterOutputStream", "set_close_base_stream", 285, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_close_base := gi.NewBoolArgument(close_base)
	args := []gi.Argument{arg_v, arg_close_base}
	iv.Call(args, nil, nil)
}

// ignore GType struct FilterOutputStreamClass

// Enum IOErrorEnum
type IOErrorEnumEnum int

const (
	IOErrorEnumFailed             IOErrorEnumEnum = 0
	IOErrorEnumNotFound           IOErrorEnumEnum = 1
	IOErrorEnumExists             IOErrorEnumEnum = 2
	IOErrorEnumIsDirectory        IOErrorEnumEnum = 3
	IOErrorEnumNotDirectory       IOErrorEnumEnum = 4
	IOErrorEnumNotEmpty           IOErrorEnumEnum = 5
	IOErrorEnumNotRegularFile     IOErrorEnumEnum = 6
	IOErrorEnumNotSymbolicLink    IOErrorEnumEnum = 7
	IOErrorEnumNotMountableFile   IOErrorEnumEnum = 8
	IOErrorEnumFilenameTooLong    IOErrorEnumEnum = 9
	IOErrorEnumInvalidFilename    IOErrorEnumEnum = 10
	IOErrorEnumTooManyLinks       IOErrorEnumEnum = 11
	IOErrorEnumNoSpace            IOErrorEnumEnum = 12
	IOErrorEnumInvalidArgument    IOErrorEnumEnum = 13
	IOErrorEnumPermissionDenied   IOErrorEnumEnum = 14
	IOErrorEnumNotSupported       IOErrorEnumEnum = 15
	IOErrorEnumNotMounted         IOErrorEnumEnum = 16
	IOErrorEnumAlreadyMounted     IOErrorEnumEnum = 17
	IOErrorEnumClosed             IOErrorEnumEnum = 18
	IOErrorEnumCancelled          IOErrorEnumEnum = 19
	IOErrorEnumPending            IOErrorEnumEnum = 20
	IOErrorEnumReadOnly           IOErrorEnumEnum = 21
	IOErrorEnumCantCreateBackup   IOErrorEnumEnum = 22
	IOErrorEnumWrongEtag          IOErrorEnumEnum = 23
	IOErrorEnumTimedOut           IOErrorEnumEnum = 24
	IOErrorEnumWouldRecurse       IOErrorEnumEnum = 25
	IOErrorEnumBusy               IOErrorEnumEnum = 26
	IOErrorEnumWouldBlock         IOErrorEnumEnum = 27
	IOErrorEnumHostNotFound       IOErrorEnumEnum = 28
	IOErrorEnumWouldMerge         IOErrorEnumEnum = 29
	IOErrorEnumFailedHandled      IOErrorEnumEnum = 30
	IOErrorEnumTooManyOpenFiles   IOErrorEnumEnum = 31
	IOErrorEnumNotInitialized     IOErrorEnumEnum = 32
	IOErrorEnumAddressInUse       IOErrorEnumEnum = 33
	IOErrorEnumPartialInput       IOErrorEnumEnum = 34
	IOErrorEnumInvalidData        IOErrorEnumEnum = 35
	IOErrorEnumDbusError          IOErrorEnumEnum = 36
	IOErrorEnumHostUnreachable    IOErrorEnumEnum = 37
	IOErrorEnumNetworkUnreachable IOErrorEnumEnum = 38
	IOErrorEnumConnectionRefused  IOErrorEnumEnum = 39
	IOErrorEnumProxyFailed        IOErrorEnumEnum = 40
	IOErrorEnumProxyAuthFailed    IOErrorEnumEnum = 41
	IOErrorEnumProxyNeedAuth      IOErrorEnumEnum = 42
	IOErrorEnumProxyNotAllowed    IOErrorEnumEnum = 43
	IOErrorEnumBrokenPipe         IOErrorEnumEnum = 44
	IOErrorEnumConnectionClosed   IOErrorEnumEnum = 44
	IOErrorEnumNotConnected       IOErrorEnumEnum = 45
	IOErrorEnumMessageTooLarge    IOErrorEnumEnum = 46
)

func IOErrorEnumGetType() gi.GType {
	ret := _I.GetGType1(306, "Gio", "IOErrorEnum")
	return ret
}

// Struct IOExtension
type IOExtension struct {
	P unsafe.Pointer
}

func IOExtensionGetType() gi.GType {
	ret := _I.GetGType1(307, "Gio", "IOExtension")
	return ret
}

// g_io_extension_get_name
//
// [ result ] trans: nothing
//
func (v IOExtension) GetName() (result string) {
	iv, err := _I.Get1(2397, "Gio", "IOExtension", "get_name", 288, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_io_extension_get_priority
//
// [ result ] trans: nothing
//
func (v IOExtension) GetPriority() (result int32) {
	iv, err := _I.Get1(2398, "Gio", "IOExtension", "get_priority", 288, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// g_io_extension_get_type
//
// [ result ] trans: nothing
//
func (v IOExtension) GetType() (result gi.GType) {
	iv, err := _I.Get1(2399, "Gio", "IOExtension", "get_type", 288, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.GType(ret.Uint())
	return
}

// Struct IOExtensionPoint
type IOExtensionPoint struct {
	P unsafe.Pointer
}

func IOExtensionPointGetType() gi.GType {
	ret := _I.GetGType1(308, "Gio", "IOExtensionPoint")
	return ret
}

// g_io_extension_point_get_extension_by_name
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v IOExtensionPoint) GetExtensionByName(name string) (result IOExtension) {
	iv, err := _I.Get1(2400, "Gio", "IOExtensionPoint", "get_extension_by_name", 289, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// g_io_extension_point_get_extensions
//
// [ result ] trans: nothing
//
func (v IOExtensionPoint) GetExtensions() (result List) {
	iv, err := _I.Get1(2401, "Gio", "IOExtensionPoint", "get_extensions", 289, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_io_extension_point_get_required_type
//
// [ result ] trans: nothing
//
func (v IOExtensionPoint) GetRequiredType() (result gi.GType) {
	iv, err := _I.Get1(2402, "Gio", "IOExtensionPoint", "get_required_type", 289, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.GType(ret.Uint())
	return
}

// g_io_extension_point_set_required_type
//
// [ type1 ] trans: nothing
//
func (v IOExtensionPoint) SetRequiredType(type1 gi.GType) {
	iv, err := _I.Get1(2403, "Gio", "IOExtensionPoint", "set_required_type", 289, 3, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_type1 := gi.NewUintArgument(uint(type1))
	args := []gi.Argument{arg_v, arg_type1}
	iv.Call(args, nil, nil)
}

// g_io_extension_point_implement
//
// [ extension_point_name ] trans: nothing
//
// [ type1 ] trans: nothing
//
// [ extension_name ] trans: nothing
//
// [ priority ] trans: nothing
//
// [ result ] trans: nothing
//
func IOExtensionPointImplement1(extension_point_name string, type1 gi.GType, extension_name string, priority int32) (result IOExtension) {
	iv, err := _I.Get1(2404, "Gio", "IOExtensionPoint", "implement", 289, 4, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_extension_point_name := gi.CString(extension_point_name)
	c_extension_name := gi.CString(extension_name)
	arg_extension_point_name := gi.NewStringArgument(c_extension_point_name)
	arg_type1 := gi.NewUintArgument(uint(type1))
	arg_extension_name := gi.NewStringArgument(c_extension_name)
	arg_priority := gi.NewInt32Argument(priority)
	args := []gi.Argument{arg_extension_point_name, arg_type1, arg_extension_name, arg_priority}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_extension_point_name)
	gi.Free(c_extension_name)
	result.P = ret.Pointer()
	return
}

// g_io_extension_point_lookup
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func IOExtensionPointLookup1(name string) (result IOExtensionPoint) {
	iv, err := _I.Get1(2405, "Gio", "IOExtensionPoint", "lookup", 289, 5, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// g_io_extension_point_register
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func IOExtensionPointRegister1(name string) (result IOExtensionPoint) {
	iv, err := _I.Get1(2406, "Gio", "IOExtensionPoint", "register", 289, 6, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// Object IOModule
type IOModule struct {
	TypeModule
}

func WrapIOModule(p unsafe.Pointer) (r IOModule) { r.P = p; return }

type IIOModule interface{ P_IOModule() unsafe.Pointer }

func (v IOModule) P_IOModule() unsafe.Pointer { return v.P }
func IOModuleGetType() gi.GType {
	ret := _I.GetGType1(309, "Gio", "IOModule")
	return ret
}

// g_io_module_new
//
// [ filename ] trans: nothing
//
// [ result ] trans: everything
//
func NewIOModule(filename string) (result IOModule) {
	iv, err := _I.Get1(2407, "Gio", "IOModule", "new", 290, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_filename := gi.CString(filename)
	arg_filename := gi.NewStringArgument(c_filename)
	args := []gi.Argument{arg_filename}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_filename)
	result.P = ret.Pointer()
	return
}

// g_io_module_query
//
// [ result ] trans: everything
//
func IOModuleQuery1() (result gi.CStrArray) {
	iv, err := _I.Get1(2408, "Gio", "IOModule", "query", 290, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_io_module_load
//
func (v IOModule) Load() {
	iv, err := _I.Get1(2409, "Gio", "IOModule", "load", 290, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_io_module_unload
//
func (v IOModule) Unload() {
	iv, err := _I.Get1(2410, "Gio", "IOModule", "unload", 290, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// ignore GType struct IOModuleClass

// Struct IOModuleScope
type IOModuleScope struct {
	P unsafe.Pointer
}

func IOModuleScopeGetType() gi.GType {
	ret := _I.GetGType1(310, "Gio", "IOModuleScope")
	return ret
}

// g_io_module_scope_block
//
// [ basename ] trans: nothing
//
func (v IOModuleScope) Block(basename string) {
	iv, err := _I.Get1(2411, "Gio", "IOModuleScope", "block", 292, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_basename := gi.CString(basename)
	arg_v := gi.NewPointerArgument(v.P)
	arg_basename := gi.NewStringArgument(c_basename)
	args := []gi.Argument{arg_v, arg_basename}
	iv.Call(args, nil, nil)
	gi.Free(c_basename)
}

// g_io_module_scope_free
//
func (v IOModuleScope) Free() {
	iv, err := _I.Get1(2412, "Gio", "IOModuleScope", "free", 292, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Enum IOModuleScopeFlags
type IOModuleScopeFlagsEnum int

const (
	IOModuleScopeFlagsNone            IOModuleScopeFlagsEnum = 0
	IOModuleScopeFlagsBlockDuplicates IOModuleScopeFlagsEnum = 1
)

func IOModuleScopeFlagsGetType() gi.GType {
	ret := _I.GetGType1(311, "Gio", "IOModuleScopeFlags")
	return ret
}

// Struct IOSchedulerJob
type IOSchedulerJob struct {
	P unsafe.Pointer
}

func IOSchedulerJobGetType() gi.GType {
	ret := _I.GetGType1(312, "Gio", "IOSchedulerJob")
	return ret
}

// Deprecated
//
// g_io_scheduler_job_send_to_mainloop
//
// [ func1 ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ notify ] trans: nothing
//
// [ result ] trans: nothing
//
func (v IOSchedulerJob) SendToMainloop(func1 SourceFunc) (result bool) {
	iv, err := _I.Get1(2413, "Gio", "IOSchedulerJob", "send_to_mainloop", 294, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var cId uint
	var funcPtr unsafe.Pointer
	if func1 != nil {
		callableInfo := gi.GetCallableInfo("GLib", "SourceFunc")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallSourceFunc(func1, __result, __args)
		}, gi.ScopeNotified, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(gi.Uint2Ptr(cId))
	arg_notify := gi.NewPointerArgument(gi.GetClosureDestroyNotifyPtr())
	args := []gi.Argument{arg_v, arg_func1, arg_user_data, arg_notify}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// g_io_scheduler_job_send_to_mainloop_async
//
// [ func1 ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ notify ] trans: nothing
//
func (v IOSchedulerJob) SendToMainloopAsync(func1 SourceFunc) {
	iv, err := _I.Get1(2414, "Gio", "IOSchedulerJob", "send_to_mainloop_async", 294, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var cId uint
	var funcPtr unsafe.Pointer
	if func1 != nil {
		callableInfo := gi.GetCallableInfo("GLib", "SourceFunc")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallSourceFunc(func1, __result, __args)
		}, gi.ScopeNotified, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_func1 := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(gi.Uint2Ptr(cId))
	arg_notify := gi.NewPointerArgument(gi.GetClosureDestroyNotifyPtr())
	args := []gi.Argument{arg_v, arg_func1, arg_user_data, arg_notify}
	iv.Call(args, nil, nil)
}

type IOSchedulerJobFunc func(job IOSchedulerJob, cancellable Cancellable) (result bool)

func CallIOSchedulerJobFunc(fn IOSchedulerJobFunc, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	job := IOSchedulerJob{P: *(*unsafe.Pointer)(args[0])}
	cancellable := WrapCancellable(*(*unsafe.Pointer)(args[1]))
	fnRet := fn(job, cancellable)
	*(*int32)(result) = int32(gi.Bool2Int(fnRet))
}

// Object IOStream
type IOStream struct {
	Object
}

func WrapIOStream(p unsafe.Pointer) (r IOStream) { r.P = p; return }

type IIOStream interface{ P_IOStream() unsafe.Pointer }

func (v IOStream) P_IOStream() unsafe.Pointer { return v.P }
func IOStreamGetType() gi.GType {
	ret := _I.GetGType1(313, "Gio", "IOStream")
	return ret
}

// g_io_stream_splice_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func IOStreamSpliceFinish1(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2415, "Gio", "IOStream", "splice_finish", 296, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_io_stream_clear_pending
//
func (v IOStream) ClearPending() {
	iv, err := _I.Get1(2416, "Gio", "IOStream", "clear_pending", 296, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_io_stream_close
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v IOStream) Close(cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2417, "Gio", "IOStream", "close", 296, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_io_stream_close_async
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v IOStream) CloseAsync(io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2418, "Gio", "IOStream", "close_async", 296, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_io_stream_close_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v IOStream) CloseFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2419, "Gio", "IOStream", "close_finish", 296, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_io_stream_get_input_stream
//
// [ result ] trans: nothing
//
func (v IOStream) GetInputStream() (result InputStream) {
	iv, err := _I.Get1(2420, "Gio", "IOStream", "get_input_stream", 296, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_io_stream_get_output_stream
//
// [ result ] trans: nothing
//
func (v IOStream) GetOutputStream() (result OutputStream) {
	iv, err := _I.Get1(2421, "Gio", "IOStream", "get_output_stream", 296, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_io_stream_has_pending
//
// [ result ] trans: nothing
//
func (v IOStream) HasPending() (result bool) {
	iv, err := _I.Get1(2422, "Gio", "IOStream", "has_pending", 296, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_io_stream_is_closed
//
// [ result ] trans: nothing
//
func (v IOStream) IsClosed() (result bool) {
	iv, err := _I.Get1(2423, "Gio", "IOStream", "is_closed", 296, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_io_stream_set_pending
//
// [ result ] trans: nothing
//
func (v IOStream) SetPending() (result bool, err error) {
	iv, err := _I.Get1(2424, "Gio", "IOStream", "set_pending", 296, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_io_stream_splice_async
//
// [ stream2 ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v IOStream) SpliceAsync(stream2 IIOStream, flags IOStreamSpliceFlags, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2425, "Gio", "IOStream", "splice_async", 296, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if stream2 != nil {
		tmp = stream2.P_IOStream()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_stream2 := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_stream2, arg_flags, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// Struct IOStreamAdapter
type IOStreamAdapter struct {
	P unsafe.Pointer
}

func IOStreamAdapterGetType() gi.GType {
	ret := _I.GetGType1(314, "Gio", "IOStreamAdapter")
	return ret
}

// ignore GType struct IOStreamClass

// ignore private struct IOStreamPrivate, type of IOStream is object

// Flags IOStreamSpliceFlags
type IOStreamSpliceFlags int

const (
	IOStreamSpliceFlagsNone         IOStreamSpliceFlags = 0
	IOStreamSpliceFlagsCloseStream1 IOStreamSpliceFlags = 1
	IOStreamSpliceFlagsCloseStream2 IOStreamSpliceFlags = 2
	IOStreamSpliceFlagsWaitForBoth  IOStreamSpliceFlags = 4
)

func IOStreamSpliceFlagsGetType() gi.GType {
	ret := _I.GetGType1(315, "Gio", "IOStreamSpliceFlags")
	return ret
}

// Interface Icon
type Icon struct {
	IconIfc
	P unsafe.Pointer
}
type IconIfc struct{}
type IIcon interface{ P_Icon() unsafe.Pointer }

func (v Icon) P_Icon() unsafe.Pointer { return v.P }
func IconGetType() gi.GType {
	ret := _I.GetGType1(316, "Gio", "Icon")
	return ret
}

// g_icon_deserialize
//
// [ value ] trans: nothing
//
// [ result ] trans: everything
//
func IconDeserialize1(value Variant) (result Icon) {
	iv, err := _I.Get1(2426, "Gio", "Icon", "deserialize", 301, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_icon_hash
//
// [ icon ] trans: nothing
//
// [ result ] trans: nothing
//
func IconHash1(icon unsafe.Pointer) (result uint32) {
	iv, err := _I.Get1(2427, "Gio", "Icon", "hash", 301, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_icon := gi.NewPointerArgument(icon)
	args := []gi.Argument{arg_icon}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// g_icon_new_for_string
//
// [ str ] trans: nothing
//
// [ result ] trans: everything
//
func IconNewForString1(str string) (result Icon, err error) {
	iv, err := _I.Get1(2428, "Gio", "Icon", "new_for_string", 301, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_str := gi.CString(str)
	arg_str := gi.NewStringArgument(c_str)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_str, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_str)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_icon_equal
//
// [ icon2 ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *IconIfc) Equal(icon2 IIcon) (result bool) {
	iv, err := _I.Get1(2429, "Gio", "Icon", "equal", 301, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon2 != nil {
		tmp = icon2.P_Icon()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_icon2 := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_icon2}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_icon_serialize
//
// [ result ] trans: everything
//
func (v *IconIfc) Serialize() (result Variant) {
	iv, err := _I.Get1(2430, "Gio", "Icon", "serialize", 301, 4, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_icon_to_string
//
// [ result ] trans: everything
//
func (v *IconIfc) ToString() (result string) {
	iv, err := _I.Get1(2431, "Gio", "Icon", "to_string", 301, 5, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// ignore GType struct IconIface

// Object InetAddress
type InetAddress struct {
	Object
}

func WrapInetAddress(p unsafe.Pointer) (r InetAddress) { r.P = p; return }

type IInetAddress interface{ P_InetAddress() unsafe.Pointer }

func (v InetAddress) P_InetAddress() unsafe.Pointer { return v.P }
func InetAddressGetType() gi.GType {
	ret := _I.GetGType1(317, "Gio", "InetAddress")
	return ret
}

// g_inet_address_new_any
//
// [ family ] trans: nothing
//
// [ result ] trans: everything
//
func NewInetAddressAny(family SocketFamilyEnum) (result InetAddress) {
	iv, err := _I.Get1(2432, "Gio", "InetAddress", "new_any", 303, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_family := gi.NewIntArgument(int(family))
	args := []gi.Argument{arg_family}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_inet_address_new_from_bytes
//
// [ bytes ] trans: nothing
//
// [ family ] trans: nothing
//
// [ result ] trans: everything
//
func NewInetAddressFromBytes(bytes gi.Uint8Array, family SocketFamilyEnum) (result InetAddress) {
	iv, err := _I.Get1(2433, "Gio", "InetAddress", "new_from_bytes", 303, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_bytes := gi.NewPointerArgument(bytes.P)
	arg_family := gi.NewIntArgument(int(family))
	args := []gi.Argument{arg_bytes, arg_family}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_inet_address_new_from_string
//
// [ string ] trans: nothing
//
// [ result ] trans: everything
//
func NewInetAddressFromString(string string) (result InetAddress) {
	iv, err := _I.Get1(2434, "Gio", "InetAddress", "new_from_string", 303, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_string := gi.CString(string)
	arg_string := gi.NewStringArgument(c_string)
	args := []gi.Argument{arg_string}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_string)
	result.P = ret.Pointer()
	return
}

// g_inet_address_new_loopback
//
// [ family ] trans: nothing
//
// [ result ] trans: everything
//
func NewInetAddressLoopback(family SocketFamilyEnum) (result InetAddress) {
	iv, err := _I.Get1(2435, "Gio", "InetAddress", "new_loopback", 303, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_family := gi.NewIntArgument(int(family))
	args := []gi.Argument{arg_family}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_inet_address_equal
//
// [ other_address ] trans: nothing
//
// [ result ] trans: nothing
//
func (v InetAddress) Equal(other_address IInetAddress) (result bool) {
	iv, err := _I.Get1(2436, "Gio", "InetAddress", "equal", 303, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if other_address != nil {
		tmp = other_address.P_InetAddress()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_other_address := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_other_address}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_inet_address_get_family
//
// [ result ] trans: nothing
//
func (v InetAddress) GetFamily() (result SocketFamilyEnum) {
	iv, err := _I.Get1(2437, "Gio", "InetAddress", "get_family", 303, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SocketFamilyEnum(ret.Int())
	return
}

// g_inet_address_get_is_any
//
// [ result ] trans: nothing
//
func (v InetAddress) GetIsAny() (result bool) {
	iv, err := _I.Get1(2438, "Gio", "InetAddress", "get_is_any", 303, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_inet_address_get_is_link_local
//
// [ result ] trans: nothing
//
func (v InetAddress) GetIsLinkLocal() (result bool) {
	iv, err := _I.Get1(2439, "Gio", "InetAddress", "get_is_link_local", 303, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_inet_address_get_is_loopback
//
// [ result ] trans: nothing
//
func (v InetAddress) GetIsLoopback() (result bool) {
	iv, err := _I.Get1(2440, "Gio", "InetAddress", "get_is_loopback", 303, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_inet_address_get_is_mc_global
//
// [ result ] trans: nothing
//
func (v InetAddress) GetIsMcGlobal() (result bool) {
	iv, err := _I.Get1(2441, "Gio", "InetAddress", "get_is_mc_global", 303, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_inet_address_get_is_mc_link_local
//
// [ result ] trans: nothing
//
func (v InetAddress) GetIsMcLinkLocal() (result bool) {
	iv, err := _I.Get1(2442, "Gio", "InetAddress", "get_is_mc_link_local", 303, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_inet_address_get_is_mc_node_local
//
// [ result ] trans: nothing
//
func (v InetAddress) GetIsMcNodeLocal() (result bool) {
	iv, err := _I.Get1(2443, "Gio", "InetAddress", "get_is_mc_node_local", 303, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_inet_address_get_is_mc_org_local
//
// [ result ] trans: nothing
//
func (v InetAddress) GetIsMcOrgLocal() (result bool) {
	iv, err := _I.Get1(2444, "Gio", "InetAddress", "get_is_mc_org_local", 303, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_inet_address_get_is_mc_site_local
//
// [ result ] trans: nothing
//
func (v InetAddress) GetIsMcSiteLocal() (result bool) {
	iv, err := _I.Get1(2445, "Gio", "InetAddress", "get_is_mc_site_local", 303, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_inet_address_get_is_multicast
//
// [ result ] trans: nothing
//
func (v InetAddress) GetIsMulticast() (result bool) {
	iv, err := _I.Get1(2446, "Gio", "InetAddress", "get_is_multicast", 303, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_inet_address_get_is_site_local
//
// [ result ] trans: nothing
//
func (v InetAddress) GetIsSiteLocal() (result bool) {
	iv, err := _I.Get1(2447, "Gio", "InetAddress", "get_is_site_local", 303, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_inet_address_get_native_size
//
// [ result ] trans: nothing
//
func (v InetAddress) GetNativeSize() (result uint64) {
	iv, err := _I.Get1(2448, "Gio", "InetAddress", "get_native_size", 303, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint64()
	return
}

// g_inet_address_to_string
//
// [ result ] trans: everything
//
func (v InetAddress) ToString() (result string) {
	iv, err := _I.Get1(2449, "Gio", "InetAddress", "to_string", 303, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// ignore GType struct InetAddressClass

// Object InetAddressMask
type InetAddressMask struct {
	InitableIfc
	Object
}

func WrapInetAddressMask(p unsafe.Pointer) (r InetAddressMask) { r.P = p; return }

type IInetAddressMask interface{ P_InetAddressMask() unsafe.Pointer }

func (v InetAddressMask) P_InetAddressMask() unsafe.Pointer { return v.P }
func (v InetAddressMask) P_Initable() unsafe.Pointer        { return v.P }
func InetAddressMaskGetType() gi.GType {
	ret := _I.GetGType1(318, "Gio", "InetAddressMask")
	return ret
}

// g_inet_address_mask_new
//
// [ addr ] trans: nothing
//
// [ length ] trans: nothing
//
// [ result ] trans: everything
//
func NewInetAddressMask(addr IInetAddress, length uint32) (result InetAddressMask, err error) {
	iv, err := _I.Get1(2450, "Gio", "InetAddressMask", "new", 305, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if addr != nil {
		tmp = addr.P_InetAddress()
	}
	arg_addr := gi.NewPointerArgument(tmp)
	arg_length := gi.NewUint32Argument(length)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_addr, arg_length, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_inet_address_mask_new_from_string
//
// [ mask_string ] trans: nothing
//
// [ result ] trans: everything
//
func NewInetAddressMaskFromString(mask_string string) (result InetAddressMask, err error) {
	iv, err := _I.Get1(2451, "Gio", "InetAddressMask", "new_from_string", 305, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_mask_string := gi.CString(mask_string)
	arg_mask_string := gi.NewStringArgument(c_mask_string)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_mask_string, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_mask_string)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_inet_address_mask_equal
//
// [ mask2 ] trans: nothing
//
// [ result ] trans: nothing
//
func (v InetAddressMask) Equal(mask2 IInetAddressMask) (result bool) {
	iv, err := _I.Get1(2452, "Gio", "InetAddressMask", "equal", 305, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if mask2 != nil {
		tmp = mask2.P_InetAddressMask()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_mask2 := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_mask2}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_inet_address_mask_get_address
//
// [ result ] trans: nothing
//
func (v InetAddressMask) GetAddress() (result InetAddress) {
	iv, err := _I.Get1(2453, "Gio", "InetAddressMask", "get_address", 305, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_inet_address_mask_get_family
//
// [ result ] trans: nothing
//
func (v InetAddressMask) GetFamily() (result SocketFamilyEnum) {
	iv, err := _I.Get1(2454, "Gio", "InetAddressMask", "get_family", 305, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SocketFamilyEnum(ret.Int())
	return
}

// g_inet_address_mask_get_length
//
// [ result ] trans: nothing
//
func (v InetAddressMask) GetLength() (result uint32) {
	iv, err := _I.Get1(2455, "Gio", "InetAddressMask", "get_length", 305, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// g_inet_address_mask_matches
//
// [ address ] trans: nothing
//
// [ result ] trans: nothing
//
func (v InetAddressMask) Matches(address IInetAddress) (result bool) {
	iv, err := _I.Get1(2456, "Gio", "InetAddressMask", "matches", 305, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if address != nil {
		tmp = address.P_InetAddress()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_address := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_address}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_inet_address_mask_to_string
//
// [ result ] trans: everything
//
func (v InetAddressMask) ToString() (result string) {
	iv, err := _I.Get1(2457, "Gio", "InetAddressMask", "to_string", 305, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// ignore GType struct InetAddressMaskClass

// ignore private struct InetAddressMaskPrivate, type of InetAddressMask is object

// ignore private struct InetAddressPrivate, type of InetAddress is object

// Object InetSocketAddress
type InetSocketAddress struct {
	SocketAddress
}

func WrapInetSocketAddress(p unsafe.Pointer) (r InetSocketAddress) { r.P = p; return }

type IInetSocketAddress interface{ P_InetSocketAddress() unsafe.Pointer }

func (v InetSocketAddress) P_InetSocketAddress() unsafe.Pointer { return v.P }
func InetSocketAddressGetType() gi.GType {
	ret := _I.GetGType1(319, "Gio", "InetSocketAddress")
	return ret
}

// g_inet_socket_address_new
//
// [ address ] trans: nothing
//
// [ port ] trans: nothing
//
// [ result ] trans: everything
//
func NewInetSocketAddress(address IInetAddress, port uint16) (result InetSocketAddress) {
	iv, err := _I.Get1(2458, "Gio", "InetSocketAddress", "new", 309, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if address != nil {
		tmp = address.P_InetAddress()
	}
	arg_address := gi.NewPointerArgument(tmp)
	arg_port := gi.NewUint16Argument(port)
	args := []gi.Argument{arg_address, arg_port}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_inet_socket_address_new_from_string
//
// [ address ] trans: nothing
//
// [ port ] trans: nothing
//
// [ result ] trans: everything
//
func NewInetSocketAddressFromString(address string, port uint32) (result InetSocketAddress) {
	iv, err := _I.Get1(2459, "Gio", "InetSocketAddress", "new_from_string", 309, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_address := gi.CString(address)
	arg_address := gi.NewStringArgument(c_address)
	arg_port := gi.NewUint32Argument(port)
	args := []gi.Argument{arg_address, arg_port}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_address)
	result.P = ret.Pointer()
	return
}

// g_inet_socket_address_get_address
//
// [ result ] trans: nothing
//
func (v InetSocketAddress) GetAddress() (result InetAddress) {
	iv, err := _I.Get1(2460, "Gio", "InetSocketAddress", "get_address", 309, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_inet_socket_address_get_flowinfo
//
// [ result ] trans: nothing
//
func (v InetSocketAddress) GetFlowinfo() (result uint32) {
	iv, err := _I.Get1(2461, "Gio", "InetSocketAddress", "get_flowinfo", 309, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// g_inet_socket_address_get_port
//
// [ result ] trans: nothing
//
func (v InetSocketAddress) GetPort() (result uint16) {
	iv, err := _I.Get1(2462, "Gio", "InetSocketAddress", "get_port", 309, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint16()
	return
}

// g_inet_socket_address_get_scope_id
//
// [ result ] trans: nothing
//
func (v InetSocketAddress) GetScopeId() (result uint32) {
	iv, err := _I.Get1(2463, "Gio", "InetSocketAddress", "get_scope_id", 309, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// ignore GType struct InetSocketAddressClass

// ignore private struct InetSocketAddressPrivate, type of InetSocketAddress is object

// Interface Initable
type Initable struct {
	InitableIfc
	P unsafe.Pointer
}
type InitableIfc struct{}
type IInitable interface{ P_Initable() unsafe.Pointer }

func (v Initable) P_Initable() unsafe.Pointer { return v.P }
func InitableGetType() gi.GType {
	ret := _I.GetGType1(320, "Gio", "Initable")
	return ret
}

// Deprecated
//
// g_initable_newv
//
// [ object_type ] trans: nothing
//
// [ n_parameters ] trans: nothing
//
// [ parameters ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func InitableNewv1(object_type gi.GType, n_parameters uint32, parameters unsafe.Pointer, cancellable ICancellable) (result Object, err error) {
	iv, err := _I.Get1(2464, "Gio", "Initable", "newv", 312, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_object_type := gi.NewUintArgument(uint(object_type))
	arg_n_parameters := gi.NewUint32Argument(n_parameters)
	arg_parameters := gi.NewPointerArgument(parameters)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_object_type, arg_n_parameters, arg_parameters, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_initable_init
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *InitableIfc) Init(cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2465, "Gio", "Initable", "init", 312, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// ignore GType struct InitableIface

// Struct InputMessage
type InputMessage struct {
	P unsafe.Pointer
}

const SizeOfStructInputMessage = 56

func InputMessageGetType() gi.GType {
	ret := _I.GetGType1(321, "Gio", "InputMessage")
	return ret
}

func (v InputMessage) p() *C.GInputMessage {
	return (*C.GInputMessage)(v.P)
}
func (v InputMessage) Address() (result int /*TODO*/) {
	return
}
func (v InputMessage) Vectors() (result int /*TODO*/) {
	return
}
func (v InputMessage) NumVectors() (result uint32) {
	result = uint32(v.p().num_vectors)
	return
}
func (v InputMessage) BytesReceived() (result uint64) {
	result = uint64(v.p().bytes_received)
	return
}
func (v InputMessage) Flags() (result int32) {
	result = int32(v.p().flags)
	return
}
func (v InputMessage) ControlMessages() (result int /*TODO*/) {
	return
}
func (v InputMessage) NumControlMessages() (result int /*TODO*/) {
	return
}

// Object InputStream
type InputStream struct {
	Object
}

func WrapInputStream(p unsafe.Pointer) (r InputStream) { r.P = p; return }

type IInputStream interface{ P_InputStream() unsafe.Pointer }

func (v InputStream) P_InputStream() unsafe.Pointer { return v.P }
func InputStreamGetType() gi.GType {
	ret := _I.GetGType1(322, "Gio", "InputStream")
	return ret
}

// g_input_stream_clear_pending
//
func (v InputStream) ClearPending() {
	iv, err := _I.Get1(2466, "Gio", "InputStream", "clear_pending", 315, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_input_stream_close
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v InputStream) Close(cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2467, "Gio", "InputStream", "close", 315, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_input_stream_close_async
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v InputStream) CloseAsync(io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2468, "Gio", "InputStream", "close_async", 315, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_input_stream_close_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v InputStream) CloseFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2469, "Gio", "InputStream", "close_finish", 315, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_input_stream_has_pending
//
// [ result ] trans: nothing
//
func (v InputStream) HasPending() (result bool) {
	iv, err := _I.Get1(2470, "Gio", "InputStream", "has_pending", 315, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_input_stream_is_closed
//
// [ result ] trans: nothing
//
func (v InputStream) IsClosed() (result bool) {
	iv, err := _I.Get1(2471, "Gio", "InputStream", "is_closed", 315, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_input_stream_read
//
// [ buffer ] trans: nothing
//
// [ count ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v InputStream) Read(buffer gi.Uint8Array, count uint64, cancellable ICancellable) (result int64, err error) {
	iv, err := _I.Get1(2472, "Gio", "InputStream", "read", 315, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_buffer := gi.NewPointerArgument(buffer.P)
	arg_count := gi.NewUint64Argument(count)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_buffer, arg_count, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int64()
	return
}

// g_input_stream_read_all
//
// [ buffer ] trans: nothing
//
// [ count ] trans: nothing
//
// [ bytes_read ] trans: everything, dir: out
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v InputStream) ReadAll(buffer gi.Uint8Array, count uint64, cancellable ICancellable) (result bool, bytes_read uint64, err error) {
	iv, err := _I.Get1(2473, "Gio", "InputStream", "read_all", 315, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_buffer := gi.NewPointerArgument(buffer.P)
	arg_count := gi.NewUint64Argument(count)
	arg_bytes_read := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_buffer, arg_count, arg_bytes_read, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	bytes_read = outArgs[0].Uint64()
	result = ret.Bool()
	return
}

// g_input_stream_read_all_async
//
// [ buffer ] trans: nothing
//
// [ count ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v InputStream) ReadAllAsync(buffer gi.Uint8Array, count uint64, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2474, "Gio", "InputStream", "read_all_async", 315, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_buffer := gi.NewPointerArgument(buffer.P)
	arg_count := gi.NewUint64Argument(count)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_buffer, arg_count, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_input_stream_read_all_finish
//
// [ result ] trans: nothing
//
// [ bytes_read ] trans: everything, dir: out
//
// [ result1 ] trans: nothing
//
func (v InputStream) ReadAllFinish(result IAsyncResult) (result1 bool, bytes_read uint64, err error) {
	iv, err := _I.Get1(2475, "Gio", "InputStream", "read_all_finish", 315, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_bytes_read := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_result, arg_bytes_read, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	bytes_read = outArgs[0].Uint64()
	result1 = ret.Bool()
	return
}

// g_input_stream_read_async
//
// [ buffer ] trans: nothing
//
// [ count ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v InputStream) ReadAsync(buffer gi.Uint8Array, count uint64, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2476, "Gio", "InputStream", "read_async", 315, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_buffer := gi.NewPointerArgument(buffer.P)
	arg_count := gi.NewUint64Argument(count)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_buffer, arg_count, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_input_stream_read_bytes
//
// [ count ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v InputStream) ReadBytes(count uint64, cancellable ICancellable) (result Bytes, err error) {
	iv, err := _I.Get1(2477, "Gio", "InputStream", "read_bytes", 315, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewUint64Argument(count)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_count, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_input_stream_read_bytes_async
//
// [ count ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v InputStream) ReadBytesAsync(count uint64, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2478, "Gio", "InputStream", "read_bytes_async", 315, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewUint64Argument(count)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_count, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_input_stream_read_bytes_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v InputStream) ReadBytesFinish(result IAsyncResult) (result1 Bytes, err error) {
	iv, err := _I.Get1(2479, "Gio", "InputStream", "read_bytes_finish", 315, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// g_input_stream_read_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v InputStream) ReadFinish(result IAsyncResult) (result1 int64, err error) {
	iv, err := _I.Get1(2480, "Gio", "InputStream", "read_finish", 315, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Int64()
	return
}

// g_input_stream_set_pending
//
// [ result ] trans: nothing
//
func (v InputStream) SetPending() (result bool, err error) {
	iv, err := _I.Get1(2481, "Gio", "InputStream", "set_pending", 315, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_input_stream_skip
//
// [ count ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v InputStream) Skip(count uint64, cancellable ICancellable) (result int64, err error) {
	iv, err := _I.Get1(2482, "Gio", "InputStream", "skip", 315, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewUint64Argument(count)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_count, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int64()
	return
}

// g_input_stream_skip_async
//
// [ count ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v InputStream) SkipAsync(count uint64, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2483, "Gio", "InputStream", "skip_async", 315, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_count := gi.NewUint64Argument(count)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_count, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_input_stream_skip_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v InputStream) SkipFinish(result IAsyncResult) (result1 int64, err error) {
	iv, err := _I.Get1(2484, "Gio", "InputStream", "skip_finish", 315, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Int64()
	return
}

// ignore GType struct InputStreamClass

// ignore private struct InputStreamPrivate, type of InputStream is object

// Struct InputVector
type InputVector struct {
	P unsafe.Pointer
}

const SizeOfStructInputVector = 16

func InputVectorGetType() gi.GType {
	ret := _I.GetGType1(323, "Gio", "InputVector")
	return ret
}

func (v InputVector) p() *C.GInputVector {
	return (*C.GInputVector)(v.P)
}
func (v InputVector) Buffer() (result unsafe.Pointer) {
	result = unsafe.Pointer(v.p().buffer)
	return
}
func (v InputVector) Size() (result uint64) {
	result = uint64(v.p().size)
	return
}

// Interface ListModel
type ListModel struct {
	ListModelIfc
	P unsafe.Pointer
}
type ListModelIfc struct{}
type IListModel interface{ P_ListModel() unsafe.Pointer }

func (v ListModel) P_ListModel() unsafe.Pointer { return v.P }
func ListModelGetType() gi.GType {
	ret := _I.GetGType1(324, "Gio", "ListModel")
	return ret
}

// g_list_model_get_item_type
//
// [ result ] trans: nothing
//
func (v *ListModelIfc) GetItemType() (result gi.GType) {
	iv, err := _I.Get1(2485, "Gio", "ListModel", "get_item_type", 319, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.GType(ret.Uint())
	return
}

// g_list_model_get_n_items
//
// [ result ] trans: nothing
//
func (v *ListModelIfc) GetNItems() (result uint32) {
	iv, err := _I.Get1(2486, "Gio", "ListModel", "get_n_items", 319, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// g_list_model_get_object
//
// [ position ] trans: nothing
//
// [ result ] trans: everything
//
func (v *ListModelIfc) GetItem(position uint32) (result Object) {
	iv, err := _I.Get1(2487, "Gio", "ListModel", "get_item", 319, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_position := gi.NewUint32Argument(position)
	args := []gi.Argument{arg_v, arg_position}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_list_model_items_changed
//
// [ position ] trans: nothing
//
// [ removed ] trans: nothing
//
// [ added ] trans: nothing
//
func (v *ListModelIfc) ItemsChanged(position uint32, removed uint32, added uint32) {
	iv, err := _I.Get1(2488, "Gio", "ListModel", "items_changed", 319, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_position := gi.NewUint32Argument(position)
	arg_removed := gi.NewUint32Argument(removed)
	arg_added := gi.NewUint32Argument(added)
	args := []gi.Argument{arg_v, arg_position, arg_removed, arg_added}
	iv.Call(args, nil, nil)
}

// ignore GType struct ListModelInterface

// Object ListStore
type ListStore struct {
	ListModelIfc
	Object
}

func WrapListStore(p unsafe.Pointer) (r ListStore) { r.P = p; return }

type IListStore interface{ P_ListStore() unsafe.Pointer }

func (v ListStore) P_ListStore() unsafe.Pointer { return v.P }
func (v ListStore) P_ListModel() unsafe.Pointer { return v.P }
func ListStoreGetType() gi.GType {
	ret := _I.GetGType1(325, "Gio", "ListStore")
	return ret
}

// g_list_store_new
//
// [ item_type ] trans: nothing
//
// [ result ] trans: everything
//
func NewListStore(item_type gi.GType) (result ListStore) {
	iv, err := _I.Get1(2489, "Gio", "ListStore", "new", 321, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_item_type := gi.NewUintArgument(uint(item_type))
	args := []gi.Argument{arg_item_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_list_store_append
//
// [ item ] trans: nothing
//
func (v ListStore) Append(item IObject) {
	iv, err := _I.Get1(2490, "Gio", "ListStore", "append", 321, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if item != nil {
		tmp = item.P_Object()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_item := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_item}
	iv.Call(args, nil, nil)
}

// g_list_store_insert
//
// [ position ] trans: nothing
//
// [ item ] trans: nothing
//
func (v ListStore) Insert(position uint32, item IObject) {
	iv, err := _I.Get1(2491, "Gio", "ListStore", "insert", 321, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if item != nil {
		tmp = item.P_Object()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewUint32Argument(position)
	arg_item := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_position, arg_item}
	iv.Call(args, nil, nil)
}

// g_list_store_insert_sorted
//
// [ item ] trans: nothing
//
// [ compare_func ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ result ] trans: nothing
//
func (v ListStore) InsertSorted(item IObject, compare_func CompareDataFunc) (result uint32) {
	iv, err := _I.Get1(2492, "Gio", "ListStore", "insert_sorted", 321, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if item != nil {
		tmp = item.P_Object()
	}
	var cId uint
	var funcPtr unsafe.Pointer
	if compare_func != nil {
		callableInfo := gi.GetCallableInfo("GLib", "CompareDataFunc")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallCompareDataFunc(compare_func, __result, __args)
		}, gi.ScopeCall, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_item := gi.NewPointerArgument(tmp)
	arg_compare_func := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_item, arg_compare_func, arg_user_data}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.UnregisterFClosure(cId)
	result = ret.Uint32()
	return
}

// g_list_store_remove
//
// [ position ] trans: nothing
//
func (v ListStore) Remove(position uint32) {
	iv, err := _I.Get1(2493, "Gio", "ListStore", "remove", 321, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewUint32Argument(position)
	args := []gi.Argument{arg_v, arg_position}
	iv.Call(args, nil, nil)
}

// g_list_store_remove_all
//
func (v ListStore) RemoveAll() {
	iv, err := _I.Get1(2494, "Gio", "ListStore", "remove_all", 321, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_list_store_sort
//
// [ compare_func ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v ListStore) Sort(compare_func CompareDataFunc) {
	iv, err := _I.Get1(2495, "Gio", "ListStore", "sort", 321, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var cId uint
	var funcPtr unsafe.Pointer
	if compare_func != nil {
		callableInfo := gi.GetCallableInfo("GLib", "CompareDataFunc")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallCompareDataFunc(compare_func, __result, __args)
		}, gi.ScopeCall, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_compare_func := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_compare_func, arg_user_data}
	iv.Call(args, nil, nil)
	gi.UnregisterFClosure(cId)
}

// g_list_store_splice
//
// [ position ] trans: nothing
//
// [ n_removals ] trans: nothing
//
// [ additions ] trans: nothing
//
// [ n_additions ] trans: nothing
//
func (v ListStore) Splice(position uint32, n_removals uint32, additions unsafe.Pointer, n_additions uint32) {
	iv, err := _I.Get1(2496, "Gio", "ListStore", "splice", 321, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewUint32Argument(position)
	arg_n_removals := gi.NewUint32Argument(n_removals)
	arg_additions := gi.NewPointerArgument(additions)
	arg_n_additions := gi.NewUint32Argument(n_additions)
	args := []gi.Argument{arg_v, arg_position, arg_n_removals, arg_additions, arg_n_additions}
	iv.Call(args, nil, nil)
}

// ignore GType struct ListStoreClass

// Interface LoadableIcon
type LoadableIcon struct {
	LoadableIconIfc
	P unsafe.Pointer
}
type LoadableIconIfc struct{}
type ILoadableIcon interface{ P_LoadableIcon() unsafe.Pointer }

func (v LoadableIcon) P_LoadableIcon() unsafe.Pointer { return v.P }
func LoadableIconGetType() gi.GType {
	ret := _I.GetGType1(326, "Gio", "LoadableIcon")
	return ret
}

// g_loadable_icon_load
//
// [ size ] trans: nothing
//
// [ type1 ] trans: everything, dir: out
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *LoadableIconIfc) Load(size int32, cancellable ICancellable) (result InputStream, type1 string, err error) {
	iv, err := _I.Get1(2497, "Gio", "LoadableIcon", "load", 323, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_size := gi.NewInt32Argument(size)
	arg_type1 := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_size, arg_type1, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	type1 = outArgs[0].String().Take()
	result.P = ret.Pointer()
	return
}

// g_loadable_icon_load_async
//
// [ size ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *LoadableIconIfc) LoadAsync(size int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2498, "Gio", "LoadableIcon", "load_async", 323, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_size := gi.NewInt32Argument(size)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_size, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_loadable_icon_load_finish
//
// [ res ] trans: nothing
//
// [ type1 ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func (v *LoadableIconIfc) LoadFinish(res IAsyncResult) (result InputStream, type1 string, err error) {
	iv, err := _I.Get1(2499, "Gio", "LoadableIcon", "load_finish", 323, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_res := gi.NewPointerArgument(tmp)
	arg_type1 := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_res, arg_type1, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	type1 = outArgs[0].String().Take()
	result.P = ret.Pointer()
	return
}

// ignore GType struct LoadableIconIface

// Object MemoryInputStream
type MemoryInputStream struct {
	PollableInputStreamIfc
	SeekableIfc
	InputStream
}

func WrapMemoryInputStream(p unsafe.Pointer) (r MemoryInputStream) { r.P = p; return }

type IMemoryInputStream interface{ P_MemoryInputStream() unsafe.Pointer }

func (v MemoryInputStream) P_MemoryInputStream() unsafe.Pointer   { return v.P }
func (v MemoryInputStream) P_PollableInputStream() unsafe.Pointer { return v.P }
func (v MemoryInputStream) P_Seekable() unsafe.Pointer            { return v.P }
func MemoryInputStreamGetType() gi.GType {
	ret := _I.GetGType1(327, "Gio", "MemoryInputStream")
	return ret
}

// g_memory_input_stream_new
//
// [ result ] trans: everything
//
func NewMemoryInputStream() (result MemoryInputStream) {
	iv, err := _I.Get1(2500, "Gio", "MemoryInputStream", "new", 332, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_memory_input_stream_new_from_bytes
//
// [ bytes ] trans: nothing
//
// [ result ] trans: everything
//
func NewMemoryInputStreamFromBytes(bytes Bytes) (result MemoryInputStream) {
	iv, err := _I.Get1(2501, "Gio", "MemoryInputStream", "new_from_bytes", 332, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_bytes := gi.NewPointerArgument(bytes.P)
	args := []gi.Argument{arg_bytes}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_memory_input_stream_new_from_data
//
// [ data ] trans: everything
//
// [ len1 ] trans: nothing
//
// [ destroy ] trans: nothing
//
// [ result ] trans: everything
//
func NewMemoryInputStreamFromData(data gi.Uint8Array, len1 int64, destroy DestroyNotify) (result MemoryInputStream) {
	iv, err := _I.Get1(2502, "Gio", "MemoryInputStream", "new_from_data", 332, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var funcPtr unsafe.Pointer
	if destroy != nil {
		callableInfo := gi.GetCallableInfo("GLib", "DestroyNotify")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallDestroyNotify(destroy, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_data := gi.NewPointerArgument(data.P)
	arg_len1 := gi.NewInt64Argument(len1)
	arg_destroy := gi.NewPointerArgument(funcPtr)
	args := []gi.Argument{arg_data, arg_len1, arg_destroy}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_memory_input_stream_add_bytes
//
// [ bytes ] trans: nothing
//
func (v MemoryInputStream) AddBytes(bytes Bytes) {
	iv, err := _I.Get1(2503, "Gio", "MemoryInputStream", "add_bytes", 332, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_bytes := gi.NewPointerArgument(bytes.P)
	args := []gi.Argument{arg_v, arg_bytes}
	iv.Call(args, nil, nil)
}

// g_memory_input_stream_add_data
//
// [ data ] trans: everything
//
// [ len1 ] trans: nothing
//
// [ destroy ] trans: nothing
//
func (v MemoryInputStream) AddData(data gi.Uint8Array, len1 int64, destroy DestroyNotify) {
	iv, err := _I.Get1(2504, "Gio", "MemoryInputStream", "add_data", 332, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var funcPtr unsafe.Pointer
	if destroy != nil {
		callableInfo := gi.GetCallableInfo("GLib", "DestroyNotify")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallDestroyNotify(destroy, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_data := gi.NewPointerArgument(data.P)
	arg_len1 := gi.NewInt64Argument(len1)
	arg_destroy := gi.NewPointerArgument(funcPtr)
	args := []gi.Argument{arg_v, arg_data, arg_len1, arg_destroy}
	iv.Call(args, nil, nil)
}

// ignore GType struct MemoryInputStreamClass

// ignore private struct MemoryInputStreamPrivate, type of MemoryInputStream is object

// Object MemoryOutputStream
type MemoryOutputStream struct {
	PollableOutputStreamIfc
	SeekableIfc
	OutputStream
}

func WrapMemoryOutputStream(p unsafe.Pointer) (r MemoryOutputStream) { r.P = p; return }

type IMemoryOutputStream interface{ P_MemoryOutputStream() unsafe.Pointer }

func (v MemoryOutputStream) P_MemoryOutputStream() unsafe.Pointer   { return v.P }
func (v MemoryOutputStream) P_PollableOutputStream() unsafe.Pointer { return v.P }
func (v MemoryOutputStream) P_Seekable() unsafe.Pointer             { return v.P }
func MemoryOutputStreamGetType() gi.GType {
	ret := _I.GetGType1(328, "Gio", "MemoryOutputStream")
	return ret
}

// g_memory_output_stream_new_resizable
//
// [ result ] trans: everything
//
func NewMemoryOutputStreamResizable() (result MemoryOutputStream) {
	iv, err := _I.Get1(2505, "Gio", "MemoryOutputStream", "new_resizable", 335, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_memory_output_stream_get_data
//
// [ result ] trans: nothing
//
func (v MemoryOutputStream) GetData() (result unsafe.Pointer) {
	iv, err := _I.Get1(2506, "Gio", "MemoryOutputStream", "get_data", 335, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Pointer()
	return
}

// g_memory_output_stream_get_data_size
//
// [ result ] trans: nothing
//
func (v MemoryOutputStream) GetDataSize() (result uint64) {
	iv, err := _I.Get1(2507, "Gio", "MemoryOutputStream", "get_data_size", 335, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint64()
	return
}

// g_memory_output_stream_get_size
//
// [ result ] trans: nothing
//
func (v MemoryOutputStream) GetSize() (result uint64) {
	iv, err := _I.Get1(2508, "Gio", "MemoryOutputStream", "get_size", 335, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint64()
	return
}

// g_memory_output_stream_steal_as_bytes
//
// [ result ] trans: everything
//
func (v MemoryOutputStream) StealAsBytes() (result Bytes) {
	iv, err := _I.Get1(2509, "Gio", "MemoryOutputStream", "steal_as_bytes", 335, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_memory_output_stream_steal_data
//
// [ result ] trans: everything
//
func (v MemoryOutputStream) StealData() (result unsafe.Pointer) {
	iv, err := _I.Get1(2510, "Gio", "MemoryOutputStream", "steal_data", 335, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Pointer()
	return
}

// ignore GType struct MemoryOutputStreamClass

// ignore private struct MemoryOutputStreamPrivate, type of MemoryOutputStream is object

// Object Menu
type Menu struct {
	MenuModel
}

func WrapMenu(p unsafe.Pointer) (r Menu) { r.P = p; return }

type IMenu interface{ P_Menu() unsafe.Pointer }

func (v Menu) P_Menu() unsafe.Pointer { return v.P }
func MenuGetType() gi.GType {
	ret := _I.GetGType1(329, "Gio", "Menu")
	return ret
}

// g_menu_new
//
// [ result ] trans: everything
//
func NewMenu() (result Menu) {
	iv, err := _I.Get1(2511, "Gio", "Menu", "new", 338, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_menu_append
//
// [ label ] trans: nothing
//
// [ detailed_action ] trans: nothing
//
func (v Menu) Append(label string, detailed_action string) {
	iv, err := _I.Get1(2512, "Gio", "Menu", "append", 338, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	c_detailed_action := gi.CString(detailed_action)
	arg_v := gi.NewPointerArgument(v.P)
	arg_label := gi.NewStringArgument(c_label)
	arg_detailed_action := gi.NewStringArgument(c_detailed_action)
	args := []gi.Argument{arg_v, arg_label, arg_detailed_action}
	iv.Call(args, nil, nil)
	gi.Free(c_label)
	gi.Free(c_detailed_action)
}

// g_menu_append_item
//
// [ item ] trans: nothing
//
func (v Menu) AppendItem(item IMenuItem) {
	iv, err := _I.Get1(2513, "Gio", "Menu", "append_item", 338, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if item != nil {
		tmp = item.P_MenuItem()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_item := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_item}
	iv.Call(args, nil, nil)
}

// g_menu_append_section
//
// [ label ] trans: nothing
//
// [ section ] trans: nothing
//
func (v Menu) AppendSection(label string, section IMenuModel) {
	iv, err := _I.Get1(2514, "Gio", "Menu", "append_section", 338, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	var tmp unsafe.Pointer
	if section != nil {
		tmp = section.P_MenuModel()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_label := gi.NewStringArgument(c_label)
	arg_section := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_label, arg_section}
	iv.Call(args, nil, nil)
	gi.Free(c_label)
}

// g_menu_append_submenu
//
// [ label ] trans: nothing
//
// [ submenu ] trans: nothing
//
func (v Menu) AppendSubmenu(label string, submenu IMenuModel) {
	iv, err := _I.Get1(2515, "Gio", "Menu", "append_submenu", 338, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	var tmp unsafe.Pointer
	if submenu != nil {
		tmp = submenu.P_MenuModel()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_label := gi.NewStringArgument(c_label)
	arg_submenu := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_label, arg_submenu}
	iv.Call(args, nil, nil)
	gi.Free(c_label)
}

// g_menu_freeze
//
func (v Menu) Freeze() {
	iv, err := _I.Get1(2516, "Gio", "Menu", "freeze", 338, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_menu_insert
//
// [ position ] trans: nothing
//
// [ label ] trans: nothing
//
// [ detailed_action ] trans: nothing
//
func (v Menu) Insert(position int32, label string, detailed_action string) {
	iv, err := _I.Get1(2517, "Gio", "Menu", "insert", 338, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	c_detailed_action := gi.CString(detailed_action)
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewInt32Argument(position)
	arg_label := gi.NewStringArgument(c_label)
	arg_detailed_action := gi.NewStringArgument(c_detailed_action)
	args := []gi.Argument{arg_v, arg_position, arg_label, arg_detailed_action}
	iv.Call(args, nil, nil)
	gi.Free(c_label)
	gi.Free(c_detailed_action)
}

// g_menu_insert_item
//
// [ position ] trans: nothing
//
// [ item ] trans: nothing
//
func (v Menu) InsertItem(position int32, item IMenuItem) {
	iv, err := _I.Get1(2518, "Gio", "Menu", "insert_item", 338, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if item != nil {
		tmp = item.P_MenuItem()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewInt32Argument(position)
	arg_item := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_position, arg_item}
	iv.Call(args, nil, nil)
}

// g_menu_insert_section
//
// [ position ] trans: nothing
//
// [ label ] trans: nothing
//
// [ section ] trans: nothing
//
func (v Menu) InsertSection(position int32, label string, section IMenuModel) {
	iv, err := _I.Get1(2519, "Gio", "Menu", "insert_section", 338, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	var tmp unsafe.Pointer
	if section != nil {
		tmp = section.P_MenuModel()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewInt32Argument(position)
	arg_label := gi.NewStringArgument(c_label)
	arg_section := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_position, arg_label, arg_section}
	iv.Call(args, nil, nil)
	gi.Free(c_label)
}

// g_menu_insert_submenu
//
// [ position ] trans: nothing
//
// [ label ] trans: nothing
//
// [ submenu ] trans: nothing
//
func (v Menu) InsertSubmenu(position int32, label string, submenu IMenuModel) {
	iv, err := _I.Get1(2520, "Gio", "Menu", "insert_submenu", 338, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	var tmp unsafe.Pointer
	if submenu != nil {
		tmp = submenu.P_MenuModel()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewInt32Argument(position)
	arg_label := gi.NewStringArgument(c_label)
	arg_submenu := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_position, arg_label, arg_submenu}
	iv.Call(args, nil, nil)
	gi.Free(c_label)
}

// g_menu_prepend
//
// [ label ] trans: nothing
//
// [ detailed_action ] trans: nothing
//
func (v Menu) Prepend(label string, detailed_action string) {
	iv, err := _I.Get1(2521, "Gio", "Menu", "prepend", 338, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	c_detailed_action := gi.CString(detailed_action)
	arg_v := gi.NewPointerArgument(v.P)
	arg_label := gi.NewStringArgument(c_label)
	arg_detailed_action := gi.NewStringArgument(c_detailed_action)
	args := []gi.Argument{arg_v, arg_label, arg_detailed_action}
	iv.Call(args, nil, nil)
	gi.Free(c_label)
	gi.Free(c_detailed_action)
}

// g_menu_prepend_item
//
// [ item ] trans: nothing
//
func (v Menu) PrependItem(item IMenuItem) {
	iv, err := _I.Get1(2522, "Gio", "Menu", "prepend_item", 338, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if item != nil {
		tmp = item.P_MenuItem()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_item := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_item}
	iv.Call(args, nil, nil)
}

// g_menu_prepend_section
//
// [ label ] trans: nothing
//
// [ section ] trans: nothing
//
func (v Menu) PrependSection(label string, section IMenuModel) {
	iv, err := _I.Get1(2523, "Gio", "Menu", "prepend_section", 338, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	var tmp unsafe.Pointer
	if section != nil {
		tmp = section.P_MenuModel()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_label := gi.NewStringArgument(c_label)
	arg_section := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_label, arg_section}
	iv.Call(args, nil, nil)
	gi.Free(c_label)
}

// g_menu_prepend_submenu
//
// [ label ] trans: nothing
//
// [ submenu ] trans: nothing
//
func (v Menu) PrependSubmenu(label string, submenu IMenuModel) {
	iv, err := _I.Get1(2524, "Gio", "Menu", "prepend_submenu", 338, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	var tmp unsafe.Pointer
	if submenu != nil {
		tmp = submenu.P_MenuModel()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_label := gi.NewStringArgument(c_label)
	arg_submenu := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_label, arg_submenu}
	iv.Call(args, nil, nil)
	gi.Free(c_label)
}

// g_menu_remove
//
// [ position ] trans: nothing
//
func (v Menu) Remove(position int32) {
	iv, err := _I.Get1(2525, "Gio", "Menu", "remove", 338, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewInt32Argument(position)
	args := []gi.Argument{arg_v, arg_position}
	iv.Call(args, nil, nil)
}

// g_menu_remove_all
//
func (v Menu) RemoveAll() {
	iv, err := _I.Get1(2526, "Gio", "Menu", "remove_all", 338, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Object MenuAttributeIter
type MenuAttributeIter struct {
	Object
}

func WrapMenuAttributeIter(p unsafe.Pointer) (r MenuAttributeIter) { r.P = p; return }

type IMenuAttributeIter interface{ P_MenuAttributeIter() unsafe.Pointer }

func (v MenuAttributeIter) P_MenuAttributeIter() unsafe.Pointer { return v.P }
func MenuAttributeIterGetType() gi.GType {
	ret := _I.GetGType1(330, "Gio", "MenuAttributeIter")
	return ret
}

// g_menu_attribute_iter_get_name
//
// [ result ] trans: nothing
//
func (v MenuAttributeIter) GetName() (result string) {
	iv, err := _I.Get1(2527, "Gio", "MenuAttributeIter", "get_name", 339, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_menu_attribute_iter_get_next
//
// [ out_name ] trans: nothing, dir: out
//
// [ value ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v MenuAttributeIter) GetNext() (result bool, out_name string, value Variant) {
	iv, err := _I.Get1(2528, "Gio", "MenuAttributeIter", "get_next", 339, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_out_name := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_value := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_out_name, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	out_name = outArgs[0].String().Copy()
	value.P = outArgs[1].Pointer()
	result = ret.Bool()
	return
}

// g_menu_attribute_iter_get_value
//
// [ result ] trans: everything
//
func (v MenuAttributeIter) GetValue() (result Variant) {
	iv, err := _I.Get1(2529, "Gio", "MenuAttributeIter", "get_value", 339, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_menu_attribute_iter_next
//
// [ result ] trans: nothing
//
func (v MenuAttributeIter) Next() (result bool) {
	iv, err := _I.Get1(2530, "Gio", "MenuAttributeIter", "next", 339, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct MenuAttributeIterClass

// ignore private struct MenuAttributeIterPrivate, type of MenuAttributeIter is object

// Object MenuItem
type MenuItem struct {
	Object
}

func WrapMenuItem(p unsafe.Pointer) (r MenuItem) { r.P = p; return }

type IMenuItem interface{ P_MenuItem() unsafe.Pointer }

func (v MenuItem) P_MenuItem() unsafe.Pointer { return v.P }
func MenuItemGetType() gi.GType {
	ret := _I.GetGType1(331, "Gio", "MenuItem")
	return ret
}

// g_menu_item_new
//
// [ label ] trans: nothing
//
// [ detailed_action ] trans: nothing
//
// [ result ] trans: everything
//
func NewMenuItem(label string, detailed_action string) (result MenuItem) {
	iv, err := _I.Get1(2531, "Gio", "MenuItem", "new", 342, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	c_detailed_action := gi.CString(detailed_action)
	arg_label := gi.NewStringArgument(c_label)
	arg_detailed_action := gi.NewStringArgument(c_detailed_action)
	args := []gi.Argument{arg_label, arg_detailed_action}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	gi.Free(c_detailed_action)
	result.P = ret.Pointer()
	return
}

// g_menu_item_new_from_model
//
// [ model ] trans: nothing
//
// [ item_index ] trans: nothing
//
// [ result ] trans: everything
//
func NewMenuItemFromModel(model IMenuModel, item_index int32) (result MenuItem) {
	iv, err := _I.Get1(2532, "Gio", "MenuItem", "new_from_model", 342, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if model != nil {
		tmp = model.P_MenuModel()
	}
	arg_model := gi.NewPointerArgument(tmp)
	arg_item_index := gi.NewInt32Argument(item_index)
	args := []gi.Argument{arg_model, arg_item_index}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_menu_item_new_section
//
// [ label ] trans: nothing
//
// [ section ] trans: nothing
//
// [ result ] trans: everything
//
func NewMenuItemSection(label string, section IMenuModel) (result MenuItem) {
	iv, err := _I.Get1(2533, "Gio", "MenuItem", "new_section", 342, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	var tmp unsafe.Pointer
	if section != nil {
		tmp = section.P_MenuModel()
	}
	arg_label := gi.NewStringArgument(c_label)
	arg_section := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_label, arg_section}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// g_menu_item_new_submenu
//
// [ label ] trans: nothing
//
// [ submenu ] trans: nothing
//
// [ result ] trans: everything
//
func NewMenuItemSubmenu(label string, submenu IMenuModel) (result MenuItem) {
	iv, err := _I.Get1(2534, "Gio", "MenuItem", "new_submenu", 342, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	var tmp unsafe.Pointer
	if submenu != nil {
		tmp = submenu.P_MenuModel()
	}
	arg_label := gi.NewStringArgument(c_label)
	arg_submenu := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_label, arg_submenu}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_label)
	result.P = ret.Pointer()
	return
}

// g_menu_item_get_attribute_value
//
// [ attribute ] trans: nothing
//
// [ expected_type ] trans: nothing
//
// [ result ] trans: everything
//
func (v MenuItem) GetAttributeValue(attribute string, expected_type VariantType) (result Variant) {
	iv, err := _I.Get1(2535, "Gio", "MenuItem", "get_attribute_value", 342, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_expected_type := gi.NewPointerArgument(expected_type.P)
	args := []gi.Argument{arg_v, arg_attribute, arg_expected_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_attribute)
	result.P = ret.Pointer()
	return
}

// g_menu_item_get_link
//
// [ link ] trans: nothing
//
// [ result ] trans: everything
//
func (v MenuItem) GetLink(link string) (result MenuModel) {
	iv, err := _I.Get1(2536, "Gio", "MenuItem", "get_link", 342, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_link := gi.CString(link)
	arg_v := gi.NewPointerArgument(v.P)
	arg_link := gi.NewStringArgument(c_link)
	args := []gi.Argument{arg_v, arg_link}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_link)
	result.P = ret.Pointer()
	return
}

// g_menu_item_set_action_and_target_value
//
// [ action ] trans: nothing
//
// [ target_value ] trans: nothing
//
func (v MenuItem) SetActionAndTargetValue(action string, target_value Variant) {
	iv, err := _I.Get1(2537, "Gio", "MenuItem", "set_action_and_target_value", 342, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action := gi.CString(action)
	arg_v := gi.NewPointerArgument(v.P)
	arg_action := gi.NewStringArgument(c_action)
	arg_target_value := gi.NewPointerArgument(target_value.P)
	args := []gi.Argument{arg_v, arg_action, arg_target_value}
	iv.Call(args, nil, nil)
	gi.Free(c_action)
}

// g_menu_item_set_attribute_value
//
// [ attribute ] trans: nothing
//
// [ value ] trans: nothing
//
func (v MenuItem) SetAttributeValue(attribute string, value Variant) {
	iv, err := _I.Get1(2538, "Gio", "MenuItem", "set_attribute_value", 342, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_attribute, arg_value}
	iv.Call(args, nil, nil)
	gi.Free(c_attribute)
}

// g_menu_item_set_detailed_action
//
// [ detailed_action ] trans: nothing
//
func (v MenuItem) SetDetailedAction(detailed_action string) {
	iv, err := _I.Get1(2539, "Gio", "MenuItem", "set_detailed_action", 342, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_detailed_action := gi.CString(detailed_action)
	arg_v := gi.NewPointerArgument(v.P)
	arg_detailed_action := gi.NewStringArgument(c_detailed_action)
	args := []gi.Argument{arg_v, arg_detailed_action}
	iv.Call(args, nil, nil)
	gi.Free(c_detailed_action)
}

// g_menu_item_set_icon
//
// [ icon ] trans: nothing
//
func (v MenuItem) SetIcon(icon IIcon) {
	iv, err := _I.Get1(2540, "Gio", "MenuItem", "set_icon", 342, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon != nil {
		tmp = icon.P_Icon()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_icon}
	iv.Call(args, nil, nil)
}

// g_menu_item_set_label
//
// [ label ] trans: nothing
//
func (v MenuItem) SetLabel(label string) {
	iv, err := _I.Get1(2541, "Gio", "MenuItem", "set_label", 342, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	arg_v := gi.NewPointerArgument(v.P)
	arg_label := gi.NewStringArgument(c_label)
	args := []gi.Argument{arg_v, arg_label}
	iv.Call(args, nil, nil)
	gi.Free(c_label)
}

// g_menu_item_set_link
//
// [ link ] trans: nothing
//
// [ model ] trans: nothing
//
func (v MenuItem) SetLink(link string, model IMenuModel) {
	iv, err := _I.Get1(2542, "Gio", "MenuItem", "set_link", 342, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_link := gi.CString(link)
	var tmp unsafe.Pointer
	if model != nil {
		tmp = model.P_MenuModel()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_link := gi.NewStringArgument(c_link)
	arg_model := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_link, arg_model}
	iv.Call(args, nil, nil)
	gi.Free(c_link)
}

// g_menu_item_set_section
//
// [ section ] trans: nothing
//
func (v MenuItem) SetSection(section IMenuModel) {
	iv, err := _I.Get1(2543, "Gio", "MenuItem", "set_section", 342, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if section != nil {
		tmp = section.P_MenuModel()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_section := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_section}
	iv.Call(args, nil, nil)
}

// g_menu_item_set_submenu
//
// [ submenu ] trans: nothing
//
func (v MenuItem) SetSubmenu(submenu IMenuModel) {
	iv, err := _I.Get1(2544, "Gio", "MenuItem", "set_submenu", 342, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if submenu != nil {
		tmp = submenu.P_MenuModel()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_submenu := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_submenu}
	iv.Call(args, nil, nil)
}

// Object MenuLinkIter
type MenuLinkIter struct {
	Object
}

func WrapMenuLinkIter(p unsafe.Pointer) (r MenuLinkIter) { r.P = p; return }

type IMenuLinkIter interface{ P_MenuLinkIter() unsafe.Pointer }

func (v MenuLinkIter) P_MenuLinkIter() unsafe.Pointer { return v.P }
func MenuLinkIterGetType() gi.GType {
	ret := _I.GetGType1(332, "Gio", "MenuLinkIter")
	return ret
}

// g_menu_link_iter_get_name
//
// [ result ] trans: nothing
//
func (v MenuLinkIter) GetName() (result string) {
	iv, err := _I.Get1(2545, "Gio", "MenuLinkIter", "get_name", 343, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_menu_link_iter_get_next
//
// [ out_link ] trans: nothing, dir: out
//
// [ value ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v MenuLinkIter) GetNext() (result bool, out_link string, value MenuModel) {
	iv, err := _I.Get1(2546, "Gio", "MenuLinkIter", "get_next", 343, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_out_link := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_value := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_out_link, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	out_link = outArgs[0].String().Copy()
	value.P = outArgs[1].Pointer()
	result = ret.Bool()
	return
}

// g_menu_link_iter_get_value
//
// [ result ] trans: everything
//
func (v MenuLinkIter) GetValue() (result MenuModel) {
	iv, err := _I.Get1(2547, "Gio", "MenuLinkIter", "get_value", 343, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_menu_link_iter_next
//
// [ result ] trans: nothing
//
func (v MenuLinkIter) Next() (result bool) {
	iv, err := _I.Get1(2548, "Gio", "MenuLinkIter", "next", 343, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct MenuLinkIterClass

// ignore private struct MenuLinkIterPrivate, type of MenuLinkIter is object

// Object MenuModel
type MenuModel struct {
	Object
}

func WrapMenuModel(p unsafe.Pointer) (r MenuModel) { r.P = p; return }

type IMenuModel interface{ P_MenuModel() unsafe.Pointer }

func (v MenuModel) P_MenuModel() unsafe.Pointer { return v.P }
func MenuModelGetType() gi.GType {
	ret := _I.GetGType1(333, "Gio", "MenuModel")
	return ret
}

// g_menu_model_get_item_attribute_value
//
// [ item_index ] trans: nothing
//
// [ attribute ] trans: nothing
//
// [ expected_type ] trans: nothing
//
// [ result ] trans: everything
//
func (v MenuModel) GetItemAttributeValue(item_index int32, attribute string, expected_type VariantType) (result Variant) {
	iv, err := _I.Get1(2549, "Gio", "MenuModel", "get_item_attribute_value", 346, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_attribute := gi.CString(attribute)
	arg_v := gi.NewPointerArgument(v.P)
	arg_item_index := gi.NewInt32Argument(item_index)
	arg_attribute := gi.NewStringArgument(c_attribute)
	arg_expected_type := gi.NewPointerArgument(expected_type.P)
	args := []gi.Argument{arg_v, arg_item_index, arg_attribute, arg_expected_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_attribute)
	result.P = ret.Pointer()
	return
}

// g_menu_model_get_item_link
//
// [ item_index ] trans: nothing
//
// [ link ] trans: nothing
//
// [ result ] trans: everything
//
func (v MenuModel) GetItemLink(item_index int32, link string) (result MenuModel) {
	iv, err := _I.Get1(2550, "Gio", "MenuModel", "get_item_link", 346, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_link := gi.CString(link)
	arg_v := gi.NewPointerArgument(v.P)
	arg_item_index := gi.NewInt32Argument(item_index)
	arg_link := gi.NewStringArgument(c_link)
	args := []gi.Argument{arg_v, arg_item_index, arg_link}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_link)
	result.P = ret.Pointer()
	return
}

// g_menu_model_get_n_items
//
// [ result ] trans: nothing
//
func (v MenuModel) GetNItems() (result int32) {
	iv, err := _I.Get1(2551, "Gio", "MenuModel", "get_n_items", 346, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// g_menu_model_is_mutable
//
// [ result ] trans: nothing
//
func (v MenuModel) IsMutable() (result bool) {
	iv, err := _I.Get1(2552, "Gio", "MenuModel", "is_mutable", 346, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_menu_model_items_changed
//
// [ position ] trans: nothing
//
// [ removed ] trans: nothing
//
// [ added ] trans: nothing
//
func (v MenuModel) ItemsChanged(position int32, removed int32, added int32) {
	iv, err := _I.Get1(2553, "Gio", "MenuModel", "items_changed", 346, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_position := gi.NewInt32Argument(position)
	arg_removed := gi.NewInt32Argument(removed)
	arg_added := gi.NewInt32Argument(added)
	args := []gi.Argument{arg_v, arg_position, arg_removed, arg_added}
	iv.Call(args, nil, nil)
}

// g_menu_model_iterate_item_attributes
//
// [ item_index ] trans: nothing
//
// [ result ] trans: everything
//
func (v MenuModel) IterateItemAttributes(item_index int32) (result MenuAttributeIter) {
	iv, err := _I.Get1(2554, "Gio", "MenuModel", "iterate_item_attributes", 346, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_item_index := gi.NewInt32Argument(item_index)
	args := []gi.Argument{arg_v, arg_item_index}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_menu_model_iterate_item_links
//
// [ item_index ] trans: nothing
//
// [ result ] trans: everything
//
func (v MenuModel) IterateItemLinks(item_index int32) (result MenuLinkIter) {
	iv, err := _I.Get1(2555, "Gio", "MenuModel", "iterate_item_links", 346, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_item_index := gi.NewInt32Argument(item_index)
	args := []gi.Argument{arg_v, arg_item_index}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct MenuModelClass

// ignore private struct MenuModelPrivate, type of MenuModel is object

// Interface Mount
type Mount struct {
	MountIfc
	P unsafe.Pointer
}
type MountIfc struct{}
type IMount interface{ P_Mount() unsafe.Pointer }

func (v Mount) P_Mount() unsafe.Pointer { return v.P }
func MountGetType() gi.GType {
	ret := _I.GetGType1(334, "Gio", "Mount")
	return ret
}

// g_mount_can_eject
//
// [ result ] trans: nothing
//
func (v *MountIfc) CanEject() (result bool) {
	iv, err := _I.Get1(2556, "Gio", "Mount", "can_eject", 349, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_mount_can_unmount
//
// [ result ] trans: nothing
//
func (v *MountIfc) CanUnmount() (result bool) {
	iv, err := _I.Get1(2557, "Gio", "Mount", "can_unmount", 349, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// g_mount_eject
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *MountIfc) Eject(flags MountUnmountFlags, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2558, "Gio", "Mount", "eject", 349, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// g_mount_eject_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *MountIfc) EjectFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2559, "Gio", "Mount", "eject_finish", 349, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_mount_eject_with_operation
//
// [ flags ] trans: nothing
//
// [ mount_operation ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *MountIfc) EjectWithOperation(flags MountUnmountFlags, mount_operation IMountOperation, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2560, "Gio", "Mount", "eject_with_operation", 349, 4, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if mount_operation != nil {
		tmp = mount_operation.P_MountOperation()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_mount_operation := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_mount_operation, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_mount_eject_with_operation_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *MountIfc) EjectWithOperationFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2561, "Gio", "Mount", "eject_with_operation_finish", 349, 5, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_mount_get_default_location
//
// [ result ] trans: everything
//
func (v *MountIfc) GetDefaultLocation() (result File) {
	iv, err := _I.Get1(2562, "Gio", "Mount", "get_default_location", 349, 6, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_mount_get_drive
//
// [ result ] trans: everything
//
func (v *MountIfc) GetDrive() (result Drive) {
	iv, err := _I.Get1(2563, "Gio", "Mount", "get_drive", 349, 7, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_mount_get_icon
//
// [ result ] trans: everything
//
func (v *MountIfc) GetIcon() (result Icon) {
	iv, err := _I.Get1(2564, "Gio", "Mount", "get_icon", 349, 8, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_mount_get_name
//
// [ result ] trans: everything
//
func (v *MountIfc) GetName() (result string) {
	iv, err := _I.Get1(2565, "Gio", "Mount", "get_name", 349, 9, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_mount_get_root
//
// [ result ] trans: everything
//
func (v *MountIfc) GetRoot() (result File) {
	iv, err := _I.Get1(2566, "Gio", "Mount", "get_root", 349, 10, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_mount_get_sort_key
//
// [ result ] trans: nothing
//
func (v *MountIfc) GetSortKey() (result string) {
	iv, err := _I.Get1(2567, "Gio", "Mount", "get_sort_key", 349, 11, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_mount_get_symbolic_icon
//
// [ result ] trans: everything
//
func (v *MountIfc) GetSymbolicIcon() (result Icon) {
	iv, err := _I.Get1(2568, "Gio", "Mount", "get_symbolic_icon", 349, 12, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_mount_get_uuid
//
// [ result ] trans: everything
//
func (v *MountIfc) GetUuid() (result string) {
	iv, err := _I.Get1(2569, "Gio", "Mount", "get_uuid", 349, 13, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_mount_get_volume
//
// [ result ] trans: everything
//
func (v *MountIfc) GetVolume() (result Volume) {
	iv, err := _I.Get1(2570, "Gio", "Mount", "get_volume", 349, 14, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_mount_guess_content_type
//
// [ force_rescan ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *MountIfc) GuessContentType(force_rescan bool, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2571, "Gio", "Mount", "guess_content_type", 349, 15, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_force_rescan := gi.NewBoolArgument(force_rescan)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_force_rescan, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_mount_guess_content_type_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v *MountIfc) GuessContentTypeFinish(result IAsyncResult) (result1 gi.CStrArray, err error) {
	iv, err := _I.Get1(2572, "Gio", "Mount", "guess_content_type_finish", 349, 16, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result1.SetLenZT()
	return
}

// g_mount_guess_content_type_sync
//
// [ force_rescan ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *MountIfc) GuessContentTypeSync(force_rescan bool, cancellable ICancellable) (result gi.CStrArray, err error) {
	iv, err := _I.Get1(2573, "Gio", "Mount", "guess_content_type_sync", 349, 17, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_force_rescan := gi.NewBoolArgument(force_rescan)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_force_rescan, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_mount_is_shadowed
//
// [ result ] trans: nothing
//
func (v *MountIfc) IsShadowed() (result bool) {
	iv, err := _I.Get1(2574, "Gio", "Mount", "is_shadowed", 349, 18, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_mount_remount
//
// [ flags ] trans: nothing
//
// [ mount_operation ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *MountIfc) Remount(flags MountMountFlags, mount_operation IMountOperation, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2575, "Gio", "Mount", "remount", 349, 19, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if mount_operation != nil {
		tmp = mount_operation.P_MountOperation()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_mount_operation := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_mount_operation, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_mount_remount_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *MountIfc) RemountFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2576, "Gio", "Mount", "remount_finish", 349, 20, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_mount_shadow
//
func (v *MountIfc) Shadow() {
	iv, err := _I.Get1(2577, "Gio", "Mount", "shadow", 349, 21, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// g_mount_unmount
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *MountIfc) Unmount(flags MountUnmountFlags, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2578, "Gio", "Mount", "unmount", 349, 22, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// g_mount_unmount_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *MountIfc) UnmountFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2579, "Gio", "Mount", "unmount_finish", 349, 23, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_mount_unmount_with_operation
//
// [ flags ] trans: nothing
//
// [ mount_operation ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *MountIfc) UnmountWithOperation(flags MountUnmountFlags, mount_operation IMountOperation, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2580, "Gio", "Mount", "unmount_with_operation", 349, 24, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if mount_operation != nil {
		tmp = mount_operation.P_MountOperation()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_mount_operation := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_mount_operation, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_mount_unmount_with_operation_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *MountIfc) UnmountWithOperationFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2581, "Gio", "Mount", "unmount_with_operation_finish", 349, 25, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_mount_unshadow
//
func (v *MountIfc) Unshadow() {
	iv, err := _I.Get1(2582, "Gio", "Mount", "unshadow", 349, 26, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// ignore GType struct MountIface

// Flags MountMountFlags
type MountMountFlags int

const (
	MountMountFlagsNone MountMountFlags = 0
)

func MountMountFlagsGetType() gi.GType {
	ret := _I.GetGType1(335, "Gio", "MountMountFlags")
	return ret
}

// Object MountOperation
type MountOperation struct {
	Object
}

func WrapMountOperation(p unsafe.Pointer) (r MountOperation) { r.P = p; return }

type IMountOperation interface{ P_MountOperation() unsafe.Pointer }

func (v MountOperation) P_MountOperation() unsafe.Pointer { return v.P }
func MountOperationGetType() gi.GType {
	ret := _I.GetGType1(336, "Gio", "MountOperation")
	return ret
}

// g_mount_operation_new
//
// [ result ] trans: everything
//
func NewMountOperation() (result MountOperation) {
	iv, err := _I.Get1(2583, "Gio", "MountOperation", "new", 352, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_mount_operation_get_anonymous
//
// [ result ] trans: nothing
//
func (v MountOperation) GetAnonymous() (result bool) {
	iv, err := _I.Get1(2584, "Gio", "MountOperation", "get_anonymous", 352, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_mount_operation_get_choice
//
// [ result ] trans: nothing
//
func (v MountOperation) GetChoice() (result int32) {
	iv, err := _I.Get1(2585, "Gio", "MountOperation", "get_choice", 352, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// g_mount_operation_get_domain
//
// [ result ] trans: nothing
//
func (v MountOperation) GetDomain() (result string) {
	iv, err := _I.Get1(2586, "Gio", "MountOperation", "get_domain", 352, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_mount_operation_get_is_tcrypt_hidden_volume
//
// [ result ] trans: nothing
//
func (v MountOperation) GetIsTcryptHiddenVolume() (result bool) {
	iv, err := _I.Get1(2587, "Gio", "MountOperation", "get_is_tcrypt_hidden_volume", 352, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_mount_operation_get_is_tcrypt_system_volume
//
// [ result ] trans: nothing
//
func (v MountOperation) GetIsTcryptSystemVolume() (result bool) {
	iv, err := _I.Get1(2588, "Gio", "MountOperation", "get_is_tcrypt_system_volume", 352, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_mount_operation_get_password
//
// [ result ] trans: nothing
//
func (v MountOperation) GetPassword() (result string) {
	iv, err := _I.Get1(2589, "Gio", "MountOperation", "get_password", 352, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_mount_operation_get_password_save
//
// [ result ] trans: nothing
//
func (v MountOperation) GetPasswordSave() (result PasswordSaveEnum) {
	iv, err := _I.Get1(2590, "Gio", "MountOperation", "get_password_save", 352, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = PasswordSaveEnum(ret.Int())
	return
}

// g_mount_operation_get_pim
//
// [ result ] trans: nothing
//
func (v MountOperation) GetPim() (result uint32) {
	iv, err := _I.Get1(2591, "Gio", "MountOperation", "get_pim", 352, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// g_mount_operation_get_username
//
// [ result ] trans: nothing
//
func (v MountOperation) GetUsername() (result string) {
	iv, err := _I.Get1(2592, "Gio", "MountOperation", "get_username", 352, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_mount_operation_reply
//
// [ result ] trans: nothing
//
func (v MountOperation) Reply(result MountOperationResultEnum) {
	iv, err := _I.Get1(2593, "Gio", "MountOperation", "reply", 352, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewIntArgument(int(result))
	args := []gi.Argument{arg_v, arg_result}
	iv.Call(args, nil, nil)
}

// g_mount_operation_set_anonymous
//
// [ anonymous ] trans: nothing
//
func (v MountOperation) SetAnonymous(anonymous bool) {
	iv, err := _I.Get1(2594, "Gio", "MountOperation", "set_anonymous", 352, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_anonymous := gi.NewBoolArgument(anonymous)
	args := []gi.Argument{arg_v, arg_anonymous}
	iv.Call(args, nil, nil)
}

// g_mount_operation_set_choice
//
// [ choice ] trans: nothing
//
func (v MountOperation) SetChoice(choice int32) {
	iv, err := _I.Get1(2595, "Gio", "MountOperation", "set_choice", 352, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_choice := gi.NewInt32Argument(choice)
	args := []gi.Argument{arg_v, arg_choice}
	iv.Call(args, nil, nil)
}

// g_mount_operation_set_domain
//
// [ domain ] trans: nothing
//
func (v MountOperation) SetDomain(domain string) {
	iv, err := _I.Get1(2596, "Gio", "MountOperation", "set_domain", 352, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_domain := gi.CString(domain)
	arg_v := gi.NewPointerArgument(v.P)
	arg_domain := gi.NewStringArgument(c_domain)
	args := []gi.Argument{arg_v, arg_domain}
	iv.Call(args, nil, nil)
	gi.Free(c_domain)
}

// g_mount_operation_set_is_tcrypt_hidden_volume
//
// [ hidden_volume ] trans: nothing
//
func (v MountOperation) SetIsTcryptHiddenVolume(hidden_volume bool) {
	iv, err := _I.Get1(2597, "Gio", "MountOperation", "set_is_tcrypt_hidden_volume", 352, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_hidden_volume := gi.NewBoolArgument(hidden_volume)
	args := []gi.Argument{arg_v, arg_hidden_volume}
	iv.Call(args, nil, nil)
}

// g_mount_operation_set_is_tcrypt_system_volume
//
// [ system_volume ] trans: nothing
//
func (v MountOperation) SetIsTcryptSystemVolume(system_volume bool) {
	iv, err := _I.Get1(2598, "Gio", "MountOperation", "set_is_tcrypt_system_volume", 352, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_system_volume := gi.NewBoolArgument(system_volume)
	args := []gi.Argument{arg_v, arg_system_volume}
	iv.Call(args, nil, nil)
}

// g_mount_operation_set_password
//
// [ password ] trans: nothing
//
func (v MountOperation) SetPassword(password string) {
	iv, err := _I.Get1(2599, "Gio", "MountOperation", "set_password", 352, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_password := gi.CString(password)
	arg_v := gi.NewPointerArgument(v.P)
	arg_password := gi.NewStringArgument(c_password)
	args := []gi.Argument{arg_v, arg_password}
	iv.Call(args, nil, nil)
	gi.Free(c_password)
}

// g_mount_operation_set_password_save
//
// [ save ] trans: nothing
//
func (v MountOperation) SetPasswordSave(save PasswordSaveEnum) {
	iv, err := _I.Get1(2600, "Gio", "MountOperation", "set_password_save", 352, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_save := gi.NewIntArgument(int(save))
	args := []gi.Argument{arg_v, arg_save}
	iv.Call(args, nil, nil)
}

// g_mount_operation_set_pim
//
// [ pim ] trans: nothing
//
func (v MountOperation) SetPim(pim uint32) {
	iv, err := _I.Get1(2601, "Gio", "MountOperation", "set_pim", 352, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_pim := gi.NewUint32Argument(pim)
	args := []gi.Argument{arg_v, arg_pim}
	iv.Call(args, nil, nil)
}

// g_mount_operation_set_username
//
// [ username ] trans: nothing
//
func (v MountOperation) SetUsername(username string) {
	iv, err := _I.Get1(2602, "Gio", "MountOperation", "set_username", 352, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_username := gi.CString(username)
	arg_v := gi.NewPointerArgument(v.P)
	arg_username := gi.NewStringArgument(c_username)
	args := []gi.Argument{arg_v, arg_username}
	iv.Call(args, nil, nil)
	gi.Free(c_username)
}

// ignore GType struct MountOperationClass

// ignore private struct MountOperationPrivate, type of MountOperation is object

// Enum MountOperationResult
type MountOperationResultEnum int

const (
	MountOperationResultHandled   MountOperationResultEnum = 0
	MountOperationResultAborted   MountOperationResultEnum = 1
	MountOperationResultUnhandled MountOperationResultEnum = 2
)

func MountOperationResultGetType() gi.GType {
	ret := _I.GetGType1(337, "Gio", "MountOperationResult")
	return ret
}

// Flags MountUnmountFlags
type MountUnmountFlags int

const (
	MountUnmountFlagsNone  MountUnmountFlags = 0
	MountUnmountFlagsForce MountUnmountFlags = 1
)

func MountUnmountFlagsGetType() gi.GType {
	ret := _I.GetGType1(338, "Gio", "MountUnmountFlags")
	return ret
}

// Struct NativeSocketAddress
type NativeSocketAddress struct {
	P unsafe.Pointer
}

func NativeSocketAddressGetType() gi.GType {
	ret := _I.GetGType1(339, "Gio", "NativeSocketAddress")
	return ret
}

// Object NativeVolumeMonitor
type NativeVolumeMonitor struct {
	VolumeMonitor
}

func WrapNativeVolumeMonitor(p unsafe.Pointer) (r NativeVolumeMonitor) { r.P = p; return }

type INativeVolumeMonitor interface{ P_NativeVolumeMonitor() unsafe.Pointer }

func (v NativeVolumeMonitor) P_NativeVolumeMonitor() unsafe.Pointer { return v.P }
func NativeVolumeMonitorGetType() gi.GType {
	ret := _I.GetGType1(340, "Gio", "NativeVolumeMonitor")
	return ret
}

// ignore GType struct NativeVolumeMonitorClass

// Object NetworkAddress
type NetworkAddress struct {
	SocketConnectableIfc
	Object
}

func WrapNetworkAddress(p unsafe.Pointer) (r NetworkAddress) { r.P = p; return }

type INetworkAddress interface{ P_NetworkAddress() unsafe.Pointer }

func (v NetworkAddress) P_NetworkAddress() unsafe.Pointer    { return v.P }
func (v NetworkAddress) P_SocketConnectable() unsafe.Pointer { return v.P }
func NetworkAddressGetType() gi.GType {
	ret := _I.GetGType1(341, "Gio", "NetworkAddress")
	return ret
}

// g_network_address_new
//
// [ hostname ] trans: nothing
//
// [ port ] trans: nothing
//
// [ result ] trans: everything
//
func NewNetworkAddress(hostname string, port uint16) (result NetworkAddress) {
	iv, err := _I.Get1(2603, "Gio", "NetworkAddress", "new", 362, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_hostname := gi.CString(hostname)
	arg_hostname := gi.NewStringArgument(c_hostname)
	arg_port := gi.NewUint16Argument(port)
	args := []gi.Argument{arg_hostname, arg_port}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_hostname)
	result.P = ret.Pointer()
	return
}

// g_network_address_new_loopback
//
// [ port ] trans: nothing
//
// [ result ] trans: everything
//
func NewNetworkAddressLoopback(port uint16) (result NetworkAddress) {
	iv, err := _I.Get1(2604, "Gio", "NetworkAddress", "new_loopback", 362, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_port := gi.NewUint16Argument(port)
	args := []gi.Argument{arg_port}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_network_address_parse
//
// [ host_and_port ] trans: nothing
//
// [ default_port ] trans: nothing
//
// [ result ] trans: everything
//
func NetworkAddressParse1(host_and_port string, default_port uint16) (result NetworkAddress, err error) {
	iv, err := _I.Get1(2605, "Gio", "NetworkAddress", "parse", 362, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_host_and_port := gi.CString(host_and_port)
	arg_host_and_port := gi.NewStringArgument(c_host_and_port)
	arg_default_port := gi.NewUint16Argument(default_port)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_host_and_port, arg_default_port, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_host_and_port)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_network_address_parse_uri
//
// [ uri ] trans: nothing
//
// [ default_port ] trans: nothing
//
// [ result ] trans: everything
//
func NetworkAddressParseUri1(uri string, default_port uint16) (result NetworkAddress, err error) {
	iv, err := _I.Get1(2606, "Gio", "NetworkAddress", "parse_uri", 362, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_uri := gi.CString(uri)
	arg_uri := gi.NewStringArgument(c_uri)
	arg_default_port := gi.NewUint16Argument(default_port)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_uri, arg_default_port, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_uri)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_network_address_get_hostname
//
// [ result ] trans: nothing
//
func (v NetworkAddress) GetHostname() (result string) {
	iv, err := _I.Get1(2607, "Gio", "NetworkAddress", "get_hostname", 362, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_network_address_get_port
//
// [ result ] trans: nothing
//
func (v NetworkAddress) GetPort() (result uint16) {
	iv, err := _I.Get1(2608, "Gio", "NetworkAddress", "get_port", 362, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint16()
	return
}

// g_network_address_get_scheme
//
// [ result ] trans: nothing
//
func (v NetworkAddress) GetScheme() (result string) {
	iv, err := _I.Get1(2609, "Gio", "NetworkAddress", "get_scheme", 362, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// ignore GType struct NetworkAddressClass

// ignore private struct NetworkAddressPrivate, type of NetworkAddress is object

// Enum NetworkConnectivity
type NetworkConnectivityEnum int

const (
	NetworkConnectivityLocal   NetworkConnectivityEnum = 1
	NetworkConnectivityLimited NetworkConnectivityEnum = 2
	NetworkConnectivityPortal  NetworkConnectivityEnum = 3
	NetworkConnectivityFull    NetworkConnectivityEnum = 4
)

func NetworkConnectivityGetType() gi.GType {
	ret := _I.GetGType1(342, "Gio", "NetworkConnectivity")
	return ret
}

// Interface NetworkMonitor
type NetworkMonitor struct {
	NetworkMonitorIfc
	P unsafe.Pointer
}
type NetworkMonitorIfc struct{}
type INetworkMonitor interface{ P_NetworkMonitor() unsafe.Pointer }

func (v NetworkMonitor) P_NetworkMonitor() unsafe.Pointer { return v.P }
func NetworkMonitorGetType() gi.GType {
	ret := _I.GetGType1(343, "Gio", "NetworkMonitor")
	return ret
}

// g_network_monitor_get_default
//
// [ result ] trans: nothing
//
func NetworkMonitorGetDefault1() (result NetworkMonitor) {
	iv, err := _I.Get1(2610, "Gio", "NetworkMonitor", "get_default", 366, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_network_monitor_can_reach
//
// [ connectable ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *NetworkMonitorIfc) CanReach(connectable ISocketConnectable, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2611, "Gio", "NetworkMonitor", "can_reach", 366, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if connectable != nil {
		tmp = connectable.P_SocketConnectable()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_connectable := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_connectable, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_network_monitor_can_reach_async
//
// [ connectable ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *NetworkMonitorIfc) CanReachAsync(connectable ISocketConnectable, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2612, "Gio", "NetworkMonitor", "can_reach_async", 366, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connectable != nil {
		tmp = connectable.P_SocketConnectable()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_connectable := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_connectable, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_network_monitor_can_reach_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *NetworkMonitorIfc) CanReachFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2613, "Gio", "NetworkMonitor", "can_reach_finish", 366, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_network_monitor_get_connectivity
//
// [ result ] trans: nothing
//
func (v *NetworkMonitorIfc) GetConnectivity() (result NetworkConnectivityEnum) {
	iv, err := _I.Get1(2614, "Gio", "NetworkMonitor", "get_connectivity", 366, 4, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = NetworkConnectivityEnum(ret.Int())
	return
}

// g_network_monitor_get_network_available
//
// [ result ] trans: nothing
//
func (v *NetworkMonitorIfc) GetNetworkAvailable() (result bool) {
	iv, err := _I.Get1(2615, "Gio", "NetworkMonitor", "get_network_available", 366, 5, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_network_monitor_get_network_metered
//
// [ result ] trans: nothing
//
func (v *NetworkMonitorIfc) GetNetworkMetered() (result bool) {
	iv, err := _I.Get1(2616, "Gio", "NetworkMonitor", "get_network_metered", 366, 6, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct NetworkMonitorInterface

// Object NetworkService
type NetworkService struct {
	SocketConnectableIfc
	Object
}

func WrapNetworkService(p unsafe.Pointer) (r NetworkService) { r.P = p; return }

type INetworkService interface{ P_NetworkService() unsafe.Pointer }

func (v NetworkService) P_NetworkService() unsafe.Pointer    { return v.P }
func (v NetworkService) P_SocketConnectable() unsafe.Pointer { return v.P }
func NetworkServiceGetType() gi.GType {
	ret := _I.GetGType1(344, "Gio", "NetworkService")
	return ret
}

// g_network_service_new
//
// [ service ] trans: nothing
//
// [ protocol ] trans: nothing
//
// [ domain ] trans: nothing
//
// [ result ] trans: everything
//
func NewNetworkService(service string, protocol string, domain string) (result NetworkService) {
	iv, err := _I.Get1(2617, "Gio", "NetworkService", "new", 368, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_service := gi.CString(service)
	c_protocol := gi.CString(protocol)
	c_domain := gi.CString(domain)
	arg_service := gi.NewStringArgument(c_service)
	arg_protocol := gi.NewStringArgument(c_protocol)
	arg_domain := gi.NewStringArgument(c_domain)
	args := []gi.Argument{arg_service, arg_protocol, arg_domain}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_service)
	gi.Free(c_protocol)
	gi.Free(c_domain)
	result.P = ret.Pointer()
	return
}

// g_network_service_get_domain
//
// [ result ] trans: nothing
//
func (v NetworkService) GetDomain() (result string) {
	iv, err := _I.Get1(2618, "Gio", "NetworkService", "get_domain", 368, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_network_service_get_protocol
//
// [ result ] trans: nothing
//
func (v NetworkService) GetProtocol() (result string) {
	iv, err := _I.Get1(2619, "Gio", "NetworkService", "get_protocol", 368, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_network_service_get_scheme
//
// [ result ] trans: nothing
//
func (v NetworkService) GetScheme() (result string) {
	iv, err := _I.Get1(2620, "Gio", "NetworkService", "get_scheme", 368, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_network_service_get_service
//
// [ result ] trans: nothing
//
func (v NetworkService) GetService() (result string) {
	iv, err := _I.Get1(2621, "Gio", "NetworkService", "get_service", 368, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_network_service_set_scheme
//
// [ scheme ] trans: nothing
//
func (v NetworkService) SetScheme(scheme string) {
	iv, err := _I.Get1(2622, "Gio", "NetworkService", "set_scheme", 368, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_scheme := gi.CString(scheme)
	arg_v := gi.NewPointerArgument(v.P)
	arg_scheme := gi.NewStringArgument(c_scheme)
	args := []gi.Argument{arg_v, arg_scheme}
	iv.Call(args, nil, nil)
	gi.Free(c_scheme)
}

// ignore GType struct NetworkServiceClass

// ignore private struct NetworkServicePrivate, type of NetworkService is object

// Object Notification
type Notification struct {
	Object
}

func WrapNotification(p unsafe.Pointer) (r Notification) { r.P = p; return }

type INotification interface{ P_Notification() unsafe.Pointer }

func (v Notification) P_Notification() unsafe.Pointer { return v.P }
func NotificationGetType() gi.GType {
	ret := _I.GetGType1(345, "Gio", "Notification")
	return ret
}

// g_notification_new
//
// [ title ] trans: nothing
//
// [ result ] trans: everything
//
func NewNotification(title string) (result Notification) {
	iv, err := _I.Get1(2623, "Gio", "Notification", "new", 371, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_title := gi.CString(title)
	arg_title := gi.NewStringArgument(c_title)
	args := []gi.Argument{arg_title}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_title)
	result.P = ret.Pointer()
	return
}

// g_notification_add_button
//
// [ label ] trans: nothing
//
// [ detailed_action ] trans: nothing
//
func (v Notification) AddButton(label string, detailed_action string) {
	iv, err := _I.Get1(2624, "Gio", "Notification", "add_button", 371, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	c_detailed_action := gi.CString(detailed_action)
	arg_v := gi.NewPointerArgument(v.P)
	arg_label := gi.NewStringArgument(c_label)
	arg_detailed_action := gi.NewStringArgument(c_detailed_action)
	args := []gi.Argument{arg_v, arg_label, arg_detailed_action}
	iv.Call(args, nil, nil)
	gi.Free(c_label)
	gi.Free(c_detailed_action)
}

// g_notification_add_button_with_target_value
//
// [ label ] trans: nothing
//
// [ action ] trans: nothing
//
// [ target ] trans: nothing
//
func (v Notification) AddButtonWithTarget(label string, action string, target Variant) {
	iv, err := _I.Get1(2625, "Gio", "Notification", "add_button_with_target", 371, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_label := gi.CString(label)
	c_action := gi.CString(action)
	arg_v := gi.NewPointerArgument(v.P)
	arg_label := gi.NewStringArgument(c_label)
	arg_action := gi.NewStringArgument(c_action)
	arg_target := gi.NewPointerArgument(target.P)
	args := []gi.Argument{arg_v, arg_label, arg_action, arg_target}
	iv.Call(args, nil, nil)
	gi.Free(c_label)
	gi.Free(c_action)
}

// g_notification_set_body
//
// [ body ] trans: nothing
//
func (v Notification) SetBody(body string) {
	iv, err := _I.Get1(2626, "Gio", "Notification", "set_body", 371, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_body := gi.CString(body)
	arg_v := gi.NewPointerArgument(v.P)
	arg_body := gi.NewStringArgument(c_body)
	args := []gi.Argument{arg_v, arg_body}
	iv.Call(args, nil, nil)
	gi.Free(c_body)
}

// g_notification_set_default_action
//
// [ detailed_action ] trans: nothing
//
func (v Notification) SetDefaultAction(detailed_action string) {
	iv, err := _I.Get1(2627, "Gio", "Notification", "set_default_action", 371, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_detailed_action := gi.CString(detailed_action)
	arg_v := gi.NewPointerArgument(v.P)
	arg_detailed_action := gi.NewStringArgument(c_detailed_action)
	args := []gi.Argument{arg_v, arg_detailed_action}
	iv.Call(args, nil, nil)
	gi.Free(c_detailed_action)
}

// g_notification_set_default_action_and_target_value
//
// [ action ] trans: nothing
//
// [ target ] trans: nothing
//
func (v Notification) SetDefaultActionAndTarget(action string, target Variant) {
	iv, err := _I.Get1(2628, "Gio", "Notification", "set_default_action_and_target", 371, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action := gi.CString(action)
	arg_v := gi.NewPointerArgument(v.P)
	arg_action := gi.NewStringArgument(c_action)
	arg_target := gi.NewPointerArgument(target.P)
	args := []gi.Argument{arg_v, arg_action, arg_target}
	iv.Call(args, nil, nil)
	gi.Free(c_action)
}

// g_notification_set_icon
//
// [ icon ] trans: nothing
//
func (v Notification) SetIcon(icon IIcon) {
	iv, err := _I.Get1(2629, "Gio", "Notification", "set_icon", 371, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if icon != nil {
		tmp = icon.P_Icon()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_icon := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_icon}
	iv.Call(args, nil, nil)
}

// g_notification_set_priority
//
// [ priority ] trans: nothing
//
func (v Notification) SetPriority(priority NotificationPriorityEnum) {
	iv, err := _I.Get1(2630, "Gio", "Notification", "set_priority", 371, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_priority := gi.NewIntArgument(int(priority))
	args := []gi.Argument{arg_v, arg_priority}
	iv.Call(args, nil, nil)
}

// g_notification_set_title
//
// [ title ] trans: nothing
//
func (v Notification) SetTitle(title string) {
	iv, err := _I.Get1(2631, "Gio", "Notification", "set_title", 371, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_title := gi.CString(title)
	arg_v := gi.NewPointerArgument(v.P)
	arg_title := gi.NewStringArgument(c_title)
	args := []gi.Argument{arg_v, arg_title}
	iv.Call(args, nil, nil)
	gi.Free(c_title)
}

// Deprecated
//
// g_notification_set_urgent
//
// [ urgent ] trans: nothing
//
func (v Notification) SetUrgent(urgent bool) {
	iv, err := _I.Get1(2632, "Gio", "Notification", "set_urgent", 371, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_urgent := gi.NewBoolArgument(urgent)
	args := []gi.Argument{arg_v, arg_urgent}
	iv.Call(args, nil, nil)
}

// Enum NotificationPriority
type NotificationPriorityEnum int

const (
	NotificationPriorityNormal NotificationPriorityEnum = 0
	NotificationPriorityLow    NotificationPriorityEnum = 1
	NotificationPriorityHigh   NotificationPriorityEnum = 2
	NotificationPriorityUrgent NotificationPriorityEnum = 3
)

func NotificationPriorityGetType() gi.GType {
	ret := _I.GetGType1(346, "Gio", "NotificationPriority")
	return ret
}

// Struct OutputMessage
type OutputMessage struct {
	P unsafe.Pointer
}

const SizeOfStructOutputMessage = 40

func OutputMessageGetType() gi.GType {
	ret := _I.GetGType1(347, "Gio", "OutputMessage")
	return ret
}

func (v OutputMessage) p() *C.GOutputMessage {
	return (*C.GOutputMessage)(v.P)
}
func (v OutputMessage) Address() (result int /*TODO*/) {
	return
}
func (v OutputMessage) Vectors() (result int /*TODO*/) {
	return
}
func (v OutputMessage) NumVectors() (result uint32) {
	result = uint32(v.p().num_vectors)
	return
}
func (v OutputMessage) BytesSent() (result uint32) {
	result = uint32(v.p().bytes_sent)
	return
}
func (v OutputMessage) ControlMessages() (result int /*TODO*/) {
	return
}
func (v OutputMessage) NumControlMessages() (result uint32) {
	result = uint32(v.p().num_control_messages)
	return
}

// Object OutputStream
type OutputStream struct {
	Object
}

func WrapOutputStream(p unsafe.Pointer) (r OutputStream) { r.P = p; return }

type IOutputStream interface{ P_OutputStream() unsafe.Pointer }

func (v OutputStream) P_OutputStream() unsafe.Pointer { return v.P }
func OutputStreamGetType() gi.GType {
	ret := _I.GetGType1(348, "Gio", "OutputStream")
	return ret
}

// g_output_stream_clear_pending
//
func (v OutputStream) ClearPending() {
	iv, err := _I.Get1(2633, "Gio", "OutputStream", "clear_pending", 374, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_output_stream_close
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v OutputStream) Close(cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2634, "Gio", "OutputStream", "close", 374, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_output_stream_close_async
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v OutputStream) CloseAsync(io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2635, "Gio", "OutputStream", "close_async", 374, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_output_stream_close_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v OutputStream) CloseFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2636, "Gio", "OutputStream", "close_finish", 374, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_output_stream_flush
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v OutputStream) Flush(cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2637, "Gio", "OutputStream", "flush", 374, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_output_stream_flush_async
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v OutputStream) FlushAsync(io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2638, "Gio", "OutputStream", "flush_async", 374, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_output_stream_flush_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v OutputStream) FlushFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2639, "Gio", "OutputStream", "flush_finish", 374, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_output_stream_has_pending
//
// [ result ] trans: nothing
//
func (v OutputStream) HasPending() (result bool) {
	iv, err := _I.Get1(2640, "Gio", "OutputStream", "has_pending", 374, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_output_stream_is_closed
//
// [ result ] trans: nothing
//
func (v OutputStream) IsClosed() (result bool) {
	iv, err := _I.Get1(2641, "Gio", "OutputStream", "is_closed", 374, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_output_stream_is_closing
//
// [ result ] trans: nothing
//
func (v OutputStream) IsClosing() (result bool) {
	iv, err := _I.Get1(2642, "Gio", "OutputStream", "is_closing", 374, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_output_stream_set_pending
//
// [ result ] trans: nothing
//
func (v OutputStream) SetPending() (result bool, err error) {
	iv, err := _I.Get1(2643, "Gio", "OutputStream", "set_pending", 374, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_output_stream_splice
//
// [ source ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v OutputStream) Splice(source IInputStream, flags OutputStreamSpliceFlags, cancellable ICancellable) (result int64, err error) {
	iv, err := _I.Get1(2644, "Gio", "OutputStream", "splice", 374, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if source != nil {
		tmp = source.P_InputStream()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_source := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_source, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int64()
	return
}

// g_output_stream_splice_async
//
// [ source ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v OutputStream) SpliceAsync(source IInputStream, flags OutputStreamSpliceFlags, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2645, "Gio", "OutputStream", "splice_async", 374, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if source != nil {
		tmp = source.P_InputStream()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_source := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_source, arg_flags, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_output_stream_splice_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v OutputStream) SpliceFinish(result IAsyncResult) (result1 int64, err error) {
	iv, err := _I.Get1(2646, "Gio", "OutputStream", "splice_finish", 374, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Int64()
	return
}

// g_output_stream_write
//
// [ buffer ] trans: nothing
//
// [ count ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v OutputStream) Write(buffer gi.Uint8Array, count uint64, cancellable ICancellable) (result int64, err error) {
	iv, err := _I.Get1(2647, "Gio", "OutputStream", "write", 374, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_buffer := gi.NewPointerArgument(buffer.P)
	arg_count := gi.NewUint64Argument(count)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_buffer, arg_count, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int64()
	return
}

// g_output_stream_write_all
//
// [ buffer ] trans: nothing
//
// [ count ] trans: nothing
//
// [ bytes_written ] trans: everything, dir: out
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v OutputStream) WriteAll(buffer gi.Uint8Array, count uint64, cancellable ICancellable) (result bool, bytes_written uint64, err error) {
	iv, err := _I.Get1(2648, "Gio", "OutputStream", "write_all", 374, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_buffer := gi.NewPointerArgument(buffer.P)
	arg_count := gi.NewUint64Argument(count)
	arg_bytes_written := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_buffer, arg_count, arg_bytes_written, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	bytes_written = outArgs[0].Uint64()
	result = ret.Bool()
	return
}

// g_output_stream_write_all_async
//
// [ buffer ] trans: nothing
//
// [ count ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v OutputStream) WriteAllAsync(buffer gi.Uint8Array, count uint64, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2649, "Gio", "OutputStream", "write_all_async", 374, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_buffer := gi.NewPointerArgument(buffer.P)
	arg_count := gi.NewUint64Argument(count)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_buffer, arg_count, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_output_stream_write_all_finish
//
// [ result ] trans: nothing
//
// [ bytes_written ] trans: everything, dir: out
//
// [ result1 ] trans: nothing
//
func (v OutputStream) WriteAllFinish(result IAsyncResult) (result1 bool, bytes_written uint64, err error) {
	iv, err := _I.Get1(2650, "Gio", "OutputStream", "write_all_finish", 374, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_bytes_written := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_result, arg_bytes_written, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	bytes_written = outArgs[0].Uint64()
	result1 = ret.Bool()
	return
}

// g_output_stream_write_async
//
// [ buffer ] trans: nothing
//
// [ count ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v OutputStream) WriteAsync(buffer gi.Uint8Array, count uint64, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2651, "Gio", "OutputStream", "write_async", 374, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_buffer := gi.NewPointerArgument(buffer.P)
	arg_count := gi.NewUint64Argument(count)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_buffer, arg_count, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_output_stream_write_bytes
//
// [ bytes ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v OutputStream) WriteBytes(bytes Bytes, cancellable ICancellable) (result int64, err error) {
	iv, err := _I.Get1(2652, "Gio", "OutputStream", "write_bytes", 374, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_bytes := gi.NewPointerArgument(bytes.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_bytes, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int64()
	return
}

// g_output_stream_write_bytes_async
//
// [ bytes ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v OutputStream) WriteBytesAsync(bytes Bytes, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2653, "Gio", "OutputStream", "write_bytes_async", 374, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_bytes := gi.NewPointerArgument(bytes.P)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_bytes, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_output_stream_write_bytes_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v OutputStream) WriteBytesFinish(result IAsyncResult) (result1 int64, err error) {
	iv, err := _I.Get1(2654, "Gio", "OutputStream", "write_bytes_finish", 374, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Int64()
	return
}

// g_output_stream_write_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v OutputStream) WriteFinish(result IAsyncResult) (result1 int64, err error) {
	iv, err := _I.Get1(2655, "Gio", "OutputStream", "write_finish", 374, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Int64()
	return
}

// ignore GType struct OutputStreamClass

// ignore private struct OutputStreamPrivate, type of OutputStream is object

// Flags OutputStreamSpliceFlags
type OutputStreamSpliceFlags int

const (
	OutputStreamSpliceFlagsNone        OutputStreamSpliceFlags = 0
	OutputStreamSpliceFlagsCloseSource OutputStreamSpliceFlags = 1
	OutputStreamSpliceFlagsCloseTarget OutputStreamSpliceFlags = 2
)

func OutputStreamSpliceFlagsGetType() gi.GType {
	ret := _I.GetGType1(349, "Gio", "OutputStreamSpliceFlags")
	return ret
}

// Struct OutputVector
type OutputVector struct {
	P unsafe.Pointer
}

const SizeOfStructOutputVector = 16

func OutputVectorGetType() gi.GType {
	ret := _I.GetGType1(350, "Gio", "OutputVector")
	return ret
}

func (v OutputVector) p() *C.GOutputVector {
	return (*C.GOutputVector)(v.P)
}
func (v OutputVector) Buffer() (result unsafe.Pointer) {
	result = unsafe.Pointer(v.p().buffer)
	return
}
func (v OutputVector) Size() (result uint64) {
	result = uint64(v.p().size)
	return
}

// Enum PasswordSave
type PasswordSaveEnum int

const (
	PasswordSaveNever       PasswordSaveEnum = 0
	PasswordSaveForSession  PasswordSaveEnum = 1
	PasswordSavePermanently PasswordSaveEnum = 2
)

func PasswordSaveGetType() gi.GType {
	ret := _I.GetGType1(351, "Gio", "PasswordSave")
	return ret
}

// Object Permission
type Permission struct {
	Object
}

func WrapPermission(p unsafe.Pointer) (r Permission) { r.P = p; return }

type IPermission interface{ P_Permission() unsafe.Pointer }

func (v Permission) P_Permission() unsafe.Pointer { return v.P }
func PermissionGetType() gi.GType {
	ret := _I.GetGType1(352, "Gio", "Permission")
	return ret
}

// g_permission_acquire
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Permission) Acquire(cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2656, "Gio", "Permission", "acquire", 382, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_permission_acquire_async
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Permission) AcquireAsync(cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2657, "Gio", "Permission", "acquire_async", 382, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_permission_acquire_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v Permission) AcquireFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2658, "Gio", "Permission", "acquire_finish", 382, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_permission_get_allowed
//
// [ result ] trans: nothing
//
func (v Permission) GetAllowed() (result bool) {
	iv, err := _I.Get1(2659, "Gio", "Permission", "get_allowed", 382, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_permission_get_can_acquire
//
// [ result ] trans: nothing
//
func (v Permission) GetCanAcquire() (result bool) {
	iv, err := _I.Get1(2660, "Gio", "Permission", "get_can_acquire", 382, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_permission_get_can_release
//
// [ result ] trans: nothing
//
func (v Permission) GetCanRelease() (result bool) {
	iv, err := _I.Get1(2661, "Gio", "Permission", "get_can_release", 382, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_permission_impl_update
//
// [ allowed ] trans: nothing
//
// [ can_acquire ] trans: nothing
//
// [ can_release ] trans: nothing
//
func (v Permission) ImplUpdate(allowed bool, can_acquire bool, can_release bool) {
	iv, err := _I.Get1(2662, "Gio", "Permission", "impl_update", 382, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_allowed := gi.NewBoolArgument(allowed)
	arg_can_acquire := gi.NewBoolArgument(can_acquire)
	arg_can_release := gi.NewBoolArgument(can_release)
	args := []gi.Argument{arg_v, arg_allowed, arg_can_acquire, arg_can_release}
	iv.Call(args, nil, nil)
}

// g_permission_release
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Permission) Release(cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2663, "Gio", "Permission", "release", 382, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_permission_release_async
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Permission) ReleaseAsync(cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2664, "Gio", "Permission", "release_async", 382, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_permission_release_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v Permission) ReleaseFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2665, "Gio", "Permission", "release_finish", 382, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// ignore GType struct PermissionClass

// ignore private struct PermissionPrivate, type of Permission is object

// Interface PollableInputStream
type PollableInputStream struct {
	PollableInputStreamIfc
	P unsafe.Pointer
}
type PollableInputStreamIfc struct{}
type IPollableInputStream interface{ P_PollableInputStream() unsafe.Pointer }

func (v PollableInputStream) P_PollableInputStream() unsafe.Pointer { return v.P }
func PollableInputStreamGetType() gi.GType {
	ret := _I.GetGType1(353, "Gio", "PollableInputStream")
	return ret
}

// g_pollable_input_stream_can_poll
//
// [ result ] trans: nothing
//
func (v *PollableInputStreamIfc) CanPoll() (result bool) {
	iv, err := _I.Get1(2666, "Gio", "PollableInputStream", "can_poll", 385, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_pollable_input_stream_create_source
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *PollableInputStreamIfc) CreateSource(cancellable ICancellable) (result Source) {
	iv, err := _I.Get1(2667, "Gio", "PollableInputStream", "create_source", 385, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cancellable := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_cancellable}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_pollable_input_stream_is_readable
//
// [ result ] trans: nothing
//
func (v *PollableInputStreamIfc) IsReadable() (result bool) {
	iv, err := _I.Get1(2668, "Gio", "PollableInputStream", "is_readable", 385, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_pollable_input_stream_read_nonblocking
//
// [ buffer ] trans: nothing
//
// [ count ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *PollableInputStreamIfc) ReadNonblocking(buffer gi.Uint8Array, count uint64, cancellable ICancellable) (result int64, err error) {
	iv, err := _I.Get1(2669, "Gio", "PollableInputStream", "read_nonblocking", 385, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_buffer := gi.NewPointerArgument(buffer.P)
	arg_count := gi.NewUint64Argument(count)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_buffer, arg_count, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int64()
	return
}

// ignore GType struct PollableInputStreamInterface

// Interface PollableOutputStream
type PollableOutputStream struct {
	PollableOutputStreamIfc
	P unsafe.Pointer
}
type PollableOutputStreamIfc struct{}
type IPollableOutputStream interface{ P_PollableOutputStream() unsafe.Pointer }

func (v PollableOutputStream) P_PollableOutputStream() unsafe.Pointer { return v.P }
func PollableOutputStreamGetType() gi.GType {
	ret := _I.GetGType1(354, "Gio", "PollableOutputStream")
	return ret
}

// g_pollable_output_stream_can_poll
//
// [ result ] trans: nothing
//
func (v *PollableOutputStreamIfc) CanPoll() (result bool) {
	iv, err := _I.Get1(2670, "Gio", "PollableOutputStream", "can_poll", 387, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_pollable_output_stream_create_source
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *PollableOutputStreamIfc) CreateSource(cancellable ICancellable) (result Source) {
	iv, err := _I.Get1(2671, "Gio", "PollableOutputStream", "create_source", 387, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_cancellable := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_cancellable}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_pollable_output_stream_is_writable
//
// [ result ] trans: nothing
//
func (v *PollableOutputStreamIfc) IsWritable() (result bool) {
	iv, err := _I.Get1(2672, "Gio", "PollableOutputStream", "is_writable", 387, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_pollable_output_stream_write_nonblocking
//
// [ buffer ] trans: nothing
//
// [ count ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *PollableOutputStreamIfc) WriteNonblocking(buffer gi.Uint8Array, count uint64, cancellable ICancellable) (result int64, err error) {
	iv, err := _I.Get1(2673, "Gio", "PollableOutputStream", "write_nonblocking", 387, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_buffer := gi.NewPointerArgument(buffer.P)
	arg_count := gi.NewUint64Argument(count)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_buffer, arg_count, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int64()
	return
}

// ignore GType struct PollableOutputStreamInterface

type PollableSourceFunc func(pollable_stream Object) (result bool)

func CallPollableSourceFunc(fn PollableSourceFunc, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	pollable_stream := WrapObject(*(*unsafe.Pointer)(args[0]))
	fnRet := fn(pollable_stream)
	*(*int32)(result) = int32(gi.Bool2Int(fnRet))
}

// Object PropertyAction
type PropertyAction struct {
	ActionIfc
	Object
}

func WrapPropertyAction(p unsafe.Pointer) (r PropertyAction) { r.P = p; return }

type IPropertyAction interface{ P_PropertyAction() unsafe.Pointer }

func (v PropertyAction) P_PropertyAction() unsafe.Pointer { return v.P }
func (v PropertyAction) P_Action() unsafe.Pointer         { return v.P }
func PropertyActionGetType() gi.GType {
	ret := _I.GetGType1(355, "Gio", "PropertyAction")
	return ret
}

// g_property_action_new
//
// [ name ] trans: nothing
//
// [ object ] trans: nothing
//
// [ property_name ] trans: nothing
//
// [ result ] trans: everything
//
func NewPropertyAction(name string, object IObject, property_name string) (result PropertyAction) {
	iv, err := _I.Get1(2674, "Gio", "PropertyAction", "new", 390, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	var tmp unsafe.Pointer
	if object != nil {
		tmp = object.P_Object()
	}
	c_property_name := gi.CString(property_name)
	arg_name := gi.NewStringArgument(c_name)
	arg_object := gi.NewPointerArgument(tmp)
	arg_property_name := gi.NewStringArgument(c_property_name)
	args := []gi.Argument{arg_name, arg_object, arg_property_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	gi.Free(c_property_name)
	result.P = ret.Pointer()
	return
}

// Interface Proxy
type Proxy struct {
	ProxyIfc
	P unsafe.Pointer
}
type ProxyIfc struct{}
type IProxy interface{ P_Proxy() unsafe.Pointer }

func (v Proxy) P_Proxy() unsafe.Pointer { return v.P }
func ProxyGetType() gi.GType {
	ret := _I.GetGType1(356, "Gio", "Proxy")
	return ret
}

// g_proxy_get_default_for_protocol
//
// [ protocol ] trans: nothing
//
// [ result ] trans: everything
//
func ProxyGetDefaultForProtocol1(protocol string) (result Proxy) {
	iv, err := _I.Get1(2675, "Gio", "Proxy", "get_default_for_protocol", 391, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_protocol := gi.CString(protocol)
	arg_protocol := gi.NewStringArgument(c_protocol)
	args := []gi.Argument{arg_protocol}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_protocol)
	result.P = ret.Pointer()
	return
}

// g_proxy_connect
//
// [ connection ] trans: nothing
//
// [ proxy_address ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *ProxyIfc) Connect(connection IIOStream, proxy_address IProxyAddress, cancellable ICancellable) (result IOStream, err error) {
	iv, err := _I.Get1(2676, "Gio", "Proxy", "connect", 391, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_IOStream()
	}
	var tmp1 unsafe.Pointer
	if proxy_address != nil {
		tmp1 = proxy_address.P_ProxyAddress()
	}
	var tmp2 unsafe.Pointer
	if cancellable != nil {
		tmp2 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_connection := gi.NewPointerArgument(tmp)
	arg_proxy_address := gi.NewPointerArgument(tmp1)
	arg_cancellable := gi.NewPointerArgument(tmp2)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_connection, arg_proxy_address, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_proxy_connect_async
//
// [ connection ] trans: nothing
//
// [ proxy_address ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *ProxyIfc) ConnectAsync(connection IIOStream, proxy_address IProxyAddress, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2677, "Gio", "Proxy", "connect_async", 391, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_IOStream()
	}
	var tmp1 unsafe.Pointer
	if proxy_address != nil {
		tmp1 = proxy_address.P_ProxyAddress()
	}
	var tmp2 unsafe.Pointer
	if cancellable != nil {
		tmp2 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_connection := gi.NewPointerArgument(tmp)
	arg_proxy_address := gi.NewPointerArgument(tmp1)
	arg_cancellable := gi.NewPointerArgument(tmp2)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_connection, arg_proxy_address, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_proxy_connect_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v *ProxyIfc) ConnectFinish(result IAsyncResult) (result1 IOStream, err error) {
	iv, err := _I.Get1(2678, "Gio", "Proxy", "connect_finish", 391, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// g_proxy_supports_hostname
//
// [ result ] trans: nothing
//
func (v *ProxyIfc) SupportsHostname() (result bool) {
	iv, err := _I.Get1(2679, "Gio", "Proxy", "supports_hostname", 391, 4, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Object ProxyAddress
type ProxyAddress struct {
	InetSocketAddress
}

func WrapProxyAddress(p unsafe.Pointer) (r ProxyAddress) { r.P = p; return }

type IProxyAddress interface{ P_ProxyAddress() unsafe.Pointer }

func (v ProxyAddress) P_ProxyAddress() unsafe.Pointer { return v.P }
func ProxyAddressGetType() gi.GType {
	ret := _I.GetGType1(357, "Gio", "ProxyAddress")
	return ret
}

// g_proxy_address_new
//
// [ inetaddr ] trans: nothing
//
// [ port ] trans: nothing
//
// [ protocol ] trans: nothing
//
// [ dest_hostname ] trans: nothing
//
// [ dest_port ] trans: nothing
//
// [ username ] trans: nothing
//
// [ password ] trans: nothing
//
// [ result ] trans: everything
//
func NewProxyAddress(inetaddr IInetAddress, port uint16, protocol string, dest_hostname string, dest_port uint16, username string, password string) (result ProxyAddress) {
	iv, err := _I.Get1(2680, "Gio", "ProxyAddress", "new", 392, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if inetaddr != nil {
		tmp = inetaddr.P_InetAddress()
	}
	c_protocol := gi.CString(protocol)
	c_dest_hostname := gi.CString(dest_hostname)
	c_username := gi.CString(username)
	c_password := gi.CString(password)
	arg_inetaddr := gi.NewPointerArgument(tmp)
	arg_port := gi.NewUint16Argument(port)
	arg_protocol := gi.NewStringArgument(c_protocol)
	arg_dest_hostname := gi.NewStringArgument(c_dest_hostname)
	arg_dest_port := gi.NewUint16Argument(dest_port)
	arg_username := gi.NewStringArgument(c_username)
	arg_password := gi.NewStringArgument(c_password)
	args := []gi.Argument{arg_inetaddr, arg_port, arg_protocol, arg_dest_hostname, arg_dest_port, arg_username, arg_password}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_protocol)
	gi.Free(c_dest_hostname)
	gi.Free(c_username)
	gi.Free(c_password)
	result.P = ret.Pointer()
	return
}

// g_proxy_address_get_destination_hostname
//
// [ result ] trans: nothing
//
func (v ProxyAddress) GetDestinationHostname() (result string) {
	iv, err := _I.Get1(2681, "Gio", "ProxyAddress", "get_destination_hostname", 392, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_proxy_address_get_destination_port
//
// [ result ] trans: nothing
//
func (v ProxyAddress) GetDestinationPort() (result uint16) {
	iv, err := _I.Get1(2682, "Gio", "ProxyAddress", "get_destination_port", 392, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint16()
	return
}

// g_proxy_address_get_destination_protocol
//
// [ result ] trans: nothing
//
func (v ProxyAddress) GetDestinationProtocol() (result string) {
	iv, err := _I.Get1(2683, "Gio", "ProxyAddress", "get_destination_protocol", 392, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_proxy_address_get_password
//
// [ result ] trans: nothing
//
func (v ProxyAddress) GetPassword() (result string) {
	iv, err := _I.Get1(2684, "Gio", "ProxyAddress", "get_password", 392, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_proxy_address_get_protocol
//
// [ result ] trans: nothing
//
func (v ProxyAddress) GetProtocol() (result string) {
	iv, err := _I.Get1(2685, "Gio", "ProxyAddress", "get_protocol", 392, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_proxy_address_get_uri
//
// [ result ] trans: nothing
//
func (v ProxyAddress) GetUri() (result string) {
	iv, err := _I.Get1(2686, "Gio", "ProxyAddress", "get_uri", 392, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_proxy_address_get_username
//
// [ result ] trans: nothing
//
func (v ProxyAddress) GetUsername() (result string) {
	iv, err := _I.Get1(2687, "Gio", "ProxyAddress", "get_username", 392, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// ignore GType struct ProxyAddressClass

// Object ProxyAddressEnumerator
type ProxyAddressEnumerator struct {
	SocketAddressEnumerator
}

func WrapProxyAddressEnumerator(p unsafe.Pointer) (r ProxyAddressEnumerator) { r.P = p; return }

type IProxyAddressEnumerator interface{ P_ProxyAddressEnumerator() unsafe.Pointer }

func (v ProxyAddressEnumerator) P_ProxyAddressEnumerator() unsafe.Pointer { return v.P }
func ProxyAddressEnumeratorGetType() gi.GType {
	ret := _I.GetGType1(358, "Gio", "ProxyAddressEnumerator")
	return ret
}

// ignore GType struct ProxyAddressEnumeratorClass

// ignore private struct ProxyAddressEnumeratorPrivate, type of ProxyAddressEnumerator is object

// ignore private struct ProxyAddressPrivate, type of ProxyAddress is object

// ignore GType struct ProxyInterface

// Interface ProxyResolver
type ProxyResolver struct {
	ProxyResolverIfc
	P unsafe.Pointer
}
type ProxyResolverIfc struct{}
type IProxyResolver interface{ P_ProxyResolver() unsafe.Pointer }

func (v ProxyResolver) P_ProxyResolver() unsafe.Pointer { return v.P }
func ProxyResolverGetType() gi.GType {
	ret := _I.GetGType1(359, "Gio", "ProxyResolver")
	return ret
}

// g_proxy_resolver_get_default
//
// [ result ] trans: nothing
//
func ProxyResolverGetDefault1() (result ProxyResolver) {
	iv, err := _I.Get1(2688, "Gio", "ProxyResolver", "get_default", 399, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_proxy_resolver_is_supported
//
// [ result ] trans: nothing
//
func (v *ProxyResolverIfc) IsSupported() (result bool) {
	iv, err := _I.Get1(2689, "Gio", "ProxyResolver", "is_supported", 399, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_proxy_resolver_lookup
//
// [ uri ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v *ProxyResolverIfc) Lookup(uri string, cancellable ICancellable) (result gi.CStrArray, err error) {
	iv, err := _I.Get1(2690, "Gio", "ProxyResolver", "lookup", 399, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_uri := gi.CString(uri)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_uri := gi.NewStringArgument(c_uri)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_uri, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_uri)
	err = gi.ToError(outArgs[0].Pointer())
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_proxy_resolver_lookup_async
//
// [ uri ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *ProxyResolverIfc) LookupAsync(uri string, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2691, "Gio", "ProxyResolver", "lookup_async", 399, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri := gi.CString(uri)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_uri := gi.NewStringArgument(c_uri)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_uri, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_uri)
}

// g_proxy_resolver_lookup_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v *ProxyResolverIfc) LookupFinish(result IAsyncResult) (result1 gi.CStrArray, err error) {
	iv, err := _I.Get1(2692, "Gio", "ProxyResolver", "lookup_finish", 399, 4, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result1.SetLenZT()
	return
}

// ignore GType struct ProxyResolverInterface

type ReallocFunc func(data unsafe.Pointer, size uint64) (result unsafe.Pointer)

func CallReallocFunc(fn ReallocFunc, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	data := *(*unsafe.Pointer)(args[0])
	size := *(*uint64)(args[1])
	fnRet := fn(data, size)
	*(*unsafe.Pointer)(result) = fnRet
}

// Interface RemoteActionGroup
type RemoteActionGroup struct {
	RemoteActionGroupIfc
	P unsafe.Pointer
}
type RemoteActionGroupIfc struct{}
type IRemoteActionGroup interface{ P_RemoteActionGroup() unsafe.Pointer }

func (v RemoteActionGroup) P_RemoteActionGroup() unsafe.Pointer { return v.P }
func RemoteActionGroupGetType() gi.GType {
	ret := _I.GetGType1(360, "Gio", "RemoteActionGroup")
	return ret
}

// g_remote_action_group_activate_action_full
//
// [ action_name ] trans: nothing
//
// [ parameter ] trans: nothing
//
// [ platform_data ] trans: nothing
//
func (v *RemoteActionGroupIfc) ActivateActionFull(action_name string, parameter Variant, platform_data Variant) {
	iv, err := _I.Get1(2693, "Gio", "RemoteActionGroup", "activate_action_full", 402, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action_name := gi.NewStringArgument(c_action_name)
	arg_parameter := gi.NewPointerArgument(parameter.P)
	arg_platform_data := gi.NewPointerArgument(platform_data.P)
	args := []gi.Argument{arg_v, arg_action_name, arg_parameter, arg_platform_data}
	iv.Call(args, nil, nil)
	gi.Free(c_action_name)
}

// g_remote_action_group_change_action_state_full
//
// [ action_name ] trans: nothing
//
// [ value ] trans: nothing
//
// [ platform_data ] trans: nothing
//
func (v *RemoteActionGroupIfc) ChangeActionStateFull(action_name string, value Variant, platform_data Variant) {
	iv, err := _I.Get1(2694, "Gio", "RemoteActionGroup", "change_action_state_full", 402, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_action_name := gi.NewStringArgument(c_action_name)
	arg_value := gi.NewPointerArgument(value.P)
	arg_platform_data := gi.NewPointerArgument(platform_data.P)
	args := []gi.Argument{arg_v, arg_action_name, arg_value, arg_platform_data}
	iv.Call(args, nil, nil)
	gi.Free(c_action_name)
}

// ignore GType struct RemoteActionGroupInterface

// Object Resolver
type Resolver struct {
	Object
}

func WrapResolver(p unsafe.Pointer) (r Resolver) { r.P = p; return }

type IResolver interface{ P_Resolver() unsafe.Pointer }

func (v Resolver) P_Resolver() unsafe.Pointer { return v.P }
func ResolverGetType() gi.GType {
	ret := _I.GetGType1(361, "Gio", "Resolver")
	return ret
}

// g_resolver_get_default
//
// [ result ] trans: everything
//
func ResolverGetDefault1() (result Resolver) {
	iv, err := _I.Get1(2695, "Gio", "Resolver", "get_default", 404, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_resolver_lookup_by_address
//
// [ address ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v Resolver) LookupByAddress(address IInetAddress, cancellable ICancellable) (result string, err error) {
	iv, err := _I.Get1(2696, "Gio", "Resolver", "lookup_by_address", 404, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if address != nil {
		tmp = address.P_InetAddress()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_address := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_address, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.String().Take()
	return
}

// g_resolver_lookup_by_address_async
//
// [ address ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Resolver) LookupByAddressAsync(address IInetAddress, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2697, "Gio", "Resolver", "lookup_by_address_async", 404, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if address != nil {
		tmp = address.P_InetAddress()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_address := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_address, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_resolver_lookup_by_address_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v Resolver) LookupByAddressFinish(result IAsyncResult) (result1 string, err error) {
	iv, err := _I.Get1(2698, "Gio", "Resolver", "lookup_by_address_finish", 404, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.String().Take()
	return
}

// g_resolver_lookup_by_name
//
// [ hostname ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v Resolver) LookupByName(hostname string, cancellable ICancellable) (result List, err error) {
	iv, err := _I.Get1(2699, "Gio", "Resolver", "lookup_by_name", 404, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_hostname := gi.CString(hostname)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_hostname := gi.NewStringArgument(c_hostname)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_hostname, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_hostname)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_resolver_lookup_by_name_async
//
// [ hostname ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Resolver) LookupByNameAsync(hostname string, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2700, "Gio", "Resolver", "lookup_by_name_async", 404, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_hostname := gi.CString(hostname)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_hostname := gi.NewStringArgument(c_hostname)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_hostname, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_hostname)
}

// g_resolver_lookup_by_name_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v Resolver) LookupByNameFinish(result IAsyncResult) (result1 List, err error) {
	iv, err := _I.Get1(2701, "Gio", "Resolver", "lookup_by_name_finish", 404, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// g_resolver_lookup_records
//
// [ rrname ] trans: nothing
//
// [ record_type ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v Resolver) LookupRecords(rrname string, record_type ResolverRecordTypeEnum, cancellable ICancellable) (result List, err error) {
	iv, err := _I.Get1(2702, "Gio", "Resolver", "lookup_records", 404, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_rrname := gi.CString(rrname)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_rrname := gi.NewStringArgument(c_rrname)
	arg_record_type := gi.NewIntArgument(int(record_type))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_rrname, arg_record_type, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_rrname)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_resolver_lookup_records_async
//
// [ rrname ] trans: nothing
//
// [ record_type ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Resolver) LookupRecordsAsync(rrname string, record_type ResolverRecordTypeEnum, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2703, "Gio", "Resolver", "lookup_records_async", 404, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_rrname := gi.CString(rrname)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_rrname := gi.NewStringArgument(c_rrname)
	arg_record_type := gi.NewIntArgument(int(record_type))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_rrname, arg_record_type, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_rrname)
}

// g_resolver_lookup_records_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v Resolver) LookupRecordsFinish(result IAsyncResult) (result1 List, err error) {
	iv, err := _I.Get1(2704, "Gio", "Resolver", "lookup_records_finish", 404, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// g_resolver_lookup_service
//
// [ service ] trans: nothing
//
// [ protocol ] trans: nothing
//
// [ domain ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v Resolver) LookupService(service string, protocol string, domain string, cancellable ICancellable) (result List, err error) {
	iv, err := _I.Get1(2705, "Gio", "Resolver", "lookup_service", 404, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_service := gi.CString(service)
	c_protocol := gi.CString(protocol)
	c_domain := gi.CString(domain)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_service := gi.NewStringArgument(c_service)
	arg_protocol := gi.NewStringArgument(c_protocol)
	arg_domain := gi.NewStringArgument(c_domain)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_service, arg_protocol, arg_domain, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_service)
	gi.Free(c_protocol)
	gi.Free(c_domain)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_resolver_lookup_service_async
//
// [ service ] trans: nothing
//
// [ protocol ] trans: nothing
//
// [ domain ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Resolver) LookupServiceAsync(service string, protocol string, domain string, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2706, "Gio", "Resolver", "lookup_service_async", 404, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_service := gi.CString(service)
	c_protocol := gi.CString(protocol)
	c_domain := gi.CString(domain)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_service := gi.NewStringArgument(c_service)
	arg_protocol := gi.NewStringArgument(c_protocol)
	arg_domain := gi.NewStringArgument(c_domain)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_service, arg_protocol, arg_domain, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_service)
	gi.Free(c_protocol)
	gi.Free(c_domain)
}

// g_resolver_lookup_service_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v Resolver) LookupServiceFinish(result IAsyncResult) (result1 List, err error) {
	iv, err := _I.Get1(2707, "Gio", "Resolver", "lookup_service_finish", 404, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// g_resolver_set_default
//
func (v Resolver) SetDefault() {
	iv, err := _I.Get1(2708, "Gio", "Resolver", "set_default", 404, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// ignore GType struct ResolverClass

// Enum ResolverError
type ResolverErrorEnum int

const (
	ResolverErrorNotFound         ResolverErrorEnum = 0
	ResolverErrorTemporaryFailure ResolverErrorEnum = 1
	ResolverErrorInternal         ResolverErrorEnum = 2
)

func ResolverErrorGetType() gi.GType {
	ret := _I.GetGType1(362, "Gio", "ResolverError")
	return ret
}

// ignore private struct ResolverPrivate, type of Resolver is object

// Enum ResolverRecordType
type ResolverRecordTypeEnum int

const (
	ResolverRecordTypeSrv ResolverRecordTypeEnum = 1
	ResolverRecordTypeMx  ResolverRecordTypeEnum = 2
	ResolverRecordTypeTxt ResolverRecordTypeEnum = 3
	ResolverRecordTypeSoa ResolverRecordTypeEnum = 4
	ResolverRecordTypeNs  ResolverRecordTypeEnum = 5
)

func ResolverRecordTypeGetType() gi.GType {
	ret := _I.GetGType1(363, "Gio", "ResolverRecordType")
	return ret
}

// Struct Resource
type Resource struct {
	P unsafe.Pointer
}

func ResourceGetType() gi.GType {
	ret := _I.GetGType1(364, "Gio", "Resource")
	return ret
}

// g_resource_new_from_data
//
// [ data ] trans: nothing
//
// [ result ] trans: everything
//
func NewResourceFromData(data Bytes) (result Resource, err error) {
	iv, err := _I.Get1(2709, "Gio", "Resource", "new_from_data", 409, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_data := gi.NewPointerArgument(data.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_data, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_resources_register
//
func (v Resource) _Register() {
	iv, err := _I.Get1(2710, "Gio", "Resource", "_register", 409, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_resources_unregister
//
func (v Resource) _Unregister() {
	iv, err := _I.Get1(2711, "Gio", "Resource", "_unregister", 409, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_resource_enumerate_children
//
// [ path ] trans: nothing
//
// [ lookup_flags ] trans: nothing
//
// [ result ] trans: everything
//
func (v Resource) EnumerateChildren(path string, lookup_flags ResourceLookupFlags) (result gi.CStrArray, err error) {
	iv, err := _I.Get1(2712, "Gio", "Resource", "enumerate_children", 409, 3, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewStringArgument(c_path)
	arg_lookup_flags := gi.NewIntArgument(int(lookup_flags))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_path, arg_lookup_flags, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_path)
	err = gi.ToError(outArgs[0].Pointer())
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_resource_get_info
//
// [ path ] trans: nothing
//
// [ lookup_flags ] trans: nothing
//
// [ size ] trans: everything, dir: out
//
// [ flags ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v Resource) GetInfo(path string, lookup_flags ResourceLookupFlags) (result bool, size uint64, flags uint32, err error) {
	iv, err := _I.Get1(2713, "Gio", "Resource", "get_info", 409, 4, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		return
	}
	var outArgs [3]gi.Argument
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewStringArgument(c_path)
	arg_lookup_flags := gi.NewIntArgument(int(lookup_flags))
	arg_size := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_flags := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	args := []gi.Argument{arg_v, arg_path, arg_lookup_flags, arg_size, arg_flags, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_path)
	err = gi.ToError(outArgs[2].Pointer())
	size = outArgs[0].Uint64()
	flags = outArgs[1].Uint32()
	result = ret.Bool()
	return
}

// g_resource_lookup_data
//
// [ path ] trans: nothing
//
// [ lookup_flags ] trans: nothing
//
// [ result ] trans: everything
//
func (v Resource) LookupData(path string, lookup_flags ResourceLookupFlags) (result Bytes, err error) {
	iv, err := _I.Get1(2714, "Gio", "Resource", "lookup_data", 409, 5, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewStringArgument(c_path)
	arg_lookup_flags := gi.NewIntArgument(int(lookup_flags))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_path, arg_lookup_flags, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_path)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_resource_open_stream
//
// [ path ] trans: nothing
//
// [ lookup_flags ] trans: nothing
//
// [ result ] trans: everything
//
func (v Resource) OpenStream(path string, lookup_flags ResourceLookupFlags) (result InputStream, err error) {
	iv, err := _I.Get1(2715, "Gio", "Resource", "open_stream", 409, 6, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewStringArgument(c_path)
	arg_lookup_flags := gi.NewIntArgument(int(lookup_flags))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_path, arg_lookup_flags, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_path)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_resource_ref
//
// [ result ] trans: everything
//
func (v Resource) Ref() (result Resource) {
	iv, err := _I.Get1(2716, "Gio", "Resource", "ref", 409, 7, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_resource_unref
//
func (v Resource) Unref() {
	iv, err := _I.Get1(2717, "Gio", "Resource", "unref", 409, 8, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_resource_load
//
// [ filename ] trans: nothing
//
// [ result ] trans: everything
//
func ResourceLoad1(filename string) (result Resource, err error) {
	iv, err := _I.Get1(2718, "Gio", "Resource", "load", 409, 9, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_filename := gi.CString(filename)
	arg_filename := gi.NewStringArgument(c_filename)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_filename, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_filename)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// Enum ResourceError
type ResourceErrorEnum int

const (
	ResourceErrorNotFound ResourceErrorEnum = 0
	ResourceErrorInternal ResourceErrorEnum = 1
)

func ResourceErrorGetType() gi.GType {
	ret := _I.GetGType1(365, "Gio", "ResourceError")
	return ret
}

// Flags ResourceFlags
type ResourceFlags int

const (
	ResourceFlagsNone       ResourceFlags = 0
	ResourceFlagsCompressed ResourceFlags = 1
)

func ResourceFlagsGetType() gi.GType {
	ret := _I.GetGType1(366, "Gio", "ResourceFlags")
	return ret
}

// Flags ResourceLookupFlags
type ResourceLookupFlags int

const (
	ResourceLookupFlagsNone ResourceLookupFlags = 0
)

func ResourceLookupFlagsGetType() gi.GType {
	ret := _I.GetGType1(367, "Gio", "ResourceLookupFlags")
	return ret
}

// Interface Seekable
type Seekable struct {
	SeekableIfc
	P unsafe.Pointer
}
type SeekableIfc struct{}
type ISeekable interface{ P_Seekable() unsafe.Pointer }

func (v Seekable) P_Seekable() unsafe.Pointer { return v.P }
func SeekableGetType() gi.GType {
	ret := _I.GetGType1(368, "Gio", "Seekable")
	return ret
}

// g_seekable_can_seek
//
// [ result ] trans: nothing
//
func (v *SeekableIfc) CanSeek() (result bool) {
	iv, err := _I.Get1(2719, "Gio", "Seekable", "can_seek", 414, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_seekable_can_truncate
//
// [ result ] trans: nothing
//
func (v *SeekableIfc) CanTruncate() (result bool) {
	iv, err := _I.Get1(2720, "Gio", "Seekable", "can_truncate", 414, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_seekable_seek
//
// [ offset ] trans: nothing
//
// [ type1 ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *SeekableIfc) Seek(offset int64, type1 SeekTypeEnum, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2721, "Gio", "Seekable", "seek", 414, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_offset := gi.NewInt64Argument(offset)
	arg_type1 := gi.NewIntArgument(int(type1))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_offset, arg_type1, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_seekable_tell
//
// [ result ] trans: nothing
//
func (v *SeekableIfc) Tell() (result int64) {
	iv, err := _I.Get1(2722, "Gio", "Seekable", "tell", 414, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int64()
	return
}

// g_seekable_truncate
//
// [ offset ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v *SeekableIfc) Truncate(offset int64, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2723, "Gio", "Seekable", "truncate", 414, 4, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_offset := gi.NewInt64Argument(offset)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_offset, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// ignore GType struct SeekableIface

// Object Settings
type Settings struct {
	Object
}

func WrapSettings(p unsafe.Pointer) (r Settings) { r.P = p; return }

type ISettings interface{ P_Settings() unsafe.Pointer }

func (v Settings) P_Settings() unsafe.Pointer { return v.P }
func SettingsGetType() gi.GType {
	ret := _I.GetGType1(369, "Gio", "Settings")
	return ret
}

// g_settings_new
//
// [ schema_id ] trans: nothing
//
// [ result ] trans: everything
//
func NewSettings(schema_id string) (result Settings) {
	iv, err := _I.Get1(2724, "Gio", "Settings", "new", 416, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_schema_id := gi.CString(schema_id)
	arg_schema_id := gi.NewStringArgument(c_schema_id)
	args := []gi.Argument{arg_schema_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_schema_id)
	result.P = ret.Pointer()
	return
}

// g_settings_new_full
//
// [ schema ] trans: nothing
//
// [ backend ] trans: nothing
//
// [ path ] trans: nothing
//
// [ result ] trans: everything
//
func NewSettingsFull(schema SettingsSchema, backend ISettingsBackend, path string) (result Settings) {
	iv, err := _I.Get1(2725, "Gio", "Settings", "new_full", 416, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if backend != nil {
		tmp = backend.P_SettingsBackend()
	}
	c_path := gi.CString(path)
	arg_schema := gi.NewPointerArgument(schema.P)
	arg_backend := gi.NewPointerArgument(tmp)
	arg_path := gi.NewStringArgument(c_path)
	args := []gi.Argument{arg_schema, arg_backend, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_path)
	result.P = ret.Pointer()
	return
}

// g_settings_new_with_backend
//
// [ schema_id ] trans: nothing
//
// [ backend ] trans: nothing
//
// [ result ] trans: everything
//
func NewSettingsWithBackend(schema_id string, backend ISettingsBackend) (result Settings) {
	iv, err := _I.Get1(2726, "Gio", "Settings", "new_with_backend", 416, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_schema_id := gi.CString(schema_id)
	var tmp unsafe.Pointer
	if backend != nil {
		tmp = backend.P_SettingsBackend()
	}
	arg_schema_id := gi.NewStringArgument(c_schema_id)
	arg_backend := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_schema_id, arg_backend}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_schema_id)
	result.P = ret.Pointer()
	return
}

// g_settings_new_with_backend_and_path
//
// [ schema_id ] trans: nothing
//
// [ backend ] trans: nothing
//
// [ path ] trans: nothing
//
// [ result ] trans: everything
//
func NewSettingsWithBackendAndPath(schema_id string, backend ISettingsBackend, path string) (result Settings) {
	iv, err := _I.Get1(2727, "Gio", "Settings", "new_with_backend_and_path", 416, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_schema_id := gi.CString(schema_id)
	var tmp unsafe.Pointer
	if backend != nil {
		tmp = backend.P_SettingsBackend()
	}
	c_path := gi.CString(path)
	arg_schema_id := gi.NewStringArgument(c_schema_id)
	arg_backend := gi.NewPointerArgument(tmp)
	arg_path := gi.NewStringArgument(c_path)
	args := []gi.Argument{arg_schema_id, arg_backend, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_schema_id)
	gi.Free(c_path)
	result.P = ret.Pointer()
	return
}

// g_settings_new_with_path
//
// [ schema_id ] trans: nothing
//
// [ path ] trans: nothing
//
// [ result ] trans: everything
//
func NewSettingsWithPath(schema_id string, path string) (result Settings) {
	iv, err := _I.Get1(2728, "Gio", "Settings", "new_with_path", 416, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_schema_id := gi.CString(schema_id)
	c_path := gi.CString(path)
	arg_schema_id := gi.NewStringArgument(c_schema_id)
	arg_path := gi.NewStringArgument(c_path)
	args := []gi.Argument{arg_schema_id, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_schema_id)
	gi.Free(c_path)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// g_settings_list_relocatable_schemas
//
// [ result ] trans: nothing
//
func SettingsListRelocatableSchemas1() (result gi.CStrArray) {
	iv, err := _I.Get1(2729, "Gio", "Settings", "list_relocatable_schemas", 416, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// Deprecated
//
// g_settings_list_schemas
//
// [ result ] trans: nothing
//
func SettingsListSchemas1() (result gi.CStrArray) {
	iv, err := _I.Get1(2730, "Gio", "Settings", "list_schemas", 416, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_settings_sync
//
func SettingsSync1() {
	iv, err := _I.Get1(2731, "Gio", "Settings", "sync", 416, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	iv.Call(nil, nil, nil)
}

// g_settings_unbind
//
// [ object ] trans: nothing
//
// [ property ] trans: nothing
//
func SettingsUnbind1(object IObject, property string) {
	iv, err := _I.Get1(2732, "Gio", "Settings", "unbind", 416, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if object != nil {
		tmp = object.P_Object()
	}
	c_property := gi.CString(property)
	arg_object := gi.NewPointerArgument(tmp)
	arg_property := gi.NewStringArgument(c_property)
	args := []gi.Argument{arg_object, arg_property}
	iv.Call(args, nil, nil)
	gi.Free(c_property)
}

// g_settings_apply
//
func (v Settings) Apply() {
	iv, err := _I.Get1(2733, "Gio", "Settings", "apply", 416, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_settings_bind
//
// [ key ] trans: nothing
//
// [ object ] trans: nothing
//
// [ property ] trans: nothing
//
// [ flags ] trans: nothing
//
func (v Settings) Bind(key string, object IObject, property string, flags SettingsBindFlags) {
	iv, err := _I.Get1(2734, "Gio", "Settings", "bind", 416, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	var tmp unsafe.Pointer
	if object != nil {
		tmp = object.P_Object()
	}
	c_property := gi.CString(property)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_object := gi.NewPointerArgument(tmp)
	arg_property := gi.NewStringArgument(c_property)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_key, arg_object, arg_property, arg_flags}
	iv.Call(args, nil, nil)
	gi.Free(c_key)
	gi.Free(c_property)
}

// g_settings_bind_writable
//
// [ key ] trans: nothing
//
// [ object ] trans: nothing
//
// [ property ] trans: nothing
//
// [ inverted ] trans: nothing
//
func (v Settings) BindWritable(key string, object IObject, property string, inverted bool) {
	iv, err := _I.Get1(2735, "Gio", "Settings", "bind_writable", 416, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	var tmp unsafe.Pointer
	if object != nil {
		tmp = object.P_Object()
	}
	c_property := gi.CString(property)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_object := gi.NewPointerArgument(tmp)
	arg_property := gi.NewStringArgument(c_property)
	arg_inverted := gi.NewBoolArgument(inverted)
	args := []gi.Argument{arg_v, arg_key, arg_object, arg_property, arg_inverted}
	iv.Call(args, nil, nil)
	gi.Free(c_key)
	gi.Free(c_property)
}

// g_settings_create_action
//
// [ key ] trans: nothing
//
// [ result ] trans: everything
//
func (v Settings) CreateAction(key string) (result Action) {
	iv, err := _I.Get1(2736, "Gio", "Settings", "create_action", 416, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result.P = ret.Pointer()
	return
}

// g_settings_delay
//
func (v Settings) Delay() {
	iv, err := _I.Get1(2737, "Gio", "Settings", "delay", 416, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_settings_get_boolean
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Settings) GetBoolean(key string) (result bool) {
	iv, err := _I.Get1(2738, "Gio", "Settings", "get_boolean", 416, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Bool()
	return
}

// g_settings_get_child
//
// [ name ] trans: nothing
//
// [ result ] trans: everything
//
func (v Settings) GetChild(name string) (result Settings) {
	iv, err := _I.Get1(2739, "Gio", "Settings", "get_child", 416, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// g_settings_get_default_value
//
// [ key ] trans: nothing
//
// [ result ] trans: everything
//
func (v Settings) GetDefaultValue(key string) (result Variant) {
	iv, err := _I.Get1(2740, "Gio", "Settings", "get_default_value", 416, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result.P = ret.Pointer()
	return
}

// g_settings_get_double
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Settings) GetDouble(key string) (result float64) {
	iv, err := _I.Get1(2741, "Gio", "Settings", "get_double", 416, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Double()
	return
}

// g_settings_get_enum
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Settings) GetEnum(key string) (result int32) {
	iv, err := _I.Get1(2742, "Gio", "Settings", "get_enum", 416, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Int32()
	return
}

// g_settings_get_flags
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Settings) GetFlags(key string) (result uint32) {
	iv, err := _I.Get1(2743, "Gio", "Settings", "get_flags", 416, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Uint32()
	return
}

// g_settings_get_has_unapplied
//
// [ result ] trans: nothing
//
func (v Settings) GetHasUnapplied() (result bool) {
	iv, err := _I.Get1(2744, "Gio", "Settings", "get_has_unapplied", 416, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_settings_get_int
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Settings) GetInt(key string) (result int32) {
	iv, err := _I.Get1(2745, "Gio", "Settings", "get_int", 416, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Int32()
	return
}

// g_settings_get_int64
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Settings) GetInt64(key string) (result int64) {
	iv, err := _I.Get1(2746, "Gio", "Settings", "get_int64", 416, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Int64()
	return
}

// g_settings_get_mapped
//
// [ key ] trans: nothing
//
// [ mapping ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ result ] trans: everything
//
func (v Settings) GetMapped(key string, mapping SettingsGetMapping) (result unsafe.Pointer) {
	iv, err := _I.Get1(2747, "Gio", "Settings", "get_mapped", 416, 23, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	var cId uint
	var funcPtr unsafe.Pointer
	if mapping != nil {
		callableInfo := gi.GetCallableInfo("Gio", "SettingsGetMapping")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallSettingsGetMapping(mapping, __result, __args)
		}, gi.ScopeCall, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_mapping := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_key, arg_mapping, arg_user_data}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	gi.UnregisterFClosure(cId)
	result = ret.Pointer()
	return
}

// Deprecated
//
// g_settings_get_range
//
// [ key ] trans: nothing
//
// [ result ] trans: everything
//
func (v Settings) GetRange(key string) (result Variant) {
	iv, err := _I.Get1(2748, "Gio", "Settings", "get_range", 416, 24, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result.P = ret.Pointer()
	return
}

// g_settings_get_string
//
// [ key ] trans: nothing
//
// [ result ] trans: everything
//
func (v Settings) GetString(key string) (result string) {
	iv, err := _I.Get1(2749, "Gio", "Settings", "get_string", 416, 25, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.String().Take()
	return
}

// g_settings_get_strv
//
// [ key ] trans: nothing
//
// [ result ] trans: everything
//
func (v Settings) GetStrv(key string) (result gi.CStrArray) {
	iv, err := _I.Get1(2750, "Gio", "Settings", "get_strv", 416, 26, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_settings_get_uint
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Settings) GetUint(key string) (result uint32) {
	iv, err := _I.Get1(2751, "Gio", "Settings", "get_uint", 416, 27, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Uint32()
	return
}

// g_settings_get_uint64
//
// [ key ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Settings) GetUint64(key string) (result uint64) {
	iv, err := _I.Get1(2752, "Gio", "Settings", "get_uint64", 416, 28, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Uint64()
	return
}

// g_settings_get_user_value
//
// [ key ] trans: nothing
//
// [ result ] trans: everything
//
func (v Settings) GetUserValue(key string) (result Variant) {
	iv, err := _I.Get1(2753, "Gio", "Settings", "get_user_value", 416, 29, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result.P = ret.Pointer()
	return
}

// g_settings_get_value
//
// [ key ] trans: nothing
//
// [ result ] trans: everything
//
func (v Settings) GetValue(key string) (result Variant) {
	iv, err := _I.Get1(2754, "Gio", "Settings", "get_value", 416, 30, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result.P = ret.Pointer()
	return
}

// g_settings_is_writable
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Settings) IsWritable(name string) (result bool) {
	iv, err := _I.Get1(2755, "Gio", "Settings", "is_writable", 416, 31, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result = ret.Bool()
	return
}

// g_settings_list_children
//
// [ result ] trans: everything
//
func (v Settings) ListChildren() (result gi.CStrArray) {
	iv, err := _I.Get1(2756, "Gio", "Settings", "list_children", 416, 32, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_settings_list_keys
//
// [ result ] trans: everything
//
func (v Settings) ListKeys() (result gi.CStrArray) {
	iv, err := _I.Get1(2757, "Gio", "Settings", "list_keys", 416, 33, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// Deprecated
//
// g_settings_range_check
//
// [ key ] trans: nothing
//
// [ value ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Settings) RangeCheck(key string, value Variant) (result bool) {
	iv, err := _I.Get1(2758, "Gio", "Settings", "range_check", 416, 34, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_key, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Bool()
	return
}

// g_settings_reset
//
// [ key ] trans: nothing
//
func (v Settings) Reset(key string) {
	iv, err := _I.Get1(2759, "Gio", "Settings", "reset", 416, 35, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	iv.Call(args, nil, nil)
	gi.Free(c_key)
}

// g_settings_revert
//
func (v Settings) Revert() {
	iv, err := _I.Get1(2760, "Gio", "Settings", "revert", 416, 36, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_settings_set_boolean
//
// [ key ] trans: nothing
//
// [ value ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Settings) SetBoolean(key string, value bool) (result bool) {
	iv, err := _I.Get1(2761, "Gio", "Settings", "set_boolean", 416, 37, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_value := gi.NewBoolArgument(value)
	args := []gi.Argument{arg_v, arg_key, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Bool()
	return
}

// g_settings_set_double
//
// [ key ] trans: nothing
//
// [ value ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Settings) SetDouble(key string, value float64) (result bool) {
	iv, err := _I.Get1(2762, "Gio", "Settings", "set_double", 416, 38, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_value := gi.NewDoubleArgument(value)
	args := []gi.Argument{arg_v, arg_key, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Bool()
	return
}

// g_settings_set_enum
//
// [ key ] trans: nothing
//
// [ value ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Settings) SetEnum(key string, value int32) (result bool) {
	iv, err := _I.Get1(2763, "Gio", "Settings", "set_enum", 416, 39, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_value := gi.NewInt32Argument(value)
	args := []gi.Argument{arg_v, arg_key, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Bool()
	return
}

// g_settings_set_flags
//
// [ key ] trans: nothing
//
// [ value ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Settings) SetFlags(key string, value uint32) (result bool) {
	iv, err := _I.Get1(2764, "Gio", "Settings", "set_flags", 416, 40, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_value := gi.NewUint32Argument(value)
	args := []gi.Argument{arg_v, arg_key, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Bool()
	return
}

// g_settings_set_int
//
// [ key ] trans: nothing
//
// [ value ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Settings) SetInt(key string, value int32) (result bool) {
	iv, err := _I.Get1(2765, "Gio", "Settings", "set_int", 416, 41, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_value := gi.NewInt32Argument(value)
	args := []gi.Argument{arg_v, arg_key, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Bool()
	return
}

// g_settings_set_int64
//
// [ key ] trans: nothing
//
// [ value ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Settings) SetInt64(key string, value int64) (result bool) {
	iv, err := _I.Get1(2766, "Gio", "Settings", "set_int64", 416, 42, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_value := gi.NewInt64Argument(value)
	args := []gi.Argument{arg_v, arg_key, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Bool()
	return
}

// g_settings_set_string
//
// [ key ] trans: nothing
//
// [ value ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Settings) SetString(key string, value string) (result bool) {
	iv, err := _I.Get1(2767, "Gio", "Settings", "set_string", 416, 43, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	c_value := gi.CString(value)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_value := gi.NewStringArgument(c_value)
	args := []gi.Argument{arg_v, arg_key, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	gi.Free(c_value)
	result = ret.Bool()
	return
}

// g_settings_set_strv
//
// [ key ] trans: nothing
//
// [ value ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Settings) SetStrv(key string, value gi.CStrArray) (result bool) {
	iv, err := _I.Get1(2768, "Gio", "Settings", "set_strv", 416, 44, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_key, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Bool()
	return
}

// g_settings_set_uint
//
// [ key ] trans: nothing
//
// [ value ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Settings) SetUint(key string, value uint32) (result bool) {
	iv, err := _I.Get1(2769, "Gio", "Settings", "set_uint", 416, 45, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_value := gi.NewUint32Argument(value)
	args := []gi.Argument{arg_v, arg_key, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Bool()
	return
}

// g_settings_set_uint64
//
// [ key ] trans: nothing
//
// [ value ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Settings) SetUint64(key string, value uint64) (result bool) {
	iv, err := _I.Get1(2770, "Gio", "Settings", "set_uint64", 416, 46, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_value := gi.NewUint64Argument(value)
	args := []gi.Argument{arg_v, arg_key, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Bool()
	return
}

// g_settings_set_value
//
// [ key ] trans: nothing
//
// [ value ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Settings) SetValue(key string, value Variant) (result bool) {
	iv, err := _I.Get1(2771, "Gio", "Settings", "set_value", 416, 47, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_key, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_key)
	result = ret.Bool()
	return
}

// Object SettingsBackend
type SettingsBackend struct {
	Object
}

func WrapSettingsBackend(p unsafe.Pointer) (r SettingsBackend) { r.P = p; return }

type ISettingsBackend interface{ P_SettingsBackend() unsafe.Pointer }

func (v SettingsBackend) P_SettingsBackend() unsafe.Pointer { return v.P }
func SettingsBackendGetType() gi.GType {
	ret := _I.GetGType1(370, "Gio", "SettingsBackend")
	return ret
}

// g_settings_backend_flatten_tree
//
// [ tree ] trans: nothing
//
// [ path ] trans: everything, dir: out
//
// [ keys ] trans: container, dir: out
//
// [ values ] trans: container, dir: out
//
func SettingsBackendFlattenTree1(tree Tree) (path string, keys gi.CStrArray, values gi.PointerArray) {
	iv, err := _I.Get1(2772, "Gio", "SettingsBackend", "flatten_tree", 417, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [3]gi.Argument
	arg_tree := gi.NewPointerArgument(tree.P)
	arg_path := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_keys := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_values := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	args := []gi.Argument{arg_tree, arg_path, arg_keys, arg_values}
	iv.Call(args, nil, &outArgs[0])
	path = outArgs[0].String().Take()
	keys.P = outArgs[1].Pointer()
	values.P = outArgs[2].Pointer()
	values.Len = -1
	values.SetLenZT()
	return
}

// g_settings_backend_get_default
//
// [ result ] trans: everything
//
func SettingsBackendGetDefault1() (result SettingsBackend) {
	iv, err := _I.Get1(2773, "Gio", "SettingsBackend", "get_default", 417, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_settings_backend_changed
//
// [ key ] trans: nothing
//
// [ origin_tag ] trans: nothing
//
func (v SettingsBackend) Changed(key string, origin_tag unsafe.Pointer) {
	iv, err := _I.Get1(2774, "Gio", "SettingsBackend", "changed", 417, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	arg_origin_tag := gi.NewPointerArgument(origin_tag)
	args := []gi.Argument{arg_v, arg_key, arg_origin_tag}
	iv.Call(args, nil, nil)
	gi.Free(c_key)
}

// g_settings_backend_changed_tree
//
// [ tree ] trans: nothing
//
// [ origin_tag ] trans: nothing
//
func (v SettingsBackend) ChangedTree(tree Tree, origin_tag unsafe.Pointer) {
	iv, err := _I.Get1(2775, "Gio", "SettingsBackend", "changed_tree", 417, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tree := gi.NewPointerArgument(tree.P)
	arg_origin_tag := gi.NewPointerArgument(origin_tag)
	args := []gi.Argument{arg_v, arg_tree, arg_origin_tag}
	iv.Call(args, nil, nil)
}

// g_settings_backend_keys_changed
//
// [ path ] trans: nothing
//
// [ items ] trans: nothing
//
// [ origin_tag ] trans: nothing
//
func (v SettingsBackend) KeysChanged(path string, items gi.CStrArray, origin_tag unsafe.Pointer) {
	iv, err := _I.Get1(2776, "Gio", "SettingsBackend", "keys_changed", 417, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewStringArgument(c_path)
	arg_items := gi.NewPointerArgument(items.P)
	arg_origin_tag := gi.NewPointerArgument(origin_tag)
	args := []gi.Argument{arg_v, arg_path, arg_items, arg_origin_tag}
	iv.Call(args, nil, nil)
	gi.Free(c_path)
}

// g_settings_backend_path_changed
//
// [ path ] trans: nothing
//
// [ origin_tag ] trans: nothing
//
func (v SettingsBackend) PathChanged(path string, origin_tag unsafe.Pointer) {
	iv, err := _I.Get1(2777, "Gio", "SettingsBackend", "path_changed", 417, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewStringArgument(c_path)
	arg_origin_tag := gi.NewPointerArgument(origin_tag)
	args := []gi.Argument{arg_v, arg_path, arg_origin_tag}
	iv.Call(args, nil, nil)
	gi.Free(c_path)
}

// g_settings_backend_path_writable_changed
//
// [ path ] trans: nothing
//
func (v SettingsBackend) PathWritableChanged(path string) {
	iv, err := _I.Get1(2778, "Gio", "SettingsBackend", "path_writable_changed", 417, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewStringArgument(c_path)
	args := []gi.Argument{arg_v, arg_path}
	iv.Call(args, nil, nil)
	gi.Free(c_path)
}

// g_settings_backend_writable_changed
//
// [ key ] trans: nothing
//
func (v SettingsBackend) WritableChanged(key string) {
	iv, err := _I.Get1(2779, "Gio", "SettingsBackend", "writable_changed", 417, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_key := gi.CString(key)
	arg_v := gi.NewPointerArgument(v.P)
	arg_key := gi.NewStringArgument(c_key)
	args := []gi.Argument{arg_v, arg_key}
	iv.Call(args, nil, nil)
	gi.Free(c_key)
}

// ignore GType struct SettingsBackendClass

// ignore private struct SettingsBackendPrivate, type of SettingsBackend is object

// Flags SettingsBindFlags
type SettingsBindFlags int

const (
	SettingsBindFlagsDefault       SettingsBindFlags = 0
	SettingsBindFlagsGet           SettingsBindFlags = 1
	SettingsBindFlagsSet           SettingsBindFlags = 2
	SettingsBindFlagsNoSensitivity SettingsBindFlags = 4
	SettingsBindFlagsGetNoChanges  SettingsBindFlags = 8
	SettingsBindFlagsInvertBoolean SettingsBindFlags = 16
)

func SettingsBindFlagsGetType() gi.GType {
	ret := _I.GetGType1(371, "Gio", "SettingsBindFlags")
	return ret
}

type SettingsBindGetMapping func(value Value, variant Variant) (result bool)

func CallSettingsBindGetMapping(fn SettingsBindGetMapping, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	value := Value{P: *(*unsafe.Pointer)(args[0])}
	variant := Variant{P: *(*unsafe.Pointer)(args[1])}
	fnRet := fn(value, variant)
	*(*int32)(result) = int32(gi.Bool2Int(fnRet))
}

type SettingsBindSetMapping func(value Value, expected_type VariantType) (result Variant)

func CallSettingsBindSetMapping(fn SettingsBindSetMapping, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	value := Value{P: *(*unsafe.Pointer)(args[0])}
	expected_type := VariantType{P: *(*unsafe.Pointer)(args[1])}
	fnRet := fn(value, expected_type)
	*(*unsafe.Pointer)(result) = fnRet.P
}

// ignore GType struct SettingsClass

type SettingsGetMapping func(value Variant) (result bool, result1 unsafe.Pointer)

func CallSettingsGetMapping(fn SettingsGetMapping, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	value := Variant{P: *(*unsafe.Pointer)(args[0])}
	result1 := *(**unsafe.Pointer)(args[1])
	fnRet, fn_ret_result1 := fn(value)
	*(*int32)(result) = int32(gi.Bool2Int(fnRet))
	*result1 = fn_ret_result1
}

// ignore private struct SettingsPrivate, type of Settings is object

// Struct SettingsSchema
type SettingsSchema struct {
	P unsafe.Pointer
}

func SettingsSchemaGetType() gi.GType {
	ret := _I.GetGType1(372, "Gio", "SettingsSchema")
	return ret
}

// g_settings_schema_get_id
//
// [ result ] trans: nothing
//
func (v SettingsSchema) GetId() (result string) {
	iv, err := _I.Get1(2780, "Gio", "SettingsSchema", "get_id", 426, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_settings_schema_get_key
//
// [ name ] trans: nothing
//
// [ result ] trans: everything
//
func (v SettingsSchema) GetKey(name string) (result SettingsSchemaKey) {
	iv, err := _I.Get1(2781, "Gio", "SettingsSchema", "get_key", 426, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// g_settings_schema_get_path
//
// [ result ] trans: nothing
//
func (v SettingsSchema) GetPath() (result string) {
	iv, err := _I.Get1(2782, "Gio", "SettingsSchema", "get_path", 426, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_settings_schema_has_key
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingsSchema) HasKey(name string) (result bool) {
	iv, err := _I.Get1(2783, "Gio", "SettingsSchema", "has_key", 426, 3, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_v, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result = ret.Bool()
	return
}

// g_settings_schema_list_children
//
// [ result ] trans: everything
//
func (v SettingsSchema) ListChildren() (result gi.CStrArray) {
	iv, err := _I.Get1(2784, "Gio", "SettingsSchema", "list_children", 426, 4, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_settings_schema_list_keys
//
// [ result ] trans: everything
//
func (v SettingsSchema) ListKeys() (result gi.CStrArray) {
	iv, err := _I.Get1(2785, "Gio", "SettingsSchema", "list_keys", 426, 5, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_settings_schema_ref
//
// [ result ] trans: everything
//
func (v SettingsSchema) Ref() (result SettingsSchema) {
	iv, err := _I.Get1(2786, "Gio", "SettingsSchema", "ref", 426, 6, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_settings_schema_unref
//
func (v SettingsSchema) Unref() {
	iv, err := _I.Get1(2787, "Gio", "SettingsSchema", "unref", 426, 7, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Struct SettingsSchemaKey
type SettingsSchemaKey struct {
	P unsafe.Pointer
}

func SettingsSchemaKeyGetType() gi.GType {
	ret := _I.GetGType1(373, "Gio", "SettingsSchemaKey")
	return ret
}

// g_settings_schema_key_get_default_value
//
// [ result ] trans: everything
//
func (v SettingsSchemaKey) GetDefaultValue() (result Variant) {
	iv, err := _I.Get1(2788, "Gio", "SettingsSchemaKey", "get_default_value", 427, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_settings_schema_key_get_description
//
// [ result ] trans: nothing
//
func (v SettingsSchemaKey) GetDescription() (result string) {
	iv, err := _I.Get1(2789, "Gio", "SettingsSchemaKey", "get_description", 427, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_settings_schema_key_get_name
//
// [ result ] trans: nothing
//
func (v SettingsSchemaKey) GetName() (result string) {
	iv, err := _I.Get1(2790, "Gio", "SettingsSchemaKey", "get_name", 427, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_settings_schema_key_get_range
//
// [ result ] trans: everything
//
func (v SettingsSchemaKey) GetRange() (result Variant) {
	iv, err := _I.Get1(2791, "Gio", "SettingsSchemaKey", "get_range", 427, 3, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_settings_schema_key_get_summary
//
// [ result ] trans: nothing
//
func (v SettingsSchemaKey) GetSummary() (result string) {
	iv, err := _I.Get1(2792, "Gio", "SettingsSchemaKey", "get_summary", 427, 4, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_settings_schema_key_get_value_type
//
// [ result ] trans: nothing
//
func (v SettingsSchemaKey) GetValueType() (result VariantType) {
	iv, err := _I.Get1(2793, "Gio", "SettingsSchemaKey", "get_value_type", 427, 5, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_settings_schema_key_range_check
//
// [ value ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SettingsSchemaKey) RangeCheck(value Variant) (result bool) {
	iv, err := _I.Get1(2794, "Gio", "SettingsSchemaKey", "range_check", 427, 6, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_settings_schema_key_ref
//
// [ result ] trans: everything
//
func (v SettingsSchemaKey) Ref() (result SettingsSchemaKey) {
	iv, err := _I.Get1(2795, "Gio", "SettingsSchemaKey", "ref", 427, 7, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_settings_schema_key_unref
//
func (v SettingsSchemaKey) Unref() {
	iv, err := _I.Get1(2796, "Gio", "SettingsSchemaKey", "unref", 427, 8, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Struct SettingsSchemaSource
type SettingsSchemaSource struct {
	P unsafe.Pointer
}

func SettingsSchemaSourceGetType() gi.GType {
	ret := _I.GetGType1(374, "Gio", "SettingsSchemaSource")
	return ret
}

// g_settings_schema_source_new_from_directory
//
// [ directory ] trans: nothing
//
// [ parent ] trans: nothing
//
// [ trusted ] trans: nothing
//
// [ result ] trans: everything
//
func NewSettingsSchemaSourceFromDirectory(directory string, parent SettingsSchemaSource, trusted bool) (result SettingsSchemaSource, err error) {
	iv, err := _I.Get1(2797, "Gio", "SettingsSchemaSource", "new_from_directory", 428, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_directory := gi.CString(directory)
	arg_directory := gi.NewStringArgument(c_directory)
	arg_parent := gi.NewPointerArgument(parent.P)
	arg_trusted := gi.NewBoolArgument(trusted)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_directory, arg_parent, arg_trusted, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_directory)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_settings_schema_source_list_schemas
//
// [ recursive ] trans: nothing
//
// [ non_relocatable ] trans: everything, dir: out
//
// [ relocatable ] trans: everything, dir: out
//
func (v SettingsSchemaSource) ListSchemas(recursive bool) (non_relocatable gi.CStrArray, relocatable gi.CStrArray) {
	iv, err := _I.Get1(2798, "Gio", "SettingsSchemaSource", "list_schemas", 428, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_recursive := gi.NewBoolArgument(recursive)
	arg_non_relocatable := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_relocatable := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_recursive, arg_non_relocatable, arg_relocatable}
	iv.Call(args, nil, &outArgs[0])
	non_relocatable.P = outArgs[0].Pointer()
	relocatable.P = outArgs[1].Pointer()
	return
}

// g_settings_schema_source_lookup
//
// [ schema_id ] trans: nothing
//
// [ recursive ] trans: nothing
//
// [ result ] trans: everything
//
func (v SettingsSchemaSource) Lookup(schema_id string, recursive bool) (result SettingsSchema) {
	iv, err := _I.Get1(2799, "Gio", "SettingsSchemaSource", "lookup", 428, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_schema_id := gi.CString(schema_id)
	arg_v := gi.NewPointerArgument(v.P)
	arg_schema_id := gi.NewStringArgument(c_schema_id)
	arg_recursive := gi.NewBoolArgument(recursive)
	args := []gi.Argument{arg_v, arg_schema_id, arg_recursive}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_schema_id)
	result.P = ret.Pointer()
	return
}

// g_settings_schema_source_ref
//
// [ result ] trans: everything
//
func (v SettingsSchemaSource) Ref() (result SettingsSchemaSource) {
	iv, err := _I.Get1(2800, "Gio", "SettingsSchemaSource", "ref", 428, 3, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_settings_schema_source_unref
//
func (v SettingsSchemaSource) Unref() {
	iv, err := _I.Get1(2801, "Gio", "SettingsSchemaSource", "unref", 428, 4, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_settings_schema_source_get_default
//
// [ result ] trans: nothing
//
func SettingsSchemaSourceGetDefault1() (result SettingsSchemaSource) {
	iv, err := _I.Get1(2802, "Gio", "SettingsSchemaSource", "get_default", 428, 5, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Object SimpleAction
type SimpleAction struct {
	ActionIfc
	Object
}

func WrapSimpleAction(p unsafe.Pointer) (r SimpleAction) { r.P = p; return }

type ISimpleAction interface{ P_SimpleAction() unsafe.Pointer }

func (v SimpleAction) P_SimpleAction() unsafe.Pointer { return v.P }
func (v SimpleAction) P_Action() unsafe.Pointer       { return v.P }
func SimpleActionGetType() gi.GType {
	ret := _I.GetGType1(375, "Gio", "SimpleAction")
	return ret
}

// g_simple_action_new
//
// [ name ] trans: nothing
//
// [ parameter_type ] trans: nothing
//
// [ result ] trans: everything
//
func NewSimpleAction(name string, parameter_type VariantType) (result SimpleAction) {
	iv, err := _I.Get1(2803, "Gio", "SimpleAction", "new", 429, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_name := gi.NewStringArgument(c_name)
	arg_parameter_type := gi.NewPointerArgument(parameter_type.P)
	args := []gi.Argument{arg_name, arg_parameter_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// g_simple_action_new_stateful
//
// [ name ] trans: nothing
//
// [ parameter_type ] trans: nothing
//
// [ state ] trans: nothing
//
// [ result ] trans: everything
//
func NewSimpleActionStateful(name string, parameter_type VariantType, state Variant) (result SimpleAction) {
	iv, err := _I.Get1(2804, "Gio", "SimpleAction", "new_stateful", 429, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_name := gi.NewStringArgument(c_name)
	arg_parameter_type := gi.NewPointerArgument(parameter_type.P)
	arg_state := gi.NewPointerArgument(state.P)
	args := []gi.Argument{arg_name, arg_parameter_type, arg_state}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// g_simple_action_set_enabled
//
// [ enabled ] trans: nothing
//
func (v SimpleAction) SetEnabled(enabled bool) {
	iv, err := _I.Get1(2805, "Gio", "SimpleAction", "set_enabled", 429, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_enabled := gi.NewBoolArgument(enabled)
	args := []gi.Argument{arg_v, arg_enabled}
	iv.Call(args, nil, nil)
}

// g_simple_action_set_state
//
// [ value ] trans: nothing
//
func (v SimpleAction) SetState(value Variant) {
	iv, err := _I.Get1(2806, "Gio", "SimpleAction", "set_state", 429, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_v, arg_value}
	iv.Call(args, nil, nil)
}

// g_simple_action_set_state_hint
//
// [ state_hint ] trans: nothing
//
func (v SimpleAction) SetStateHint(state_hint Variant) {
	iv, err := _I.Get1(2807, "Gio", "SimpleAction", "set_state_hint", 429, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_state_hint := gi.NewPointerArgument(state_hint.P)
	args := []gi.Argument{arg_v, arg_state_hint}
	iv.Call(args, nil, nil)
}

// Object SimpleActionGroup
type SimpleActionGroup struct {
	ActionGroupIfc
	ActionMapIfc
	Object
}

func WrapSimpleActionGroup(p unsafe.Pointer) (r SimpleActionGroup) { r.P = p; return }

type ISimpleActionGroup interface{ P_SimpleActionGroup() unsafe.Pointer }

func (v SimpleActionGroup) P_SimpleActionGroup() unsafe.Pointer { return v.P }
func (v SimpleActionGroup) P_ActionGroup() unsafe.Pointer       { return v.P }
func (v SimpleActionGroup) P_ActionMap() unsafe.Pointer         { return v.P }
func SimpleActionGroupGetType() gi.GType {
	ret := _I.GetGType1(376, "Gio", "SimpleActionGroup")
	return ret
}

// g_simple_action_group_new
//
// [ result ] trans: everything
//
func NewSimpleActionGroup() (result SimpleActionGroup) {
	iv, err := _I.Get1(2808, "Gio", "SimpleActionGroup", "new", 430, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// g_simple_action_group_add_entries
//
// [ entries ] trans: nothing
//
// [ n_entries ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v SimpleActionGroup) AddEntries(entries unsafe.Pointer, n_entries int32, user_data unsafe.Pointer) {
	iv, err := _I.Get1(2809, "Gio", "SimpleActionGroup", "add_entries", 430, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_entries := gi.NewPointerArgument(entries)
	arg_n_entries := gi.NewInt32Argument(n_entries)
	arg_user_data := gi.NewPointerArgument(user_data)
	args := []gi.Argument{arg_v, arg_entries, arg_n_entries, arg_user_data}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// g_simple_action_group_insert
//
// [ action ] trans: nothing
//
func (v SimpleActionGroup) Insert(action IAction) {
	iv, err := _I.Get1(2810, "Gio", "SimpleActionGroup", "insert", 430, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if action != nil {
		tmp = action.P_Action()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_action := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_action}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// g_simple_action_group_lookup
//
// [ action_name ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SimpleActionGroup) Lookup(action_name string) (result Action) {
	iv, err := _I.Get1(2811, "Gio", "SimpleActionGroup", "lookup", 430, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_action_name := gi.NewStringArgument(c_action_name)
	args := []gi.Argument{arg_v, arg_action_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_action_name)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// g_simple_action_group_remove
//
// [ action_name ] trans: nothing
//
func (v SimpleActionGroup) Remove(action_name string) {
	iv, err := _I.Get1(2812, "Gio", "SimpleActionGroup", "remove", 430, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_action_name := gi.NewStringArgument(c_action_name)
	args := []gi.Argument{arg_v, arg_action_name}
	iv.Call(args, nil, nil)
	gi.Free(c_action_name)
}

// ignore GType struct SimpleActionGroupClass

// ignore private struct SimpleActionGroupPrivate, type of SimpleActionGroup is object

// Object SimpleAsyncResult
type SimpleAsyncResult struct {
	AsyncResultIfc
	Object
}

func WrapSimpleAsyncResult(p unsafe.Pointer) (r SimpleAsyncResult) { r.P = p; return }

type ISimpleAsyncResult interface{ P_SimpleAsyncResult() unsafe.Pointer }

func (v SimpleAsyncResult) P_SimpleAsyncResult() unsafe.Pointer { return v.P }
func (v SimpleAsyncResult) P_AsyncResult() unsafe.Pointer       { return v.P }
func SimpleAsyncResultGetType() gi.GType {
	ret := _I.GetGType1(377, "Gio", "SimpleAsyncResult")
	return ret
}

// Deprecated
//
// g_simple_async_result_new
//
// [ source_object ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ source_tag ] trans: nothing
//
// [ result ] trans: everything
//
func NewSimpleAsyncResult(source_object IObject, callback AsyncReadyCallback, source_tag unsafe.Pointer) (result SimpleAsyncResult) {
	iv, err := _I.Get1(2813, "Gio", "SimpleAsyncResult", "new", 433, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if source_object != nil {
		tmp = source_object.P_Object()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_source_object := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	arg_source_tag := gi.NewPointerArgument(source_tag)
	args := []gi.Argument{arg_source_object, arg_callback, arg_user_data, arg_source_tag}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// g_simple_async_result_new_from_error
//
// [ source_object ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ error ] trans: nothing
//
// [ result ] trans: everything
//
func NewSimpleAsyncResultFromError(source_object IObject, callback AsyncReadyCallback, error Error) (result SimpleAsyncResult) {
	iv, err := _I.Get1(2814, "Gio", "SimpleAsyncResult", "new_from_error", 433, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if source_object != nil {
		tmp = source_object.P_Object()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_source_object := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	arg_error := gi.NewPointerArgument(error.P)
	args := []gi.Argument{arg_source_object, arg_callback, arg_user_data, arg_error}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// g_simple_async_result_is_valid
//
// [ result ] trans: nothing
//
// [ source ] trans: nothing
//
// [ source_tag ] trans: nothing
//
// [ result1 ] trans: nothing
//
func SimpleAsyncResultIsValid1(result IAsyncResult, source IObject, source_tag unsafe.Pointer) (result1 bool) {
	iv, err := _I.Get1(2815, "Gio", "SimpleAsyncResult", "is_valid", 433, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	var tmp1 unsafe.Pointer
	if source != nil {
		tmp1 = source.P_Object()
	}
	arg_result := gi.NewPointerArgument(tmp)
	arg_source := gi.NewPointerArgument(tmp1)
	arg_source_tag := gi.NewPointerArgument(source_tag)
	args := []gi.Argument{arg_result, arg_source, arg_source_tag}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result1 = ret.Bool()
	return
}

// Deprecated
//
// g_simple_async_result_complete
//
func (v SimpleAsyncResult) Complete() {
	iv, err := _I.Get1(2816, "Gio", "SimpleAsyncResult", "complete", 433, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// g_simple_async_result_complete_in_idle
//
func (v SimpleAsyncResult) CompleteInIdle() {
	iv, err := _I.Get1(2817, "Gio", "SimpleAsyncResult", "complete_in_idle", 433, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// g_simple_async_result_get_op_res_gboolean
//
// [ result ] trans: nothing
//
func (v SimpleAsyncResult) GetOpResGboolean() (result bool) {
	iv, err := _I.Get1(2818, "Gio", "SimpleAsyncResult", "get_op_res_gboolean", 433, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// g_simple_async_result_get_op_res_gssize
//
// [ result ] trans: nothing
//
func (v SimpleAsyncResult) GetOpResGssize() (result int64) {
	iv, err := _I.Get1(2819, "Gio", "SimpleAsyncResult", "get_op_res_gssize", 433, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int64()
	return
}

// Deprecated
//
// g_simple_async_result_propagate_error
//
// [ result ] trans: nothing
//
func (v SimpleAsyncResult) PropagateError() (result bool, err error) {
	iv, err := _I.Get1(2820, "Gio", "SimpleAsyncResult", "propagate_error", 433, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// Deprecated
//
// g_simple_async_result_set_check_cancellable
//
// [ check_cancellable ] trans: nothing
//
func (v SimpleAsyncResult) SetCheckCancellable(check_cancellable ICancellable) {
	iv, err := _I.Get1(2821, "Gio", "SimpleAsyncResult", "set_check_cancellable", 433, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if check_cancellable != nil {
		tmp = check_cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_check_cancellable := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_check_cancellable}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// g_simple_async_result_set_from_error
//
// [ error ] trans: nothing
//
func (v SimpleAsyncResult) SetFromError(error Error) {
	iv, err := _I.Get1(2822, "Gio", "SimpleAsyncResult", "set_from_error", 433, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_error := gi.NewPointerArgument(error.P)
	args := []gi.Argument{arg_v, arg_error}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// g_simple_async_result_set_handle_cancellation
//
// [ handle_cancellation ] trans: nothing
//
func (v SimpleAsyncResult) SetHandleCancellation(handle_cancellation bool) {
	iv, err := _I.Get1(2823, "Gio", "SimpleAsyncResult", "set_handle_cancellation", 433, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_handle_cancellation := gi.NewBoolArgument(handle_cancellation)
	args := []gi.Argument{arg_v, arg_handle_cancellation}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// g_simple_async_result_set_op_res_gboolean
//
// [ op_res ] trans: nothing
//
func (v SimpleAsyncResult) SetOpResGboolean(op_res bool) {
	iv, err := _I.Get1(2824, "Gio", "SimpleAsyncResult", "set_op_res_gboolean", 433, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_op_res := gi.NewBoolArgument(op_res)
	args := []gi.Argument{arg_v, arg_op_res}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// g_simple_async_result_set_op_res_gssize
//
// [ op_res ] trans: nothing
//
func (v SimpleAsyncResult) SetOpResGssize(op_res int64) {
	iv, err := _I.Get1(2825, "Gio", "SimpleAsyncResult", "set_op_res_gssize", 433, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_op_res := gi.NewInt64Argument(op_res)
	args := []gi.Argument{arg_v, arg_op_res}
	iv.Call(args, nil, nil)
}

// ignore GType struct SimpleAsyncResultClass

type SimpleAsyncThreadFunc func(res SimpleAsyncResult, object Object, cancellable Cancellable)

func CallSimpleAsyncThreadFunc(fn SimpleAsyncThreadFunc, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	res := WrapSimpleAsyncResult(*(*unsafe.Pointer)(args[0]))
	object := WrapObject(*(*unsafe.Pointer)(args[1]))
	cancellable := WrapCancellable(*(*unsafe.Pointer)(args[2]))
	fn(res, object, cancellable)
}

// Object SimpleIOStream
type SimpleIOStream struct {
	IOStream
}

func WrapSimpleIOStream(p unsafe.Pointer) (r SimpleIOStream) { r.P = p; return }

type ISimpleIOStream interface{ P_SimpleIOStream() unsafe.Pointer }

func (v SimpleIOStream) P_SimpleIOStream() unsafe.Pointer { return v.P }
func SimpleIOStreamGetType() gi.GType {
	ret := _I.GetGType1(378, "Gio", "SimpleIOStream")
	return ret
}

// g_simple_io_stream_new
//
// [ input_stream ] trans: nothing
//
// [ output_stream ] trans: nothing
//
// [ result ] trans: everything
//
func NewSimpleIOStream(input_stream IInputStream, output_stream IOutputStream) (result SimpleIOStream) {
	iv, err := _I.Get1(2826, "Gio", "SimpleIOStream", "new", 436, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if input_stream != nil {
		tmp = input_stream.P_InputStream()
	}
	var tmp1 unsafe.Pointer
	if output_stream != nil {
		tmp1 = output_stream.P_OutputStream()
	}
	arg_input_stream := gi.NewPointerArgument(tmp)
	arg_output_stream := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_input_stream, arg_output_stream}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Object SimplePermission
type SimplePermission struct {
	Permission
}

func WrapSimplePermission(p unsafe.Pointer) (r SimplePermission) { r.P = p; return }

type ISimplePermission interface{ P_SimplePermission() unsafe.Pointer }

func (v SimplePermission) P_SimplePermission() unsafe.Pointer { return v.P }
func SimplePermissionGetType() gi.GType {
	ret := _I.GetGType1(379, "Gio", "SimplePermission")
	return ret
}

// g_simple_permission_new
//
// [ allowed ] trans: nothing
//
// [ result ] trans: everything
//
func NewSimplePermission(allowed bool) (result SimplePermission) {
	iv, err := _I.Get1(2827, "Gio", "SimplePermission", "new", 437, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_allowed := gi.NewBoolArgument(allowed)
	args := []gi.Argument{arg_allowed}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Object SimpleProxyResolver
type SimpleProxyResolver struct {
	ProxyResolverIfc
	Object
}

func WrapSimpleProxyResolver(p unsafe.Pointer) (r SimpleProxyResolver) { r.P = p; return }

type ISimpleProxyResolver interface{ P_SimpleProxyResolver() unsafe.Pointer }

func (v SimpleProxyResolver) P_SimpleProxyResolver() unsafe.Pointer { return v.P }
func (v SimpleProxyResolver) P_ProxyResolver() unsafe.Pointer       { return v.P }
func SimpleProxyResolverGetType() gi.GType {
	ret := _I.GetGType1(380, "Gio", "SimpleProxyResolver")
	return ret
}

// g_simple_proxy_resolver_new
//
// [ default_proxy ] trans: nothing
//
// [ ignore_hosts ] trans: nothing
//
// [ result ] trans: everything
//
func SimpleProxyResolverNew1(default_proxy string, ignore_hosts string) (result ProxyResolver) {
	iv, err := _I.Get1(2828, "Gio", "SimpleProxyResolver", "new", 438, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_default_proxy := gi.CString(default_proxy)
	c_ignore_hosts := gi.CString(ignore_hosts)
	arg_default_proxy := gi.NewStringArgument(c_default_proxy)
	arg_ignore_hosts := gi.NewStringArgument(c_ignore_hosts)
	args := []gi.Argument{arg_default_proxy, arg_ignore_hosts}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_default_proxy)
	gi.Free(c_ignore_hosts)
	result.P = ret.Pointer()
	return
}

// g_simple_proxy_resolver_set_default_proxy
//
// [ default_proxy ] trans: nothing
//
func (v SimpleProxyResolver) SetDefaultProxy(default_proxy string) {
	iv, err := _I.Get1(2829, "Gio", "SimpleProxyResolver", "set_default_proxy", 438, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_default_proxy := gi.CString(default_proxy)
	arg_v := gi.NewPointerArgument(v.P)
	arg_default_proxy := gi.NewStringArgument(c_default_proxy)
	args := []gi.Argument{arg_v, arg_default_proxy}
	iv.Call(args, nil, nil)
	gi.Free(c_default_proxy)
}

// g_simple_proxy_resolver_set_ignore_hosts
//
// [ ignore_hosts ] trans: nothing
//
func (v SimpleProxyResolver) SetIgnoreHosts(ignore_hosts string) {
	iv, err := _I.Get1(2830, "Gio", "SimpleProxyResolver", "set_ignore_hosts", 438, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_ignore_hosts := gi.CString(ignore_hosts)
	arg_v := gi.NewPointerArgument(v.P)
	arg_ignore_hosts := gi.NewStringArgument(c_ignore_hosts)
	args := []gi.Argument{arg_v, arg_ignore_hosts}
	iv.Call(args, nil, nil)
	gi.Free(c_ignore_hosts)
}

// g_simple_proxy_resolver_set_uri_proxy
//
// [ uri_scheme ] trans: nothing
//
// [ proxy ] trans: nothing
//
func (v SimpleProxyResolver) SetUriProxy(uri_scheme string, proxy string) {
	iv, err := _I.Get1(2831, "Gio", "SimpleProxyResolver", "set_uri_proxy", 438, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri_scheme := gi.CString(uri_scheme)
	c_proxy := gi.CString(proxy)
	arg_v := gi.NewPointerArgument(v.P)
	arg_uri_scheme := gi.NewStringArgument(c_uri_scheme)
	arg_proxy := gi.NewStringArgument(c_proxy)
	args := []gi.Argument{arg_v, arg_uri_scheme, arg_proxy}
	iv.Call(args, nil, nil)
	gi.Free(c_uri_scheme)
	gi.Free(c_proxy)
}

// ignore GType struct SimpleProxyResolverClass

// ignore private struct SimpleProxyResolverPrivate, type of SimpleProxyResolver is object

// Object Socket
type Socket struct {
	DatagramBasedIfc
	InitableIfc
	Object
}

func WrapSocket(p unsafe.Pointer) (r Socket) { r.P = p; return }

type ISocket interface{ P_Socket() unsafe.Pointer }

func (v Socket) P_Socket() unsafe.Pointer        { return v.P }
func (v Socket) P_DatagramBased() unsafe.Pointer { return v.P }
func (v Socket) P_Initable() unsafe.Pointer      { return v.P }
func SocketGetType() gi.GType {
	ret := _I.GetGType1(381, "Gio", "Socket")
	return ret
}

// g_socket_new
//
// [ family ] trans: nothing
//
// [ type1 ] trans: nothing
//
// [ protocol ] trans: nothing
//
// [ result ] trans: everything
//
func NewSocket(family SocketFamilyEnum, type1 SocketTypeEnum, protocol SocketProtocolEnum) (result Socket, err error) {
	iv, err := _I.Get1(2832, "Gio", "Socket", "new", 441, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_family := gi.NewIntArgument(int(family))
	arg_type1 := gi.NewIntArgument(int(type1))
	arg_protocol := gi.NewIntArgument(int(protocol))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_family, arg_type1, arg_protocol, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_socket_new_from_fd
//
// [ fd ] trans: nothing
//
// [ result ] trans: everything
//
func NewSocketFromFd(fd int32) (result Socket, err error) {
	iv, err := _I.Get1(2833, "Gio", "Socket", "new_from_fd", 441, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_fd := gi.NewInt32Argument(fd)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_fd, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_socket_accept
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v Socket) Accept(cancellable ICancellable) (result Socket, err error) {
	iv, err := _I.Get1(2834, "Gio", "Socket", "accept", 441, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_socket_bind
//
// [ address ] trans: nothing
//
// [ allow_reuse ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Socket) Bind(address ISocketAddress, allow_reuse bool) (result bool, err error) {
	iv, err := _I.Get1(2835, "Gio", "Socket", "bind", 441, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if address != nil {
		tmp = address.P_SocketAddress()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_address := gi.NewPointerArgument(tmp)
	arg_allow_reuse := gi.NewBoolArgument(allow_reuse)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_address, arg_allow_reuse, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_socket_check_connect_result
//
// [ result ] trans: nothing
//
func (v Socket) CheckConnectResult() (result bool, err error) {
	iv, err := _I.Get1(2836, "Gio", "Socket", "check_connect_result", 441, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_socket_close
//
// [ result ] trans: nothing
//
func (v Socket) Close() (result bool, err error) {
	iv, err := _I.Get1(2837, "Gio", "Socket", "close", 441, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_socket_condition_check
//
// [ condition ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Socket) ConditionCheck(condition IOConditionFlags) (result IOConditionFlags) {
	iv, err := _I.Get1(2838, "Gio", "Socket", "condition_check", 441, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_condition := gi.NewIntArgument(int(condition))
	args := []gi.Argument{arg_v, arg_condition}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = IOConditionFlags(ret.Int())
	return
}

// g_socket_condition_timed_wait
//
// [ condition ] trans: nothing
//
// [ timeout ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Socket) ConditionTimedWait(condition IOConditionFlags, timeout int64, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2839, "Gio", "Socket", "condition_timed_wait", 441, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_condition := gi.NewIntArgument(int(condition))
	arg_timeout := gi.NewInt64Argument(timeout)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_condition, arg_timeout, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_socket_condition_wait
//
// [ condition ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Socket) ConditionWait(condition IOConditionFlags, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2840, "Gio", "Socket", "condition_wait", 441, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_condition := gi.NewIntArgument(int(condition))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_condition, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_socket_connect
//
// [ address ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Socket) Connect(address ISocketAddress, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2841, "Gio", "Socket", "connect", 441, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if address != nil {
		tmp = address.P_SocketAddress()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_address := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_address, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_socket_connection_factory_create_connection
//
// [ result ] trans: everything
//
func (v Socket) ConnectionFactoryCreateConnection() (result SocketConnection) {
	iv, err := _I.Get1(2842, "Gio", "Socket", "connection_factory_create_connection", 441, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_socket_get_available_bytes
//
// [ result ] trans: nothing
//
func (v Socket) GetAvailableBytes() (result int64) {
	iv, err := _I.Get1(2843, "Gio", "Socket", "get_available_bytes", 441, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int64()
	return
}

// g_socket_get_blocking
//
// [ result ] trans: nothing
//
func (v Socket) GetBlocking() (result bool) {
	iv, err := _I.Get1(2844, "Gio", "Socket", "get_blocking", 441, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_socket_get_broadcast
//
// [ result ] trans: nothing
//
func (v Socket) GetBroadcast() (result bool) {
	iv, err := _I.Get1(2845, "Gio", "Socket", "get_broadcast", 441, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_socket_get_credentials
//
// [ result ] trans: everything
//
func (v Socket) GetCredentials() (result Credentials, err error) {
	iv, err := _I.Get1(2846, "Gio", "Socket", "get_credentials", 441, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_socket_get_family
//
// [ result ] trans: nothing
//
func (v Socket) GetFamily() (result SocketFamilyEnum) {
	iv, err := _I.Get1(2847, "Gio", "Socket", "get_family", 441, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SocketFamilyEnum(ret.Int())
	return
}

// g_socket_get_fd
//
// [ result ] trans: nothing
//
func (v Socket) GetFd() (result int32) {
	iv, err := _I.Get1(2848, "Gio", "Socket", "get_fd", 441, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// g_socket_get_keepalive
//
// [ result ] trans: nothing
//
func (v Socket) GetKeepalive() (result bool) {
	iv, err := _I.Get1(2849, "Gio", "Socket", "get_keepalive", 441, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_socket_get_listen_backlog
//
// [ result ] trans: nothing
//
func (v Socket) GetListenBacklog() (result int32) {
	iv, err := _I.Get1(2850, "Gio", "Socket", "get_listen_backlog", 441, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// g_socket_get_local_address
//
// [ result ] trans: everything
//
func (v Socket) GetLocalAddress() (result SocketAddress, err error) {
	iv, err := _I.Get1(2851, "Gio", "Socket", "get_local_address", 441, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_socket_get_multicast_loopback
//
// [ result ] trans: nothing
//
func (v Socket) GetMulticastLoopback() (result bool) {
	iv, err := _I.Get1(2852, "Gio", "Socket", "get_multicast_loopback", 441, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_socket_get_multicast_ttl
//
// [ result ] trans: nothing
//
func (v Socket) GetMulticastTtl() (result uint32) {
	iv, err := _I.Get1(2853, "Gio", "Socket", "get_multicast_ttl", 441, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// g_socket_get_option
//
// [ level ] trans: nothing
//
// [ optname ] trans: nothing
//
// [ value ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v Socket) GetOption(level int32, optname int32) (result bool, value int32, err error) {
	iv, err := _I.Get1(2854, "Gio", "Socket", "get_option", 441, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_level := gi.NewInt32Argument(level)
	arg_optname := gi.NewInt32Argument(optname)
	arg_value := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_level, arg_optname, arg_value, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	value = outArgs[0].Int32()
	result = ret.Bool()
	return
}

// g_socket_get_protocol
//
// [ result ] trans: nothing
//
func (v Socket) GetProtocol() (result SocketProtocolEnum) {
	iv, err := _I.Get1(2855, "Gio", "Socket", "get_protocol", 441, 23, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SocketProtocolEnum(ret.Int())
	return
}

// g_socket_get_remote_address
//
// [ result ] trans: everything
//
func (v Socket) GetRemoteAddress() (result SocketAddress, err error) {
	iv, err := _I.Get1(2856, "Gio", "Socket", "get_remote_address", 441, 24, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_socket_get_socket_type
//
// [ result ] trans: nothing
//
func (v Socket) GetSocketType() (result SocketTypeEnum) {
	iv, err := _I.Get1(2857, "Gio", "Socket", "get_socket_type", 441, 25, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SocketTypeEnum(ret.Int())
	return
}

// g_socket_get_timeout
//
// [ result ] trans: nothing
//
func (v Socket) GetTimeout() (result uint32) {
	iv, err := _I.Get1(2858, "Gio", "Socket", "get_timeout", 441, 26, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// g_socket_get_ttl
//
// [ result ] trans: nothing
//
func (v Socket) GetTtl() (result uint32) {
	iv, err := _I.Get1(2859, "Gio", "Socket", "get_ttl", 441, 27, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// g_socket_is_closed
//
// [ result ] trans: nothing
//
func (v Socket) IsClosed() (result bool) {
	iv, err := _I.Get1(2860, "Gio", "Socket", "is_closed", 441, 28, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_socket_is_connected
//
// [ result ] trans: nothing
//
func (v Socket) IsConnected() (result bool) {
	iv, err := _I.Get1(2861, "Gio", "Socket", "is_connected", 441, 29, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_socket_join_multicast_group
//
// [ group ] trans: nothing
//
// [ source_specific ] trans: nothing
//
// [ iface ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Socket) JoinMulticastGroup(group IInetAddress, source_specific bool, iface string) (result bool, err error) {
	iv, err := _I.Get1(2862, "Gio", "Socket", "join_multicast_group", 441, 30, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if group != nil {
		tmp = group.P_InetAddress()
	}
	c_iface := gi.CString(iface)
	arg_v := gi.NewPointerArgument(v.P)
	arg_group := gi.NewPointerArgument(tmp)
	arg_source_specific := gi.NewBoolArgument(source_specific)
	arg_iface := gi.NewStringArgument(c_iface)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_group, arg_source_specific, arg_iface, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_iface)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_socket_join_multicast_group_ssm
//
// [ group ] trans: nothing
//
// [ source_specific ] trans: nothing
//
// [ iface ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Socket) JoinMulticastGroupSsm(group IInetAddress, source_specific IInetAddress, iface string) (result bool, err error) {
	iv, err := _I.Get1(2863, "Gio", "Socket", "join_multicast_group_ssm", 441, 31, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if group != nil {
		tmp = group.P_InetAddress()
	}
	var tmp1 unsafe.Pointer
	if source_specific != nil {
		tmp1 = source_specific.P_InetAddress()
	}
	c_iface := gi.CString(iface)
	arg_v := gi.NewPointerArgument(v.P)
	arg_group := gi.NewPointerArgument(tmp)
	arg_source_specific := gi.NewPointerArgument(tmp1)
	arg_iface := gi.NewStringArgument(c_iface)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_group, arg_source_specific, arg_iface, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_iface)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_socket_leave_multicast_group
//
// [ group ] trans: nothing
//
// [ source_specific ] trans: nothing
//
// [ iface ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Socket) LeaveMulticastGroup(group IInetAddress, source_specific bool, iface string) (result bool, err error) {
	iv, err := _I.Get1(2864, "Gio", "Socket", "leave_multicast_group", 441, 32, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if group != nil {
		tmp = group.P_InetAddress()
	}
	c_iface := gi.CString(iface)
	arg_v := gi.NewPointerArgument(v.P)
	arg_group := gi.NewPointerArgument(tmp)
	arg_source_specific := gi.NewBoolArgument(source_specific)
	arg_iface := gi.NewStringArgument(c_iface)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_group, arg_source_specific, arg_iface, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_iface)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_socket_leave_multicast_group_ssm
//
// [ group ] trans: nothing
//
// [ source_specific ] trans: nothing
//
// [ iface ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Socket) LeaveMulticastGroupSsm(group IInetAddress, source_specific IInetAddress, iface string) (result bool, err error) {
	iv, err := _I.Get1(2865, "Gio", "Socket", "leave_multicast_group_ssm", 441, 33, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if group != nil {
		tmp = group.P_InetAddress()
	}
	var tmp1 unsafe.Pointer
	if source_specific != nil {
		tmp1 = source_specific.P_InetAddress()
	}
	c_iface := gi.CString(iface)
	arg_v := gi.NewPointerArgument(v.P)
	arg_group := gi.NewPointerArgument(tmp)
	arg_source_specific := gi.NewPointerArgument(tmp1)
	arg_iface := gi.NewStringArgument(c_iface)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_group, arg_source_specific, arg_iface, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_iface)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_socket_listen
//
// [ result ] trans: nothing
//
func (v Socket) Listen() (result bool, err error) {
	iv, err := _I.Get1(2866, "Gio", "Socket", "listen", 441, 34, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_socket_receive
//
// [ buffer ] trans: nothing
//
// [ size ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Socket) Receive(buffer gi.Uint8Array, size uint64, cancellable ICancellable) (result int64, err error) {
	iv, err := _I.Get1(2867, "Gio", "Socket", "receive", 441, 35, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_buffer := gi.NewPointerArgument(buffer.P)
	arg_size := gi.NewUint64Argument(size)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_buffer, arg_size, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int64()
	return
}

// g_socket_receive_from
//
// [ address ] trans: everything, dir: out
//
// [ buffer ] trans: nothing
//
// [ size ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Socket) ReceiveFrom(buffer gi.Uint8Array, size uint64, cancellable ICancellable) (result int64, address SocketAddress, err error) {
	iv, err := _I.Get1(2868, "Gio", "Socket", "receive_from", 441, 36, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_address := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_buffer := gi.NewPointerArgument(buffer.P)
	arg_size := gi.NewUint64Argument(size)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_address, arg_buffer, arg_size, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	address.P = outArgs[0].Pointer()
	result = ret.Int64()
	return
}

// g_socket_receive_message
//
// [ address ] trans: everything, dir: out
//
// [ vectors ] trans: nothing
//
// [ num_vectors ] trans: nothing
//
// [ messages ] trans: everything, dir: out
//
// [ num_messages ] trans: everything, dir: out
//
// [ flags ] trans: everything, dir: inout
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Socket) ReceiveMessage(vectors unsafe.Pointer, num_vectors int32, flags int /*TODO:DIR_INOUT*/, cancellable ICancellable) (result int64, address SocketAddress, messages gi.PointerArray, err error) {
	iv, err := _I.Get1(2869, "Gio", "Socket", "receive_message", 441, 37, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [5]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_address := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_vectors := gi.NewPointerArgument(vectors)
	arg_num_vectors := gi.NewInt32Argument(num_vectors)
	arg_messages := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_num_messages := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[3]))
	args := []gi.Argument{arg_v, arg_address, arg_vectors, arg_num_vectors, arg_messages, arg_num_messages, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var num_messages int32
	_ = num_messages
	err = gi.ToError(outArgs[3].Pointer())
	address.P = outArgs[0].Pointer()
	messages.P = outArgs[1].Pointer()
	num_messages = outArgs[2].Int32()
	messages.Len = int(num_messages)
	result = ret.Int64()
	return
}

// g_socket_receive_messages
//
// [ messages ] trans: nothing
//
// [ num_messages ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Socket) ReceiveMessages(messages unsafe.Pointer, num_messages uint32, flags int32, cancellable ICancellable) (result int32, err error) {
	iv, err := _I.Get1(2870, "Gio", "Socket", "receive_messages", 441, 38, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_messages := gi.NewPointerArgument(messages)
	arg_num_messages := gi.NewUint32Argument(num_messages)
	arg_flags := gi.NewInt32Argument(flags)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_messages, arg_num_messages, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int32()
	return
}

// g_socket_receive_with_blocking
//
// [ buffer ] trans: nothing
//
// [ size ] trans: nothing
//
// [ blocking ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Socket) ReceiveWithBlocking(buffer gi.Uint8Array, size uint64, blocking bool, cancellable ICancellable) (result int64, err error) {
	iv, err := _I.Get1(2871, "Gio", "Socket", "receive_with_blocking", 441, 39, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_buffer := gi.NewPointerArgument(buffer.P)
	arg_size := gi.NewUint64Argument(size)
	arg_blocking := gi.NewBoolArgument(blocking)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_buffer, arg_size, arg_blocking, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int64()
	return
}

// g_socket_send
//
// [ buffer ] trans: nothing
//
// [ size ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Socket) Send(buffer gi.Uint8Array, size uint64, cancellable ICancellable) (result int64, err error) {
	iv, err := _I.Get1(2872, "Gio", "Socket", "send", 441, 40, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_buffer := gi.NewPointerArgument(buffer.P)
	arg_size := gi.NewUint64Argument(size)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_buffer, arg_size, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int64()
	return
}

// g_socket_send_message
//
// [ address ] trans: nothing
//
// [ vectors ] trans: nothing
//
// [ num_vectors ] trans: nothing
//
// [ messages ] trans: nothing
//
// [ num_messages ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Socket) SendMessage(address ISocketAddress, vectors unsafe.Pointer, num_vectors int32, messages gi.PointerArray, num_messages int32, flags int32, cancellable ICancellable) (result int64, err error) {
	iv, err := _I.Get1(2873, "Gio", "Socket", "send_message", 441, 41, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if address != nil {
		tmp = address.P_SocketAddress()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_address := gi.NewPointerArgument(tmp)
	arg_vectors := gi.NewPointerArgument(vectors)
	arg_num_vectors := gi.NewInt32Argument(num_vectors)
	arg_messages := gi.NewPointerArgument(messages.P)
	arg_num_messages := gi.NewInt32Argument(num_messages)
	arg_flags := gi.NewInt32Argument(flags)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_address, arg_vectors, arg_num_vectors, arg_messages, arg_num_messages, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int64()
	return
}

// g_socket_send_messages
//
// [ messages ] trans: nothing
//
// [ num_messages ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Socket) SendMessages(messages unsafe.Pointer, num_messages uint32, flags int32, cancellable ICancellable) (result int32, err error) {
	iv, err := _I.Get1(2874, "Gio", "Socket", "send_messages", 441, 42, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_messages := gi.NewPointerArgument(messages)
	arg_num_messages := gi.NewUint32Argument(num_messages)
	arg_flags := gi.NewInt32Argument(flags)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_messages, arg_num_messages, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int32()
	return
}

// g_socket_send_to
//
// [ address ] trans: nothing
//
// [ buffer ] trans: nothing
//
// [ size ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Socket) SendTo(address ISocketAddress, buffer gi.Uint8Array, size uint64, cancellable ICancellable) (result int64, err error) {
	iv, err := _I.Get1(2875, "Gio", "Socket", "send_to", 441, 43, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if address != nil {
		tmp = address.P_SocketAddress()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_address := gi.NewPointerArgument(tmp)
	arg_buffer := gi.NewPointerArgument(buffer.P)
	arg_size := gi.NewUint64Argument(size)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_address, arg_buffer, arg_size, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int64()
	return
}

// g_socket_send_with_blocking
//
// [ buffer ] trans: nothing
//
// [ size ] trans: nothing
//
// [ blocking ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Socket) SendWithBlocking(buffer gi.Uint8Array, size uint64, blocking bool, cancellable ICancellable) (result int64, err error) {
	iv, err := _I.Get1(2876, "Gio", "Socket", "send_with_blocking", 441, 44, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_buffer := gi.NewPointerArgument(buffer.P)
	arg_size := gi.NewUint64Argument(size)
	arg_blocking := gi.NewBoolArgument(blocking)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_buffer, arg_size, arg_blocking, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int64()
	return
}

// g_socket_set_blocking
//
// [ blocking ] trans: nothing
//
func (v Socket) SetBlocking(blocking bool) {
	iv, err := _I.Get1(2877, "Gio", "Socket", "set_blocking", 441, 45, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_blocking := gi.NewBoolArgument(blocking)
	args := []gi.Argument{arg_v, arg_blocking}
	iv.Call(args, nil, nil)
}

// g_socket_set_broadcast
//
// [ broadcast ] trans: nothing
//
func (v Socket) SetBroadcast(broadcast bool) {
	iv, err := _I.Get1(2878, "Gio", "Socket", "set_broadcast", 441, 46, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_broadcast := gi.NewBoolArgument(broadcast)
	args := []gi.Argument{arg_v, arg_broadcast}
	iv.Call(args, nil, nil)
}

// g_socket_set_keepalive
//
// [ keepalive ] trans: nothing
//
func (v Socket) SetKeepalive(keepalive bool) {
	iv, err := _I.Get1(2879, "Gio", "Socket", "set_keepalive", 441, 47, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_keepalive := gi.NewBoolArgument(keepalive)
	args := []gi.Argument{arg_v, arg_keepalive}
	iv.Call(args, nil, nil)
}

// g_socket_set_listen_backlog
//
// [ backlog ] trans: nothing
//
func (v Socket) SetListenBacklog(backlog int32) {
	iv, err := _I.Get1(2880, "Gio", "Socket", "set_listen_backlog", 441, 48, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_backlog := gi.NewInt32Argument(backlog)
	args := []gi.Argument{arg_v, arg_backlog}
	iv.Call(args, nil, nil)
}

// g_socket_set_multicast_loopback
//
// [ loopback ] trans: nothing
//
func (v Socket) SetMulticastLoopback(loopback bool) {
	iv, err := _I.Get1(2881, "Gio", "Socket", "set_multicast_loopback", 441, 49, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_loopback := gi.NewBoolArgument(loopback)
	args := []gi.Argument{arg_v, arg_loopback}
	iv.Call(args, nil, nil)
}

// g_socket_set_multicast_ttl
//
// [ ttl ] trans: nothing
//
func (v Socket) SetMulticastTtl(ttl uint32) {
	iv, err := _I.Get1(2882, "Gio", "Socket", "set_multicast_ttl", 441, 50, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_ttl := gi.NewUint32Argument(ttl)
	args := []gi.Argument{arg_v, arg_ttl}
	iv.Call(args, nil, nil)
}

// g_socket_set_option
//
// [ level ] trans: nothing
//
// [ optname ] trans: nothing
//
// [ value ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Socket) SetOption(level int32, optname int32, value int32) (result bool, err error) {
	iv, err := _I.Get1(2883, "Gio", "Socket", "set_option", 441, 51, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_level := gi.NewInt32Argument(level)
	arg_optname := gi.NewInt32Argument(optname)
	arg_value := gi.NewInt32Argument(value)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_level, arg_optname, arg_value, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_socket_set_timeout
//
// [ timeout ] trans: nothing
//
func (v Socket) SetTimeout(timeout uint32) {
	iv, err := _I.Get1(2884, "Gio", "Socket", "set_timeout", 441, 52, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_timeout := gi.NewUint32Argument(timeout)
	args := []gi.Argument{arg_v, arg_timeout}
	iv.Call(args, nil, nil)
}

// g_socket_set_ttl
//
// [ ttl ] trans: nothing
//
func (v Socket) SetTtl(ttl uint32) {
	iv, err := _I.Get1(2885, "Gio", "Socket", "set_ttl", 441, 53, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_ttl := gi.NewUint32Argument(ttl)
	args := []gi.Argument{arg_v, arg_ttl}
	iv.Call(args, nil, nil)
}

// g_socket_shutdown
//
// [ shutdown_read ] trans: nothing
//
// [ shutdown_write ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Socket) Shutdown(shutdown_read bool, shutdown_write bool) (result bool, err error) {
	iv, err := _I.Get1(2886, "Gio", "Socket", "shutdown", 441, 54, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_shutdown_read := gi.NewBoolArgument(shutdown_read)
	arg_shutdown_write := gi.NewBoolArgument(shutdown_write)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_shutdown_read, arg_shutdown_write, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_socket_speaks_ipv4
//
// [ result ] trans: nothing
//
func (v Socket) SpeaksIpv4() (result bool) {
	iv, err := _I.Get1(2887, "Gio", "Socket", "speaks_ipv4", 441, 55, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Object SocketAddress
type SocketAddress struct {
	SocketConnectableIfc
	Object
}

func WrapSocketAddress(p unsafe.Pointer) (r SocketAddress) { r.P = p; return }

type ISocketAddress interface{ P_SocketAddress() unsafe.Pointer }

func (v SocketAddress) P_SocketAddress() unsafe.Pointer     { return v.P }
func (v SocketAddress) P_SocketConnectable() unsafe.Pointer { return v.P }
func SocketAddressGetType() gi.GType {
	ret := _I.GetGType1(382, "Gio", "SocketAddress")
	return ret
}

// g_socket_address_new_from_native
//
// [ native ] trans: nothing
//
// [ len1 ] trans: nothing
//
// [ result ] trans: everything
//
func NewSocketAddressFromNative(native unsafe.Pointer, len1 uint64) (result SocketAddress) {
	iv, err := _I.Get1(2888, "Gio", "SocketAddress", "new_from_native", 442, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_native := gi.NewPointerArgument(native)
	arg_len1 := gi.NewUint64Argument(len1)
	args := []gi.Argument{arg_native, arg_len1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_socket_address_get_family
//
// [ result ] trans: nothing
//
func (v SocketAddress) GetFamily() (result SocketFamilyEnum) {
	iv, err := _I.Get1(2889, "Gio", "SocketAddress", "get_family", 442, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SocketFamilyEnum(ret.Int())
	return
}

// g_socket_address_get_native_size
//
// [ result ] trans: nothing
//
func (v SocketAddress) GetNativeSize() (result int64) {
	iv, err := _I.Get1(2890, "Gio", "SocketAddress", "get_native_size", 442, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int64()
	return
}

// g_socket_address_to_native
//
// [ dest ] trans: nothing
//
// [ destlen ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SocketAddress) ToNative(dest unsafe.Pointer, destlen uint64) (result bool, err error) {
	iv, err := _I.Get1(2891, "Gio", "SocketAddress", "to_native", 442, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_dest := gi.NewPointerArgument(dest)
	arg_destlen := gi.NewUint64Argument(destlen)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_dest, arg_destlen, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// ignore GType struct SocketAddressClass

// Object SocketAddressEnumerator
type SocketAddressEnumerator struct {
	Object
}

func WrapSocketAddressEnumerator(p unsafe.Pointer) (r SocketAddressEnumerator) { r.P = p; return }

type ISocketAddressEnumerator interface{ P_SocketAddressEnumerator() unsafe.Pointer }

func (v SocketAddressEnumerator) P_SocketAddressEnumerator() unsafe.Pointer { return v.P }
func SocketAddressEnumeratorGetType() gi.GType {
	ret := _I.GetGType1(383, "Gio", "SocketAddressEnumerator")
	return ret
}

// g_socket_address_enumerator_next
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v SocketAddressEnumerator) Next(cancellable ICancellable) (result SocketAddress, err error) {
	iv, err := _I.Get1(2892, "Gio", "SocketAddressEnumerator", "next", 444, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_socket_address_enumerator_next_async
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v SocketAddressEnumerator) NextAsync(cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2893, "Gio", "SocketAddressEnumerator", "next_async", 444, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_socket_address_enumerator_next_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v SocketAddressEnumerator) NextFinish(result IAsyncResult) (result1 SocketAddress, err error) {
	iv, err := _I.Get1(2894, "Gio", "SocketAddressEnumerator", "next_finish", 444, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// ignore GType struct SocketAddressEnumeratorClass

// ignore GType struct SocketClass

// Object SocketClient
type SocketClient struct {
	Object
}

func WrapSocketClient(p unsafe.Pointer) (r SocketClient) { r.P = p; return }

type ISocketClient interface{ P_SocketClient() unsafe.Pointer }

func (v SocketClient) P_SocketClient() unsafe.Pointer { return v.P }
func SocketClientGetType() gi.GType {
	ret := _I.GetGType1(384, "Gio", "SocketClient")
	return ret
}

// g_socket_client_new
//
// [ result ] trans: everything
//
func NewSocketClient() (result SocketClient) {
	iv, err := _I.Get1(2895, "Gio", "SocketClient", "new", 447, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_socket_client_add_application_proxy
//
// [ protocol ] trans: nothing
//
func (v SocketClient) AddApplicationProxy(protocol string) {
	iv, err := _I.Get1(2896, "Gio", "SocketClient", "add_application_proxy", 447, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_protocol := gi.CString(protocol)
	arg_v := gi.NewPointerArgument(v.P)
	arg_protocol := gi.NewStringArgument(c_protocol)
	args := []gi.Argument{arg_v, arg_protocol}
	iv.Call(args, nil, nil)
	gi.Free(c_protocol)
}

// g_socket_client_connect
//
// [ connectable ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v SocketClient) Connect(connectable ISocketConnectable, cancellable ICancellable) (result SocketConnection, err error) {
	iv, err := _I.Get1(2897, "Gio", "SocketClient", "connect", 447, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if connectable != nil {
		tmp = connectable.P_SocketConnectable()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connectable := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_connectable, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_socket_client_connect_async
//
// [ connectable ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v SocketClient) ConnectAsync(connectable ISocketConnectable, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2898, "Gio", "SocketClient", "connect_async", 447, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connectable != nil {
		tmp = connectable.P_SocketConnectable()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connectable := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_connectable, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_socket_client_connect_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v SocketClient) ConnectFinish(result IAsyncResult) (result1 SocketConnection, err error) {
	iv, err := _I.Get1(2899, "Gio", "SocketClient", "connect_finish", 447, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// g_socket_client_connect_to_host
//
// [ host_and_port ] trans: nothing
//
// [ default_port ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v SocketClient) ConnectToHost(host_and_port string, default_port uint16, cancellable ICancellable) (result SocketConnection, err error) {
	iv, err := _I.Get1(2900, "Gio", "SocketClient", "connect_to_host", 447, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_host_and_port := gi.CString(host_and_port)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_host_and_port := gi.NewStringArgument(c_host_and_port)
	arg_default_port := gi.NewUint16Argument(default_port)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_host_and_port, arg_default_port, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_host_and_port)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_socket_client_connect_to_host_async
//
// [ host_and_port ] trans: nothing
//
// [ default_port ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v SocketClient) ConnectToHostAsync(host_and_port string, default_port uint16, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2901, "Gio", "SocketClient", "connect_to_host_async", 447, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_host_and_port := gi.CString(host_and_port)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_host_and_port := gi.NewStringArgument(c_host_and_port)
	arg_default_port := gi.NewUint16Argument(default_port)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_host_and_port, arg_default_port, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_host_and_port)
}

// g_socket_client_connect_to_host_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v SocketClient) ConnectToHostFinish(result IAsyncResult) (result1 SocketConnection, err error) {
	iv, err := _I.Get1(2902, "Gio", "SocketClient", "connect_to_host_finish", 447, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// g_socket_client_connect_to_service
//
// [ domain ] trans: nothing
//
// [ service ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v SocketClient) ConnectToService(domain string, service string, cancellable ICancellable) (result SocketConnection, err error) {
	iv, err := _I.Get1(2903, "Gio", "SocketClient", "connect_to_service", 447, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_domain := gi.CString(domain)
	c_service := gi.CString(service)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_domain := gi.NewStringArgument(c_domain)
	arg_service := gi.NewStringArgument(c_service)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_domain, arg_service, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_domain)
	gi.Free(c_service)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_socket_client_connect_to_service_async
//
// [ domain ] trans: nothing
//
// [ service ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v SocketClient) ConnectToServiceAsync(domain string, service string, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2904, "Gio", "SocketClient", "connect_to_service_async", 447, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_domain := gi.CString(domain)
	c_service := gi.CString(service)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_domain := gi.NewStringArgument(c_domain)
	arg_service := gi.NewStringArgument(c_service)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_domain, arg_service, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_domain)
	gi.Free(c_service)
}

// g_socket_client_connect_to_service_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v SocketClient) ConnectToServiceFinish(result IAsyncResult) (result1 SocketConnection, err error) {
	iv, err := _I.Get1(2905, "Gio", "SocketClient", "connect_to_service_finish", 447, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// g_socket_client_connect_to_uri
//
// [ uri ] trans: nothing
//
// [ default_port ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v SocketClient) ConnectToUri(uri string, default_port uint16, cancellable ICancellable) (result SocketConnection, err error) {
	iv, err := _I.Get1(2906, "Gio", "SocketClient", "connect_to_uri", 447, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_uri := gi.CString(uri)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_uri := gi.NewStringArgument(c_uri)
	arg_default_port := gi.NewUint16Argument(default_port)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_uri, arg_default_port, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_uri)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_socket_client_connect_to_uri_async
//
// [ uri ] trans: nothing
//
// [ default_port ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v SocketClient) ConnectToUriAsync(uri string, default_port uint16, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2907, "Gio", "SocketClient", "connect_to_uri_async", 447, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri := gi.CString(uri)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_uri := gi.NewStringArgument(c_uri)
	arg_default_port := gi.NewUint16Argument(default_port)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_uri, arg_default_port, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_uri)
}

// g_socket_client_connect_to_uri_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v SocketClient) ConnectToUriFinish(result IAsyncResult) (result1 SocketConnection, err error) {
	iv, err := _I.Get1(2908, "Gio", "SocketClient", "connect_to_uri_finish", 447, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// g_socket_client_get_enable_proxy
//
// [ result ] trans: nothing
//
func (v SocketClient) GetEnableProxy() (result bool) {
	iv, err := _I.Get1(2909, "Gio", "SocketClient", "get_enable_proxy", 447, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_socket_client_get_family
//
// [ result ] trans: nothing
//
func (v SocketClient) GetFamily() (result SocketFamilyEnum) {
	iv, err := _I.Get1(2910, "Gio", "SocketClient", "get_family", 447, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SocketFamilyEnum(ret.Int())
	return
}

// g_socket_client_get_local_address
//
// [ result ] trans: nothing
//
func (v SocketClient) GetLocalAddress() (result SocketAddress) {
	iv, err := _I.Get1(2911, "Gio", "SocketClient", "get_local_address", 447, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_socket_client_get_protocol
//
// [ result ] trans: nothing
//
func (v SocketClient) GetProtocol() (result SocketProtocolEnum) {
	iv, err := _I.Get1(2912, "Gio", "SocketClient", "get_protocol", 447, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SocketProtocolEnum(ret.Int())
	return
}

// g_socket_client_get_proxy_resolver
//
// [ result ] trans: nothing
//
func (v SocketClient) GetProxyResolver() (result ProxyResolver) {
	iv, err := _I.Get1(2913, "Gio", "SocketClient", "get_proxy_resolver", 447, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_socket_client_get_socket_type
//
// [ result ] trans: nothing
//
func (v SocketClient) GetSocketType() (result SocketTypeEnum) {
	iv, err := _I.Get1(2914, "Gio", "SocketClient", "get_socket_type", 447, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = SocketTypeEnum(ret.Int())
	return
}

// g_socket_client_get_timeout
//
// [ result ] trans: nothing
//
func (v SocketClient) GetTimeout() (result uint32) {
	iv, err := _I.Get1(2915, "Gio", "SocketClient", "get_timeout", 447, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// g_socket_client_get_tls
//
// [ result ] trans: nothing
//
func (v SocketClient) GetTls() (result bool) {
	iv, err := _I.Get1(2916, "Gio", "SocketClient", "get_tls", 447, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_socket_client_get_tls_validation_flags
//
// [ result ] trans: nothing
//
func (v SocketClient) GetTlsValidationFlags() (result TlsCertificateFlags) {
	iv, err := _I.Get1(2917, "Gio", "SocketClient", "get_tls_validation_flags", 447, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = TlsCertificateFlags(ret.Int())
	return
}

// g_socket_client_set_enable_proxy
//
// [ enable ] trans: nothing
//
func (v SocketClient) SetEnableProxy(enable bool) {
	iv, err := _I.Get1(2918, "Gio", "SocketClient", "set_enable_proxy", 447, 23, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_enable := gi.NewBoolArgument(enable)
	args := []gi.Argument{arg_v, arg_enable}
	iv.Call(args, nil, nil)
}

// g_socket_client_set_family
//
// [ family ] trans: nothing
//
func (v SocketClient) SetFamily(family SocketFamilyEnum) {
	iv, err := _I.Get1(2919, "Gio", "SocketClient", "set_family", 447, 24, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_family := gi.NewIntArgument(int(family))
	args := []gi.Argument{arg_v, arg_family}
	iv.Call(args, nil, nil)
}

// g_socket_client_set_local_address
//
// [ address ] trans: nothing
//
func (v SocketClient) SetLocalAddress(address ISocketAddress) {
	iv, err := _I.Get1(2920, "Gio", "SocketClient", "set_local_address", 447, 25, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if address != nil {
		tmp = address.P_SocketAddress()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_address := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_address}
	iv.Call(args, nil, nil)
}

// g_socket_client_set_protocol
//
// [ protocol ] trans: nothing
//
func (v SocketClient) SetProtocol(protocol SocketProtocolEnum) {
	iv, err := _I.Get1(2921, "Gio", "SocketClient", "set_protocol", 447, 26, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_protocol := gi.NewIntArgument(int(protocol))
	args := []gi.Argument{arg_v, arg_protocol}
	iv.Call(args, nil, nil)
}

// g_socket_client_set_proxy_resolver
//
// [ proxy_resolver ] trans: nothing
//
func (v SocketClient) SetProxyResolver(proxy_resolver IProxyResolver) {
	iv, err := _I.Get1(2922, "Gio", "SocketClient", "set_proxy_resolver", 447, 27, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if proxy_resolver != nil {
		tmp = proxy_resolver.P_ProxyResolver()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_proxy_resolver := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_proxy_resolver}
	iv.Call(args, nil, nil)
}

// g_socket_client_set_socket_type
//
// [ type1 ] trans: nothing
//
func (v SocketClient) SetSocketType(type1 SocketTypeEnum) {
	iv, err := _I.Get1(2923, "Gio", "SocketClient", "set_socket_type", 447, 28, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_type1 := gi.NewIntArgument(int(type1))
	args := []gi.Argument{arg_v, arg_type1}
	iv.Call(args, nil, nil)
}

// g_socket_client_set_timeout
//
// [ timeout ] trans: nothing
//
func (v SocketClient) SetTimeout(timeout uint32) {
	iv, err := _I.Get1(2924, "Gio", "SocketClient", "set_timeout", 447, 29, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_timeout := gi.NewUint32Argument(timeout)
	args := []gi.Argument{arg_v, arg_timeout}
	iv.Call(args, nil, nil)
}

// g_socket_client_set_tls
//
// [ tls ] trans: nothing
//
func (v SocketClient) SetTls(tls bool) {
	iv, err := _I.Get1(2925, "Gio", "SocketClient", "set_tls", 447, 30, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_tls := gi.NewBoolArgument(tls)
	args := []gi.Argument{arg_v, arg_tls}
	iv.Call(args, nil, nil)
}

// g_socket_client_set_tls_validation_flags
//
// [ flags ] trans: nothing
//
func (v SocketClient) SetTlsValidationFlags(flags TlsCertificateFlags) {
	iv, err := _I.Get1(2926, "Gio", "SocketClient", "set_tls_validation_flags", 447, 31, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_flags}
	iv.Call(args, nil, nil)
}

// ignore GType struct SocketClientClass

// Enum SocketClientEvent
type SocketClientEventEnum int

const (
	SocketClientEventResolving        SocketClientEventEnum = 0
	SocketClientEventResolved         SocketClientEventEnum = 1
	SocketClientEventConnecting       SocketClientEventEnum = 2
	SocketClientEventConnected        SocketClientEventEnum = 3
	SocketClientEventProxyNegotiating SocketClientEventEnum = 4
	SocketClientEventProxyNegotiated  SocketClientEventEnum = 5
	SocketClientEventTlsHandshaking   SocketClientEventEnum = 6
	SocketClientEventTlsHandshaked    SocketClientEventEnum = 7
	SocketClientEventComplete         SocketClientEventEnum = 8
)

func SocketClientEventGetType() gi.GType {
	ret := _I.GetGType1(385, "Gio", "SocketClientEvent")
	return ret
}

// ignore private struct SocketClientPrivate, type of SocketClient is object

// Interface SocketConnectable
type SocketConnectable struct {
	SocketConnectableIfc
	P unsafe.Pointer
}
type SocketConnectableIfc struct{}
type ISocketConnectable interface{ P_SocketConnectable() unsafe.Pointer }

func (v SocketConnectable) P_SocketConnectable() unsafe.Pointer { return v.P }
func SocketConnectableGetType() gi.GType {
	ret := _I.GetGType1(386, "Gio", "SocketConnectable")
	return ret
}

// g_socket_connectable_enumerate
//
// [ result ] trans: everything
//
func (v *SocketConnectableIfc) Enumerate() (result SocketAddressEnumerator) {
	iv, err := _I.Get1(2927, "Gio", "SocketConnectable", "enumerate", 451, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_socket_connectable_proxy_enumerate
//
// [ result ] trans: everything
//
func (v *SocketConnectableIfc) ProxyEnumerate() (result SocketAddressEnumerator) {
	iv, err := _I.Get1(2928, "Gio", "SocketConnectable", "proxy_enumerate", 451, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_socket_connectable_to_string
//
// [ result ] trans: everything
//
func (v *SocketConnectableIfc) ToString() (result string) {
	iv, err := _I.Get1(2929, "Gio", "SocketConnectable", "to_string", 451, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// ignore GType struct SocketConnectableIface

// Object SocketConnection
type SocketConnection struct {
	IOStream
}

func WrapSocketConnection(p unsafe.Pointer) (r SocketConnection) { r.P = p; return }

type ISocketConnection interface{ P_SocketConnection() unsafe.Pointer }

func (v SocketConnection) P_SocketConnection() unsafe.Pointer { return v.P }
func SocketConnectionGetType() gi.GType {
	ret := _I.GetGType1(387, "Gio", "SocketConnection")
	return ret
}

// g_socket_connection_factory_lookup_type
//
// [ family ] trans: nothing
//
// [ type1 ] trans: nothing
//
// [ protocol_id ] trans: nothing
//
// [ result ] trans: nothing
//
func SocketConnectionFactoryLookupType1(family SocketFamilyEnum, type1 SocketTypeEnum, protocol_id int32) (result gi.GType) {
	iv, err := _I.Get1(2930, "Gio", "SocketConnection", "factory_lookup_type", 453, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_family := gi.NewIntArgument(int(family))
	arg_type1 := gi.NewIntArgument(int(type1))
	arg_protocol_id := gi.NewInt32Argument(protocol_id)
	args := []gi.Argument{arg_family, arg_type1, arg_protocol_id}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.GType(ret.Uint())
	return
}

// g_socket_connection_factory_register_type
//
// [ g_type ] trans: nothing
//
// [ family ] trans: nothing
//
// [ type1 ] trans: nothing
//
// [ protocol ] trans: nothing
//
func SocketConnectionFactoryRegisterType1(g_type gi.GType, family SocketFamilyEnum, type1 SocketTypeEnum, protocol int32) {
	iv, err := _I.Get1(2931, "Gio", "SocketConnection", "factory_register_type", 453, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_g_type := gi.NewUintArgument(uint(g_type))
	arg_family := gi.NewIntArgument(int(family))
	arg_type1 := gi.NewIntArgument(int(type1))
	arg_protocol := gi.NewInt32Argument(protocol)
	args := []gi.Argument{arg_g_type, arg_family, arg_type1, arg_protocol}
	iv.Call(args, nil, nil)
}

// g_socket_connection_connect
//
// [ address ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SocketConnection) Connect(address ISocketAddress, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2932, "Gio", "SocketConnection", "connect", 453, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if address != nil {
		tmp = address.P_SocketAddress()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_address := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_address, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_socket_connection_connect_async
//
// [ address ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v SocketConnection) ConnectAsync(address ISocketAddress, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2933, "Gio", "SocketConnection", "connect_async", 453, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if address != nil {
		tmp = address.P_SocketAddress()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_address := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_address, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_socket_connection_connect_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v SocketConnection) ConnectFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2934, "Gio", "SocketConnection", "connect_finish", 453, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_socket_connection_get_local_address
//
// [ result ] trans: everything
//
func (v SocketConnection) GetLocalAddress() (result SocketAddress, err error) {
	iv, err := _I.Get1(2935, "Gio", "SocketConnection", "get_local_address", 453, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_socket_connection_get_remote_address
//
// [ result ] trans: everything
//
func (v SocketConnection) GetRemoteAddress() (result SocketAddress, err error) {
	iv, err := _I.Get1(2936, "Gio", "SocketConnection", "get_remote_address", 453, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_socket_connection_get_socket
//
// [ result ] trans: nothing
//
func (v SocketConnection) GetSocket() (result Socket) {
	iv, err := _I.Get1(2937, "Gio", "SocketConnection", "get_socket", 453, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_socket_connection_is_connected
//
// [ result ] trans: nothing
//
func (v SocketConnection) IsConnected() (result bool) {
	iv, err := _I.Get1(2938, "Gio", "SocketConnection", "is_connected", 453, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct SocketConnectionClass

// ignore private struct SocketConnectionPrivate, type of SocketConnection is object

// Object SocketControlMessage
type SocketControlMessage struct {
	Object
}

func WrapSocketControlMessage(p unsafe.Pointer) (r SocketControlMessage) { r.P = p; return }

type ISocketControlMessage interface{ P_SocketControlMessage() unsafe.Pointer }

func (v SocketControlMessage) P_SocketControlMessage() unsafe.Pointer { return v.P }
func SocketControlMessageGetType() gi.GType {
	ret := _I.GetGType1(388, "Gio", "SocketControlMessage")
	return ret
}

// g_socket_control_message_deserialize
//
// [ level ] trans: nothing
//
// [ type1 ] trans: nothing
//
// [ size ] trans: nothing
//
// [ data ] trans: nothing
//
// [ result ] trans: everything
//
func SocketControlMessageDeserialize1(level int32, type1 int32, size uint64, data gi.Uint8Array) (result SocketControlMessage) {
	iv, err := _I.Get1(2939, "Gio", "SocketControlMessage", "deserialize", 456, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_level := gi.NewInt32Argument(level)
	arg_type1 := gi.NewInt32Argument(type1)
	arg_size := gi.NewUint64Argument(size)
	arg_data := gi.NewPointerArgument(data.P)
	args := []gi.Argument{arg_level, arg_type1, arg_size, arg_data}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_socket_control_message_get_level
//
// [ result ] trans: nothing
//
func (v SocketControlMessage) GetLevel() (result int32) {
	iv, err := _I.Get1(2940, "Gio", "SocketControlMessage", "get_level", 456, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// g_socket_control_message_get_msg_type
//
// [ result ] trans: nothing
//
func (v SocketControlMessage) GetMsgType() (result int32) {
	iv, err := _I.Get1(2941, "Gio", "SocketControlMessage", "get_msg_type", 456, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// g_socket_control_message_get_size
//
// [ result ] trans: nothing
//
func (v SocketControlMessage) GetSize() (result uint64) {
	iv, err := _I.Get1(2942, "Gio", "SocketControlMessage", "get_size", 456, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint64()
	return
}

// g_socket_control_message_serialize
//
// [ data ] trans: nothing
//
func (v SocketControlMessage) Serialize(data unsafe.Pointer) {
	iv, err := _I.Get1(2943, "Gio", "SocketControlMessage", "serialize", 456, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_data := gi.NewPointerArgument(data)
	args := []gi.Argument{arg_v, arg_data}
	iv.Call(args, nil, nil)
}

// ignore GType struct SocketControlMessageClass

// ignore private struct SocketControlMessagePrivate, type of SocketControlMessage is object

// Enum SocketFamily
type SocketFamilyEnum int

const (
	SocketFamilyInvalid SocketFamilyEnum = 0
	SocketFamilyUnix    SocketFamilyEnum = 1
	SocketFamilyIpv4    SocketFamilyEnum = 2
	SocketFamilyIpv6    SocketFamilyEnum = 10
)

func SocketFamilyGetType() gi.GType {
	ret := _I.GetGType1(389, "Gio", "SocketFamily")
	return ret
}

// Object SocketListener
type SocketListener struct {
	Object
}

func WrapSocketListener(p unsafe.Pointer) (r SocketListener) { r.P = p; return }

type ISocketListener interface{ P_SocketListener() unsafe.Pointer }

func (v SocketListener) P_SocketListener() unsafe.Pointer { return v.P }
func SocketListenerGetType() gi.GType {
	ret := _I.GetGType1(390, "Gio", "SocketListener")
	return ret
}

// g_socket_listener_new
//
// [ result ] trans: everything
//
func NewSocketListener() (result SocketListener) {
	iv, err := _I.Get1(2944, "Gio", "SocketListener", "new", 460, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_socket_listener_accept
//
// [ source_object ] trans: nothing, dir: out
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v SocketListener) Accept(cancellable ICancellable) (result SocketConnection, source_object Object, err error) {
	iv, err := _I.Get1(2945, "Gio", "SocketListener", "accept", 460, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_source_object := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_source_object, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	source_object.P = outArgs[0].Pointer()
	result.P = ret.Pointer()
	return
}

// g_socket_listener_accept_async
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v SocketListener) AcceptAsync(cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2946, "Gio", "SocketListener", "accept_async", 460, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_socket_listener_accept_finish
//
// [ result ] trans: nothing
//
// [ source_object ] trans: nothing, dir: out
//
// [ result1 ] trans: everything
//
func (v SocketListener) AcceptFinish(result IAsyncResult) (result1 SocketConnection, source_object Object, err error) {
	iv, err := _I.Get1(2947, "Gio", "SocketListener", "accept_finish", 460, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_source_object := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_result, arg_source_object, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	source_object.P = outArgs[0].Pointer()
	result1.P = ret.Pointer()
	return
}

// g_socket_listener_accept_socket
//
// [ source_object ] trans: nothing, dir: out
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v SocketListener) AcceptSocket(cancellable ICancellable) (result Socket, source_object Object, err error) {
	iv, err := _I.Get1(2948, "Gio", "SocketListener", "accept_socket", 460, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_source_object := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_source_object, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	source_object.P = outArgs[0].Pointer()
	result.P = ret.Pointer()
	return
}

// g_socket_listener_accept_socket_async
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v SocketListener) AcceptSocketAsync(cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2949, "Gio", "SocketListener", "accept_socket_async", 460, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_socket_listener_accept_socket_finish
//
// [ result ] trans: nothing
//
// [ source_object ] trans: nothing, dir: out
//
// [ result1 ] trans: everything
//
func (v SocketListener) AcceptSocketFinish(result IAsyncResult) (result1 Socket, source_object Object, err error) {
	iv, err := _I.Get1(2950, "Gio", "SocketListener", "accept_socket_finish", 460, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_source_object := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_result, arg_source_object, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	source_object.P = outArgs[0].Pointer()
	result1.P = ret.Pointer()
	return
}

// g_socket_listener_add_address
//
// [ address ] trans: nothing
//
// [ type1 ] trans: nothing
//
// [ protocol ] trans: nothing
//
// [ source_object ] trans: nothing
//
// [ effective_address ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v SocketListener) AddAddress(address ISocketAddress, type1 SocketTypeEnum, protocol SocketProtocolEnum, source_object IObject) (result bool, effective_address SocketAddress, err error) {
	iv, err := _I.Get1(2951, "Gio", "SocketListener", "add_address", 460, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if address != nil {
		tmp = address.P_SocketAddress()
	}
	var tmp1 unsafe.Pointer
	if source_object != nil {
		tmp1 = source_object.P_Object()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_address := gi.NewPointerArgument(tmp)
	arg_type1 := gi.NewIntArgument(int(type1))
	arg_protocol := gi.NewIntArgument(int(protocol))
	arg_source_object := gi.NewPointerArgument(tmp1)
	arg_effective_address := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_v, arg_address, arg_type1, arg_protocol, arg_source_object, arg_effective_address, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	effective_address.P = outArgs[0].Pointer()
	result = ret.Bool()
	return
}

// g_socket_listener_add_any_inet_port
//
// [ source_object ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SocketListener) AddAnyInetPort(source_object IObject) (result uint16, err error) {
	iv, err := _I.Get1(2952, "Gio", "SocketListener", "add_any_inet_port", 460, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if source_object != nil {
		tmp = source_object.P_Object()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_source_object := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_source_object, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Uint16()
	return
}

// g_socket_listener_add_inet_port
//
// [ port ] trans: nothing
//
// [ source_object ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SocketListener) AddInetPort(port uint16, source_object IObject) (result bool, err error) {
	iv, err := _I.Get1(2953, "Gio", "SocketListener", "add_inet_port", 460, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if source_object != nil {
		tmp = source_object.P_Object()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_port := gi.NewUint16Argument(port)
	arg_source_object := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_port, arg_source_object, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_socket_listener_add_socket
//
// [ socket ] trans: nothing
//
// [ source_object ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SocketListener) AddSocket(socket ISocket, source_object IObject) (result bool, err error) {
	iv, err := _I.Get1(2954, "Gio", "SocketListener", "add_socket", 460, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if socket != nil {
		tmp = socket.P_Socket()
	}
	var tmp1 unsafe.Pointer
	if source_object != nil {
		tmp1 = source_object.P_Object()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_socket := gi.NewPointerArgument(tmp)
	arg_source_object := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_socket, arg_source_object, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_socket_listener_close
//
func (v SocketListener) Close() {
	iv, err := _I.Get1(2955, "Gio", "SocketListener", "close", 460, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_socket_listener_set_backlog
//
// [ listen_backlog ] trans: nothing
//
func (v SocketListener) SetBacklog(listen_backlog int32) {
	iv, err := _I.Get1(2956, "Gio", "SocketListener", "set_backlog", 460, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_listen_backlog := gi.NewInt32Argument(listen_backlog)
	args := []gi.Argument{arg_v, arg_listen_backlog}
	iv.Call(args, nil, nil)
}

// ignore GType struct SocketListenerClass

// Enum SocketListenerEvent
type SocketListenerEventEnum int

const (
	SocketListenerEventBinding   SocketListenerEventEnum = 0
	SocketListenerEventBound     SocketListenerEventEnum = 1
	SocketListenerEventListening SocketListenerEventEnum = 2
	SocketListenerEventListened  SocketListenerEventEnum = 3
)

func SocketListenerEventGetType() gi.GType {
	ret := _I.GetGType1(391, "Gio", "SocketListenerEvent")
	return ret
}

// ignore private struct SocketListenerPrivate, type of SocketListener is object

// Flags SocketMsgFlags
type SocketMsgFlags int

const (
	SocketMsgFlagsNone      SocketMsgFlags = 0
	SocketMsgFlagsOob       SocketMsgFlags = 1
	SocketMsgFlagsPeek      SocketMsgFlags = 2
	SocketMsgFlagsDontroute SocketMsgFlags = 4
)

func SocketMsgFlagsGetType() gi.GType {
	ret := _I.GetGType1(392, "Gio", "SocketMsgFlags")
	return ret
}

// ignore private struct SocketPrivate, type of Socket is object

// Enum SocketProtocol
type SocketProtocolEnum int

const (
	SocketProtocolUnknown SocketProtocolEnum = -1
	SocketProtocolDefault SocketProtocolEnum = 0
	SocketProtocolTcp     SocketProtocolEnum = 6
	SocketProtocolUdp     SocketProtocolEnum = 17
	SocketProtocolSctp    SocketProtocolEnum = 132
)

func SocketProtocolGetType() gi.GType {
	ret := _I.GetGType1(393, "Gio", "SocketProtocol")
	return ret
}

// Object SocketService
type SocketService struct {
	SocketListener
}

func WrapSocketService(p unsafe.Pointer) (r SocketService) { r.P = p; return }

type ISocketService interface{ P_SocketService() unsafe.Pointer }

func (v SocketService) P_SocketService() unsafe.Pointer { return v.P }
func SocketServiceGetType() gi.GType {
	ret := _I.GetGType1(394, "Gio", "SocketService")
	return ret
}

// g_socket_service_new
//
// [ result ] trans: everything
//
func NewSocketService() (result SocketService) {
	iv, err := _I.Get1(2957, "Gio", "SocketService", "new", 467, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_socket_service_is_active
//
// [ result ] trans: nothing
//
func (v SocketService) IsActive() (result bool) {
	iv, err := _I.Get1(2958, "Gio", "SocketService", "is_active", 467, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_socket_service_start
//
func (v SocketService) Start() {
	iv, err := _I.Get1(2959, "Gio", "SocketService", "start", 467, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_socket_service_stop
//
func (v SocketService) Stop() {
	iv, err := _I.Get1(2960, "Gio", "SocketService", "stop", 467, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// ignore GType struct SocketServiceClass

// ignore private struct SocketServicePrivate, type of SocketService is object

type SocketSourceFunc func(socket Socket, condition IOConditionFlags) (result bool)

func CallSocketSourceFunc(fn SocketSourceFunc, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	socket := WrapSocket(*(*unsafe.Pointer)(args[0]))
	condition := *(*IOConditionFlags)(args[1])
	fnRet := fn(socket, condition)
	*(*int32)(result) = int32(gi.Bool2Int(fnRet))
}

// Enum SocketType
type SocketTypeEnum int

const (
	SocketTypeInvalid   SocketTypeEnum = 0
	SocketTypeStream    SocketTypeEnum = 1
	SocketTypeDatagram  SocketTypeEnum = 2
	SocketTypeSeqpacket SocketTypeEnum = 3
)

func SocketTypeGetType() gi.GType {
	ret := _I.GetGType1(395, "Gio", "SocketType")
	return ret
}

// Struct SrvTarget
type SrvTarget struct {
	P unsafe.Pointer
}

func SrvTargetGetType() gi.GType {
	ret := _I.GetGType1(396, "Gio", "SrvTarget")
	return ret
}

// g_srv_target_new
//
// [ hostname ] trans: nothing
//
// [ port ] trans: nothing
//
// [ priority ] trans: nothing
//
// [ weight ] trans: nothing
//
// [ result ] trans: everything
//
func NewSrvTarget(hostname string, port uint16, priority uint16, weight uint16) (result SrvTarget) {
	iv, err := _I.Get1(2961, "Gio", "SrvTarget", "new", 472, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_hostname := gi.CString(hostname)
	arg_hostname := gi.NewStringArgument(c_hostname)
	arg_port := gi.NewUint16Argument(port)
	arg_priority := gi.NewUint16Argument(priority)
	arg_weight := gi.NewUint16Argument(weight)
	args := []gi.Argument{arg_hostname, arg_port, arg_priority, arg_weight}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_hostname)
	result.P = ret.Pointer()
	return
}

// g_srv_target_copy
//
// [ result ] trans: everything
//
func (v SrvTarget) Copy() (result SrvTarget) {
	iv, err := _I.Get1(2962, "Gio", "SrvTarget", "copy", 472, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_srv_target_free
//
func (v SrvTarget) Free() {
	iv, err := _I.Get1(2963, "Gio", "SrvTarget", "free", 472, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_srv_target_get_hostname
//
// [ result ] trans: nothing
//
func (v SrvTarget) GetHostname() (result string) {
	iv, err := _I.Get1(2964, "Gio", "SrvTarget", "get_hostname", 472, 3, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_srv_target_get_port
//
// [ result ] trans: nothing
//
func (v SrvTarget) GetPort() (result uint16) {
	iv, err := _I.Get1(2965, "Gio", "SrvTarget", "get_port", 472, 4, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint16()
	return
}

// g_srv_target_get_priority
//
// [ result ] trans: nothing
//
func (v SrvTarget) GetPriority() (result uint16) {
	iv, err := _I.Get1(2966, "Gio", "SrvTarget", "get_priority", 472, 5, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint16()
	return
}

// g_srv_target_get_weight
//
// [ result ] trans: nothing
//
func (v SrvTarget) GetWeight() (result uint16) {
	iv, err := _I.Get1(2967, "Gio", "SrvTarget", "get_weight", 472, 6, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint16()
	return
}

// Struct StaticResource
type StaticResource struct {
	P unsafe.Pointer
}

const SizeOfStructStaticResource = 40

func StaticResourceGetType() gi.GType {
	ret := _I.GetGType1(397, "Gio", "StaticResource")
	return ret
}

// g_static_resource_fini
//
func (v StaticResource) Fini() {
	iv, err := _I.Get1(2968, "Gio", "StaticResource", "fini", 473, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_static_resource_get_resource
//
// [ result ] trans: nothing
//
func (v StaticResource) GetResource() (result Resource) {
	iv, err := _I.Get1(2969, "Gio", "StaticResource", "get_resource", 473, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_static_resource_init
//
func (v StaticResource) Init() {
	iv, err := _I.Get1(2970, "Gio", "StaticResource", "init", 473, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

func (v StaticResource) p() *C.GStaticResource {
	return (*C.GStaticResource)(v.P)
}
func (v StaticResource) Data() (result int /*TODO*/) {
	return
}
func (v StaticResource) DataLen() (result uint64) {
	result = uint64(v.p().data_len)
	return
}
func (v StaticResource) Resource() (result int /*TODO*/) {
	return
}
func (v StaticResource) Next() (result int /*TODO*/) {
	return
}
func (v StaticResource) Padding() (result unsafe.Pointer) {
	result = unsafe.Pointer(v.p().padding)
	return
}

// Object Subprocess
type Subprocess struct {
	InitableIfc
	Object
}

func WrapSubprocess(p unsafe.Pointer) (r Subprocess) { r.P = p; return }

type ISubprocess interface{ P_Subprocess() unsafe.Pointer }

func (v Subprocess) P_Subprocess() unsafe.Pointer { return v.P }
func (v Subprocess) P_Initable() unsafe.Pointer   { return v.P }
func SubprocessGetType() gi.GType {
	ret := _I.GetGType1(398, "Gio", "Subprocess")
	return ret
}

// g_subprocess_newv
//
// [ argv ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: everything
//
func NewSubprocess(argv gi.CStrArray, flags SubprocessFlags) (result Subprocess, err error) {
	iv, err := _I.Get1(2971, "Gio", "Subprocess", "new", 474, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_argv := gi.NewPointerArgument(argv.P)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_argv, arg_flags, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_subprocess_communicate
//
// [ stdin_buf ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ stdout_buf ] trans: everything, dir: out
//
// [ stderr_buf ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v Subprocess) Communicate(stdin_buf Bytes, cancellable ICancellable) (result bool, stdout_buf Bytes, stderr_buf Bytes, err error) {
	iv, err := _I.Get1(2972, "Gio", "Subprocess", "communicate", 474, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [3]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_stdin_buf := gi.NewPointerArgument(stdin_buf.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_stdout_buf := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_stderr_buf := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	args := []gi.Argument{arg_v, arg_stdin_buf, arg_cancellable, arg_stdout_buf, arg_stderr_buf, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[2].Pointer())
	stdout_buf.P = outArgs[0].Pointer()
	stderr_buf.P = outArgs[1].Pointer()
	result = ret.Bool()
	return
}

// g_subprocess_communicate_async
//
// [ stdin_buf ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Subprocess) CommunicateAsync(stdin_buf Bytes, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2973, "Gio", "Subprocess", "communicate_async", 474, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_stdin_buf := gi.NewPointerArgument(stdin_buf.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_stdin_buf, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_subprocess_communicate_finish
//
// [ result ] trans: nothing
//
// [ stdout_buf ] trans: everything, dir: out
//
// [ stderr_buf ] trans: everything, dir: out
//
// [ result1 ] trans: nothing
//
func (v Subprocess) CommunicateFinish(result IAsyncResult) (result1 bool, stdout_buf Bytes, stderr_buf Bytes, err error) {
	iv, err := _I.Get1(2974, "Gio", "Subprocess", "communicate_finish", 474, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [3]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_stdout_buf := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_stderr_buf := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	args := []gi.Argument{arg_v, arg_result, arg_stdout_buf, arg_stderr_buf, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[2].Pointer())
	stdout_buf.P = outArgs[0].Pointer()
	stderr_buf.P = outArgs[1].Pointer()
	result1 = ret.Bool()
	return
}

// g_subprocess_communicate_utf8
//
// [ stdin_buf ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ stdout_buf ] trans: everything, dir: out
//
// [ stderr_buf ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v Subprocess) CommunicateUtf8(stdin_buf string, cancellable ICancellable) (result bool, stdout_buf string, stderr_buf string, err error) {
	iv, err := _I.Get1(2975, "Gio", "Subprocess", "communicate_utf8", 474, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [3]gi.Argument
	c_stdin_buf := gi.CString(stdin_buf)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_stdin_buf := gi.NewStringArgument(c_stdin_buf)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_stdout_buf := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_stderr_buf := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	args := []gi.Argument{arg_v, arg_stdin_buf, arg_cancellable, arg_stdout_buf, arg_stderr_buf, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_stdin_buf)
	err = gi.ToError(outArgs[2].Pointer())
	stdout_buf = outArgs[0].String().Take()
	stderr_buf = outArgs[1].String().Take()
	result = ret.Bool()
	return
}

// g_subprocess_communicate_utf8_async
//
// [ stdin_buf ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Subprocess) CommunicateUtf8Async(stdin_buf string, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2976, "Gio", "Subprocess", "communicate_utf8_async", 474, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_stdin_buf := gi.CString(stdin_buf)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_stdin_buf := gi.NewStringArgument(c_stdin_buf)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_stdin_buf, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_stdin_buf)
}

// g_subprocess_communicate_utf8_finish
//
// [ result ] trans: nothing
//
// [ stdout_buf ] trans: everything, dir: out
//
// [ stderr_buf ] trans: everything, dir: out
//
// [ result1 ] trans: nothing
//
func (v Subprocess) CommunicateUtf8Finish(result IAsyncResult) (result1 bool, stdout_buf string, stderr_buf string, err error) {
	iv, err := _I.Get1(2977, "Gio", "Subprocess", "communicate_utf8_finish", 474, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [3]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_stdout_buf := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_stderr_buf := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	args := []gi.Argument{arg_v, arg_result, arg_stdout_buf, arg_stderr_buf, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[2].Pointer())
	stdout_buf = outArgs[0].String().Take()
	stderr_buf = outArgs[1].String().Take()
	result1 = ret.Bool()
	return
}

// g_subprocess_force_exit
//
func (v Subprocess) ForceExit() {
	iv, err := _I.Get1(2978, "Gio", "Subprocess", "force_exit", 474, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_subprocess_get_exit_status
//
// [ result ] trans: nothing
//
func (v Subprocess) GetExitStatus() (result int32) {
	iv, err := _I.Get1(2979, "Gio", "Subprocess", "get_exit_status", 474, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// g_subprocess_get_identifier
//
// [ result ] trans: nothing
//
func (v Subprocess) GetIdentifier() (result string) {
	iv, err := _I.Get1(2980, "Gio", "Subprocess", "get_identifier", 474, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_subprocess_get_if_exited
//
// [ result ] trans: nothing
//
func (v Subprocess) GetIfExited() (result bool) {
	iv, err := _I.Get1(2981, "Gio", "Subprocess", "get_if_exited", 474, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_subprocess_get_if_signaled
//
// [ result ] trans: nothing
//
func (v Subprocess) GetIfSignaled() (result bool) {
	iv, err := _I.Get1(2982, "Gio", "Subprocess", "get_if_signaled", 474, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_subprocess_get_status
//
// [ result ] trans: nothing
//
func (v Subprocess) GetStatus() (result int32) {
	iv, err := _I.Get1(2983, "Gio", "Subprocess", "get_status", 474, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// g_subprocess_get_stderr_pipe
//
// [ result ] trans: nothing
//
func (v Subprocess) GetStderrPipe() (result InputStream) {
	iv, err := _I.Get1(2984, "Gio", "Subprocess", "get_stderr_pipe", 474, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_subprocess_get_stdin_pipe
//
// [ result ] trans: nothing
//
func (v Subprocess) GetStdinPipe() (result OutputStream) {
	iv, err := _I.Get1(2985, "Gio", "Subprocess", "get_stdin_pipe", 474, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_subprocess_get_stdout_pipe
//
// [ result ] trans: nothing
//
func (v Subprocess) GetStdoutPipe() (result InputStream) {
	iv, err := _I.Get1(2986, "Gio", "Subprocess", "get_stdout_pipe", 474, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_subprocess_get_successful
//
// [ result ] trans: nothing
//
func (v Subprocess) GetSuccessful() (result bool) {
	iv, err := _I.Get1(2987, "Gio", "Subprocess", "get_successful", 474, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_subprocess_get_term_sig
//
// [ result ] trans: nothing
//
func (v Subprocess) GetTermSig() (result int32) {
	iv, err := _I.Get1(2988, "Gio", "Subprocess", "get_term_sig", 474, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// g_subprocess_send_signal
//
// [ signal_num ] trans: nothing
//
func (v Subprocess) SendSignal(signal_num int32) {
	iv, err := _I.Get1(2989, "Gio", "Subprocess", "send_signal", 474, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_signal_num := gi.NewInt32Argument(signal_num)
	args := []gi.Argument{arg_v, arg_signal_num}
	iv.Call(args, nil, nil)
}

// g_subprocess_wait
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Subprocess) Wait(cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2990, "Gio", "Subprocess", "wait", 474, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_subprocess_wait_async
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Subprocess) WaitAsync(cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2991, "Gio", "Subprocess", "wait_async", 474, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_subprocess_wait_check
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Subprocess) WaitCheck(cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(2992, "Gio", "Subprocess", "wait_check", 474, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_subprocess_wait_check_async
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v Subprocess) WaitCheckAsync(cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(2993, "Gio", "Subprocess", "wait_check_async", 474, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_subprocess_wait_check_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v Subprocess) WaitCheckFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2994, "Gio", "Subprocess", "wait_check_finish", 474, 23, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_subprocess_wait_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v Subprocess) WaitFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(2995, "Gio", "Subprocess", "wait_finish", 474, 24, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// Flags SubprocessFlags
type SubprocessFlags int

const (
	SubprocessFlagsNone          SubprocessFlags = 0
	SubprocessFlagsStdinPipe     SubprocessFlags = 1
	SubprocessFlagsStdinInherit  SubprocessFlags = 2
	SubprocessFlagsStdoutPipe    SubprocessFlags = 4
	SubprocessFlagsStdoutSilence SubprocessFlags = 8
	SubprocessFlagsStderrPipe    SubprocessFlags = 16
	SubprocessFlagsStderrSilence SubprocessFlags = 32
	SubprocessFlagsStderrMerge   SubprocessFlags = 64
	SubprocessFlagsInheritFds    SubprocessFlags = 128
)

func SubprocessFlagsGetType() gi.GType {
	ret := _I.GetGType1(399, "Gio", "SubprocessFlags")
	return ret
}

// Object SubprocessLauncher
type SubprocessLauncher struct {
	Object
}

func WrapSubprocessLauncher(p unsafe.Pointer) (r SubprocessLauncher) { r.P = p; return }

type ISubprocessLauncher interface{ P_SubprocessLauncher() unsafe.Pointer }

func (v SubprocessLauncher) P_SubprocessLauncher() unsafe.Pointer { return v.P }
func SubprocessLauncherGetType() gi.GType {
	ret := _I.GetGType1(400, "Gio", "SubprocessLauncher")
	return ret
}

// g_subprocess_launcher_new
//
// [ flags ] trans: nothing
//
// [ result ] trans: everything
//
func NewSubprocessLauncher(flags SubprocessFlags) (result SubprocessLauncher) {
	iv, err := _I.Get1(2996, "Gio", "SubprocessLauncher", "new", 476, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_subprocess_launcher_getenv
//
// [ variable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v SubprocessLauncher) Getenv(variable string) (result string) {
	iv, err := _I.Get1(2997, "Gio", "SubprocessLauncher", "getenv", 476, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_variable := gi.CString(variable)
	arg_v := gi.NewPointerArgument(v.P)
	arg_variable := gi.NewStringArgument(c_variable)
	args := []gi.Argument{arg_v, arg_variable}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_variable)
	result = ret.String().Copy()
	return
}

// g_subprocess_launcher_set_cwd
//
// [ cwd ] trans: nothing
//
func (v SubprocessLauncher) SetCwd(cwd string) {
	iv, err := _I.Get1(2998, "Gio", "SubprocessLauncher", "set_cwd", 476, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_cwd := gi.CString(cwd)
	arg_v := gi.NewPointerArgument(v.P)
	arg_cwd := gi.NewStringArgument(c_cwd)
	args := []gi.Argument{arg_v, arg_cwd}
	iv.Call(args, nil, nil)
	gi.Free(c_cwd)
}

// g_subprocess_launcher_set_environ
//
// [ env ] trans: nothing
//
func (v SubprocessLauncher) SetEnviron(env gi.CStrArray) {
	iv, err := _I.Get1(2999, "Gio", "SubprocessLauncher", "set_environ", 476, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_env := gi.NewPointerArgument(env.P)
	args := []gi.Argument{arg_v, arg_env}
	iv.Call(args, nil, nil)
}

// g_subprocess_launcher_set_flags
//
// [ flags ] trans: nothing
//
func (v SubprocessLauncher) SetFlags(flags SubprocessFlags) {
	iv, err := _I.Get1(3000, "Gio", "SubprocessLauncher", "set_flags", 476, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_flags}
	iv.Call(args, nil, nil)
}

// g_subprocess_launcher_set_stderr_file_path
//
// [ path ] trans: nothing
//
func (v SubprocessLauncher) SetStderrFilePath(path string) {
	iv, err := _I.Get1(3001, "Gio", "SubprocessLauncher", "set_stderr_file_path", 476, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewStringArgument(c_path)
	args := []gi.Argument{arg_v, arg_path}
	iv.Call(args, nil, nil)
	gi.Free(c_path)
}

// g_subprocess_launcher_set_stdin_file_path
//
// [ path ] trans: nothing
//
func (v SubprocessLauncher) SetStdinFilePath(path string) {
	iv, err := _I.Get1(3002, "Gio", "SubprocessLauncher", "set_stdin_file_path", 476, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewStringArgument(c_path)
	args := []gi.Argument{arg_v, arg_path}
	iv.Call(args, nil, nil)
	gi.Free(c_path)
}

// g_subprocess_launcher_set_stdout_file_path
//
// [ path ] trans: nothing
//
func (v SubprocessLauncher) SetStdoutFilePath(path string) {
	iv, err := _I.Get1(3003, "Gio", "SubprocessLauncher", "set_stdout_file_path", 476, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewStringArgument(c_path)
	args := []gi.Argument{arg_v, arg_path}
	iv.Call(args, nil, nil)
	gi.Free(c_path)
}

// g_subprocess_launcher_setenv
//
// [ variable ] trans: nothing
//
// [ value ] trans: nothing
//
// [ overwrite ] trans: nothing
//
func (v SubprocessLauncher) Setenv(variable string, value string, overwrite bool) {
	iv, err := _I.Get1(3004, "Gio", "SubprocessLauncher", "setenv", 476, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_variable := gi.CString(variable)
	c_value := gi.CString(value)
	arg_v := gi.NewPointerArgument(v.P)
	arg_variable := gi.NewStringArgument(c_variable)
	arg_value := gi.NewStringArgument(c_value)
	arg_overwrite := gi.NewBoolArgument(overwrite)
	args := []gi.Argument{arg_v, arg_variable, arg_value, arg_overwrite}
	iv.Call(args, nil, nil)
	gi.Free(c_variable)
	gi.Free(c_value)
}

// g_subprocess_launcher_spawnv
//
// [ argv ] trans: nothing
//
// [ result ] trans: everything
//
func (v SubprocessLauncher) Spawnv(argv gi.CStrArray) (result Subprocess, err error) {
	iv, err := _I.Get1(3005, "Gio", "SubprocessLauncher", "spawnv", 476, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_argv := gi.NewPointerArgument(argv.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_argv, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_subprocess_launcher_take_fd
//
// [ source_fd ] trans: nothing
//
// [ target_fd ] trans: nothing
//
func (v SubprocessLauncher) TakeFd(source_fd int32, target_fd int32) {
	iv, err := _I.Get1(3006, "Gio", "SubprocessLauncher", "take_fd", 476, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_source_fd := gi.NewInt32Argument(source_fd)
	arg_target_fd := gi.NewInt32Argument(target_fd)
	args := []gi.Argument{arg_v, arg_source_fd, arg_target_fd}
	iv.Call(args, nil, nil)
}

// g_subprocess_launcher_take_stderr_fd
//
// [ fd ] trans: nothing
//
func (v SubprocessLauncher) TakeStderrFd(fd int32) {
	iv, err := _I.Get1(3007, "Gio", "SubprocessLauncher", "take_stderr_fd", 476, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_fd := gi.NewInt32Argument(fd)
	args := []gi.Argument{arg_v, arg_fd}
	iv.Call(args, nil, nil)
}

// g_subprocess_launcher_take_stdin_fd
//
// [ fd ] trans: nothing
//
func (v SubprocessLauncher) TakeStdinFd(fd int32) {
	iv, err := _I.Get1(3008, "Gio", "SubprocessLauncher", "take_stdin_fd", 476, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_fd := gi.NewInt32Argument(fd)
	args := []gi.Argument{arg_v, arg_fd}
	iv.Call(args, nil, nil)
}

// g_subprocess_launcher_take_stdout_fd
//
// [ fd ] trans: nothing
//
func (v SubprocessLauncher) TakeStdoutFd(fd int32) {
	iv, err := _I.Get1(3009, "Gio", "SubprocessLauncher", "take_stdout_fd", 476, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_fd := gi.NewInt32Argument(fd)
	args := []gi.Argument{arg_v, arg_fd}
	iv.Call(args, nil, nil)
}

// g_subprocess_launcher_unsetenv
//
// [ variable ] trans: nothing
//
func (v SubprocessLauncher) Unsetenv(variable string) {
	iv, err := _I.Get1(3010, "Gio", "SubprocessLauncher", "unsetenv", 476, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_variable := gi.CString(variable)
	arg_v := gi.NewPointerArgument(v.P)
	arg_variable := gi.NewStringArgument(c_variable)
	args := []gi.Argument{arg_v, arg_variable}
	iv.Call(args, nil, nil)
	gi.Free(c_variable)
}

// Object Task
type Task struct {
	AsyncResultIfc
	Object
}

func WrapTask(p unsafe.Pointer) (r Task) { r.P = p; return }

type ITask interface{ P_Task() unsafe.Pointer }

func (v Task) P_Task() unsafe.Pointer        { return v.P }
func (v Task) P_AsyncResult() unsafe.Pointer { return v.P }
func TaskGetType() gi.GType {
	ret := _I.GetGType1(401, "Gio", "Task")
	return ret
}

// g_task_new
//
// [ source_object ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ callback_data ] trans: nothing
//
// [ result ] trans: everything
//
func NewTask(source_object IObject, cancellable ICancellable, callback AsyncReadyCallback) (result Task) {
	iv, err := _I.Get1(3011, "Gio", "Task", "new", 480, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if source_object != nil {
		tmp = source_object.P_Object()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_source_object := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_callback_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_source_object, arg_cancellable, arg_callback, arg_callback_data}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_task_is_valid
//
// [ result ] trans: nothing
//
// [ source_object ] trans: nothing
//
// [ result1 ] trans: nothing
//
func TaskIsValid1(result IAsyncResult, source_object IObject) (result1 bool) {
	iv, err := _I.Get1(3012, "Gio", "Task", "is_valid", 480, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	var tmp1 unsafe.Pointer
	if source_object != nil {
		tmp1 = source_object.P_Object()
	}
	arg_result := gi.NewPointerArgument(tmp)
	arg_source_object := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_result, arg_source_object}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result1 = ret.Bool()
	return
}

// g_task_report_error
//
// [ source_object ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ callback_data ] trans: nothing
//
// [ source_tag ] trans: nothing
//
// [ error ] trans: everything
//
func TaskReportError1(source_object IObject, callback AsyncReadyCallback, source_tag unsafe.Pointer, error Error) {
	iv, err := _I.Get1(3013, "Gio", "Task", "report_error", 480, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if source_object != nil {
		tmp = source_object.P_Object()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_source_object := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_callback_data := gi.NewPointerArgument(nil)
	arg_source_tag := gi.NewPointerArgument(source_tag)
	arg_error := gi.NewPointerArgument(error.P)
	args := []gi.Argument{arg_source_object, arg_callback, arg_callback_data, arg_source_tag, arg_error}
	iv.Call(args, nil, nil)
}

// g_task_get_cancellable
//
// [ result ] trans: nothing
//
func (v Task) GetCancellable() (result Cancellable) {
	iv, err := _I.Get1(3014, "Gio", "Task", "get_cancellable", 480, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_task_get_check_cancellable
//
// [ result ] trans: nothing
//
func (v Task) GetCheckCancellable() (result bool) {
	iv, err := _I.Get1(3015, "Gio", "Task", "get_check_cancellable", 480, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_task_get_completed
//
// [ result ] trans: nothing
//
func (v Task) GetCompleted() (result bool) {
	iv, err := _I.Get1(3016, "Gio", "Task", "get_completed", 480, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_task_get_context
//
// [ result ] trans: nothing
//
func (v Task) GetContext() (result MainContext) {
	iv, err := _I.Get1(3017, "Gio", "Task", "get_context", 480, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_task_get_priority
//
// [ result ] trans: nothing
//
func (v Task) GetPriority() (result int32) {
	iv, err := _I.Get1(3018, "Gio", "Task", "get_priority", 480, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// g_task_get_return_on_cancel
//
// [ result ] trans: nothing
//
func (v Task) GetReturnOnCancel() (result bool) {
	iv, err := _I.Get1(3019, "Gio", "Task", "get_return_on_cancel", 480, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_task_get_source_object
//
// [ result ] trans: nothing
//
func (v Task) GetSourceObject() (result Object) {
	iv, err := _I.Get1(3020, "Gio", "Task", "get_source_object", 480, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_task_get_source_tag
//
// [ result ] trans: nothing
//
func (v Task) GetSourceTag() (result unsafe.Pointer) {
	iv, err := _I.Get1(3021, "Gio", "Task", "get_source_tag", 480, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Pointer()
	return
}

// g_task_get_task_data
//
// [ result ] trans: nothing
//
func (v Task) GetTaskData() (result unsafe.Pointer) {
	iv, err := _I.Get1(3022, "Gio", "Task", "get_task_data", 480, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Pointer()
	return
}

// g_task_had_error
//
// [ result ] trans: nothing
//
func (v Task) HadError() (result bool) {
	iv, err := _I.Get1(3023, "Gio", "Task", "had_error", 480, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_task_propagate_boolean
//
// [ result ] trans: nothing
//
func (v Task) PropagateBoolean() (result bool, err error) {
	iv, err := _I.Get1(3024, "Gio", "Task", "propagate_boolean", 480, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_task_propagate_int
//
// [ result ] trans: nothing
//
func (v Task) PropagateInt() (result int64, err error) {
	iv, err := _I.Get1(3025, "Gio", "Task", "propagate_int", 480, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int64()
	return
}

// g_task_propagate_pointer
//
// [ result ] trans: everything
//
func (v Task) PropagatePointer() (result unsafe.Pointer, err error) {
	iv, err := _I.Get1(3026, "Gio", "Task", "propagate_pointer", 480, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Pointer()
	return
}

// g_task_return_boolean
//
// [ result ] trans: nothing
//
func (v Task) ReturnBoolean(result bool) {
	iv, err := _I.Get1(3027, "Gio", "Task", "return_boolean", 480, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewBoolArgument(result)
	args := []gi.Argument{arg_v, arg_result}
	iv.Call(args, nil, nil)
}

// g_task_return_error
//
// [ error ] trans: everything
//
func (v Task) ReturnError(error Error) {
	iv, err := _I.Get1(3028, "Gio", "Task", "return_error", 480, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_error := gi.NewPointerArgument(error.P)
	args := []gi.Argument{arg_v, arg_error}
	iv.Call(args, nil, nil)
}

// g_task_return_error_if_cancelled
//
// [ result ] trans: nothing
//
func (v Task) ReturnErrorIfCancelled() (result bool) {
	iv, err := _I.Get1(3029, "Gio", "Task", "return_error_if_cancelled", 480, 18, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_task_return_int
//
// [ result ] trans: nothing
//
func (v Task) ReturnInt(result int64) {
	iv, err := _I.Get1(3030, "Gio", "Task", "return_int", 480, 19, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewInt64Argument(result)
	args := []gi.Argument{arg_v, arg_result}
	iv.Call(args, nil, nil)
}

// g_task_return_pointer
//
// [ result ] trans: everything
//
// [ result_destroy ] trans: nothing
//
func (v Task) ReturnPointer(result unsafe.Pointer, result_destroy DestroyNotify) {
	iv, err := _I.Get1(3031, "Gio", "Task", "return_pointer", 480, 20, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var funcPtr unsafe.Pointer
	if result_destroy != nil {
		callableInfo := gi.GetCallableInfo("GLib", "DestroyNotify")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallDestroyNotify(result_destroy, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(result)
	arg_result_destroy := gi.NewPointerArgument(funcPtr)
	args := []gi.Argument{arg_v, arg_result, arg_result_destroy}
	iv.Call(args, nil, nil)
}

// g_task_set_check_cancellable
//
// [ check_cancellable ] trans: nothing
//
func (v Task) SetCheckCancellable(check_cancellable bool) {
	iv, err := _I.Get1(3032, "Gio", "Task", "set_check_cancellable", 480, 21, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_check_cancellable := gi.NewBoolArgument(check_cancellable)
	args := []gi.Argument{arg_v, arg_check_cancellable}
	iv.Call(args, nil, nil)
}

// g_task_set_priority
//
// [ priority ] trans: nothing
//
func (v Task) SetPriority(priority int32) {
	iv, err := _I.Get1(3033, "Gio", "Task", "set_priority", 480, 22, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_priority := gi.NewInt32Argument(priority)
	args := []gi.Argument{arg_v, arg_priority}
	iv.Call(args, nil, nil)
}

// g_task_set_return_on_cancel
//
// [ return_on_cancel ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Task) SetReturnOnCancel(return_on_cancel bool) (result bool) {
	iv, err := _I.Get1(3034, "Gio", "Task", "set_return_on_cancel", 480, 23, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_return_on_cancel := gi.NewBoolArgument(return_on_cancel)
	args := []gi.Argument{arg_v, arg_return_on_cancel}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_task_set_source_tag
//
// [ source_tag ] trans: nothing
//
func (v Task) SetSourceTag(source_tag unsafe.Pointer) {
	iv, err := _I.Get1(3035, "Gio", "Task", "set_source_tag", 480, 24, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_source_tag := gi.NewPointerArgument(source_tag)
	args := []gi.Argument{arg_v, arg_source_tag}
	iv.Call(args, nil, nil)
}

// g_task_set_task_data
//
// [ task_data ] trans: nothing
//
// [ task_data_destroy ] trans: nothing
//
func (v Task) SetTaskData(task_data unsafe.Pointer, task_data_destroy DestroyNotify) {
	iv, err := _I.Get1(3036, "Gio", "Task", "set_task_data", 480, 25, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var funcPtr unsafe.Pointer
	if task_data_destroy != nil {
		callableInfo := gi.GetCallableInfo("GLib", "DestroyNotify")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallDestroyNotify(task_data_destroy, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_task_data := gi.NewPointerArgument(task_data)
	arg_task_data_destroy := gi.NewPointerArgument(funcPtr)
	args := []gi.Argument{arg_v, arg_task_data, arg_task_data_destroy}
	iv.Call(args, nil, nil)
}

// ignore GType struct TaskClass

type TaskThreadFunc func(task Task, source_object Object, task_data unsafe.Pointer, cancellable Cancellable)

func CallTaskThreadFunc(fn TaskThreadFunc, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	task := WrapTask(*(*unsafe.Pointer)(args[0]))
	source_object := WrapObject(*(*unsafe.Pointer)(args[1]))
	task_data := *(*unsafe.Pointer)(args[2])
	cancellable := WrapCancellable(*(*unsafe.Pointer)(args[3]))
	fn(task, source_object, task_data, cancellable)
}

// Object TcpConnection
type TcpConnection struct {
	SocketConnection
}

func WrapTcpConnection(p unsafe.Pointer) (r TcpConnection) { r.P = p; return }

type ITcpConnection interface{ P_TcpConnection() unsafe.Pointer }

func (v TcpConnection) P_TcpConnection() unsafe.Pointer { return v.P }
func TcpConnectionGetType() gi.GType {
	ret := _I.GetGType1(402, "Gio", "TcpConnection")
	return ret
}

// g_tcp_connection_get_graceful_disconnect
//
// [ result ] trans: nothing
//
func (v TcpConnection) GetGracefulDisconnect() (result bool) {
	iv, err := _I.Get1(3037, "Gio", "TcpConnection", "get_graceful_disconnect", 483, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_tcp_connection_set_graceful_disconnect
//
// [ graceful_disconnect ] trans: nothing
//
func (v TcpConnection) SetGracefulDisconnect(graceful_disconnect bool) {
	iv, err := _I.Get1(3038, "Gio", "TcpConnection", "set_graceful_disconnect", 483, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_graceful_disconnect := gi.NewBoolArgument(graceful_disconnect)
	args := []gi.Argument{arg_v, arg_graceful_disconnect}
	iv.Call(args, nil, nil)
}

// ignore GType struct TcpConnectionClass

// ignore private struct TcpConnectionPrivate, type of TcpConnection is object

// Object TcpWrapperConnection
type TcpWrapperConnection struct {
	TcpConnection
}

func WrapTcpWrapperConnection(p unsafe.Pointer) (r TcpWrapperConnection) { r.P = p; return }

type ITcpWrapperConnection interface{ P_TcpWrapperConnection() unsafe.Pointer }

func (v TcpWrapperConnection) P_TcpWrapperConnection() unsafe.Pointer { return v.P }
func TcpWrapperConnectionGetType() gi.GType {
	ret := _I.GetGType1(403, "Gio", "TcpWrapperConnection")
	return ret
}

// g_tcp_wrapper_connection_new
//
// [ base_io_stream ] trans: nothing
//
// [ socket ] trans: nothing
//
// [ result ] trans: everything
//
func NewTcpWrapperConnection(base_io_stream IIOStream, socket ISocket) (result TcpWrapperConnection) {
	iv, err := _I.Get1(3039, "Gio", "TcpWrapperConnection", "new", 486, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if base_io_stream != nil {
		tmp = base_io_stream.P_IOStream()
	}
	var tmp1 unsafe.Pointer
	if socket != nil {
		tmp1 = socket.P_Socket()
	}
	arg_base_io_stream := gi.NewPointerArgument(tmp)
	arg_socket := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_base_io_stream, arg_socket}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_tcp_wrapper_connection_get_base_io_stream
//
// [ result ] trans: nothing
//
func (v TcpWrapperConnection) GetBaseIoStream() (result IOStream) {
	iv, err := _I.Get1(3040, "Gio", "TcpWrapperConnection", "get_base_io_stream", 486, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct TcpWrapperConnectionClass

// ignore private struct TcpWrapperConnectionPrivate, type of TcpWrapperConnection is object

// Object TestDBus
type TestDBus struct {
	Object
}

func WrapTestDBus(p unsafe.Pointer) (r TestDBus) { r.P = p; return }

type ITestDBus interface{ P_TestDBus() unsafe.Pointer }

func (v TestDBus) P_TestDBus() unsafe.Pointer { return v.P }
func TestDBusGetType() gi.GType {
	ret := _I.GetGType1(404, "Gio", "TestDBus")
	return ret
}

// g_test_dbus_new
//
// [ flags ] trans: nothing
//
// [ result ] trans: everything
//
func NewTestDBus(flags TestDBusFlags) (result TestDBus) {
	iv, err := _I.Get1(3041, "Gio", "TestDBus", "new", 489, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_flags}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_test_dbus_unset
//
func TestDBusUnset1() {
	iv, err := _I.Get1(3042, "Gio", "TestDBus", "unset", 489, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	iv.Call(nil, nil, nil)
}

// g_test_dbus_add_service_dir
//
// [ path ] trans: nothing
//
func (v TestDBus) AddServiceDir(path string) {
	iv, err := _I.Get1(3043, "Gio", "TestDBus", "add_service_dir", 489, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewStringArgument(c_path)
	args := []gi.Argument{arg_v, arg_path}
	iv.Call(args, nil, nil)
	gi.Free(c_path)
}

// g_test_dbus_down
//
func (v TestDBus) Down() {
	iv, err := _I.Get1(3044, "Gio", "TestDBus", "down", 489, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_test_dbus_get_bus_address
//
// [ result ] trans: nothing
//
func (v TestDBus) GetBusAddress() (result string) {
	iv, err := _I.Get1(3045, "Gio", "TestDBus", "get_bus_address", 489, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_test_dbus_get_flags
//
// [ result ] trans: nothing
//
func (v TestDBus) GetFlags() (result TestDBusFlags) {
	iv, err := _I.Get1(3046, "Gio", "TestDBus", "get_flags", 489, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = TestDBusFlags(ret.Int())
	return
}

// g_test_dbus_stop
//
func (v TestDBus) Stop() {
	iv, err := _I.Get1(3047, "Gio", "TestDBus", "stop", 489, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_test_dbus_up
//
func (v TestDBus) Up() {
	iv, err := _I.Get1(3048, "Gio", "TestDBus", "up", 489, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// Flags TestDBusFlags
type TestDBusFlags int

const (
	TestDBusFlagsNone TestDBusFlags = 0
)

func TestDBusFlagsGetType() gi.GType {
	ret := _I.GetGType1(405, "Gio", "TestDBusFlags")
	return ret
}

// Object ThemedIcon
type ThemedIcon struct {
	IconIfc
	Object
}

func WrapThemedIcon(p unsafe.Pointer) (r ThemedIcon) { r.P = p; return }

type IThemedIcon interface{ P_ThemedIcon() unsafe.Pointer }

func (v ThemedIcon) P_ThemedIcon() unsafe.Pointer { return v.P }
func (v ThemedIcon) P_Icon() unsafe.Pointer       { return v.P }
func ThemedIconGetType() gi.GType {
	ret := _I.GetGType1(406, "Gio", "ThemedIcon")
	return ret
}

// g_themed_icon_new
//
// [ iconname ] trans: nothing
//
// [ result ] trans: everything
//
func NewThemedIcon(iconname string) (result ThemedIcon) {
	iv, err := _I.Get1(3049, "Gio", "ThemedIcon", "new", 491, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_iconname := gi.CString(iconname)
	arg_iconname := gi.NewStringArgument(c_iconname)
	args := []gi.Argument{arg_iconname}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_iconname)
	result.P = ret.Pointer()
	return
}

// g_themed_icon_new_from_names
//
// [ iconnames ] trans: nothing
//
// [ len1 ] trans: nothing
//
// [ result ] trans: everything
//
func NewThemedIconFromNames(iconnames gi.CStrArray, len1 int32) (result ThemedIcon) {
	iv, err := _I.Get1(3050, "Gio", "ThemedIcon", "new_from_names", 491, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_iconnames := gi.NewPointerArgument(iconnames.P)
	arg_len1 := gi.NewInt32Argument(len1)
	args := []gi.Argument{arg_iconnames, arg_len1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_themed_icon_new_with_default_fallbacks
//
// [ iconname ] trans: nothing
//
// [ result ] trans: everything
//
func NewThemedIconWithDefaultFallbacks(iconname string) (result ThemedIcon) {
	iv, err := _I.Get1(3051, "Gio", "ThemedIcon", "new_with_default_fallbacks", 491, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_iconname := gi.CString(iconname)
	arg_iconname := gi.NewStringArgument(c_iconname)
	args := []gi.Argument{arg_iconname}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_iconname)
	result.P = ret.Pointer()
	return
}

// g_themed_icon_append_name
//
// [ iconname ] trans: nothing
//
func (v ThemedIcon) AppendName(iconname string) {
	iv, err := _I.Get1(3052, "Gio", "ThemedIcon", "append_name", 491, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_iconname := gi.CString(iconname)
	arg_v := gi.NewPointerArgument(v.P)
	arg_iconname := gi.NewStringArgument(c_iconname)
	args := []gi.Argument{arg_v, arg_iconname}
	iv.Call(args, nil, nil)
	gi.Free(c_iconname)
}

// g_themed_icon_get_names
//
// [ result ] trans: nothing
//
func (v ThemedIcon) GetNames() (result gi.CStrArray) {
	iv, err := _I.Get1(3053, "Gio", "ThemedIcon", "get_names", 491, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_themed_icon_prepend_name
//
// [ iconname ] trans: nothing
//
func (v ThemedIcon) PrependName(iconname string) {
	iv, err := _I.Get1(3054, "Gio", "ThemedIcon", "prepend_name", 491, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_iconname := gi.CString(iconname)
	arg_v := gi.NewPointerArgument(v.P)
	arg_iconname := gi.NewStringArgument(c_iconname)
	args := []gi.Argument{arg_v, arg_iconname}
	iv.Call(args, nil, nil)
	gi.Free(c_iconname)
}

// ignore GType struct ThemedIconClass

// Object ThreadedSocketService
type ThreadedSocketService struct {
	SocketService
}

func WrapThreadedSocketService(p unsafe.Pointer) (r ThreadedSocketService) { r.P = p; return }

type IThreadedSocketService interface{ P_ThreadedSocketService() unsafe.Pointer }

func (v ThreadedSocketService) P_ThreadedSocketService() unsafe.Pointer { return v.P }
func ThreadedSocketServiceGetType() gi.GType {
	ret := _I.GetGType1(407, "Gio", "ThreadedSocketService")
	return ret
}

// g_threaded_socket_service_new
//
// [ max_threads ] trans: nothing
//
// [ result ] trans: everything
//
func NewThreadedSocketService(max_threads int32) (result ThreadedSocketService) {
	iv, err := _I.Get1(3055, "Gio", "ThreadedSocketService", "new", 493, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_max_threads := gi.NewInt32Argument(max_threads)
	args := []gi.Argument{arg_max_threads}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct ThreadedSocketServiceClass

// ignore private struct ThreadedSocketServicePrivate, type of ThreadedSocketService is object

// Enum TlsAuthenticationMode
type TlsAuthenticationModeEnum int

const (
	TlsAuthenticationModeNone      TlsAuthenticationModeEnum = 0
	TlsAuthenticationModeRequested TlsAuthenticationModeEnum = 1
	TlsAuthenticationModeRequired  TlsAuthenticationModeEnum = 2
)

func TlsAuthenticationModeGetType() gi.GType {
	ret := _I.GetGType1(408, "Gio", "TlsAuthenticationMode")
	return ret
}

// Interface TlsBackend
type TlsBackend struct {
	TlsBackendIfc
	P unsafe.Pointer
}
type TlsBackendIfc struct{}
type ITlsBackend interface{ P_TlsBackend() unsafe.Pointer }

func (v TlsBackend) P_TlsBackend() unsafe.Pointer { return v.P }
func TlsBackendGetType() gi.GType {
	ret := _I.GetGType1(409, "Gio", "TlsBackend")
	return ret
}

// g_tls_backend_get_default
//
// [ result ] trans: nothing
//
func TlsBackendGetDefault1() (result TlsBackend) {
	iv, err := _I.Get1(3056, "Gio", "TlsBackend", "get_default", 497, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_tls_backend_get_certificate_type
//
// [ result ] trans: nothing
//
func (v *TlsBackendIfc) GetCertificateType() (result gi.GType) {
	iv, err := _I.Get1(3057, "Gio", "TlsBackend", "get_certificate_type", 497, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.GType(ret.Uint())
	return
}

// g_tls_backend_get_client_connection_type
//
// [ result ] trans: nothing
//
func (v *TlsBackendIfc) GetClientConnectionType() (result gi.GType) {
	iv, err := _I.Get1(3058, "Gio", "TlsBackend", "get_client_connection_type", 497, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.GType(ret.Uint())
	return
}

// g_tls_backend_get_default_database
//
// [ result ] trans: everything
//
func (v *TlsBackendIfc) GetDefaultDatabase() (result TlsDatabase) {
	iv, err := _I.Get1(3059, "Gio", "TlsBackend", "get_default_database", 497, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_tls_backend_get_dtls_client_connection_type
//
// [ result ] trans: nothing
//
func (v *TlsBackendIfc) GetDtlsClientConnectionType() (result gi.GType) {
	iv, err := _I.Get1(3060, "Gio", "TlsBackend", "get_dtls_client_connection_type", 497, 4, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.GType(ret.Uint())
	return
}

// g_tls_backend_get_dtls_server_connection_type
//
// [ result ] trans: nothing
//
func (v *TlsBackendIfc) GetDtlsServerConnectionType() (result gi.GType) {
	iv, err := _I.Get1(3061, "Gio", "TlsBackend", "get_dtls_server_connection_type", 497, 5, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.GType(ret.Uint())
	return
}

// g_tls_backend_get_file_database_type
//
// [ result ] trans: nothing
//
func (v *TlsBackendIfc) GetFileDatabaseType() (result gi.GType) {
	iv, err := _I.Get1(3062, "Gio", "TlsBackend", "get_file_database_type", 497, 6, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.GType(ret.Uint())
	return
}

// g_tls_backend_get_server_connection_type
//
// [ result ] trans: nothing
//
func (v *TlsBackendIfc) GetServerConnectionType() (result gi.GType) {
	iv, err := _I.Get1(3063, "Gio", "TlsBackend", "get_server_connection_type", 497, 7, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.GType(ret.Uint())
	return
}

// g_tls_backend_supports_dtls
//
// [ result ] trans: nothing
//
func (v *TlsBackendIfc) SupportsDtls() (result bool) {
	iv, err := _I.Get1(3064, "Gio", "TlsBackend", "supports_dtls", 497, 8, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_tls_backend_supports_tls
//
// [ result ] trans: nothing
//
func (v *TlsBackendIfc) SupportsTls() (result bool) {
	iv, err := _I.Get1(3065, "Gio", "TlsBackend", "supports_tls", 497, 9, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct TlsBackendInterface

// Object TlsCertificate
type TlsCertificate struct {
	Object
}

func WrapTlsCertificate(p unsafe.Pointer) (r TlsCertificate) { r.P = p; return }

type ITlsCertificate interface{ P_TlsCertificate() unsafe.Pointer }

func (v TlsCertificate) P_TlsCertificate() unsafe.Pointer { return v.P }
func TlsCertificateGetType() gi.GType {
	ret := _I.GetGType1(410, "Gio", "TlsCertificate")
	return ret
}

// g_tls_certificate_new_from_file
//
// [ file ] trans: nothing
//
// [ result ] trans: everything
//
func NewTlsCertificateFromFile(file string) (result TlsCertificate, err error) {
	iv, err := _I.Get1(3066, "Gio", "TlsCertificate", "new_from_file", 499, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_file := gi.CString(file)
	arg_file := gi.NewStringArgument(c_file)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_file, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_file)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_tls_certificate_new_from_files
//
// [ cert_file ] trans: nothing
//
// [ key_file ] trans: nothing
//
// [ result ] trans: everything
//
func NewTlsCertificateFromFiles(cert_file string, key_file string) (result TlsCertificate, err error) {
	iv, err := _I.Get1(3067, "Gio", "TlsCertificate", "new_from_files", 499, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_cert_file := gi.CString(cert_file)
	c_key_file := gi.CString(key_file)
	arg_cert_file := gi.NewStringArgument(c_cert_file)
	arg_key_file := gi.NewStringArgument(c_key_file)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_cert_file, arg_key_file, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_cert_file)
	gi.Free(c_key_file)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_tls_certificate_new_from_pem
//
// [ data ] trans: nothing
//
// [ length ] trans: nothing
//
// [ result ] trans: everything
//
func NewTlsCertificateFromPem(data string, length int64) (result TlsCertificate, err error) {
	iv, err := _I.Get1(3068, "Gio", "TlsCertificate", "new_from_pem", 499, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_data := gi.CString(data)
	arg_data := gi.NewStringArgument(c_data)
	arg_length := gi.NewInt64Argument(length)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_data, arg_length, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_data)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_tls_certificate_list_new_from_file
//
// [ file ] trans: nothing
//
// [ result ] trans: everything
//
func TlsCertificateListNewFromFile1(file string) (result List, err error) {
	iv, err := _I.Get1(3069, "Gio", "TlsCertificate", "list_new_from_file", 499, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_file := gi.CString(file)
	arg_file := gi.NewStringArgument(c_file)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_file, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_file)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_tls_certificate_get_issuer
//
// [ result ] trans: nothing
//
func (v TlsCertificate) GetIssuer() (result TlsCertificate) {
	iv, err := _I.Get1(3070, "Gio", "TlsCertificate", "get_issuer", 499, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_tls_certificate_is_same
//
// [ cert_two ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TlsCertificate) IsSame(cert_two ITlsCertificate) (result bool) {
	iv, err := _I.Get1(3071, "Gio", "TlsCertificate", "is_same", 499, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cert_two != nil {
		tmp = cert_two.P_TlsCertificate()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cert_two := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_cert_two}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_tls_certificate_verify
//
// [ identity ] trans: nothing
//
// [ trusted_ca ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TlsCertificate) Verify(identity ISocketConnectable, trusted_ca ITlsCertificate) (result TlsCertificateFlags) {
	iv, err := _I.Get1(3072, "Gio", "TlsCertificate", "verify", 499, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if identity != nil {
		tmp = identity.P_SocketConnectable()
	}
	var tmp1 unsafe.Pointer
	if trusted_ca != nil {
		tmp1 = trusted_ca.P_TlsCertificate()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_identity := gi.NewPointerArgument(tmp)
	arg_trusted_ca := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_v, arg_identity, arg_trusted_ca}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = TlsCertificateFlags(ret.Int())
	return
}

// ignore GType struct TlsCertificateClass

// Flags TlsCertificateFlags
type TlsCertificateFlags int

const (
	TlsCertificateFlagsUnknownCa    TlsCertificateFlags = 1
	TlsCertificateFlagsBadIdentity  TlsCertificateFlags = 2
	TlsCertificateFlagsNotActivated TlsCertificateFlags = 4
	TlsCertificateFlagsExpired      TlsCertificateFlags = 8
	TlsCertificateFlagsRevoked      TlsCertificateFlags = 16
	TlsCertificateFlagsInsecure     TlsCertificateFlags = 32
	TlsCertificateFlagsGenericError TlsCertificateFlags = 64
	TlsCertificateFlagsValidateAll  TlsCertificateFlags = 127
)

func TlsCertificateFlagsGetType() gi.GType {
	ret := _I.GetGType1(411, "Gio", "TlsCertificateFlags")
	return ret
}

// ignore private struct TlsCertificatePrivate, type of TlsCertificate is object

// Enum TlsCertificateRequestFlags
type TlsCertificateRequestFlagsEnum int

const (
	TlsCertificateRequestFlagsNone TlsCertificateRequestFlagsEnum = 0
)

func TlsCertificateRequestFlagsGetType() gi.GType {
	ret := _I.GetGType1(412, "Gio", "TlsCertificateRequestFlags")
	return ret
}

// Interface TlsClientConnection
type TlsClientConnection struct {
	TlsClientConnectionIfc
	P unsafe.Pointer
}
type TlsClientConnectionIfc struct{}
type ITlsClientConnection interface{ P_TlsClientConnection() unsafe.Pointer }

func (v TlsClientConnection) P_TlsClientConnection() unsafe.Pointer { return v.P }
func TlsClientConnectionGetType() gi.GType {
	ret := _I.GetGType1(413, "Gio", "TlsClientConnection")
	return ret
}

// g_tls_client_connection_new
//
// [ base_io_stream ] trans: nothing
//
// [ server_identity ] trans: nothing
//
// [ result ] trans: everything
//
func TlsClientConnectionNew1(base_io_stream IIOStream, server_identity ISocketConnectable) (result TlsClientConnection, err error) {
	iv, err := _I.Get1(3073, "Gio", "TlsClientConnection", "new", 504, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if base_io_stream != nil {
		tmp = base_io_stream.P_IOStream()
	}
	var tmp1 unsafe.Pointer
	if server_identity != nil {
		tmp1 = server_identity.P_SocketConnectable()
	}
	arg_base_io_stream := gi.NewPointerArgument(tmp)
	arg_server_identity := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_base_io_stream, arg_server_identity, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_tls_client_connection_copy_session_state
//
// [ source ] trans: nothing
//
func (v *TlsClientConnectionIfc) CopySessionState(source ITlsClientConnection) {
	iv, err := _I.Get1(3074, "Gio", "TlsClientConnection", "copy_session_state", 504, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if source != nil {
		tmp = source.P_TlsClientConnection()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_source := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_source}
	iv.Call(args, nil, nil)
}

// g_tls_client_connection_get_accepted_cas
//
// [ result ] trans: everything
//
func (v *TlsClientConnectionIfc) GetAcceptedCas() (result List) {
	iv, err := _I.Get1(3075, "Gio", "TlsClientConnection", "get_accepted_cas", 504, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_tls_client_connection_get_server_identity
//
// [ result ] trans: nothing
//
func (v *TlsClientConnectionIfc) GetServerIdentity() (result SocketConnectable) {
	iv, err := _I.Get1(3076, "Gio", "TlsClientConnection", "get_server_identity", 504, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// g_tls_client_connection_get_use_ssl3
//
// [ result ] trans: nothing
//
func (v *TlsClientConnectionIfc) GetUseSsl3() (result bool) {
	iv, err := _I.Get1(3077, "Gio", "TlsClientConnection", "get_use_ssl3", 504, 4, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_tls_client_connection_get_validation_flags
//
// [ result ] trans: nothing
//
func (v *TlsClientConnectionIfc) GetValidationFlags() (result TlsCertificateFlags) {
	iv, err := _I.Get1(3078, "Gio", "TlsClientConnection", "get_validation_flags", 504, 5, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = TlsCertificateFlags(ret.Int())
	return
}

// g_tls_client_connection_set_server_identity
//
// [ identity ] trans: nothing
//
func (v *TlsClientConnectionIfc) SetServerIdentity(identity ISocketConnectable) {
	iv, err := _I.Get1(3079, "Gio", "TlsClientConnection", "set_server_identity", 504, 6, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if identity != nil {
		tmp = identity.P_SocketConnectable()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_identity := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_identity}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// g_tls_client_connection_set_use_ssl3
//
// [ use_ssl3 ] trans: nothing
//
func (v *TlsClientConnectionIfc) SetUseSsl3(use_ssl3 bool) {
	iv, err := _I.Get1(3080, "Gio", "TlsClientConnection", "set_use_ssl3", 504, 7, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_use_ssl3 := gi.NewBoolArgument(use_ssl3)
	args := []gi.Argument{arg_v, arg_use_ssl3}
	iv.Call(args, nil, nil)
}

// g_tls_client_connection_set_validation_flags
//
// [ flags ] trans: nothing
//
func (v *TlsClientConnectionIfc) SetValidationFlags(flags TlsCertificateFlags) {
	iv, err := _I.Get1(3081, "Gio", "TlsClientConnection", "set_validation_flags", 504, 8, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_flags}
	iv.Call(args, nil, nil)
}

// ignore GType struct TlsClientConnectionInterface

// Object TlsConnection
type TlsConnection struct {
	IOStream
}

func WrapTlsConnection(p unsafe.Pointer) (r TlsConnection) { r.P = p; return }

type ITlsConnection interface{ P_TlsConnection() unsafe.Pointer }

func (v TlsConnection) P_TlsConnection() unsafe.Pointer { return v.P }
func TlsConnectionGetType() gi.GType {
	ret := _I.GetGType1(414, "Gio", "TlsConnection")
	return ret
}

// g_tls_connection_emit_accept_certificate
//
// [ peer_cert ] trans: nothing
//
// [ errors ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TlsConnection) EmitAcceptCertificate(peer_cert ITlsCertificate, errors TlsCertificateFlags) (result bool) {
	iv, err := _I.Get1(3082, "Gio", "TlsConnection", "emit_accept_certificate", 506, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if peer_cert != nil {
		tmp = peer_cert.P_TlsCertificate()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_peer_cert := gi.NewPointerArgument(tmp)
	arg_errors := gi.NewIntArgument(int(errors))
	args := []gi.Argument{arg_v, arg_peer_cert, arg_errors}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_tls_connection_get_certificate
//
// [ result ] trans: nothing
//
func (v TlsConnection) GetCertificate() (result TlsCertificate) {
	iv, err := _I.Get1(3083, "Gio", "TlsConnection", "get_certificate", 506, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_tls_connection_get_database
//
// [ result ] trans: nothing
//
func (v TlsConnection) GetDatabase() (result TlsDatabase) {
	iv, err := _I.Get1(3084, "Gio", "TlsConnection", "get_database", 506, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_tls_connection_get_interaction
//
// [ result ] trans: nothing
//
func (v TlsConnection) GetInteraction() (result TlsInteraction) {
	iv, err := _I.Get1(3085, "Gio", "TlsConnection", "get_interaction", 506, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_tls_connection_get_peer_certificate
//
// [ result ] trans: nothing
//
func (v TlsConnection) GetPeerCertificate() (result TlsCertificate) {
	iv, err := _I.Get1(3086, "Gio", "TlsConnection", "get_peer_certificate", 506, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_tls_connection_get_peer_certificate_errors
//
// [ result ] trans: nothing
//
func (v TlsConnection) GetPeerCertificateErrors() (result TlsCertificateFlags) {
	iv, err := _I.Get1(3087, "Gio", "TlsConnection", "get_peer_certificate_errors", 506, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = TlsCertificateFlags(ret.Int())
	return
}

// g_tls_connection_get_rehandshake_mode
//
// [ result ] trans: nothing
//
func (v TlsConnection) GetRehandshakeMode() (result TlsRehandshakeModeEnum) {
	iv, err := _I.Get1(3088, "Gio", "TlsConnection", "get_rehandshake_mode", 506, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = TlsRehandshakeModeEnum(ret.Int())
	return
}

// g_tls_connection_get_require_close_notify
//
// [ result ] trans: nothing
//
func (v TlsConnection) GetRequireCloseNotify() (result bool) {
	iv, err := _I.Get1(3089, "Gio", "TlsConnection", "get_require_close_notify", 506, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// g_tls_connection_get_use_system_certdb
//
// [ result ] trans: nothing
//
func (v TlsConnection) GetUseSystemCertdb() (result bool) {
	iv, err := _I.Get1(3090, "Gio", "TlsConnection", "get_use_system_certdb", 506, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_tls_connection_handshake
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TlsConnection) Handshake(cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(3091, "Gio", "TlsConnection", "handshake", 506, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_tls_connection_handshake_async
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v TlsConnection) HandshakeAsync(io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(3092, "Gio", "TlsConnection", "handshake_async", 506, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_tls_connection_handshake_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v TlsConnection) HandshakeFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(3093, "Gio", "TlsConnection", "handshake_finish", 506, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_tls_connection_set_certificate
//
// [ certificate ] trans: nothing
//
func (v TlsConnection) SetCertificate(certificate ITlsCertificate) {
	iv, err := _I.Get1(3094, "Gio", "TlsConnection", "set_certificate", 506, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if certificate != nil {
		tmp = certificate.P_TlsCertificate()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_certificate := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_certificate}
	iv.Call(args, nil, nil)
}

// g_tls_connection_set_database
//
// [ database ] trans: nothing
//
func (v TlsConnection) SetDatabase(database ITlsDatabase) {
	iv, err := _I.Get1(3095, "Gio", "TlsConnection", "set_database", 506, 13, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if database != nil {
		tmp = database.P_TlsDatabase()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_database := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_database}
	iv.Call(args, nil, nil)
}

// g_tls_connection_set_interaction
//
// [ interaction ] trans: nothing
//
func (v TlsConnection) SetInteraction(interaction ITlsInteraction) {
	iv, err := _I.Get1(3096, "Gio", "TlsConnection", "set_interaction", 506, 14, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if interaction != nil {
		tmp = interaction.P_TlsInteraction()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_interaction := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_interaction}
	iv.Call(args, nil, nil)
}

// g_tls_connection_set_rehandshake_mode
//
// [ mode ] trans: nothing
//
func (v TlsConnection) SetRehandshakeMode(mode TlsRehandshakeModeEnum) {
	iv, err := _I.Get1(3097, "Gio", "TlsConnection", "set_rehandshake_mode", 506, 15, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_mode := gi.NewIntArgument(int(mode))
	args := []gi.Argument{arg_v, arg_mode}
	iv.Call(args, nil, nil)
}

// g_tls_connection_set_require_close_notify
//
// [ require_close_notify ] trans: nothing
//
func (v TlsConnection) SetRequireCloseNotify(require_close_notify bool) {
	iv, err := _I.Get1(3098, "Gio", "TlsConnection", "set_require_close_notify", 506, 16, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_require_close_notify := gi.NewBoolArgument(require_close_notify)
	args := []gi.Argument{arg_v, arg_require_close_notify}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// g_tls_connection_set_use_system_certdb
//
// [ use_system_certdb ] trans: nothing
//
func (v TlsConnection) SetUseSystemCertdb(use_system_certdb bool) {
	iv, err := _I.Get1(3099, "Gio", "TlsConnection", "set_use_system_certdb", 506, 17, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_use_system_certdb := gi.NewBoolArgument(use_system_certdb)
	args := []gi.Argument{arg_v, arg_use_system_certdb}
	iv.Call(args, nil, nil)
}

// ignore GType struct TlsConnectionClass

// ignore private struct TlsConnectionPrivate, type of TlsConnection is object

// Object TlsDatabase
type TlsDatabase struct {
	Object
}

func WrapTlsDatabase(p unsafe.Pointer) (r TlsDatabase) { r.P = p; return }

type ITlsDatabase interface{ P_TlsDatabase() unsafe.Pointer }

func (v TlsDatabase) P_TlsDatabase() unsafe.Pointer { return v.P }
func TlsDatabaseGetType() gi.GType {
	ret := _I.GetGType1(415, "Gio", "TlsDatabase")
	return ret
}

// g_tls_database_create_certificate_handle
//
// [ certificate ] trans: nothing
//
// [ result ] trans: everything
//
func (v TlsDatabase) CreateCertificateHandle(certificate ITlsCertificate) (result string) {
	iv, err := _I.Get1(3100, "Gio", "TlsDatabase", "create_certificate_handle", 509, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if certificate != nil {
		tmp = certificate.P_TlsCertificate()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_certificate := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_certificate}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_tls_database_lookup_certificate_for_handle
//
// [ handle ] trans: nothing
//
// [ interaction ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v TlsDatabase) LookupCertificateForHandle(handle string, interaction ITlsInteraction, flags TlsDatabaseLookupFlagsEnum, cancellable ICancellable) (result TlsCertificate, err error) {
	iv, err := _I.Get1(3101, "Gio", "TlsDatabase", "lookup_certificate_for_handle", 509, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_handle := gi.CString(handle)
	var tmp unsafe.Pointer
	if interaction != nil {
		tmp = interaction.P_TlsInteraction()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_handle := gi.NewStringArgument(c_handle)
	arg_interaction := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_handle, arg_interaction, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_handle)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_tls_database_lookup_certificate_for_handle_async
//
// [ handle ] trans: nothing
//
// [ interaction ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v TlsDatabase) LookupCertificateForHandleAsync(handle string, interaction ITlsInteraction, flags TlsDatabaseLookupFlagsEnum, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(3102, "Gio", "TlsDatabase", "lookup_certificate_for_handle_async", 509, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_handle := gi.CString(handle)
	var tmp unsafe.Pointer
	if interaction != nil {
		tmp = interaction.P_TlsInteraction()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_handle := gi.NewStringArgument(c_handle)
	arg_interaction := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_handle, arg_interaction, arg_flags, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_handle)
}

// g_tls_database_lookup_certificate_for_handle_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v TlsDatabase) LookupCertificateForHandleFinish(result IAsyncResult) (result1 TlsCertificate, err error) {
	iv, err := _I.Get1(3103, "Gio", "TlsDatabase", "lookup_certificate_for_handle_finish", 509, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// g_tls_database_lookup_certificate_issuer
//
// [ certificate ] trans: nothing
//
// [ interaction ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v TlsDatabase) LookupCertificateIssuer(certificate ITlsCertificate, interaction ITlsInteraction, flags TlsDatabaseLookupFlagsEnum, cancellable ICancellable) (result TlsCertificate, err error) {
	iv, err := _I.Get1(3104, "Gio", "TlsDatabase", "lookup_certificate_issuer", 509, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if certificate != nil {
		tmp = certificate.P_TlsCertificate()
	}
	var tmp1 unsafe.Pointer
	if interaction != nil {
		tmp1 = interaction.P_TlsInteraction()
	}
	var tmp2 unsafe.Pointer
	if cancellable != nil {
		tmp2 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_certificate := gi.NewPointerArgument(tmp)
	arg_interaction := gi.NewPointerArgument(tmp1)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp2)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_certificate, arg_interaction, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_tls_database_lookup_certificate_issuer_async
//
// [ certificate ] trans: nothing
//
// [ interaction ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v TlsDatabase) LookupCertificateIssuerAsync(certificate ITlsCertificate, interaction ITlsInteraction, flags TlsDatabaseLookupFlagsEnum, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(3105, "Gio", "TlsDatabase", "lookup_certificate_issuer_async", 509, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if certificate != nil {
		tmp = certificate.P_TlsCertificate()
	}
	var tmp1 unsafe.Pointer
	if interaction != nil {
		tmp1 = interaction.P_TlsInteraction()
	}
	var tmp2 unsafe.Pointer
	if cancellable != nil {
		tmp2 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_certificate := gi.NewPointerArgument(tmp)
	arg_interaction := gi.NewPointerArgument(tmp1)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp2)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_certificate, arg_interaction, arg_flags, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_tls_database_lookup_certificate_issuer_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v TlsDatabase) LookupCertificateIssuerFinish(result IAsyncResult) (result1 TlsCertificate, err error) {
	iv, err := _I.Get1(3106, "Gio", "TlsDatabase", "lookup_certificate_issuer_finish", 509, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// g_tls_database_lookup_certificates_issued_by
//
// [ issuer_raw_dn ] trans: nothing
//
// [ interaction ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v TlsDatabase) LookupCertificatesIssuedBy(issuer_raw_dn ByteArray, interaction ITlsInteraction, flags TlsDatabaseLookupFlagsEnum, cancellable ICancellable) (result List, err error) {
	iv, err := _I.Get1(3107, "Gio", "TlsDatabase", "lookup_certificates_issued_by", 509, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if interaction != nil {
		tmp = interaction.P_TlsInteraction()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_issuer_raw_dn := gi.NewPointerArgument(issuer_raw_dn.P)
	arg_interaction := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_issuer_raw_dn, arg_interaction, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_tls_database_lookup_certificates_issued_by_async
//
// [ issuer_raw_dn ] trans: nothing
//
// [ interaction ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v TlsDatabase) LookupCertificatesIssuedByAsync(issuer_raw_dn ByteArray, interaction ITlsInteraction, flags TlsDatabaseLookupFlagsEnum, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(3108, "Gio", "TlsDatabase", "lookup_certificates_issued_by_async", 509, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if interaction != nil {
		tmp = interaction.P_TlsInteraction()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_issuer_raw_dn := gi.NewPointerArgument(issuer_raw_dn.P)
	arg_interaction := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_issuer_raw_dn, arg_interaction, arg_flags, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_tls_database_lookup_certificates_issued_by_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v TlsDatabase) LookupCertificatesIssuedByFinish(result IAsyncResult) (result1 List, err error) {
	iv, err := _I.Get1(3109, "Gio", "TlsDatabase", "lookup_certificates_issued_by_finish", 509, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// g_tls_database_verify_chain
//
// [ chain ] trans: nothing
//
// [ purpose ] trans: nothing
//
// [ identity ] trans: nothing
//
// [ interaction ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TlsDatabase) VerifyChain(chain ITlsCertificate, purpose string, identity ISocketConnectable, interaction ITlsInteraction, flags TlsDatabaseVerifyFlags, cancellable ICancellable) (result TlsCertificateFlags, err error) {
	iv, err := _I.Get1(3110, "Gio", "TlsDatabase", "verify_chain", 509, 10, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if chain != nil {
		tmp = chain.P_TlsCertificate()
	}
	c_purpose := gi.CString(purpose)
	var tmp1 unsafe.Pointer
	if identity != nil {
		tmp1 = identity.P_SocketConnectable()
	}
	var tmp2 unsafe.Pointer
	if interaction != nil {
		tmp2 = interaction.P_TlsInteraction()
	}
	var tmp3 unsafe.Pointer
	if cancellable != nil {
		tmp3 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_chain := gi.NewPointerArgument(tmp)
	arg_purpose := gi.NewStringArgument(c_purpose)
	arg_identity := gi.NewPointerArgument(tmp1)
	arg_interaction := gi.NewPointerArgument(tmp2)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp3)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_chain, arg_purpose, arg_identity, arg_interaction, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_purpose)
	err = gi.ToError(outArgs[0].Pointer())
	result = TlsCertificateFlags(ret.Int())
	return
}

// g_tls_database_verify_chain_async
//
// [ chain ] trans: nothing
//
// [ purpose ] trans: nothing
//
// [ identity ] trans: nothing
//
// [ interaction ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v TlsDatabase) VerifyChainAsync(chain ITlsCertificate, purpose string, identity ISocketConnectable, interaction ITlsInteraction, flags TlsDatabaseVerifyFlags, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(3111, "Gio", "TlsDatabase", "verify_chain_async", 509, 11, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if chain != nil {
		tmp = chain.P_TlsCertificate()
	}
	c_purpose := gi.CString(purpose)
	var tmp1 unsafe.Pointer
	if identity != nil {
		tmp1 = identity.P_SocketConnectable()
	}
	var tmp2 unsafe.Pointer
	if interaction != nil {
		tmp2 = interaction.P_TlsInteraction()
	}
	var tmp3 unsafe.Pointer
	if cancellable != nil {
		tmp3 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_chain := gi.NewPointerArgument(tmp)
	arg_purpose := gi.NewStringArgument(c_purpose)
	arg_identity := gi.NewPointerArgument(tmp1)
	arg_interaction := gi.NewPointerArgument(tmp2)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp3)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_chain, arg_purpose, arg_identity, arg_interaction, arg_flags, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_purpose)
}

// g_tls_database_verify_chain_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v TlsDatabase) VerifyChainFinish(result IAsyncResult) (result1 TlsCertificateFlags, err error) {
	iv, err := _I.Get1(3112, "Gio", "TlsDatabase", "verify_chain_finish", 509, 12, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = TlsCertificateFlags(ret.Int())
	return
}

// ignore GType struct TlsDatabaseClass

// Enum TlsDatabaseLookupFlags
type TlsDatabaseLookupFlagsEnum int

const (
	TlsDatabaseLookupFlagsNone    TlsDatabaseLookupFlagsEnum = 0
	TlsDatabaseLookupFlagsKeypair TlsDatabaseLookupFlagsEnum = 1
)

func TlsDatabaseLookupFlagsGetType() gi.GType {
	ret := _I.GetGType1(416, "Gio", "TlsDatabaseLookupFlags")
	return ret
}

// ignore private struct TlsDatabasePrivate, type of TlsDatabase is object

// Flags TlsDatabaseVerifyFlags
type TlsDatabaseVerifyFlags int

const (
	TlsDatabaseVerifyFlagsNone TlsDatabaseVerifyFlags = 0
)

func TlsDatabaseVerifyFlagsGetType() gi.GType {
	ret := _I.GetGType1(417, "Gio", "TlsDatabaseVerifyFlags")
	return ret
}

// Enum TlsError
type TlsErrorEnum int

const (
	TlsErrorUnavailable         TlsErrorEnum = 0
	TlsErrorMisc                TlsErrorEnum = 1
	TlsErrorBadCertificate      TlsErrorEnum = 2
	TlsErrorNotTls              TlsErrorEnum = 3
	TlsErrorHandshake           TlsErrorEnum = 4
	TlsErrorCertificateRequired TlsErrorEnum = 5
	TlsErrorEof                 TlsErrorEnum = 6
)

func TlsErrorGetType() gi.GType {
	ret := _I.GetGType1(418, "Gio", "TlsError")
	return ret
}

// Interface TlsFileDatabase
type TlsFileDatabase struct {
	TlsFileDatabaseIfc
	P unsafe.Pointer
}
type TlsFileDatabaseIfc struct{}
type ITlsFileDatabase interface{ P_TlsFileDatabase() unsafe.Pointer }

func (v TlsFileDatabase) P_TlsFileDatabase() unsafe.Pointer { return v.P }
func TlsFileDatabaseGetType() gi.GType {
	ret := _I.GetGType1(419, "Gio", "TlsFileDatabase")
	return ret
}

// g_tls_file_database_new
//
// [ anchors ] trans: nothing
//
// [ result ] trans: everything
//
func TlsFileDatabaseNew1(anchors string) (result TlsFileDatabase, err error) {
	iv, err := _I.Get1(3113, "Gio", "TlsFileDatabase", "new", 515, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_anchors := gi.CString(anchors)
	arg_anchors := gi.NewStringArgument(c_anchors)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_anchors, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_anchors)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// ignore GType struct TlsFileDatabaseInterface

// Object TlsInteraction
type TlsInteraction struct {
	Object
}

func WrapTlsInteraction(p unsafe.Pointer) (r TlsInteraction) { r.P = p; return }

type ITlsInteraction interface{ P_TlsInteraction() unsafe.Pointer }

func (v TlsInteraction) P_TlsInteraction() unsafe.Pointer { return v.P }
func TlsInteractionGetType() gi.GType {
	ret := _I.GetGType1(420, "Gio", "TlsInteraction")
	return ret
}

// g_tls_interaction_ask_password
//
// [ password ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TlsInteraction) AskPassword(password ITlsPassword, cancellable ICancellable) (result TlsInteractionResultEnum, err error) {
	iv, err := _I.Get1(3114, "Gio", "TlsInteraction", "ask_password", 517, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if password != nil {
		tmp = password.P_TlsPassword()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_password := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_password, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = TlsInteractionResultEnum(ret.Int())
	return
}

// g_tls_interaction_ask_password_async
//
// [ password ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v TlsInteraction) AskPasswordAsync(password ITlsPassword, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(3115, "Gio", "TlsInteraction", "ask_password_async", 517, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if password != nil {
		tmp = password.P_TlsPassword()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_password := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_password, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_tls_interaction_ask_password_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v TlsInteraction) AskPasswordFinish(result IAsyncResult) (result1 TlsInteractionResultEnum, err error) {
	iv, err := _I.Get1(3116, "Gio", "TlsInteraction", "ask_password_finish", 517, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = TlsInteractionResultEnum(ret.Int())
	return
}

// g_tls_interaction_invoke_ask_password
//
// [ password ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TlsInteraction) InvokeAskPassword(password ITlsPassword, cancellable ICancellable) (result TlsInteractionResultEnum, err error) {
	iv, err := _I.Get1(3117, "Gio", "TlsInteraction", "invoke_ask_password", 517, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if password != nil {
		tmp = password.P_TlsPassword()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_password := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_password, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = TlsInteractionResultEnum(ret.Int())
	return
}

// g_tls_interaction_invoke_request_certificate
//
// [ connection ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TlsInteraction) InvokeRequestCertificate(connection ITlsConnection, flags TlsCertificateRequestFlagsEnum, cancellable ICancellable) (result TlsInteractionResultEnum, err error) {
	iv, err := _I.Get1(3118, "Gio", "TlsInteraction", "invoke_request_certificate", 517, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_TlsConnection()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connection := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_connection, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = TlsInteractionResultEnum(ret.Int())
	return
}

// g_tls_interaction_request_certificate
//
// [ connection ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TlsInteraction) RequestCertificate(connection ITlsConnection, flags TlsCertificateRequestFlagsEnum, cancellable ICancellable) (result TlsInteractionResultEnum, err error) {
	iv, err := _I.Get1(3119, "Gio", "TlsInteraction", "request_certificate", 517, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_TlsConnection()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connection := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_connection, arg_flags, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = TlsInteractionResultEnum(ret.Int())
	return
}

// g_tls_interaction_request_certificate_async
//
// [ connection ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v TlsInteraction) RequestCertificateAsync(connection ITlsConnection, flags TlsCertificateRequestFlagsEnum, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(3120, "Gio", "TlsInteraction", "request_certificate_async", 517, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_TlsConnection()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_connection := gi.NewPointerArgument(tmp)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_connection, arg_flags, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_tls_interaction_request_certificate_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v TlsInteraction) RequestCertificateFinish(result IAsyncResult) (result1 TlsInteractionResultEnum, err error) {
	iv, err := _I.Get1(3121, "Gio", "TlsInteraction", "request_certificate_finish", 517, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = TlsInteractionResultEnum(ret.Int())
	return
}

// ignore GType struct TlsInteractionClass

// ignore private struct TlsInteractionPrivate, type of TlsInteraction is object

// Enum TlsInteractionResult
type TlsInteractionResultEnum int

const (
	TlsInteractionResultUnhandled TlsInteractionResultEnum = 0
	TlsInteractionResultHandled   TlsInteractionResultEnum = 1
	TlsInteractionResultFailed    TlsInteractionResultEnum = 2
)

func TlsInteractionResultGetType() gi.GType {
	ret := _I.GetGType1(421, "Gio", "TlsInteractionResult")
	return ret
}

// Object TlsPassword
type TlsPassword struct {
	Object
}

func WrapTlsPassword(p unsafe.Pointer) (r TlsPassword) { r.P = p; return }

type ITlsPassword interface{ P_TlsPassword() unsafe.Pointer }

func (v TlsPassword) P_TlsPassword() unsafe.Pointer { return v.P }
func TlsPasswordGetType() gi.GType {
	ret := _I.GetGType1(422, "Gio", "TlsPassword")
	return ret
}

// g_tls_password_new
//
// [ flags ] trans: nothing
//
// [ description ] trans: nothing
//
// [ result ] trans: everything
//
func NewTlsPassword(flags TlsPasswordFlags, description string) (result TlsPassword) {
	iv, err := _I.Get1(3122, "Gio", "TlsPassword", "new", 521, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_description := gi.CString(description)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_description := gi.NewStringArgument(c_description)
	args := []gi.Argument{arg_flags, arg_description}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_description)
	result.P = ret.Pointer()
	return
}

// g_tls_password_get_description
//
// [ result ] trans: nothing
//
func (v TlsPassword) GetDescription() (result string) {
	iv, err := _I.Get1(3123, "Gio", "TlsPassword", "get_description", 521, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_tls_password_get_flags
//
// [ result ] trans: nothing
//
func (v TlsPassword) GetFlags() (result TlsPasswordFlags) {
	iv, err := _I.Get1(3124, "Gio", "TlsPassword", "get_flags", 521, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = TlsPasswordFlags(ret.Int())
	return
}

// g_tls_password_get_value
//
// [ length ] trans: nothing
//
// [ result ] trans: nothing
//
func (v TlsPassword) GetValue(length uint64) (result uint8) {
	iv, err := _I.Get1(3125, "Gio", "TlsPassword", "get_value", 521, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_length := gi.NewUint64Argument(length)
	args := []gi.Argument{arg_v, arg_length}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint8()
	return
}

// g_tls_password_get_warning
//
// [ result ] trans: nothing
//
func (v TlsPassword) GetWarning() (result string) {
	iv, err := _I.Get1(3126, "Gio", "TlsPassword", "get_warning", 521, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_tls_password_set_description
//
// [ description ] trans: nothing
//
func (v TlsPassword) SetDescription(description string) {
	iv, err := _I.Get1(3127, "Gio", "TlsPassword", "set_description", 521, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_description := gi.CString(description)
	arg_v := gi.NewPointerArgument(v.P)
	arg_description := gi.NewStringArgument(c_description)
	args := []gi.Argument{arg_v, arg_description}
	iv.Call(args, nil, nil)
	gi.Free(c_description)
}

// g_tls_password_set_flags
//
// [ flags ] trans: nothing
//
func (v TlsPassword) SetFlags(flags TlsPasswordFlags) {
	iv, err := _I.Get1(3128, "Gio", "TlsPassword", "set_flags", 521, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_flags := gi.NewIntArgument(int(flags))
	args := []gi.Argument{arg_v, arg_flags}
	iv.Call(args, nil, nil)
}

// g_tls_password_set_value
//
// [ value ] trans: nothing
//
// [ length ] trans: nothing
//
func (v TlsPassword) SetValue(value gi.Uint8Array, length int64) {
	iv, err := _I.Get1(3129, "Gio", "TlsPassword", "set_value", 521, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewPointerArgument(value.P)
	arg_length := gi.NewInt64Argument(length)
	args := []gi.Argument{arg_v, arg_value, arg_length}
	iv.Call(args, nil, nil)
}

// g_tls_password_set_value_full
//
// [ value ] trans: nothing
//
// [ length ] trans: nothing
//
// [ destroy ] trans: nothing
//
func (v TlsPassword) SetValueFull(value gi.Uint8Array, length int64, destroy DestroyNotify) {
	iv, err := _I.Get1(3130, "Gio", "TlsPassword", "set_value_full", 521, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var funcPtr unsafe.Pointer
	if destroy != nil {
		callableInfo := gi.GetCallableInfo("GLib", "DestroyNotify")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallDestroyNotify(destroy, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_value := gi.NewPointerArgument(value.P)
	arg_length := gi.NewInt64Argument(length)
	arg_destroy := gi.NewPointerArgument(funcPtr)
	args := []gi.Argument{arg_v, arg_value, arg_length, arg_destroy}
	iv.Call(args, nil, nil)
}

// g_tls_password_set_warning
//
// [ warning ] trans: nothing
//
func (v TlsPassword) SetWarning(warning string) {
	iv, err := _I.Get1(3131, "Gio", "TlsPassword", "set_warning", 521, 9, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_warning := gi.CString(warning)
	arg_v := gi.NewPointerArgument(v.P)
	arg_warning := gi.NewStringArgument(c_warning)
	args := []gi.Argument{arg_v, arg_warning}
	iv.Call(args, nil, nil)
	gi.Free(c_warning)
}

// ignore GType struct TlsPasswordClass

// Flags TlsPasswordFlags
type TlsPasswordFlags int

const (
	TlsPasswordFlagsNone      TlsPasswordFlags = 0
	TlsPasswordFlagsRetry     TlsPasswordFlags = 2
	TlsPasswordFlagsManyTries TlsPasswordFlags = 4
	TlsPasswordFlagsFinalTry  TlsPasswordFlags = 8
)

func TlsPasswordFlagsGetType() gi.GType {
	ret := _I.GetGType1(423, "Gio", "TlsPasswordFlags")
	return ret
}

// ignore private struct TlsPasswordPrivate, type of TlsPassword is object

// Enum TlsRehandshakeMode
type TlsRehandshakeModeEnum int

const (
	TlsRehandshakeModeNever    TlsRehandshakeModeEnum = 0
	TlsRehandshakeModeSafely   TlsRehandshakeModeEnum = 1
	TlsRehandshakeModeUnsafely TlsRehandshakeModeEnum = 2
)

func TlsRehandshakeModeGetType() gi.GType {
	ret := _I.GetGType1(424, "Gio", "TlsRehandshakeMode")
	return ret
}

// Interface TlsServerConnection
type TlsServerConnection struct {
	TlsServerConnectionIfc
	P unsafe.Pointer
}
type TlsServerConnectionIfc struct{}
type ITlsServerConnection interface{ P_TlsServerConnection() unsafe.Pointer }

func (v TlsServerConnection) P_TlsServerConnection() unsafe.Pointer { return v.P }
func TlsServerConnectionGetType() gi.GType {
	ret := _I.GetGType1(425, "Gio", "TlsServerConnection")
	return ret
}

// g_tls_server_connection_new
//
// [ base_io_stream ] trans: nothing
//
// [ certificate ] trans: nothing
//
// [ result ] trans: everything
//
func TlsServerConnectionNew1(base_io_stream IIOStream, certificate ITlsCertificate) (result TlsServerConnection, err error) {
	iv, err := _I.Get1(3132, "Gio", "TlsServerConnection", "new", 526, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if base_io_stream != nil {
		tmp = base_io_stream.P_IOStream()
	}
	var tmp1 unsafe.Pointer
	if certificate != nil {
		tmp1 = certificate.P_TlsCertificate()
	}
	arg_base_io_stream := gi.NewPointerArgument(tmp)
	arg_certificate := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_base_io_stream, arg_certificate, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// ignore GType struct TlsServerConnectionInterface

// Object UnixConnection
type UnixConnection struct {
	SocketConnection
}

func WrapUnixConnection(p unsafe.Pointer) (r UnixConnection) { r.P = p; return }

type IUnixConnection interface{ P_UnixConnection() unsafe.Pointer }

func (v UnixConnection) P_UnixConnection() unsafe.Pointer { return v.P }
func UnixConnectionGetType() gi.GType {
	ret := _I.GetGType1(426, "Gio", "UnixConnection")
	return ret
}

// g_unix_connection_receive_credentials
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func (v UnixConnection) ReceiveCredentials(cancellable ICancellable) (result Credentials, err error) {
	iv, err := _I.Get1(3133, "Gio", "UnixConnection", "receive_credentials", 528, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_unix_connection_receive_credentials_async
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v UnixConnection) ReceiveCredentialsAsync(cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(3134, "Gio", "UnixConnection", "receive_credentials_async", 528, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_unix_connection_receive_credentials_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: everything
//
func (v UnixConnection) ReceiveCredentialsFinish(result IAsyncResult) (result1 Credentials, err error) {
	iv, err := _I.Get1(3135, "Gio", "UnixConnection", "receive_credentials_finish", 528, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1.P = ret.Pointer()
	return
}

// g_unix_connection_receive_fd
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v UnixConnection) ReceiveFd(cancellable ICancellable) (result int32, err error) {
	iv, err := _I.Get1(3136, "Gio", "UnixConnection", "receive_fd", 528, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int32()
	return
}

// g_unix_connection_send_credentials
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v UnixConnection) SendCredentials(cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(3137, "Gio", "UnixConnection", "send_credentials", 528, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_unix_connection_send_credentials_async
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v UnixConnection) SendCredentialsAsync(cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(3138, "Gio", "UnixConnection", "send_credentials_async", 528, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_unix_connection_send_credentials_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v UnixConnection) SendCredentialsFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(3139, "Gio", "UnixConnection", "send_credentials_finish", 528, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_unix_connection_send_fd
//
// [ fd ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func (v UnixConnection) SendFd(fd int32, cancellable ICancellable) (result bool, err error) {
	iv, err := _I.Get1(3140, "Gio", "UnixConnection", "send_fd", 528, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_fd := gi.NewInt32Argument(fd)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_fd, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// ignore GType struct UnixConnectionClass

// ignore private struct UnixConnectionPrivate, type of UnixConnection is object

// Object UnixCredentialsMessage
type UnixCredentialsMessage struct {
	SocketControlMessage
}

func WrapUnixCredentialsMessage(p unsafe.Pointer) (r UnixCredentialsMessage) { r.P = p; return }

type IUnixCredentialsMessage interface{ P_UnixCredentialsMessage() unsafe.Pointer }

func (v UnixCredentialsMessage) P_UnixCredentialsMessage() unsafe.Pointer { return v.P }
func UnixCredentialsMessageGetType() gi.GType {
	ret := _I.GetGType1(427, "Gio", "UnixCredentialsMessage")
	return ret
}

// g_unix_credentials_message_new
//
// [ result ] trans: everything
//
func NewUnixCredentialsMessage() (result UnixCredentialsMessage) {
	iv, err := _I.Get1(3141, "Gio", "UnixCredentialsMessage", "new", 531, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_unix_credentials_message_new_with_credentials
//
// [ credentials ] trans: nothing
//
// [ result ] trans: everything
//
func NewUnixCredentialsMessageWithCredentials(credentials ICredentials) (result UnixCredentialsMessage) {
	iv, err := _I.Get1(3142, "Gio", "UnixCredentialsMessage", "new_with_credentials", 531, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if credentials != nil {
		tmp = credentials.P_Credentials()
	}
	arg_credentials := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_credentials}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_unix_credentials_message_is_supported
//
// [ result ] trans: nothing
//
func UnixCredentialsMessageIsSupported1() (result bool) {
	iv, err := _I.Get1(3143, "Gio", "UnixCredentialsMessage", "is_supported", 531, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Bool()
	return
}

// g_unix_credentials_message_get_credentials
//
// [ result ] trans: nothing
//
func (v UnixCredentialsMessage) GetCredentials() (result Credentials) {
	iv, err := _I.Get1(3144, "Gio", "UnixCredentialsMessage", "get_credentials", 531, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct UnixCredentialsMessageClass

// ignore private struct UnixCredentialsMessagePrivate, type of UnixCredentialsMessage is object

// Object UnixFDList
type UnixFDList struct {
	Object
}

func WrapUnixFDList(p unsafe.Pointer) (r UnixFDList) { r.P = p; return }

type IUnixFDList interface{ P_UnixFDList() unsafe.Pointer }

func (v UnixFDList) P_UnixFDList() unsafe.Pointer { return v.P }
func UnixFDListGetType() gi.GType {
	ret := _I.GetGType1(428, "Gio", "UnixFDList")
	return ret
}

// g_unix_fd_list_new
//
// [ result ] trans: everything
//
func NewUnixFDList() (result UnixFDList) {
	iv, err := _I.Get1(3145, "Gio", "UnixFDList", "new", 534, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_unix_fd_list_new_from_array
//
// [ fds ] trans: nothing
//
// [ n_fds ] trans: nothing
//
// [ result ] trans: everything
//
func NewUnixFDListFromArray(fds gi.Int32Array, n_fds int32) (result UnixFDList) {
	iv, err := _I.Get1(3146, "Gio", "UnixFDList", "new_from_array", 534, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_fds := gi.NewPointerArgument(fds.P)
	arg_n_fds := gi.NewInt32Argument(n_fds)
	args := []gi.Argument{arg_fds, arg_n_fds}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_unix_fd_list_append
//
// [ fd ] trans: nothing
//
// [ result ] trans: nothing
//
func (v UnixFDList) Append(fd int32) (result int32, err error) {
	iv, err := _I.Get1(3147, "Gio", "UnixFDList", "append", 534, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_fd := gi.NewInt32Argument(fd)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_fd, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int32()
	return
}

// g_unix_fd_list_get
//
// [ index_ ] trans: nothing
//
// [ result ] trans: nothing
//
func (v UnixFDList) Get(index_ int32) (result int32, err error) {
	iv, err := _I.Get1(3148, "Gio", "UnixFDList", "get", 534, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_index_ := gi.NewInt32Argument(index_)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_index_, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int32()
	return
}

// g_unix_fd_list_get_length
//
// [ result ] trans: nothing
//
func (v UnixFDList) GetLength() (result int32) {
	iv, err := _I.Get1(3149, "Gio", "UnixFDList", "get_length", 534, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// g_unix_fd_list_peek_fds
//
// [ length ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func (v UnixFDList) PeekFds() (result gi.Int32Array) {
	iv, err := _I.Get1(3150, "Gio", "UnixFDList", "peek_fds", 534, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_length}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var length int32
	_ = length
	length = outArgs[0].Int32()
	result = gi.Int32Array{P: ret.Pointer(), Len: int(length)}
	return
}

// g_unix_fd_list_steal_fds
//
// [ length ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func (v UnixFDList) StealFds() (result gi.Int32Array) {
	iv, err := _I.Get1(3151, "Gio", "UnixFDList", "steal_fds", 534, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_length}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var length int32
	_ = length
	length = outArgs[0].Int32()
	result = gi.Int32Array{P: ret.Pointer(), Len: int(length)}
	return
}

// ignore GType struct UnixFDListClass

// ignore private struct UnixFDListPrivate, type of UnixFDList is object

// Object UnixFDMessage
type UnixFDMessage struct {
	SocketControlMessage
}

func WrapUnixFDMessage(p unsafe.Pointer) (r UnixFDMessage) { r.P = p; return }

type IUnixFDMessage interface{ P_UnixFDMessage() unsafe.Pointer }

func (v UnixFDMessage) P_UnixFDMessage() unsafe.Pointer { return v.P }
func UnixFDMessageGetType() gi.GType {
	ret := _I.GetGType1(429, "Gio", "UnixFDMessage")
	return ret
}

// g_unix_fd_message_new
//
// [ result ] trans: everything
//
func NewUnixFDMessage() (result UnixFDMessage) {
	iv, err := _I.Get1(3152, "Gio", "UnixFDMessage", "new", 537, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_unix_fd_message_new_with_fd_list
//
// [ fd_list ] trans: nothing
//
// [ result ] trans: everything
//
func NewUnixFDMessageWithFdList(fd_list IUnixFDList) (result UnixFDMessage) {
	iv, err := _I.Get1(3153, "Gio", "UnixFDMessage", "new_with_fd_list", 537, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if fd_list != nil {
		tmp = fd_list.P_UnixFDList()
	}
	arg_fd_list := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_fd_list}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_unix_fd_message_append_fd
//
// [ fd ] trans: nothing
//
// [ result ] trans: nothing
//
func (v UnixFDMessage) AppendFd(fd int32) (result bool, err error) {
	iv, err := _I.Get1(3154, "Gio", "UnixFDMessage", "append_fd", 537, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_fd := gi.NewInt32Argument(fd)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_fd, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_unix_fd_message_get_fd_list
//
// [ result ] trans: nothing
//
func (v UnixFDMessage) GetFdList() (result UnixFDList) {
	iv, err := _I.Get1(3155, "Gio", "UnixFDMessage", "get_fd_list", 537, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_unix_fd_message_steal_fds
//
// [ length ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func (v UnixFDMessage) StealFds() (result gi.Int32Array) {
	iv, err := _I.Get1(3156, "Gio", "UnixFDMessage", "steal_fds", 537, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_v := gi.NewPointerArgument(v.P)
	arg_length := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_length}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	var length int32
	_ = length
	length = outArgs[0].Int32()
	result = gi.Int32Array{P: ret.Pointer(), Len: int(length)}
	return
}

// ignore GType struct UnixFDMessageClass

// ignore private struct UnixFDMessagePrivate, type of UnixFDMessage is object

// Object UnixInputStream
type UnixInputStream struct {
	FileDescriptorBasedIfc
	PollableInputStreamIfc
	InputStream
}

func WrapUnixInputStream(p unsafe.Pointer) (r UnixInputStream) { r.P = p; return }

type IUnixInputStream interface{ P_UnixInputStream() unsafe.Pointer }

func (v UnixInputStream) P_UnixInputStream() unsafe.Pointer     { return v.P }
func (v UnixInputStream) P_FileDescriptorBased() unsafe.Pointer { return v.P }
func (v UnixInputStream) P_PollableInputStream() unsafe.Pointer { return v.P }
func UnixInputStreamGetType() gi.GType {
	ret := _I.GetGType1(430, "Gio", "UnixInputStream")
	return ret
}

// g_unix_input_stream_new
//
// [ fd ] trans: nothing
//
// [ close_fd ] trans: nothing
//
// [ result ] trans: everything
//
func NewUnixInputStream(fd int32, close_fd bool) (result UnixInputStream) {
	iv, err := _I.Get1(3157, "Gio", "UnixInputStream", "new", 540, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_fd := gi.NewInt32Argument(fd)
	arg_close_fd := gi.NewBoolArgument(close_fd)
	args := []gi.Argument{arg_fd, arg_close_fd}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_unix_input_stream_get_close_fd
//
// [ result ] trans: nothing
//
func (v UnixInputStream) GetCloseFd() (result bool) {
	iv, err := _I.Get1(3158, "Gio", "UnixInputStream", "get_close_fd", 540, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_unix_input_stream_get_fd
//
// [ result ] trans: nothing
//
func (v UnixInputStream) GetFd() (result int32) {
	iv, err := _I.Get1(3159, "Gio", "UnixInputStream", "get_fd", 540, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// g_unix_input_stream_set_close_fd
//
// [ close_fd ] trans: nothing
//
func (v UnixInputStream) SetCloseFd(close_fd bool) {
	iv, err := _I.Get1(3160, "Gio", "UnixInputStream", "set_close_fd", 540, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_close_fd := gi.NewBoolArgument(close_fd)
	args := []gi.Argument{arg_v, arg_close_fd}
	iv.Call(args, nil, nil)
}

// ignore GType struct UnixInputStreamClass

// ignore private struct UnixInputStreamPrivate, type of UnixInputStream is object

// Struct UnixMountEntry
type UnixMountEntry struct {
	P unsafe.Pointer
}

func UnixMountEntryGetType() gi.GType {
	ret := _I.GetGType1(431, "Gio", "UnixMountEntry")
	return ret
}

// Object UnixMountMonitor
type UnixMountMonitor struct {
	Object
}

func WrapUnixMountMonitor(p unsafe.Pointer) (r UnixMountMonitor) { r.P = p; return }

type IUnixMountMonitor interface{ P_UnixMountMonitor() unsafe.Pointer }

func (v UnixMountMonitor) P_UnixMountMonitor() unsafe.Pointer { return v.P }
func UnixMountMonitorGetType() gi.GType {
	ret := _I.GetGType1(432, "Gio", "UnixMountMonitor")
	return ret
}

// Deprecated
//
// g_unix_mount_monitor_new
//
// [ result ] trans: everything
//
func NewUnixMountMonitor() (result UnixMountMonitor) {
	iv, err := _I.Get1(3161, "Gio", "UnixMountMonitor", "new", 544, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_unix_mount_monitor_get
//
// [ result ] trans: everything
//
func UnixMountMonitorGet1() (result UnixMountMonitor) {
	iv, err := _I.Get1(3162, "Gio", "UnixMountMonitor", "get", 544, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// g_unix_mount_monitor_set_rate_limit
//
// [ limit_msec ] trans: nothing
//
func (v UnixMountMonitor) SetRateLimit(limit_msec int32) {
	iv, err := _I.Get1(3163, "Gio", "UnixMountMonitor", "set_rate_limit", 544, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_limit_msec := gi.NewInt32Argument(limit_msec)
	args := []gi.Argument{arg_v, arg_limit_msec}
	iv.Call(args, nil, nil)
}

// ignore GType struct UnixMountMonitorClass

// Struct UnixMountPoint
type UnixMountPoint struct {
	P unsafe.Pointer
}

func UnixMountPointGetType() gi.GType {
	ret := _I.GetGType1(433, "Gio", "UnixMountPoint")
	return ret
}

// g_unix_mount_point_compare
//
// [ mount2 ] trans: nothing
//
// [ result ] trans: nothing
//
func (v UnixMountPoint) Compare(mount2 UnixMountPoint) (result int32) {
	iv, err := _I.Get1(3164, "Gio", "UnixMountPoint", "compare", 546, 0, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_mount2 := gi.NewPointerArgument(mount2.P)
	args := []gi.Argument{arg_v, arg_mount2}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// g_unix_mount_point_copy
//
// [ result ] trans: everything
//
func (v UnixMountPoint) Copy() (result UnixMountPoint) {
	iv, err := _I.Get1(3165, "Gio", "UnixMountPoint", "copy", 546, 1, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_unix_mount_point_free
//
func (v UnixMountPoint) Free() {
	iv, err := _I.Get1(3166, "Gio", "UnixMountPoint", "free", 546, 2, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	iv.Call(args, nil, nil)
}

// g_unix_mount_point_get_device_path
//
// [ result ] trans: nothing
//
func (v UnixMountPoint) GetDevicePath() (result string) {
	iv, err := _I.Get1(3167, "Gio", "UnixMountPoint", "get_device_path", 546, 3, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_unix_mount_point_get_fs_type
//
// [ result ] trans: nothing
//
func (v UnixMountPoint) GetFsType() (result string) {
	iv, err := _I.Get1(3168, "Gio", "UnixMountPoint", "get_fs_type", 546, 4, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_unix_mount_point_get_mount_path
//
// [ result ] trans: nothing
//
func (v UnixMountPoint) GetMountPath() (result string) {
	iv, err := _I.Get1(3169, "Gio", "UnixMountPoint", "get_mount_path", 546, 5, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_unix_mount_point_get_options
//
// [ result ] trans: nothing
//
func (v UnixMountPoint) GetOptions() (result string) {
	iv, err := _I.Get1(3170, "Gio", "UnixMountPoint", "get_options", 546, 6, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_unix_mount_point_guess_can_eject
//
// [ result ] trans: nothing
//
func (v UnixMountPoint) GuessCanEject() (result bool) {
	iv, err := _I.Get1(3171, "Gio", "UnixMountPoint", "guess_can_eject", 546, 7, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_unix_mount_point_guess_icon
//
// [ result ] trans: everything
//
func (v UnixMountPoint) GuessIcon() (result Icon) {
	iv, err := _I.Get1(3172, "Gio", "UnixMountPoint", "guess_icon", 546, 8, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_unix_mount_point_guess_name
//
// [ result ] trans: everything
//
func (v UnixMountPoint) GuessName() (result string) {
	iv, err := _I.Get1(3173, "Gio", "UnixMountPoint", "guess_name", 546, 9, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_unix_mount_point_guess_symbolic_icon
//
// [ result ] trans: everything
//
func (v UnixMountPoint) GuessSymbolicIcon() (result Icon) {
	iv, err := _I.Get1(3174, "Gio", "UnixMountPoint", "guess_symbolic_icon", 546, 10, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_unix_mount_point_is_loopback
//
// [ result ] trans: nothing
//
func (v UnixMountPoint) IsLoopback() (result bool) {
	iv, err := _I.Get1(3175, "Gio", "UnixMountPoint", "is_loopback", 546, 11, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_unix_mount_point_is_readonly
//
// [ result ] trans: nothing
//
func (v UnixMountPoint) IsReadonly() (result bool) {
	iv, err := _I.Get1(3176, "Gio", "UnixMountPoint", "is_readonly", 546, 12, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_unix_mount_point_is_user_mountable
//
// [ result ] trans: nothing
//
func (v UnixMountPoint) IsUserMountable() (result bool) {
	iv, err := _I.Get1(3177, "Gio", "UnixMountPoint", "is_user_mountable", 546, 13, gi.INFO_TYPE_STRUCT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Object UnixOutputStream
type UnixOutputStream struct {
	FileDescriptorBasedIfc
	PollableOutputStreamIfc
	OutputStream
}

func WrapUnixOutputStream(p unsafe.Pointer) (r UnixOutputStream) { r.P = p; return }

type IUnixOutputStream interface{ P_UnixOutputStream() unsafe.Pointer }

func (v UnixOutputStream) P_UnixOutputStream() unsafe.Pointer     { return v.P }
func (v UnixOutputStream) P_FileDescriptorBased() unsafe.Pointer  { return v.P }
func (v UnixOutputStream) P_PollableOutputStream() unsafe.Pointer { return v.P }
func UnixOutputStreamGetType() gi.GType {
	ret := _I.GetGType1(434, "Gio", "UnixOutputStream")
	return ret
}

// g_unix_output_stream_new
//
// [ fd ] trans: nothing
//
// [ close_fd ] trans: nothing
//
// [ result ] trans: everything
//
func NewUnixOutputStream(fd int32, close_fd bool) (result UnixOutputStream) {
	iv, err := _I.Get1(3178, "Gio", "UnixOutputStream", "new", 547, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_fd := gi.NewInt32Argument(fd)
	arg_close_fd := gi.NewBoolArgument(close_fd)
	args := []gi.Argument{arg_fd, arg_close_fd}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_unix_output_stream_get_close_fd
//
// [ result ] trans: nothing
//
func (v UnixOutputStream) GetCloseFd() (result bool) {
	iv, err := _I.Get1(3179, "Gio", "UnixOutputStream", "get_close_fd", 547, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_unix_output_stream_get_fd
//
// [ result ] trans: nothing
//
func (v UnixOutputStream) GetFd() (result int32) {
	iv, err := _I.Get1(3180, "Gio", "UnixOutputStream", "get_fd", 547, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// g_unix_output_stream_set_close_fd
//
// [ close_fd ] trans: nothing
//
func (v UnixOutputStream) SetCloseFd(close_fd bool) {
	iv, err := _I.Get1(3181, "Gio", "UnixOutputStream", "set_close_fd", 547, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_close_fd := gi.NewBoolArgument(close_fd)
	args := []gi.Argument{arg_v, arg_close_fd}
	iv.Call(args, nil, nil)
}

// ignore GType struct UnixOutputStreamClass

// ignore private struct UnixOutputStreamPrivate, type of UnixOutputStream is object

// Object UnixSocketAddress
type UnixSocketAddress struct {
	SocketAddress
}

func WrapUnixSocketAddress(p unsafe.Pointer) (r UnixSocketAddress) { r.P = p; return }

type IUnixSocketAddress interface{ P_UnixSocketAddress() unsafe.Pointer }

func (v UnixSocketAddress) P_UnixSocketAddress() unsafe.Pointer { return v.P }
func UnixSocketAddressGetType() gi.GType {
	ret := _I.GetGType1(435, "Gio", "UnixSocketAddress")
	return ret
}

// g_unix_socket_address_new
//
// [ path ] trans: nothing
//
// [ result ] trans: everything
//
func NewUnixSocketAddress(path string) (result UnixSocketAddress) {
	iv, err := _I.Get1(3182, "Gio", "UnixSocketAddress", "new", 550, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	arg_path := gi.NewStringArgument(c_path)
	args := []gi.Argument{arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_path)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// g_unix_socket_address_new_abstract
//
// [ path ] trans: nothing
//
// [ path_len ] trans: nothing
//
// [ result ] trans: everything
//
func NewUnixSocketAddressAbstract(path gi.Int8Array, path_len int32) (result UnixSocketAddress) {
	iv, err := _I.Get1(3183, "Gio", "UnixSocketAddress", "new_abstract", 550, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_path := gi.NewPointerArgument(path.P)
	arg_path_len := gi.NewInt32Argument(path_len)
	args := []gi.Argument{arg_path, arg_path_len}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_unix_socket_address_new_with_type
//
// [ path ] trans: nothing
//
// [ path_len ] trans: nothing
//
// [ type1 ] trans: nothing
//
// [ result ] trans: everything
//
func NewUnixSocketAddressWithType(path gi.Int8Array, path_len int32, type1 UnixSocketAddressTypeEnum) (result UnixSocketAddress) {
	iv, err := _I.Get1(3184, "Gio", "UnixSocketAddress", "new_with_type", 550, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_path := gi.NewPointerArgument(path.P)
	arg_path_len := gi.NewInt32Argument(path_len)
	arg_type1 := gi.NewIntArgument(int(type1))
	args := []gi.Argument{arg_path, arg_path_len, arg_type1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_unix_socket_address_abstract_names_supported
//
// [ result ] trans: nothing
//
func UnixSocketAddressAbstractNamesSupported1() (result bool) {
	iv, err := _I.Get1(3185, "Gio", "UnixSocketAddress", "abstract_names_supported", 550, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Bool()
	return
}

// g_unix_socket_address_get_address_type
//
// [ result ] trans: nothing
//
func (v UnixSocketAddress) GetAddressType() (result UnixSocketAddressTypeEnum) {
	iv, err := _I.Get1(3186, "Gio", "UnixSocketAddress", "get_address_type", 550, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = UnixSocketAddressTypeEnum(ret.Int())
	return
}

// Deprecated
//
// g_unix_socket_address_get_is_abstract
//
// [ result ] trans: nothing
//
func (v UnixSocketAddress) GetIsAbstract() (result bool) {
	iv, err := _I.Get1(3187, "Gio", "UnixSocketAddress", "get_is_abstract", 550, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_unix_socket_address_get_path
//
// [ result ] trans: nothing
//
func (v UnixSocketAddress) GetPath() (result string) {
	iv, err := _I.Get1(3188, "Gio", "UnixSocketAddress", "get_path", 550, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_unix_socket_address_get_path_len
//
// [ result ] trans: nothing
//
func (v UnixSocketAddress) GetPathLen() (result uint64) {
	iv, err := _I.Get1(3189, "Gio", "UnixSocketAddress", "get_path_len", 550, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint64()
	return
}

// ignore GType struct UnixSocketAddressClass

// ignore private struct UnixSocketAddressPrivate, type of UnixSocketAddress is object

// Enum UnixSocketAddressType
type UnixSocketAddressTypeEnum int

const (
	UnixSocketAddressTypeInvalid        UnixSocketAddressTypeEnum = 0
	UnixSocketAddressTypeAnonymous      UnixSocketAddressTypeEnum = 1
	UnixSocketAddressTypePath           UnixSocketAddressTypeEnum = 2
	UnixSocketAddressTypeAbstract       UnixSocketAddressTypeEnum = 3
	UnixSocketAddressTypeAbstractPadded UnixSocketAddressTypeEnum = 4
)

func UnixSocketAddressTypeGetType() gi.GType {
	ret := _I.GetGType1(436, "Gio", "UnixSocketAddressType")
	return ret
}

// Object Vfs
type Vfs struct {
	Object
}

func WrapVfs(p unsafe.Pointer) (r Vfs) { r.P = p; return }

type IVfs interface{ P_Vfs() unsafe.Pointer }

func (v Vfs) P_Vfs() unsafe.Pointer { return v.P }
func VfsGetType() gi.GType {
	ret := _I.GetGType1(437, "Gio", "Vfs")
	return ret
}

// g_vfs_get_default
//
// [ result ] trans: nothing
//
func VfsGetDefault1() (result Vfs) {
	iv, err := _I.Get1(3190, "Gio", "Vfs", "get_default", 562, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_vfs_get_local
//
// [ result ] trans: nothing
//
func VfsGetLocal1() (result Vfs) {
	iv, err := _I.Get1(3191, "Gio", "Vfs", "get_local", 562, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_vfs_get_file_for_path
//
// [ path ] trans: nothing
//
// [ result ] trans: everything
//
func (v Vfs) GetFileForPath(path string) (result File) {
	iv, err := _I.Get1(3192, "Gio", "Vfs", "get_file_for_path", 562, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	arg_v := gi.NewPointerArgument(v.P)
	arg_path := gi.NewStringArgument(c_path)
	args := []gi.Argument{arg_v, arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_path)
	result.P = ret.Pointer()
	return
}

// g_vfs_get_file_for_uri
//
// [ uri ] trans: nothing
//
// [ result ] trans: everything
//
func (v Vfs) GetFileForUri(uri string) (result File) {
	iv, err := _I.Get1(3193, "Gio", "Vfs", "get_file_for_uri", 562, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri := gi.CString(uri)
	arg_v := gi.NewPointerArgument(v.P)
	arg_uri := gi.NewStringArgument(c_uri)
	args := []gi.Argument{arg_v, arg_uri}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_uri)
	result.P = ret.Pointer()
	return
}

// g_vfs_get_supported_uri_schemes
//
// [ result ] trans: nothing
//
func (v Vfs) GetSupportedUriSchemes() (result gi.CStrArray) {
	iv, err := _I.Get1(3194, "Gio", "Vfs", "get_supported_uri_schemes", 562, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_vfs_is_active
//
// [ result ] trans: nothing
//
func (v Vfs) IsActive() (result bool) {
	iv, err := _I.Get1(3195, "Gio", "Vfs", "is_active", 562, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_vfs_parse_name
//
// [ parse_name ] trans: nothing
//
// [ result ] trans: everything
//
func (v Vfs) ParseName(parse_name string) (result File) {
	iv, err := _I.Get1(3196, "Gio", "Vfs", "parse_name", 562, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_parse_name := gi.CString(parse_name)
	arg_v := gi.NewPointerArgument(v.P)
	arg_parse_name := gi.NewStringArgument(c_parse_name)
	args := []gi.Argument{arg_v, arg_parse_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_parse_name)
	result.P = ret.Pointer()
	return
}

// g_vfs_register_uri_scheme
//
// [ scheme ] trans: nothing
//
// [ uri_func ] trans: nothing
//
// [ uri_data ] trans: nothing
//
// [ uri_destroy ] trans: nothing
//
// [ parse_name_func ] trans: nothing
//
// [ parse_name_data ] trans: nothing
//
// [ parse_name_destroy ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Vfs) RegisterUriScheme(scheme string, uri_func VfsFileLookupFunc, parse_name_func VfsFileLookupFunc) (result bool) {
	iv, err := _I.Get1(3197, "Gio", "Vfs", "register_uri_scheme", 562, 7, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_scheme := gi.CString(scheme)
	var cId uint
	var funcPtr unsafe.Pointer
	if uri_func != nil {
		callableInfo := gi.GetCallableInfo("Gio", "VfsFileLookupFunc")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallVfsFileLookupFunc(uri_func, __result, __args)
		}, gi.ScopeNotified, callableInfo)
		callableInfo.Unref()
	}
	var cId1 uint
	var funcPtr1 unsafe.Pointer
	if parse_name_func != nil {
		callableInfo1 := gi.GetCallableInfo("Gio", "VfsFileLookupFunc")
		cId1, funcPtr1 = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallVfsFileLookupFunc(parse_name_func, __result, __args)
		}, gi.ScopeNotified, callableInfo1)
		callableInfo1.Unref()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_scheme := gi.NewStringArgument(c_scheme)
	arg_uri_func := gi.NewPointerArgument(funcPtr)
	arg_uri_data := gi.NewPointerArgument(gi.Uint2Ptr(cId))
	arg_uri_destroy := gi.NewPointerArgument(gi.GetClosureDestroyNotifyPtr())
	arg_parse_name_func := gi.NewPointerArgument(funcPtr1)
	arg_parse_name_data := gi.NewPointerArgument(gi.Uint2Ptr(cId1))
	arg_parse_name_destroy := gi.NewPointerArgument(gi.GetClosureDestroyNotifyPtr())
	args := []gi.Argument{arg_v, arg_scheme, arg_uri_func, arg_uri_data, arg_uri_destroy, arg_parse_name_func, arg_parse_name_data, arg_parse_name_destroy}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_scheme)
	result = ret.Bool()
	return
}

// g_vfs_unregister_uri_scheme
//
// [ scheme ] trans: nothing
//
// [ result ] trans: nothing
//
func (v Vfs) UnregisterUriScheme(scheme string) (result bool) {
	iv, err := _I.Get1(3198, "Gio", "Vfs", "unregister_uri_scheme", 562, 8, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_scheme := gi.CString(scheme)
	arg_v := gi.NewPointerArgument(v.P)
	arg_scheme := gi.NewStringArgument(c_scheme)
	args := []gi.Argument{arg_v, arg_scheme}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_scheme)
	result = ret.Bool()
	return
}

// ignore GType struct VfsClass

type VfsFileLookupFunc func(vfs Vfs, identifier string) (result File)

func CallVfsFileLookupFunc(fn VfsFileLookupFunc, result unsafe.Pointer, args []unsafe.Pointer) {
	if fn == nil {
		return
	}
	vfs := WrapVfs(*(*unsafe.Pointer)(args[0]))
	identifier := gi.GoString(*(*unsafe.Pointer)(args[1]))
	fnRet := fn(vfs, identifier)
	*(*unsafe.Pointer)(result) = fnRet.P
}

// Interface Volume
type Volume struct {
	VolumeIfc
	P unsafe.Pointer
}
type VolumeIfc struct{}
type IVolume interface{ P_Volume() unsafe.Pointer }

func (v Volume) P_Volume() unsafe.Pointer { return v.P }
func VolumeGetType() gi.GType {
	ret := _I.GetGType1(438, "Gio", "Volume")
	return ret
}

// g_volume_can_eject
//
// [ result ] trans: nothing
//
func (v *VolumeIfc) CanEject() (result bool) {
	iv, err := _I.Get1(3199, "Gio", "Volume", "can_eject", 565, 0, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_volume_can_mount
//
// [ result ] trans: nothing
//
func (v *VolumeIfc) CanMount() (result bool) {
	iv, err := _I.Get1(3200, "Gio", "Volume", "can_mount", 565, 1, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// Deprecated
//
// g_volume_eject
//
// [ flags ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *VolumeIfc) Eject(flags MountUnmountFlags, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(3201, "Gio", "Volume", "eject", 565, 2, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// Deprecated
//
// g_volume_eject_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *VolumeIfc) EjectFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(3202, "Gio", "Volume", "eject_finish", 565, 3, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_volume_eject_with_operation
//
// [ flags ] trans: nothing
//
// [ mount_operation ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *VolumeIfc) EjectWithOperation(flags MountUnmountFlags, mount_operation IMountOperation, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(3203, "Gio", "Volume", "eject_with_operation", 565, 4, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if mount_operation != nil {
		tmp = mount_operation.P_MountOperation()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_mount_operation := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_mount_operation, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_volume_eject_with_operation_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *VolumeIfc) EjectWithOperationFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(3204, "Gio", "Volume", "eject_with_operation_finish", 565, 5, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_volume_enumerate_identifiers
//
// [ result ] trans: everything
//
func (v *VolumeIfc) EnumerateIdentifiers() (result gi.CStrArray) {
	iv, err := _I.Get1(3205, "Gio", "Volume", "enumerate_identifiers", 565, 6, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_volume_get_activation_root
//
// [ result ] trans: everything
//
func (v *VolumeIfc) GetActivationRoot() (result File) {
	iv, err := _I.Get1(3206, "Gio", "Volume", "get_activation_root", 565, 7, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_volume_get_drive
//
// [ result ] trans: everything
//
func (v *VolumeIfc) GetDrive() (result Drive) {
	iv, err := _I.Get1(3207, "Gio", "Volume", "get_drive", 565, 8, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_volume_get_icon
//
// [ result ] trans: everything
//
func (v *VolumeIfc) GetIcon() (result Icon) {
	iv, err := _I.Get1(3208, "Gio", "Volume", "get_icon", 565, 9, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_volume_get_identifier
//
// [ kind ] trans: nothing
//
// [ result ] trans: everything
//
func (v *VolumeIfc) GetIdentifier(kind string) (result string) {
	iv, err := _I.Get1(3209, "Gio", "Volume", "get_identifier", 565, 10, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_kind := gi.CString(kind)
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_kind := gi.NewStringArgument(c_kind)
	args := []gi.Argument{arg_v, arg_kind}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_kind)
	result = ret.String().Take()
	return
}

// g_volume_get_mount
//
// [ result ] trans: everything
//
func (v *VolumeIfc) GetMount() (result Mount) {
	iv, err := _I.Get1(3210, "Gio", "Volume", "get_mount", 565, 11, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_volume_get_name
//
// [ result ] trans: everything
//
func (v *VolumeIfc) GetName() (result string) {
	iv, err := _I.Get1(3211, "Gio", "Volume", "get_name", 565, 12, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_volume_get_sort_key
//
// [ result ] trans: nothing
//
func (v *VolumeIfc) GetSortKey() (result string) {
	iv, err := _I.Get1(3212, "Gio", "Volume", "get_sort_key", 565, 13, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_volume_get_symbolic_icon
//
// [ result ] trans: everything
//
func (v *VolumeIfc) GetSymbolicIcon() (result Icon) {
	iv, err := _I.Get1(3213, "Gio", "Volume", "get_symbolic_icon", 565, 14, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_volume_get_uuid
//
// [ result ] trans: everything
//
func (v *VolumeIfc) GetUuid() (result string) {
	iv, err := _I.Get1(3214, "Gio", "Volume", "get_uuid", 565, 15, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_volume_mount
//
// [ flags ] trans: nothing
//
// [ mount_operation ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func (v *VolumeIfc) MountF(flags MountMountFlags, mount_operation IMountOperation, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(3215, "Gio", "Volume", "mount", 565, 16, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if mount_operation != nil {
		tmp = mount_operation.P_MountOperation()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_flags := gi.NewIntArgument(int(flags))
	arg_mount_operation := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_v, arg_flags, arg_mount_operation, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_volume_mount_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func (v *VolumeIfc) MountFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(3216, "Gio", "Volume", "mount_finish", 565, 17, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_v, arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_volume_should_automount
//
// [ result ] trans: nothing
//
func (v *VolumeIfc) ShouldAutomount() (result bool) {
	iv, err := _I.Get1(3217, "Gio", "Volume", "should_automount", 565, 18, gi.INFO_TYPE_INTERFACE, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(*(*unsafe.Pointer)(unsafe.Pointer(v)))
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// ignore GType struct VolumeIface

// Object VolumeMonitor
type VolumeMonitor struct {
	Object
}

func WrapVolumeMonitor(p unsafe.Pointer) (r VolumeMonitor) { r.P = p; return }

type IVolumeMonitor interface{ P_VolumeMonitor() unsafe.Pointer }

func (v VolumeMonitor) P_VolumeMonitor() unsafe.Pointer { return v.P }
func VolumeMonitorGetType() gi.GType {
	ret := _I.GetGType1(439, "Gio", "VolumeMonitor")
	return ret
}

// Deprecated
//
// g_volume_monitor_adopt_orphan_mount
//
// [ mount ] trans: nothing
//
// [ result ] trans: everything
//
func VolumeMonitorAdoptOrphanMount1(mount IMount) (result Volume) {
	iv, err := _I.Get1(3218, "Gio", "VolumeMonitor", "adopt_orphan_mount", 567, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if mount != nil {
		tmp = mount.P_Mount()
	}
	arg_mount := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_mount}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_volume_monitor_get
//
// [ result ] trans: everything
//
func VolumeMonitorGet1() (result VolumeMonitor) {
	iv, err := _I.Get1(3219, "Gio", "VolumeMonitor", "get", 567, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_volume_monitor_get_connected_drives
//
// [ result ] trans: everything
//
func (v VolumeMonitor) GetConnectedDrives() (result List) {
	iv, err := _I.Get1(3220, "Gio", "VolumeMonitor", "get_connected_drives", 567, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_volume_monitor_get_mount_for_uuid
//
// [ uuid ] trans: nothing
//
// [ result ] trans: everything
//
func (v VolumeMonitor) GetMountForUuid(uuid string) (result Mount) {
	iv, err := _I.Get1(3221, "Gio", "VolumeMonitor", "get_mount_for_uuid", 567, 3, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uuid := gi.CString(uuid)
	arg_v := gi.NewPointerArgument(v.P)
	arg_uuid := gi.NewStringArgument(c_uuid)
	args := []gi.Argument{arg_v, arg_uuid}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_uuid)
	result.P = ret.Pointer()
	return
}

// g_volume_monitor_get_mounts
//
// [ result ] trans: everything
//
func (v VolumeMonitor) GetMounts() (result List) {
	iv, err := _I.Get1(3222, "Gio", "VolumeMonitor", "get_mounts", 567, 4, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_volume_monitor_get_volume_for_uuid
//
// [ uuid ] trans: nothing
//
// [ result ] trans: everything
//
func (v VolumeMonitor) GetVolumeForUuid(uuid string) (result Volume) {
	iv, err := _I.Get1(3223, "Gio", "VolumeMonitor", "get_volume_for_uuid", 567, 5, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uuid := gi.CString(uuid)
	arg_v := gi.NewPointerArgument(v.P)
	arg_uuid := gi.NewStringArgument(c_uuid)
	args := []gi.Argument{arg_v, arg_uuid}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_uuid)
	result.P = ret.Pointer()
	return
}

// g_volume_monitor_get_volumes
//
// [ result ] trans: everything
//
func (v VolumeMonitor) GetVolumes() (result List) {
	iv, err := _I.Get1(3224, "Gio", "VolumeMonitor", "get_volumes", 567, 6, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct VolumeMonitorClass

// Object ZlibCompressor
type ZlibCompressor struct {
	ConverterIfc
	Object
}

func WrapZlibCompressor(p unsafe.Pointer) (r ZlibCompressor) { r.P = p; return }

type IZlibCompressor interface{ P_ZlibCompressor() unsafe.Pointer }

func (v ZlibCompressor) P_ZlibCompressor() unsafe.Pointer { return v.P }
func (v ZlibCompressor) P_Converter() unsafe.Pointer      { return v.P }
func ZlibCompressorGetType() gi.GType {
	ret := _I.GetGType1(440, "Gio", "ZlibCompressor")
	return ret
}

// g_zlib_compressor_new
//
// [ format ] trans: nothing
//
// [ level ] trans: nothing
//
// [ result ] trans: everything
//
func NewZlibCompressor(format ZlibCompressorFormatEnum, level int32) (result ZlibCompressor) {
	iv, err := _I.Get1(3225, "Gio", "ZlibCompressor", "new", 569, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_format := gi.NewIntArgument(int(format))
	arg_level := gi.NewInt32Argument(level)
	args := []gi.Argument{arg_format, arg_level}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_zlib_compressor_get_file_info
//
// [ result ] trans: nothing
//
func (v ZlibCompressor) GetFileInfo() (result FileInfo) {
	iv, err := _I.Get1(3226, "Gio", "ZlibCompressor", "get_file_info", 569, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_zlib_compressor_set_file_info
//
// [ file_info ] trans: nothing
//
func (v ZlibCompressor) SetFileInfo(file_info IFileInfo) {
	iv, err := _I.Get1(3227, "Gio", "ZlibCompressor", "set_file_info", 569, 2, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if file_info != nil {
		tmp = file_info.P_FileInfo()
	}
	arg_v := gi.NewPointerArgument(v.P)
	arg_file_info := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_v, arg_file_info}
	iv.Call(args, nil, nil)
}

// ignore GType struct ZlibCompressorClass

// Enum ZlibCompressorFormat
type ZlibCompressorFormatEnum int

const (
	ZlibCompressorFormatZlib ZlibCompressorFormatEnum = 0
	ZlibCompressorFormatGzip ZlibCompressorFormatEnum = 1
	ZlibCompressorFormatRaw  ZlibCompressorFormatEnum = 2
)

func ZlibCompressorFormatGetType() gi.GType {
	ret := _I.GetGType1(441, "Gio", "ZlibCompressorFormat")
	return ret
}

// Object ZlibDecompressor
type ZlibDecompressor struct {
	ConverterIfc
	Object
}

func WrapZlibDecompressor(p unsafe.Pointer) (r ZlibDecompressor) { r.P = p; return }

type IZlibDecompressor interface{ P_ZlibDecompressor() unsafe.Pointer }

func (v ZlibDecompressor) P_ZlibDecompressor() unsafe.Pointer { return v.P }
func (v ZlibDecompressor) P_Converter() unsafe.Pointer        { return v.P }
func ZlibDecompressorGetType() gi.GType {
	ret := _I.GetGType1(442, "Gio", "ZlibDecompressor")
	return ret
}

// g_zlib_decompressor_new
//
// [ format ] trans: nothing
//
// [ result ] trans: everything
//
func NewZlibDecompressor(format ZlibCompressorFormatEnum) (result ZlibDecompressor) {
	iv, err := _I.Get1(3228, "Gio", "ZlibDecompressor", "new", 572, 0, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_format := gi.NewIntArgument(int(format))
	args := []gi.Argument{arg_format}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_zlib_decompressor_get_file_info
//
// [ result ] trans: nothing
//
func (v ZlibDecompressor) GetFileInfo() (result FileInfo) {
	iv, err := _I.Get1(3229, "Gio", "ZlibDecompressor", "get_file_info", 572, 1, gi.INFO_TYPE_OBJECT, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_v := gi.NewPointerArgument(v.P)
	args := []gi.Argument{arg_v}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// ignore GType struct ZlibDecompressorClass

// g_action_name_is_valid
//
// [ action_name ] trans: nothing
//
// [ result ] trans: nothing
//
func ActionNameIsValid(action_name string) (result bool) {
	iv, err := _I.Get1(3230, "Gio", "action_name_is_valid", "", 574, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_action_name := gi.NewStringArgument(c_action_name)
	args := []gi.Argument{arg_action_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_action_name)
	result = ret.Bool()
	return
}

// g_action_parse_detailed_name
//
// [ detailed_name ] trans: nothing
//
// [ action_name ] trans: everything, dir: out
//
// [ target_value ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func ActionParseDetailedName(detailed_name string) (result bool, action_name string, target_value Variant, err error) {
	iv, err := _I.Get1(3231, "Gio", "action_parse_detailed_name", "", 575, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [3]gi.Argument
	c_detailed_name := gi.CString(detailed_name)
	arg_detailed_name := gi.NewStringArgument(c_detailed_name)
	arg_action_name := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_target_value := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	args := []gi.Argument{arg_detailed_name, arg_action_name, arg_target_value, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_detailed_name)
	err = gi.ToError(outArgs[2].Pointer())
	action_name = outArgs[0].String().Take()
	target_value.P = outArgs[1].Pointer()
	result = ret.Bool()
	return
}

// g_action_print_detailed_name
//
// [ action_name ] trans: nothing
//
// [ target_value ] trans: nothing
//
// [ result ] trans: everything
//
func ActionPrintDetailedName(action_name string, target_value Variant) (result string) {
	iv, err := _I.Get1(3232, "Gio", "action_print_detailed_name", "", 576, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_action_name := gi.CString(action_name)
	arg_action_name := gi.NewStringArgument(c_action_name)
	arg_target_value := gi.NewPointerArgument(target_value.P)
	args := []gi.Argument{arg_action_name, arg_target_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_action_name)
	result = ret.String().Take()
	return
}

// g_app_info_create_from_commandline
//
// [ commandline ] trans: nothing
//
// [ application_name ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ result ] trans: everything
//
func AppInfoCreateFromCommandline(commandline string, application_name string, flags AppInfoCreateFlags) (result AppInfo, err error) {
	iv, err := _I.Get1(3233, "Gio", "app_info_create_from_commandline", "", 577, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_commandline := gi.CString(commandline)
	c_application_name := gi.CString(application_name)
	arg_commandline := gi.NewStringArgument(c_commandline)
	arg_application_name := gi.NewStringArgument(c_application_name)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_commandline, arg_application_name, arg_flags, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_commandline)
	gi.Free(c_application_name)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_app_info_get_all
//
// [ result ] trans: everything
//
func AppInfoGetAll() (result List) {
	iv, err := _I.Get1(3234, "Gio", "app_info_get_all", "", 578, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_app_info_get_all_for_type
//
// [ content_type ] trans: nothing
//
// [ result ] trans: everything
//
func AppInfoGetAllForType(content_type string) (result List) {
	iv, err := _I.Get1(3235, "Gio", "app_info_get_all_for_type", "", 579, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_content_type := gi.CString(content_type)
	arg_content_type := gi.NewStringArgument(c_content_type)
	args := []gi.Argument{arg_content_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_content_type)
	result.P = ret.Pointer()
	return
}

// g_app_info_get_default_for_type
//
// [ content_type ] trans: nothing
//
// [ must_support_uris ] trans: nothing
//
// [ result ] trans: everything
//
func AppInfoGetDefaultForType(content_type string, must_support_uris bool) (result AppInfo) {
	iv, err := _I.Get1(3236, "Gio", "app_info_get_default_for_type", "", 580, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_content_type := gi.CString(content_type)
	arg_content_type := gi.NewStringArgument(c_content_type)
	arg_must_support_uris := gi.NewBoolArgument(must_support_uris)
	args := []gi.Argument{arg_content_type, arg_must_support_uris}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_content_type)
	result.P = ret.Pointer()
	return
}

// g_app_info_get_default_for_uri_scheme
//
// [ uri_scheme ] trans: nothing
//
// [ result ] trans: everything
//
func AppInfoGetDefaultForUriScheme(uri_scheme string) (result AppInfo) {
	iv, err := _I.Get1(3237, "Gio", "app_info_get_default_for_uri_scheme", "", 581, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri_scheme := gi.CString(uri_scheme)
	arg_uri_scheme := gi.NewStringArgument(c_uri_scheme)
	args := []gi.Argument{arg_uri_scheme}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_uri_scheme)
	result.P = ret.Pointer()
	return
}

// g_app_info_get_fallback_for_type
//
// [ content_type ] trans: nothing
//
// [ result ] trans: everything
//
func AppInfoGetFallbackForType(content_type string) (result List) {
	iv, err := _I.Get1(3238, "Gio", "app_info_get_fallback_for_type", "", 582, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_content_type := gi.CString(content_type)
	arg_content_type := gi.NewStringArgument(c_content_type)
	args := []gi.Argument{arg_content_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_content_type)
	result.P = ret.Pointer()
	return
}

// g_app_info_get_recommended_for_type
//
// [ content_type ] trans: nothing
//
// [ result ] trans: everything
//
func AppInfoGetRecommendedForType(content_type string) (result List) {
	iv, err := _I.Get1(3239, "Gio", "app_info_get_recommended_for_type", "", 583, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_content_type := gi.CString(content_type)
	arg_content_type := gi.NewStringArgument(c_content_type)
	args := []gi.Argument{arg_content_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_content_type)
	result.P = ret.Pointer()
	return
}

// g_app_info_launch_default_for_uri
//
// [ uri ] trans: nothing
//
// [ context ] trans: nothing
//
// [ result ] trans: nothing
//
func AppInfoLaunchDefaultForUri(uri string, context IAppLaunchContext) (result bool, err error) {
	iv, err := _I.Get1(3240, "Gio", "app_info_launch_default_for_uri", "", 584, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_uri := gi.CString(uri)
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_AppLaunchContext()
	}
	arg_uri := gi.NewStringArgument(c_uri)
	arg_context := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_uri, arg_context, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_uri)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_app_info_launch_default_for_uri_async
//
// [ uri ] trans: nothing
//
// [ context ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func AppInfoLaunchDefaultForUriAsync(uri string, context IAppLaunchContext, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(3241, "Gio", "app_info_launch_default_for_uri_async", "", 585, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri := gi.CString(uri)
	var tmp unsafe.Pointer
	if context != nil {
		tmp = context.P_AppLaunchContext()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_uri := gi.NewStringArgument(c_uri)
	arg_context := gi.NewPointerArgument(tmp)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_uri, arg_context, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_uri)
}

// g_app_info_launch_default_for_uri_finish
//
// [ result ] trans: nothing
//
// [ result1 ] trans: nothing
//
func AppInfoLaunchDefaultForUriFinish(result IAsyncResult) (result1 bool, err error) {
	iv, err := _I.Get1(3242, "Gio", "app_info_launch_default_for_uri_finish", "", 586, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if result != nil {
		tmp = result.P_AsyncResult()
	}
	arg_result := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_result, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result1 = ret.Bool()
	return
}

// g_app_info_reset_type_associations
//
// [ content_type ] trans: nothing
//
func AppInfoResetTypeAssociations(content_type string) {
	iv, err := _I.Get1(3243, "Gio", "app_info_reset_type_associations", "", 587, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_content_type := gi.CString(content_type)
	arg_content_type := gi.NewStringArgument(c_content_type)
	args := []gi.Argument{arg_content_type}
	iv.Call(args, nil, nil)
	gi.Free(c_content_type)
}

// Deprecated
//
// g_async_initable_newv_async
//
// [ object_type ] trans: nothing
//
// [ n_parameters ] trans: nothing
//
// [ parameters ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func AsyncInitableNewvAsync(object_type gi.GType, n_parameters uint32, parameters Parameter, io_priority int32, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(3244, "Gio", "async_initable_newv_async", "", 588, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_object_type := gi.NewUintArgument(uint(object_type))
	arg_n_parameters := gi.NewUint32Argument(n_parameters)
	arg_parameters := gi.NewPointerArgument(parameters.P)
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_object_type, arg_n_parameters, arg_parameters, arg_io_priority, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_bus_get
//
// [ bus_type ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func BusGet(bus_type BusTypeEnum, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(3245, "Gio", "bus_get", "", 589, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_bus_type := gi.NewIntArgument(int(bus_type))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_bus_type, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
}

// g_bus_get_finish
//
// [ res ] trans: nothing
//
// [ result ] trans: everything
//
func BusGetFinish(res IAsyncResult) (result DBusConnection, err error) {
	iv, err := _I.Get1(3246, "Gio", "bus_get_finish", "", 590, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_res := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_res, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_bus_get_sync
//
// [ bus_type ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func BusGetSync(bus_type BusTypeEnum, cancellable ICancellable) (result DBusConnection, err error) {
	iv, err := _I.Get1(3247, "Gio", "bus_get_sync", "", 591, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_bus_type := gi.NewIntArgument(int(bus_type))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_bus_type, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_bus_own_name_on_connection_with_closures
//
// [ connection ] trans: nothing
//
// [ name ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ name_acquired_closure ] trans: nothing
//
// [ name_lost_closure ] trans: nothing
//
// [ result ] trans: nothing
//
func BusOwnNameOnConnection(connection IDBusConnection, name string, flags BusNameOwnerFlags, name_acquired_closure Closure, name_lost_closure Closure) (result uint32) {
	iv, err := _I.Get1(3248, "Gio", "bus_own_name_on_connection", "", 592, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_DBusConnection()
	}
	c_name := gi.CString(name)
	arg_connection := gi.NewPointerArgument(tmp)
	arg_name := gi.NewStringArgument(c_name)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_name_acquired_closure := gi.NewPointerArgument(name_acquired_closure.P)
	arg_name_lost_closure := gi.NewPointerArgument(name_lost_closure.P)
	args := []gi.Argument{arg_connection, arg_name, arg_flags, arg_name_acquired_closure, arg_name_lost_closure}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result = ret.Uint32()
	return
}

// g_bus_own_name_with_closures
//
// [ bus_type ] trans: nothing
//
// [ name ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ bus_acquired_closure ] trans: nothing
//
// [ name_acquired_closure ] trans: nothing
//
// [ name_lost_closure ] trans: nothing
//
// [ result ] trans: nothing
//
func BusOwnName(bus_type BusTypeEnum, name string, flags BusNameOwnerFlags, bus_acquired_closure Closure, name_acquired_closure Closure, name_lost_closure Closure) (result uint32) {
	iv, err := _I.Get1(3249, "Gio", "bus_own_name", "", 593, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_bus_type := gi.NewIntArgument(int(bus_type))
	arg_name := gi.NewStringArgument(c_name)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_bus_acquired_closure := gi.NewPointerArgument(bus_acquired_closure.P)
	arg_name_acquired_closure := gi.NewPointerArgument(name_acquired_closure.P)
	arg_name_lost_closure := gi.NewPointerArgument(name_lost_closure.P)
	args := []gi.Argument{arg_bus_type, arg_name, arg_flags, arg_bus_acquired_closure, arg_name_acquired_closure, arg_name_lost_closure}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result = ret.Uint32()
	return
}

// g_bus_unown_name
//
// [ owner_id ] trans: nothing
//
func BusUnownName(owner_id uint32) {
	iv, err := _I.Get1(3250, "Gio", "bus_unown_name", "", 594, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_owner_id := gi.NewUint32Argument(owner_id)
	args := []gi.Argument{arg_owner_id}
	iv.Call(args, nil, nil)
}

// g_bus_unwatch_name
//
// [ watcher_id ] trans: nothing
//
func BusUnwatchName(watcher_id uint32) {
	iv, err := _I.Get1(3251, "Gio", "bus_unwatch_name", "", 595, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_watcher_id := gi.NewUint32Argument(watcher_id)
	args := []gi.Argument{arg_watcher_id}
	iv.Call(args, nil, nil)
}

// g_bus_watch_name_on_connection_with_closures
//
// [ connection ] trans: nothing
//
// [ name ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ name_appeared_closure ] trans: nothing
//
// [ name_vanished_closure ] trans: nothing
//
// [ result ] trans: nothing
//
func BusWatchNameOnConnection(connection IDBusConnection, name string, flags BusNameWatcherFlags, name_appeared_closure Closure, name_vanished_closure Closure) (result uint32) {
	iv, err := _I.Get1(3252, "Gio", "bus_watch_name_on_connection", "", 596, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if connection != nil {
		tmp = connection.P_DBusConnection()
	}
	c_name := gi.CString(name)
	arg_connection := gi.NewPointerArgument(tmp)
	arg_name := gi.NewStringArgument(c_name)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_name_appeared_closure := gi.NewPointerArgument(name_appeared_closure.P)
	arg_name_vanished_closure := gi.NewPointerArgument(name_vanished_closure.P)
	args := []gi.Argument{arg_connection, arg_name, arg_flags, arg_name_appeared_closure, arg_name_vanished_closure}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result = ret.Uint32()
	return
}

// g_bus_watch_name_with_closures
//
// [ bus_type ] trans: nothing
//
// [ name ] trans: nothing
//
// [ flags ] trans: nothing
//
// [ name_appeared_closure ] trans: nothing
//
// [ name_vanished_closure ] trans: nothing
//
// [ result ] trans: nothing
//
func BusWatchName(bus_type BusTypeEnum, name string, flags BusNameWatcherFlags, name_appeared_closure Closure, name_vanished_closure Closure) (result uint32) {
	iv, err := _I.Get1(3253, "Gio", "bus_watch_name", "", 597, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_bus_type := gi.NewIntArgument(int(bus_type))
	arg_name := gi.NewStringArgument(c_name)
	arg_flags := gi.NewIntArgument(int(flags))
	arg_name_appeared_closure := gi.NewPointerArgument(name_appeared_closure.P)
	arg_name_vanished_closure := gi.NewPointerArgument(name_vanished_closure.P)
	args := []gi.Argument{arg_bus_type, arg_name, arg_flags, arg_name_appeared_closure, arg_name_vanished_closure}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result = ret.Uint32()
	return
}

// g_content_type_can_be_executable
//
// [ type1 ] trans: nothing
//
// [ result ] trans: nothing
//
func ContentTypeCanBeExecutable(type1 string) (result bool) {
	iv, err := _I.Get1(3254, "Gio", "content_type_can_be_executable", "", 598, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_type1 := gi.CString(type1)
	arg_type1 := gi.NewStringArgument(c_type1)
	args := []gi.Argument{arg_type1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_type1)
	result = ret.Bool()
	return
}

// g_content_type_equals
//
// [ type1 ] trans: nothing
//
// [ type2 ] trans: nothing
//
// [ result ] trans: nothing
//
func ContentTypeEquals(type1 string, type2 string) (result bool) {
	iv, err := _I.Get1(3255, "Gio", "content_type_equals", "", 599, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_type1 := gi.CString(type1)
	c_type2 := gi.CString(type2)
	arg_type1 := gi.NewStringArgument(c_type1)
	arg_type2 := gi.NewStringArgument(c_type2)
	args := []gi.Argument{arg_type1, arg_type2}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_type1)
	gi.Free(c_type2)
	result = ret.Bool()
	return
}

// g_content_type_from_mime_type
//
// [ mime_type ] trans: nothing
//
// [ result ] trans: everything
//
func ContentTypeFromMimeType(mime_type string) (result string) {
	iv, err := _I.Get1(3256, "Gio", "content_type_from_mime_type", "", 600, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_mime_type := gi.CString(mime_type)
	arg_mime_type := gi.NewStringArgument(c_mime_type)
	args := []gi.Argument{arg_mime_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_mime_type)
	result = ret.String().Take()
	return
}

// g_content_type_get_description
//
// [ type1 ] trans: nothing
//
// [ result ] trans: everything
//
func ContentTypeGetDescription(type1 string) (result string) {
	iv, err := _I.Get1(3257, "Gio", "content_type_get_description", "", 601, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_type1 := gi.CString(type1)
	arg_type1 := gi.NewStringArgument(c_type1)
	args := []gi.Argument{arg_type1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_type1)
	result = ret.String().Take()
	return
}

// g_content_type_get_generic_icon_name
//
// [ type1 ] trans: nothing
//
// [ result ] trans: everything
//
func ContentTypeGetGenericIconName(type1 string) (result string) {
	iv, err := _I.Get1(3258, "Gio", "content_type_get_generic_icon_name", "", 602, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_type1 := gi.CString(type1)
	arg_type1 := gi.NewStringArgument(c_type1)
	args := []gi.Argument{arg_type1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_type1)
	result = ret.String().Take()
	return
}

// g_content_type_get_icon
//
// [ type1 ] trans: nothing
//
// [ result ] trans: everything
//
func ContentTypeGetIcon(type1 string) (result Icon) {
	iv, err := _I.Get1(3259, "Gio", "content_type_get_icon", "", 603, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_type1 := gi.CString(type1)
	arg_type1 := gi.NewStringArgument(c_type1)
	args := []gi.Argument{arg_type1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_type1)
	result.P = ret.Pointer()
	return
}

// g_content_type_get_mime_type
//
// [ type1 ] trans: nothing
//
// [ result ] trans: everything
//
func ContentTypeGetMimeType(type1 string) (result string) {
	iv, err := _I.Get1(3260, "Gio", "content_type_get_mime_type", "", 604, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_type1 := gi.CString(type1)
	arg_type1 := gi.NewStringArgument(c_type1)
	args := []gi.Argument{arg_type1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_type1)
	result = ret.String().Take()
	return
}

// g_content_type_get_symbolic_icon
//
// [ type1 ] trans: nothing
//
// [ result ] trans: everything
//
func ContentTypeGetSymbolicIcon(type1 string) (result Icon) {
	iv, err := _I.Get1(3261, "Gio", "content_type_get_symbolic_icon", "", 605, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_type1 := gi.CString(type1)
	arg_type1 := gi.NewStringArgument(c_type1)
	args := []gi.Argument{arg_type1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_type1)
	result.P = ret.Pointer()
	return
}

// g_content_type_guess
//
// [ filename ] trans: nothing
//
// [ data ] trans: nothing
//
// [ data_size ] trans: nothing
//
// [ result_uncertain ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func ContentTypeGuess(filename string, data gi.Uint8Array, data_size uint64) (result string, result_uncertain bool) {
	iv, err := _I.Get1(3262, "Gio", "content_type_guess", "", 606, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	c_filename := gi.CString(filename)
	arg_filename := gi.NewStringArgument(c_filename)
	arg_data := gi.NewPointerArgument(data.P)
	arg_data_size := gi.NewUint64Argument(data_size)
	arg_result_uncertain := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_filename, arg_data, arg_data_size, arg_result_uncertain}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_filename)
	result_uncertain = outArgs[0].Bool()
	result = ret.String().Take()
	return
}

// g_content_type_guess_for_tree
//
// [ root ] trans: nothing
//
// [ result ] trans: everything
//
func ContentTypeGuessForTree(root IFile) (result gi.CStrArray) {
	iv, err := _I.Get1(3263, "Gio", "content_type_guess_for_tree", "", 607, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if root != nil {
		tmp = root.P_File()
	}
	arg_root := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_root}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_content_type_is_a
//
// [ type1 ] trans: nothing
//
// [ supertype ] trans: nothing
//
// [ result ] trans: nothing
//
func ContentTypeIsA(type1 string, supertype string) (result bool) {
	iv, err := _I.Get1(3264, "Gio", "content_type_is_a", "", 608, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_type1 := gi.CString(type1)
	c_supertype := gi.CString(supertype)
	arg_type1 := gi.NewStringArgument(c_type1)
	arg_supertype := gi.NewStringArgument(c_supertype)
	args := []gi.Argument{arg_type1, arg_supertype}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_type1)
	gi.Free(c_supertype)
	result = ret.Bool()
	return
}

// g_content_type_is_mime_type
//
// [ type1 ] trans: nothing
//
// [ mime_type ] trans: nothing
//
// [ result ] trans: nothing
//
func ContentTypeIsMimeType(type1 string, mime_type string) (result bool) {
	iv, err := _I.Get1(3265, "Gio", "content_type_is_mime_type", "", 609, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_type1 := gi.CString(type1)
	c_mime_type := gi.CString(mime_type)
	arg_type1 := gi.NewStringArgument(c_type1)
	arg_mime_type := gi.NewStringArgument(c_mime_type)
	args := []gi.Argument{arg_type1, arg_mime_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_type1)
	gi.Free(c_mime_type)
	result = ret.Bool()
	return
}

// g_content_type_is_unknown
//
// [ type1 ] trans: nothing
//
// [ result ] trans: nothing
//
func ContentTypeIsUnknown(type1 string) (result bool) {
	iv, err := _I.Get1(3266, "Gio", "content_type_is_unknown", "", 610, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_type1 := gi.CString(type1)
	arg_type1 := gi.NewStringArgument(c_type1)
	args := []gi.Argument{arg_type1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_type1)
	result = ret.Bool()
	return
}

// g_content_types_get_registered
//
// [ result ] trans: everything
//
func ContentTypesGetRegistered() (result List) {
	iv, err := _I.Get1(3267, "Gio", "content_types_get_registered", "", 611, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_address_escape_value
//
// [ string ] trans: nothing
//
// [ result ] trans: everything
//
func DbusAddressEscapeValue(string string) (result string) {
	iv, err := _I.Get1(3268, "Gio", "dbus_address_escape_value", "", 612, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_string := gi.CString(string)
	arg_string := gi.NewStringArgument(c_string)
	args := []gi.Argument{arg_string}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_string)
	result = ret.String().Take()
	return
}

// g_dbus_address_get_for_bus_sync
//
// [ bus_type ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func DbusAddressGetForBusSync(bus_type BusTypeEnum, cancellable ICancellable) (result string, err error) {
	iv, err := _I.Get1(3269, "Gio", "dbus_address_get_for_bus_sync", "", 613, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_bus_type := gi.NewIntArgument(int(bus_type))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_bus_type, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.String().Take()
	return
}

// g_dbus_address_get_stream
//
// [ address ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
func DbusAddressGetStream(address string, cancellable ICancellable, callback AsyncReadyCallback) {
	iv, err := _I.Get1(3270, "Gio", "dbus_address_get_stream", "", 614, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_address := gi.CString(address)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_address := gi.NewStringArgument(c_address)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	args := []gi.Argument{arg_address, arg_cancellable, arg_callback, arg_user_data}
	iv.Call(args, nil, nil)
	gi.Free(c_address)
}

// g_dbus_address_get_stream_finish
//
// [ res ] trans: nothing
//
// [ out_guid ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func DbusAddressGetStreamFinish(res IAsyncResult) (result IOStream, out_guid string, err error) {
	iv, err := _I.Get1(3271, "Gio", "dbus_address_get_stream_finish", "", 615, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if res != nil {
		tmp = res.P_AsyncResult()
	}
	arg_res := gi.NewPointerArgument(tmp)
	arg_out_guid := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_res, arg_out_guid, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	out_guid = outArgs[0].String().Take()
	result.P = ret.Pointer()
	return
}

// g_dbus_address_get_stream_sync
//
// [ address ] trans: nothing
//
// [ out_guid ] trans: everything, dir: out
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func DbusAddressGetStreamSync(address string, cancellable ICancellable) (result IOStream, out_guid string, err error) {
	iv, err := _I.Get1(3272, "Gio", "dbus_address_get_stream_sync", "", 616, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	c_address := gi.CString(address)
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_address := gi.NewStringArgument(c_address)
	arg_out_guid := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_address, arg_out_guid, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_address)
	err = gi.ToError(outArgs[1].Pointer())
	out_guid = outArgs[0].String().Take()
	result.P = ret.Pointer()
	return
}

// g_dbus_annotation_info_lookup
//
// [ annotations ] trans: nothing
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func DbusAnnotationInfoLookup(annotations gi.PointerArray, name string) (result string) {
	iv, err := _I.Get1(3273, "Gio", "dbus_annotation_info_lookup", "", 617, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_annotations := gi.NewPointerArgument(annotations.P)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_annotations, arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result = ret.String().Copy()
	return
}

// g_dbus_error_encode_gerror
//
// [ error ] trans: nothing
//
// [ result ] trans: everything
//
func DbusErrorEncodeGerror(error Error) (result string) {
	iv, err := _I.Get1(3274, "Gio", "dbus_error_encode_gerror", "", 618, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_error := gi.NewPointerArgument(error.P)
	args := []gi.Argument{arg_error}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_dbus_error_get_remote_error
//
// [ error ] trans: nothing
//
// [ result ] trans: everything
//
func DbusErrorGetRemoteError(error Error) (result string) {
	iv, err := _I.Get1(3275, "Gio", "dbus_error_get_remote_error", "", 619, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_error := gi.NewPointerArgument(error.P)
	args := []gi.Argument{arg_error}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_dbus_error_is_remote_error
//
// [ error ] trans: nothing
//
// [ result ] trans: nothing
//
func DbusErrorIsRemoteError(error Error) (result bool) {
	iv, err := _I.Get1(3276, "Gio", "dbus_error_is_remote_error", "", 620, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_error := gi.NewPointerArgument(error.P)
	args := []gi.Argument{arg_error}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_dbus_error_new_for_dbus_error
//
// [ dbus_error_name ] trans: nothing
//
// [ dbus_error_message ] trans: nothing
//
// [ result ] trans: everything
//
func DbusErrorNewForDbusError(dbus_error_name string, dbus_error_message string) (result Error) {
	iv, err := _I.Get1(3277, "Gio", "dbus_error_new_for_dbus_error", "", 621, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_dbus_error_name := gi.CString(dbus_error_name)
	c_dbus_error_message := gi.CString(dbus_error_message)
	arg_dbus_error_name := gi.NewStringArgument(c_dbus_error_name)
	arg_dbus_error_message := gi.NewStringArgument(c_dbus_error_message)
	args := []gi.Argument{arg_dbus_error_name, arg_dbus_error_message}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_dbus_error_name)
	gi.Free(c_dbus_error_message)
	result.P = ret.Pointer()
	return
}

// g_dbus_error_quark
//
// [ result ] trans: nothing
//
func DbusErrorQuark() (result uint32) {
	iv, err := _I.Get1(3278, "Gio", "dbus_error_quark", "", 622, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// g_dbus_error_register_error
//
// [ error_domain ] trans: nothing
//
// [ error_code ] trans: nothing
//
// [ dbus_error_name ] trans: nothing
//
// [ result ] trans: nothing
//
func DbusErrorRegisterError(error_domain uint32, error_code int32, dbus_error_name string) (result bool) {
	iv, err := _I.Get1(3279, "Gio", "dbus_error_register_error", "", 623, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_dbus_error_name := gi.CString(dbus_error_name)
	arg_error_domain := gi.NewUint32Argument(error_domain)
	arg_error_code := gi.NewInt32Argument(error_code)
	arg_dbus_error_name := gi.NewStringArgument(c_dbus_error_name)
	args := []gi.Argument{arg_error_domain, arg_error_code, arg_dbus_error_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_dbus_error_name)
	result = ret.Bool()
	return
}

// g_dbus_error_register_error_domain
//
// [ error_domain_quark_name ] trans: nothing
//
// [ quark_volatile ] trans: nothing
//
// [ entries ] trans: nothing
//
// [ num_entries ] trans: nothing
//
func DbusErrorRegisterErrorDomain(error_domain_quark_name string, quark_volatile uint64, entries unsafe.Pointer, num_entries uint32) {
	iv, err := _I.Get1(3280, "Gio", "dbus_error_register_error_domain", "", 624, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_error_domain_quark_name := gi.CString(error_domain_quark_name)
	arg_error_domain_quark_name := gi.NewStringArgument(c_error_domain_quark_name)
	arg_quark_volatile := gi.NewUint64Argument(quark_volatile)
	arg_entries := gi.NewPointerArgument(entries)
	arg_num_entries := gi.NewUint32Argument(num_entries)
	args := []gi.Argument{arg_error_domain_quark_name, arg_quark_volatile, arg_entries, arg_num_entries}
	iv.Call(args, nil, nil)
	gi.Free(c_error_domain_quark_name)
}

// g_dbus_error_strip_remote_error
//
// [ error ] trans: nothing
//
// [ result ] trans: nothing
//
func DbusErrorStripRemoteError(error Error) (result bool) {
	iv, err := _I.Get1(3281, "Gio", "dbus_error_strip_remote_error", "", 625, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_error := gi.NewPointerArgument(error.P)
	args := []gi.Argument{arg_error}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_dbus_error_unregister_error
//
// [ error_domain ] trans: nothing
//
// [ error_code ] trans: nothing
//
// [ dbus_error_name ] trans: nothing
//
// [ result ] trans: nothing
//
func DbusErrorUnregisterError(error_domain uint32, error_code int32, dbus_error_name string) (result bool) {
	iv, err := _I.Get1(3282, "Gio", "dbus_error_unregister_error", "", 626, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_dbus_error_name := gi.CString(dbus_error_name)
	arg_error_domain := gi.NewUint32Argument(error_domain)
	arg_error_code := gi.NewInt32Argument(error_code)
	arg_dbus_error_name := gi.NewStringArgument(c_dbus_error_name)
	args := []gi.Argument{arg_error_domain, arg_error_code, arg_dbus_error_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_dbus_error_name)
	result = ret.Bool()
	return
}

// g_dbus_generate_guid
//
// [ result ] trans: everything
//
func DbusGenerateGuid() (result string) {
	iv, err := _I.Get1(3283, "Gio", "dbus_generate_guid", "", 627, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.String().Take()
	return
}

// g_dbus_gvalue_to_gvariant
//
// [ gvalue ] trans: nothing
//
// [ type1 ] trans: nothing
//
// [ result ] trans: everything
//
func DbusGvalueToGvariant(gvalue Value, type1 VariantType) (result Variant) {
	iv, err := _I.Get1(3284, "Gio", "dbus_gvalue_to_gvariant", "", 628, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_gvalue := gi.NewPointerArgument(gvalue.P)
	arg_type1 := gi.NewPointerArgument(type1.P)
	args := []gi.Argument{arg_gvalue, arg_type1}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_dbus_gvariant_to_gvalue
//
// [ value ] trans: nothing
//
// [ out_gvalue ] trans: nothing, dir: out
//
func DbusGvariantToGvalue(value Variant, out_gvalue Value) {
	iv, err := _I.Get1(3285, "Gio", "dbus_gvariant_to_gvalue", "", 629, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_value := gi.NewPointerArgument(value.P)
	arg_out_gvalue := gi.NewPointerArgument(out_gvalue.P)
	args := []gi.Argument{arg_value, arg_out_gvalue}
	iv.Call(args, nil, nil)
}

// g_dbus_is_address
//
// [ string ] trans: nothing
//
// [ result ] trans: nothing
//
func DbusIsAddress(string string) (result bool) {
	iv, err := _I.Get1(3286, "Gio", "dbus_is_address", "", 630, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_string := gi.CString(string)
	arg_string := gi.NewStringArgument(c_string)
	args := []gi.Argument{arg_string}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_string)
	result = ret.Bool()
	return
}

// g_dbus_is_guid
//
// [ string ] trans: nothing
//
// [ result ] trans: nothing
//
func DbusIsGuid(string string) (result bool) {
	iv, err := _I.Get1(3287, "Gio", "dbus_is_guid", "", 631, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_string := gi.CString(string)
	arg_string := gi.NewStringArgument(c_string)
	args := []gi.Argument{arg_string}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_string)
	result = ret.Bool()
	return
}

// g_dbus_is_interface_name
//
// [ string ] trans: nothing
//
// [ result ] trans: nothing
//
func DbusIsInterfaceName(string string) (result bool) {
	iv, err := _I.Get1(3288, "Gio", "dbus_is_interface_name", "", 632, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_string := gi.CString(string)
	arg_string := gi.NewStringArgument(c_string)
	args := []gi.Argument{arg_string}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_string)
	result = ret.Bool()
	return
}

// g_dbus_is_member_name
//
// [ string ] trans: nothing
//
// [ result ] trans: nothing
//
func DbusIsMemberName(string string) (result bool) {
	iv, err := _I.Get1(3289, "Gio", "dbus_is_member_name", "", 633, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_string := gi.CString(string)
	arg_string := gi.NewStringArgument(c_string)
	args := []gi.Argument{arg_string}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_string)
	result = ret.Bool()
	return
}

// g_dbus_is_name
//
// [ string ] trans: nothing
//
// [ result ] trans: nothing
//
func DbusIsName(string string) (result bool) {
	iv, err := _I.Get1(3290, "Gio", "dbus_is_name", "", 634, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_string := gi.CString(string)
	arg_string := gi.NewStringArgument(c_string)
	args := []gi.Argument{arg_string}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_string)
	result = ret.Bool()
	return
}

// g_dbus_is_supported_address
//
// [ string ] trans: nothing
//
// [ result ] trans: nothing
//
func DbusIsSupportedAddress(string string) (result bool, err error) {
	iv, err := _I.Get1(3291, "Gio", "dbus_is_supported_address", "", 635, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_string := gi.CString(string)
	arg_string := gi.NewStringArgument(c_string)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_string, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_string)
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Bool()
	return
}

// g_dbus_is_unique_name
//
// [ string ] trans: nothing
//
// [ result ] trans: nothing
//
func DbusIsUniqueName(string string) (result bool) {
	iv, err := _I.Get1(3292, "Gio", "dbus_is_unique_name", "", 636, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_string := gi.CString(string)
	arg_string := gi.NewStringArgument(c_string)
	args := []gi.Argument{arg_string}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_string)
	result = ret.Bool()
	return
}

// g_dtls_client_connection_new
//
// [ base_socket ] trans: nothing
//
// [ server_identity ] trans: nothing
//
// [ result ] trans: everything
//
func DtlsClientConnectionNew(base_socket IDatagramBased, server_identity ISocketConnectable) (result DtlsClientConnection, err error) {
	iv, err := _I.Get1(3293, "Gio", "dtls_client_connection_new", "", 637, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if base_socket != nil {
		tmp = base_socket.P_DatagramBased()
	}
	var tmp1 unsafe.Pointer
	if server_identity != nil {
		tmp1 = server_identity.P_SocketConnectable()
	}
	arg_base_socket := gi.NewPointerArgument(tmp)
	arg_server_identity := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_base_socket, arg_server_identity, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_dtls_server_connection_new
//
// [ base_socket ] trans: nothing
//
// [ certificate ] trans: nothing
//
// [ result ] trans: everything
//
func DtlsServerConnectionNew(base_socket IDatagramBased, certificate ITlsCertificate) (result DtlsServerConnection, err error) {
	iv, err := _I.Get1(3294, "Gio", "dtls_server_connection_new", "", 638, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if base_socket != nil {
		tmp = base_socket.P_DatagramBased()
	}
	var tmp1 unsafe.Pointer
	if certificate != nil {
		tmp1 = certificate.P_TlsCertificate()
	}
	arg_base_socket := gi.NewPointerArgument(tmp)
	arg_certificate := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_base_socket, arg_certificate, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_file_new_for_commandline_arg
//
// [ arg ] trans: nothing
//
// [ result ] trans: everything
//
func FileNewForCommandlineArg(arg string) (result File) {
	iv, err := _I.Get1(3295, "Gio", "file_new_for_commandline_arg", "", 639, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_arg := gi.CString(arg)
	arg_arg := gi.NewStringArgument(c_arg)
	args := []gi.Argument{arg_arg}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_arg)
	result.P = ret.Pointer()
	return
}

// g_file_new_for_commandline_arg_and_cwd
//
// [ arg ] trans: nothing
//
// [ cwd ] trans: nothing
//
// [ result ] trans: everything
//
func FileNewForCommandlineArgAndCwd(arg string, cwd string) (result File) {
	iv, err := _I.Get1(3296, "Gio", "file_new_for_commandline_arg_and_cwd", "", 640, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_arg := gi.CString(arg)
	c_cwd := gi.CString(cwd)
	arg_arg := gi.NewStringArgument(c_arg)
	arg_cwd := gi.NewStringArgument(c_cwd)
	args := []gi.Argument{arg_arg, arg_cwd}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_arg)
	gi.Free(c_cwd)
	result.P = ret.Pointer()
	return
}

// g_file_new_for_path
//
// [ path ] trans: nothing
//
// [ result ] trans: everything
//
func FileNewForPath(path string) (result File) {
	iv, err := _I.Get1(3297, "Gio", "file_new_for_path", "", 641, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_path := gi.CString(path)
	arg_path := gi.NewStringArgument(c_path)
	args := []gi.Argument{arg_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_path)
	result.P = ret.Pointer()
	return
}

// g_file_new_for_uri
//
// [ uri ] trans: nothing
//
// [ result ] trans: everything
//
func FileNewForUri(uri string) (result File) {
	iv, err := _I.Get1(3298, "Gio", "file_new_for_uri", "", 642, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_uri := gi.CString(uri)
	arg_uri := gi.NewStringArgument(c_uri)
	args := []gi.Argument{arg_uri}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_uri)
	result.P = ret.Pointer()
	return
}

// g_file_new_tmp
//
// [ tmpl ] trans: nothing
//
// [ iostream ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func FileNewTmp(tmpl string) (result File, iostream FileIOStream, err error) {
	iv, err := _I.Get1(3299, "Gio", "file_new_tmp", "", 643, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	c_tmpl := gi.CString(tmpl)
	arg_tmpl := gi.NewStringArgument(c_tmpl)
	arg_iostream := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_tmpl, arg_iostream, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_tmpl)
	err = gi.ToError(outArgs[1].Pointer())
	iostream.P = outArgs[0].Pointer()
	result.P = ret.Pointer()
	return
}

// g_file_parse_name
//
// [ parse_name ] trans: nothing
//
// [ result ] trans: everything
//
func FileParseName(parse_name string) (result File) {
	iv, err := _I.Get1(3300, "Gio", "file_parse_name", "", 644, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_parse_name := gi.CString(parse_name)
	arg_parse_name := gi.NewStringArgument(c_parse_name)
	args := []gi.Argument{arg_parse_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_parse_name)
	result.P = ret.Pointer()
	return
}

// g_icon_deserialize
//
// [ value ] trans: nothing
//
// [ result ] trans: everything
//
func IconDeserialize(value Variant) (result Icon) {
	iv, err := _I.Get1(3301, "Gio", "icon_deserialize", "", 645, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_value := gi.NewPointerArgument(value.P)
	args := []gi.Argument{arg_value}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_icon_hash
//
// [ icon ] trans: nothing
//
// [ result ] trans: nothing
//
func IconHash(icon unsafe.Pointer) (result uint32) {
	iv, err := _I.Get1(3302, "Gio", "icon_hash", "", 646, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_icon := gi.NewPointerArgument(icon)
	args := []gi.Argument{arg_icon}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Uint32()
	return
}

// g_icon_new_for_string
//
// [ str ] trans: nothing
//
// [ result ] trans: everything
//
func IconNewForString(str string) (result Icon, err error) {
	iv, err := _I.Get1(3303, "Gio", "icon_new_for_string", "", 647, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_str := gi.CString(str)
	arg_str := gi.NewStringArgument(c_str)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_str, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_str)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// g_initable_newv
//
// [ object_type ] trans: nothing
//
// [ n_parameters ] trans: nothing
//
// [ parameters ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func InitableNewv(object_type gi.GType, n_parameters uint32, parameters unsafe.Pointer, cancellable ICancellable) (result Object, err error) {
	iv, err := _I.Get1(3304, "Gio", "initable_newv", "", 648, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_object_type := gi.NewUintArgument(uint(object_type))
	arg_n_parameters := gi.NewUint32Argument(n_parameters)
	arg_parameters := gi.NewPointerArgument(parameters)
	arg_cancellable := gi.NewPointerArgument(tmp)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_object_type, arg_n_parameters, arg_parameters, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_io_error_from_errno
//
// [ err_no ] trans: nothing
//
// [ result ] trans: nothing
//
func IoErrorFromErrno(err_no int32) (result IOErrorEnumEnum) {
	iv, err := _I.Get1(3305, "Gio", "io_error_from_errno", "", 649, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_err_no := gi.NewInt32Argument(err_no)
	args := []gi.Argument{arg_err_no}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = IOErrorEnumEnum(ret.Int())
	return
}

// g_io_error_quark
//
// [ result ] trans: nothing
//
func IoErrorQuark() (result uint32) {
	iv, err := _I.Get1(3306, "Gio", "io_error_quark", "", 650, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// g_io_extension_point_implement
//
// [ extension_point_name ] trans: nothing
//
// [ type1 ] trans: nothing
//
// [ extension_name ] trans: nothing
//
// [ priority ] trans: nothing
//
// [ result ] trans: nothing
//
func IoExtensionPointImplement(extension_point_name string, type1 gi.GType, extension_name string, priority int32) (result IOExtension) {
	iv, err := _I.Get1(3307, "Gio", "io_extension_point_implement", "", 651, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_extension_point_name := gi.CString(extension_point_name)
	c_extension_name := gi.CString(extension_name)
	arg_extension_point_name := gi.NewStringArgument(c_extension_point_name)
	arg_type1 := gi.NewUintArgument(uint(type1))
	arg_extension_name := gi.NewStringArgument(c_extension_name)
	arg_priority := gi.NewInt32Argument(priority)
	args := []gi.Argument{arg_extension_point_name, arg_type1, arg_extension_name, arg_priority}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_extension_point_name)
	gi.Free(c_extension_name)
	result.P = ret.Pointer()
	return
}

// g_io_extension_point_lookup
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func IoExtensionPointLookup(name string) (result IOExtensionPoint) {
	iv, err := _I.Get1(3308, "Gio", "io_extension_point_lookup", "", 652, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// g_io_extension_point_register
//
// [ name ] trans: nothing
//
// [ result ] trans: nothing
//
func IoExtensionPointRegister(name string) (result IOExtensionPoint) {
	iv, err := _I.Get1(3309, "Gio", "io_extension_point_register", "", 653, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_name := gi.CString(name)
	arg_name := gi.NewStringArgument(c_name)
	args := []gi.Argument{arg_name}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_name)
	result.P = ret.Pointer()
	return
}

// g_io_modules_load_all_in_directory
//
// [ dirname ] trans: nothing
//
// [ result ] trans: everything
//
func IoModulesLoadAllInDirectory(dirname string) (result List) {
	iv, err := _I.Get1(3310, "Gio", "io_modules_load_all_in_directory", "", 654, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_dirname := gi.CString(dirname)
	arg_dirname := gi.NewStringArgument(c_dirname)
	args := []gi.Argument{arg_dirname}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_dirname)
	result.P = ret.Pointer()
	return
}

// g_io_modules_load_all_in_directory_with_scope
//
// [ dirname ] trans: nothing
//
// [ scope ] trans: nothing
//
// [ result ] trans: everything
//
func IoModulesLoadAllInDirectoryWithScope(dirname string, scope IOModuleScope) (result List) {
	iv, err := _I.Get1(3311, "Gio", "io_modules_load_all_in_directory_with_scope", "", 655, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_dirname := gi.CString(dirname)
	arg_dirname := gi.NewStringArgument(c_dirname)
	arg_scope := gi.NewPointerArgument(scope.P)
	args := []gi.Argument{arg_dirname, arg_scope}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_dirname)
	result.P = ret.Pointer()
	return
}

// g_io_modules_scan_all_in_directory
//
// [ dirname ] trans: nothing
//
func IoModulesScanAllInDirectory(dirname string) {
	iv, err := _I.Get1(3312, "Gio", "io_modules_scan_all_in_directory", "", 656, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_dirname := gi.CString(dirname)
	arg_dirname := gi.NewStringArgument(c_dirname)
	args := []gi.Argument{arg_dirname}
	iv.Call(args, nil, nil)
	gi.Free(c_dirname)
}

// g_io_modules_scan_all_in_directory_with_scope
//
// [ dirname ] trans: nothing
//
// [ scope ] trans: nothing
//
func IoModulesScanAllInDirectoryWithScope(dirname string, scope IOModuleScope) {
	iv, err := _I.Get1(3313, "Gio", "io_modules_scan_all_in_directory_with_scope", "", 657, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_dirname := gi.CString(dirname)
	arg_dirname := gi.NewStringArgument(c_dirname)
	arg_scope := gi.NewPointerArgument(scope.P)
	args := []gi.Argument{arg_dirname, arg_scope}
	iv.Call(args, nil, nil)
	gi.Free(c_dirname)
}

// Deprecated
//
// g_io_scheduler_cancel_all_jobs
//
func IoSchedulerCancelAllJobs() {
	iv, err := _I.Get1(3314, "Gio", "io_scheduler_cancel_all_jobs", "", 658, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	iv.Call(nil, nil, nil)
}

// Deprecated
//
// g_io_scheduler_push_job
//
// [ job_func ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ notify ] trans: nothing
//
// [ io_priority ] trans: nothing
//
// [ cancellable ] trans: nothing
//
func IoSchedulerPushJob(job_func IOSchedulerJobFunc, io_priority int32, cancellable ICancellable) {
	iv, err := _I.Get1(3315, "Gio", "io_scheduler_push_job", "", 659, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var cId uint
	var funcPtr unsafe.Pointer
	if job_func != nil {
		callableInfo := gi.GetCallableInfo("Gio", "IOSchedulerJobFunc")
		cId, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallIOSchedulerJobFunc(job_func, __result, __args)
		}, gi.ScopeNotified, callableInfo)
		callableInfo.Unref()
	}
	var tmp unsafe.Pointer
	if cancellable != nil {
		tmp = cancellable.P_Cancellable()
	}
	arg_job_func := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(gi.Uint2Ptr(cId))
	arg_notify := gi.NewPointerArgument(gi.GetClosureDestroyNotifyPtr())
	arg_io_priority := gi.NewInt32Argument(io_priority)
	arg_cancellable := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_job_func, arg_user_data, arg_notify, arg_io_priority, arg_cancellable}
	iv.Call(args, nil, nil)
}

// g_keyfile_settings_backend_new
//
// [ filename ] trans: nothing
//
// [ root_path ] trans: nothing
//
// [ root_group ] trans: nothing
//
// [ result ] trans: everything
//
func KeyfileSettingsBackendNew(filename string, root_path string, root_group string) (result SettingsBackend) {
	iv, err := _I.Get1(3316, "Gio", "keyfile_settings_backend_new", "", 660, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_filename := gi.CString(filename)
	c_root_path := gi.CString(root_path)
	c_root_group := gi.CString(root_group)
	arg_filename := gi.NewStringArgument(c_filename)
	arg_root_path := gi.NewStringArgument(c_root_path)
	arg_root_group := gi.NewStringArgument(c_root_group)
	args := []gi.Argument{arg_filename, arg_root_path, arg_root_group}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_filename)
	gi.Free(c_root_path)
	gi.Free(c_root_group)
	result.P = ret.Pointer()
	return
}

// g_memory_settings_backend_new
//
// [ result ] trans: everything
//
func MemorySettingsBackendNew() (result SettingsBackend) {
	iv, err := _I.Get1(3317, "Gio", "memory_settings_backend_new", "", 661, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_network_monitor_get_default
//
// [ result ] trans: nothing
//
func NetworkMonitorGetDefault() (result NetworkMonitor) {
	iv, err := _I.Get1(3318, "Gio", "network_monitor_get_default", "", 662, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_networking_init
//
func NetworkingInit() {
	iv, err := _I.Get1(3319, "Gio", "networking_init", "", 663, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	iv.Call(nil, nil, nil)
}

// g_null_settings_backend_new
//
// [ result ] trans: everything
//
func NullSettingsBackendNew() (result SettingsBackend) {
	iv, err := _I.Get1(3320, "Gio", "null_settings_backend_new", "", 664, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_pollable_source_new
//
// [ pollable_stream ] trans: nothing
//
// [ result ] trans: everything
//
func PollableSourceNew(pollable_stream IObject) (result Source) {
	iv, err := _I.Get1(3321, "Gio", "pollable_source_new", "", 665, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pollable_stream != nil {
		tmp = pollable_stream.P_Object()
	}
	arg_pollable_stream := gi.NewPointerArgument(tmp)
	args := []gi.Argument{arg_pollable_stream}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_pollable_source_new_full
//
// [ pollable_stream ] trans: nothing
//
// [ child_source ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: everything
//
func PollableSourceNewFull(pollable_stream IObject, child_source Source, cancellable ICancellable) (result Source) {
	iv, err := _I.Get1(3322, "Gio", "pollable_source_new_full", "", 666, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if pollable_stream != nil {
		tmp = pollable_stream.P_Object()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_pollable_stream := gi.NewPointerArgument(tmp)
	arg_child_source := gi.NewPointerArgument(child_source.P)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	args := []gi.Argument{arg_pollable_stream, arg_child_source, arg_cancellable}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_pollable_stream_read
//
// [ stream ] trans: nothing
//
// [ buffer ] trans: nothing
//
// [ count ] trans: nothing
//
// [ blocking ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func PollableStreamRead(stream IInputStream, buffer gi.Uint8Array, count uint64, blocking bool, cancellable ICancellable) (result int64, err error) {
	iv, err := _I.Get1(3323, "Gio", "pollable_stream_read", "", 667, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if stream != nil {
		tmp = stream.P_InputStream()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_stream := gi.NewPointerArgument(tmp)
	arg_buffer := gi.NewPointerArgument(buffer.P)
	arg_count := gi.NewUint64Argument(count)
	arg_blocking := gi.NewBoolArgument(blocking)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_stream, arg_buffer, arg_count, arg_blocking, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int64()
	return
}

// g_pollable_stream_write
//
// [ stream ] trans: nothing
//
// [ buffer ] trans: nothing
//
// [ count ] trans: nothing
//
// [ blocking ] trans: nothing
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func PollableStreamWrite(stream IOutputStream, buffer gi.Uint8Array, count uint64, blocking bool, cancellable ICancellable) (result int64, err error) {
	iv, err := _I.Get1(3324, "Gio", "pollable_stream_write", "", 668, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if stream != nil {
		tmp = stream.P_OutputStream()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_stream := gi.NewPointerArgument(tmp)
	arg_buffer := gi.NewPointerArgument(buffer.P)
	arg_count := gi.NewUint64Argument(count)
	arg_blocking := gi.NewBoolArgument(blocking)
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_stream, arg_buffer, arg_count, arg_blocking, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result = ret.Int64()
	return
}

// g_pollable_stream_write_all
//
// [ stream ] trans: nothing
//
// [ buffer ] trans: nothing
//
// [ count ] trans: nothing
//
// [ blocking ] trans: nothing
//
// [ bytes_written ] trans: everything, dir: out
//
// [ cancellable ] trans: nothing
//
// [ result ] trans: nothing
//
func PollableStreamWriteAll(stream IOutputStream, buffer gi.Uint8Array, count uint64, blocking bool, cancellable ICancellable) (result bool, bytes_written uint64, err error) {
	iv, err := _I.Get1(3325, "Gio", "pollable_stream_write_all", "", 669, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [2]gi.Argument
	var tmp unsafe.Pointer
	if stream != nil {
		tmp = stream.P_OutputStream()
	}
	var tmp1 unsafe.Pointer
	if cancellable != nil {
		tmp1 = cancellable.P_Cancellable()
	}
	arg_stream := gi.NewPointerArgument(tmp)
	arg_buffer := gi.NewPointerArgument(buffer.P)
	arg_count := gi.NewUint64Argument(count)
	arg_blocking := gi.NewBoolArgument(blocking)
	arg_bytes_written := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_cancellable := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	args := []gi.Argument{arg_stream, arg_buffer, arg_count, arg_blocking, arg_bytes_written, arg_cancellable, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[1].Pointer())
	bytes_written = outArgs[0].Uint64()
	result = ret.Bool()
	return
}

// g_proxy_get_default_for_protocol
//
// [ protocol ] trans: nothing
//
// [ result ] trans: everything
//
func ProxyGetDefaultForProtocol(protocol string) (result Proxy) {
	iv, err := _I.Get1(3326, "Gio", "proxy_get_default_for_protocol", "", 670, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_protocol := gi.CString(protocol)
	arg_protocol := gi.NewStringArgument(c_protocol)
	args := []gi.Argument{arg_protocol}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_protocol)
	result.P = ret.Pointer()
	return
}

// g_proxy_resolver_get_default
//
// [ result ] trans: nothing
//
func ProxyResolverGetDefault() (result ProxyResolver) {
	iv, err := _I.Get1(3327, "Gio", "proxy_resolver_get_default", "", 671, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_resolver_error_quark
//
// [ result ] trans: nothing
//
func ResolverErrorQuark() (result uint32) {
	iv, err := _I.Get1(3328, "Gio", "resolver_error_quark", "", 672, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// g_resource_error_quark
//
// [ result ] trans: nothing
//
func ResourceErrorQuark() (result uint32) {
	iv, err := _I.Get1(3329, "Gio", "resource_error_quark", "", 673, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// g_resource_load
//
// [ filename ] trans: nothing
//
// [ result ] trans: everything
//
func ResourceLoad(filename string) (result Resource, err error) {
	iv, err := _I.Get1(3330, "Gio", "resource_load", "", 674, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_filename := gi.CString(filename)
	arg_filename := gi.NewStringArgument(c_filename)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_filename, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_filename)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_resources_enumerate_children
//
// [ path ] trans: nothing
//
// [ lookup_flags ] trans: nothing
//
// [ result ] trans: everything
//
func ResourcesEnumerateChildren(path string, lookup_flags ResourceLookupFlags) (result gi.CStrArray, err error) {
	iv, err := _I.Get1(3331, "Gio", "resources_enumerate_children", "", 675, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_path := gi.CString(path)
	arg_path := gi.NewStringArgument(c_path)
	arg_lookup_flags := gi.NewIntArgument(int(lookup_flags))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_path, arg_lookup_flags, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_path)
	err = gi.ToError(outArgs[0].Pointer())
	result = gi.CStrArray{P: ret.Pointer(), Len: -1}
	result.SetLenZT()
	return
}

// g_resources_get_info
//
// [ path ] trans: nothing
//
// [ lookup_flags ] trans: nothing
//
// [ size ] trans: everything, dir: out
//
// [ flags ] trans: everything, dir: out
//
// [ result ] trans: nothing
//
func ResourcesGetInfo(path string, lookup_flags ResourceLookupFlags) (result bool, size uint64, flags uint32, err error) {
	iv, err := _I.Get1(3332, "Gio", "resources_get_info", "", 676, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [3]gi.Argument
	c_path := gi.CString(path)
	arg_path := gi.NewStringArgument(c_path)
	arg_lookup_flags := gi.NewIntArgument(int(lookup_flags))
	arg_size := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	arg_flags := gi.NewPointerArgument(unsafe.Pointer(&outArgs[1]))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[2]))
	args := []gi.Argument{arg_path, arg_lookup_flags, arg_size, arg_flags, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_path)
	err = gi.ToError(outArgs[2].Pointer())
	size = outArgs[0].Uint64()
	flags = outArgs[1].Uint32()
	result = ret.Bool()
	return
}

// g_resources_lookup_data
//
// [ path ] trans: nothing
//
// [ lookup_flags ] trans: nothing
//
// [ result ] trans: everything
//
func ResourcesLookupData(path string, lookup_flags ResourceLookupFlags) (result Bytes, err error) {
	iv, err := _I.Get1(3333, "Gio", "resources_lookup_data", "", 677, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_path := gi.CString(path)
	arg_path := gi.NewStringArgument(c_path)
	arg_lookup_flags := gi.NewIntArgument(int(lookup_flags))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_path, arg_lookup_flags, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_path)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_resources_open_stream
//
// [ path ] trans: nothing
//
// [ lookup_flags ] trans: nothing
//
// [ result ] trans: everything
//
func ResourcesOpenStream(path string, lookup_flags ResourceLookupFlags) (result InputStream, err error) {
	iv, err := _I.Get1(3334, "Gio", "resources_open_stream", "", 678, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_path := gi.CString(path)
	arg_path := gi.NewStringArgument(c_path)
	arg_lookup_flags := gi.NewIntArgument(int(lookup_flags))
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_path, arg_lookup_flags, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_path)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_resources_register
//
// [ resource ] trans: nothing
//
func ResourcesRegister(resource Resource) {
	iv, err := _I.Get1(3335, "Gio", "resources_register", "", 679, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_resource := gi.NewPointerArgument(resource.P)
	args := []gi.Argument{arg_resource}
	iv.Call(args, nil, nil)
}

// g_resources_unregister
//
// [ resource ] trans: nothing
//
func ResourcesUnregister(resource Resource) {
	iv, err := _I.Get1(3336, "Gio", "resources_unregister", "", 680, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_resource := gi.NewPointerArgument(resource.P)
	args := []gi.Argument{arg_resource}
	iv.Call(args, nil, nil)
}

// g_settings_schema_source_get_default
//
// [ result ] trans: nothing
//
func SettingsSchemaSourceGetDefault() (result SettingsSchemaSource) {
	iv, err := _I.Get1(3337, "Gio", "settings_schema_source_get_default", "", 681, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// Deprecated
//
// g_simple_async_report_gerror_in_idle
//
// [ object ] trans: nothing
//
// [ callback ] trans: nothing
//
// [ user_data ] trans: nothing
//
// [ error ] trans: nothing
//
func SimpleAsyncReportGerrorInIdle(object IObject, callback AsyncReadyCallback, error Error) {
	iv, err := _I.Get1(3338, "Gio", "simple_async_report_gerror_in_idle", "", 682, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var tmp unsafe.Pointer
	if object != nil {
		tmp = object.P_Object()
	}
	var funcPtr unsafe.Pointer
	if callback != nil {
		callableInfo := gi.GetCallableInfo("Gio", "AsyncReadyCallback")
		_, funcPtr = gi.RegisterFClosure(func(__result unsafe.Pointer, __args []unsafe.Pointer) {
			CallAsyncReadyCallback(callback, __result, __args)
		}, gi.ScopeAsync, callableInfo)
		callableInfo.Unref()
	}
	arg_object := gi.NewPointerArgument(tmp)
	arg_callback := gi.NewPointerArgument(funcPtr)
	arg_user_data := gi.NewPointerArgument(nil)
	arg_error := gi.NewPointerArgument(error.P)
	args := []gi.Argument{arg_object, arg_callback, arg_user_data, arg_error}
	iv.Call(args, nil, nil)
}

// g_tls_backend_get_default
//
// [ result ] trans: nothing
//
func TlsBackendGetDefault() (result TlsBackend) {
	iv, err := _I.Get1(3339, "Gio", "tls_backend_get_default", "", 683, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_tls_client_connection_new
//
// [ base_io_stream ] trans: nothing
//
// [ server_identity ] trans: nothing
//
// [ result ] trans: everything
//
func TlsClientConnectionNew(base_io_stream IIOStream, server_identity ISocketConnectable) (result TlsClientConnection, err error) {
	iv, err := _I.Get1(3340, "Gio", "tls_client_connection_new", "", 684, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if base_io_stream != nil {
		tmp = base_io_stream.P_IOStream()
	}
	var tmp1 unsafe.Pointer
	if server_identity != nil {
		tmp1 = server_identity.P_SocketConnectable()
	}
	arg_base_io_stream := gi.NewPointerArgument(tmp)
	arg_server_identity := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_base_io_stream, arg_server_identity, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_tls_error_quark
//
// [ result ] trans: nothing
//
func TlsErrorQuark() (result uint32) {
	iv, err := _I.Get1(3341, "Gio", "tls_error_quark", "", 685, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var ret gi.Argument
	iv.Call(nil, &ret, nil)
	result = ret.Uint32()
	return
}

// g_tls_file_database_new
//
// [ anchors ] trans: nothing
//
// [ result ] trans: everything
//
func TlsFileDatabaseNew(anchors string) (result TlsFileDatabase, err error) {
	iv, err := _I.Get1(3342, "Gio", "tls_file_database_new", "", 686, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	c_anchors := gi.CString(anchors)
	arg_anchors := gi.NewStringArgument(c_anchors)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_anchors, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_anchors)
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_tls_server_connection_new
//
// [ base_io_stream ] trans: nothing
//
// [ certificate ] trans: nothing
//
// [ result ] trans: everything
//
func TlsServerConnectionNew(base_io_stream IIOStream, certificate ITlsCertificate) (result TlsServerConnection, err error) {
	iv, err := _I.Get1(3343, "Gio", "tls_server_connection_new", "", 687, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		return
	}
	var outArgs [1]gi.Argument
	var tmp unsafe.Pointer
	if base_io_stream != nil {
		tmp = base_io_stream.P_IOStream()
	}
	var tmp1 unsafe.Pointer
	if certificate != nil {
		tmp1 = certificate.P_TlsCertificate()
	}
	arg_base_io_stream := gi.NewPointerArgument(tmp)
	arg_certificate := gi.NewPointerArgument(tmp1)
	arg_err := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_base_io_stream, arg_certificate, arg_err}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	err = gi.ToError(outArgs[0].Pointer())
	result.P = ret.Pointer()
	return
}

// g_unix_is_mount_path_system_internal
//
// [ mount_path ] trans: nothing
//
// [ result ] trans: nothing
//
func UnixIsMountPathSystemInternal(mount_path string) (result bool) {
	iv, err := _I.Get1(3344, "Gio", "unix_is_mount_path_system_internal", "", 688, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_mount_path := gi.CString(mount_path)
	arg_mount_path := gi.NewStringArgument(c_mount_path)
	args := []gi.Argument{arg_mount_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_mount_path)
	result = ret.Bool()
	return
}

// g_unix_is_system_device_path
//
// [ device_path ] trans: nothing
//
// [ result ] trans: nothing
//
func UnixIsSystemDevicePath(device_path string) (result bool) {
	iv, err := _I.Get1(3345, "Gio", "unix_is_system_device_path", "", 689, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_device_path := gi.CString(device_path)
	arg_device_path := gi.NewStringArgument(c_device_path)
	args := []gi.Argument{arg_device_path}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_device_path)
	result = ret.Bool()
	return
}

// g_unix_is_system_fs_type
//
// [ fs_type ] trans: nothing
//
// [ result ] trans: nothing
//
func UnixIsSystemFsType(fs_type string) (result bool) {
	iv, err := _I.Get1(3346, "Gio", "unix_is_system_fs_type", "", 690, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	c_fs_type := gi.CString(fs_type)
	arg_fs_type := gi.NewStringArgument(c_fs_type)
	args := []gi.Argument{arg_fs_type}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	gi.Free(c_fs_type)
	result = ret.Bool()
	return
}

// g_unix_mount_at
//
// [ mount_path ] trans: nothing
//
// [ time_read ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func UnixMountAt(mount_path string) (result UnixMountEntry, time_read uint64) {
	iv, err := _I.Get1(3347, "Gio", "unix_mount_at", "", 691, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	c_mount_path := gi.CString(mount_path)
	arg_mount_path := gi.NewStringArgument(c_mount_path)
	arg_time_read := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_mount_path, arg_time_read}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_mount_path)
	time_read = outArgs[0].Uint64()
	result.P = ret.Pointer()
	return
}

// g_unix_mount_compare
//
// [ mount1 ] trans: nothing
//
// [ mount2 ] trans: nothing
//
// [ result ] trans: nothing
//
func UnixMountCompare(mount1 UnixMountEntry, mount2 UnixMountEntry) (result int32) {
	iv, err := _I.Get1(3348, "Gio", "unix_mount_compare", "", 692, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_mount1 := gi.NewPointerArgument(mount1.P)
	arg_mount2 := gi.NewPointerArgument(mount2.P)
	args := []gi.Argument{arg_mount1, arg_mount2}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Int32()
	return
}

// g_unix_mount_copy
//
// [ mount_entry ] trans: nothing
//
// [ result ] trans: everything
//
func UnixMountCopy(mount_entry UnixMountEntry) (result UnixMountEntry) {
	iv, err := _I.Get1(3349, "Gio", "unix_mount_copy", "", 693, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_mount_entry := gi.NewPointerArgument(mount_entry.P)
	args := []gi.Argument{arg_mount_entry}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_unix_mount_for
//
// [ file_path ] trans: nothing
//
// [ time_read ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func UnixMountFor(file_path string) (result UnixMountEntry, time_read uint64) {
	iv, err := _I.Get1(3350, "Gio", "unix_mount_for", "", 694, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	c_file_path := gi.CString(file_path)
	arg_file_path := gi.NewStringArgument(c_file_path)
	arg_time_read := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_file_path, arg_time_read}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	gi.Free(c_file_path)
	time_read = outArgs[0].Uint64()
	result.P = ret.Pointer()
	return
}

// g_unix_mount_free
//
// [ mount_entry ] trans: nothing
//
func UnixMountFree(mount_entry UnixMountEntry) {
	iv, err := _I.Get1(3351, "Gio", "unix_mount_free", "", 695, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_mount_entry := gi.NewPointerArgument(mount_entry.P)
	args := []gi.Argument{arg_mount_entry}
	iv.Call(args, nil, nil)
}

// g_unix_mount_get_device_path
//
// [ mount_entry ] trans: nothing
//
// [ result ] trans: nothing
//
func UnixMountGetDevicePath(mount_entry UnixMountEntry) (result string) {
	iv, err := _I.Get1(3352, "Gio", "unix_mount_get_device_path", "", 696, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_mount_entry := gi.NewPointerArgument(mount_entry.P)
	args := []gi.Argument{arg_mount_entry}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_unix_mount_get_fs_type
//
// [ mount_entry ] trans: nothing
//
// [ result ] trans: nothing
//
func UnixMountGetFsType(mount_entry UnixMountEntry) (result string) {
	iv, err := _I.Get1(3353, "Gio", "unix_mount_get_fs_type", "", 697, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_mount_entry := gi.NewPointerArgument(mount_entry.P)
	args := []gi.Argument{arg_mount_entry}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_unix_mount_get_mount_path
//
// [ mount_entry ] trans: nothing
//
// [ result ] trans: nothing
//
func UnixMountGetMountPath(mount_entry UnixMountEntry) (result string) {
	iv, err := _I.Get1(3354, "Gio", "unix_mount_get_mount_path", "", 698, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_mount_entry := gi.NewPointerArgument(mount_entry.P)
	args := []gi.Argument{arg_mount_entry}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_unix_mount_get_options
//
// [ mount_entry ] trans: nothing
//
// [ result ] trans: nothing
//
func UnixMountGetOptions(mount_entry UnixMountEntry) (result string) {
	iv, err := _I.Get1(3355, "Gio", "unix_mount_get_options", "", 699, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_mount_entry := gi.NewPointerArgument(mount_entry.P)
	args := []gi.Argument{arg_mount_entry}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Copy()
	return
}

// g_unix_mount_guess_can_eject
//
// [ mount_entry ] trans: nothing
//
// [ result ] trans: nothing
//
func UnixMountGuessCanEject(mount_entry UnixMountEntry) (result bool) {
	iv, err := _I.Get1(3356, "Gio", "unix_mount_guess_can_eject", "", 700, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_mount_entry := gi.NewPointerArgument(mount_entry.P)
	args := []gi.Argument{arg_mount_entry}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_unix_mount_guess_icon
//
// [ mount_entry ] trans: nothing
//
// [ result ] trans: everything
//
func UnixMountGuessIcon(mount_entry UnixMountEntry) (result Icon) {
	iv, err := _I.Get1(3357, "Gio", "unix_mount_guess_icon", "", 701, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_mount_entry := gi.NewPointerArgument(mount_entry.P)
	args := []gi.Argument{arg_mount_entry}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_unix_mount_guess_name
//
// [ mount_entry ] trans: nothing
//
// [ result ] trans: everything
//
func UnixMountGuessName(mount_entry UnixMountEntry) (result string) {
	iv, err := _I.Get1(3358, "Gio", "unix_mount_guess_name", "", 702, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_mount_entry := gi.NewPointerArgument(mount_entry.P)
	args := []gi.Argument{arg_mount_entry}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.String().Take()
	return
}

// g_unix_mount_guess_should_display
//
// [ mount_entry ] trans: nothing
//
// [ result ] trans: nothing
//
func UnixMountGuessShouldDisplay(mount_entry UnixMountEntry) (result bool) {
	iv, err := _I.Get1(3359, "Gio", "unix_mount_guess_should_display", "", 703, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_mount_entry := gi.NewPointerArgument(mount_entry.P)
	args := []gi.Argument{arg_mount_entry}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_unix_mount_guess_symbolic_icon
//
// [ mount_entry ] trans: nothing
//
// [ result ] trans: everything
//
func UnixMountGuessSymbolicIcon(mount_entry UnixMountEntry) (result Icon) {
	iv, err := _I.Get1(3360, "Gio", "unix_mount_guess_symbolic_icon", "", 704, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_mount_entry := gi.NewPointerArgument(mount_entry.P)
	args := []gi.Argument{arg_mount_entry}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result.P = ret.Pointer()
	return
}

// g_unix_mount_is_readonly
//
// [ mount_entry ] trans: nothing
//
// [ result ] trans: nothing
//
func UnixMountIsReadonly(mount_entry UnixMountEntry) (result bool) {
	iv, err := _I.Get1(3361, "Gio", "unix_mount_is_readonly", "", 705, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_mount_entry := gi.NewPointerArgument(mount_entry.P)
	args := []gi.Argument{arg_mount_entry}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_unix_mount_is_system_internal
//
// [ mount_entry ] trans: nothing
//
// [ result ] trans: nothing
//
func UnixMountIsSystemInternal(mount_entry UnixMountEntry) (result bool) {
	iv, err := _I.Get1(3362, "Gio", "unix_mount_is_system_internal", "", 706, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_mount_entry := gi.NewPointerArgument(mount_entry.P)
	args := []gi.Argument{arg_mount_entry}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_unix_mount_points_changed_since
//
// [ time ] trans: nothing
//
// [ result ] trans: nothing
//
func UnixMountPointsChangedSince(time uint64) (result bool) {
	iv, err := _I.Get1(3363, "Gio", "unix_mount_points_changed_since", "", 707, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_time := gi.NewUint64Argument(time)
	args := []gi.Argument{arg_time}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_unix_mount_points_get
//
// [ time_read ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func UnixMountPointsGet() (result List, time_read uint64) {
	iv, err := _I.Get1(3364, "Gio", "unix_mount_points_get", "", 708, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_time_read := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_time_read}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	time_read = outArgs[0].Uint64()
	result.P = ret.Pointer()
	return
}

// g_unix_mounts_changed_since
//
// [ time ] trans: nothing
//
// [ result ] trans: nothing
//
func UnixMountsChangedSince(time uint64) (result bool) {
	iv, err := _I.Get1(3365, "Gio", "unix_mounts_changed_since", "", 709, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	arg_time := gi.NewUint64Argument(time)
	args := []gi.Argument{arg_time}
	var ret gi.Argument
	iv.Call(args, &ret, nil)
	result = ret.Bool()
	return
}

// g_unix_mounts_get
//
// [ time_read ] trans: everything, dir: out
//
// [ result ] trans: everything
//
func UnixMountsGet() (result List, time_read uint64) {
	iv, err := _I.Get1(3366, "Gio", "unix_mounts_get", "", 710, 0, gi.INFO_TYPE_FUNCTION, 0)
	if err != nil {
		log.Println("WARN:", err)
		return
	}
	var outArgs [1]gi.Argument
	arg_time_read := gi.NewPointerArgument(unsafe.Pointer(&outArgs[0]))
	args := []gi.Argument{arg_time_read}
	var ret gi.Argument
	iv.Call(args, &ret, &outArgs[0])
	time_read = outArgs[0].Uint64()
	result.P = ret.Pointer()
	return
}

// constants
const (
	DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME      = "gio-desktop-app-info-lookup"
	DRIVE_IDENTIFIER_KIND_UNIX_DEVICE                 = "unix-device"
	FILE_ATTRIBUTE_ACCESS_CAN_DELETE                  = "access::can-delete"
	FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE                 = "access::can-execute"
	FILE_ATTRIBUTE_ACCESS_CAN_READ                    = "access::can-read"
	FILE_ATTRIBUTE_ACCESS_CAN_RENAME                  = "access::can-rename"
	FILE_ATTRIBUTE_ACCESS_CAN_TRASH                   = "access::can-trash"
	FILE_ATTRIBUTE_ACCESS_CAN_WRITE                   = "access::can-write"
	FILE_ATTRIBUTE_DOS_IS_ARCHIVE                     = "dos::is-archive"
	FILE_ATTRIBUTE_DOS_IS_SYSTEM                      = "dos::is-system"
	FILE_ATTRIBUTE_ETAG_VALUE                         = "etag::value"
	FILE_ATTRIBUTE_FILESYSTEM_FREE                    = "filesystem::free"
	FILE_ATTRIBUTE_FILESYSTEM_READONLY                = "filesystem::readonly"
	FILE_ATTRIBUTE_FILESYSTEM_REMOTE                  = "filesystem::remote"
	FILE_ATTRIBUTE_FILESYSTEM_SIZE                    = "filesystem::size"
	FILE_ATTRIBUTE_FILESYSTEM_TYPE                    = "filesystem::type"
	FILE_ATTRIBUTE_FILESYSTEM_USED                    = "filesystem::used"
	FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW             = "filesystem::use-preview"
	FILE_ATTRIBUTE_GVFS_BACKEND                       = "gvfs::backend"
	FILE_ATTRIBUTE_ID_FILE                            = "id::file"
	FILE_ATTRIBUTE_ID_FILESYSTEM                      = "id::filesystem"
	FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT                = "mountable::can-eject"
	FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT                = "mountable::can-mount"
	FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL                 = "mountable::can-poll"
	FILE_ATTRIBUTE_MOUNTABLE_CAN_START                = "mountable::can-start"
	FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED       = "mountable::can-start-degraded"
	FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP                 = "mountable::can-stop"
	FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT              = "mountable::can-unmount"
	FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI                  = "mountable::hal-udi"
	FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC = "mountable::is-media-check-automatic"
	FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE          = "mountable::start-stop-type"
	FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE              = "mountable::unix-device"
	FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE         = "mountable::unix-device-file"
	FILE_ATTRIBUTE_OWNER_GROUP                        = "owner::group"
	FILE_ATTRIBUTE_OWNER_USER                         = "owner::user"
	FILE_ATTRIBUTE_OWNER_USER_REAL                    = "owner::user-real"
	FILE_ATTRIBUTE_PREVIEW_ICON                       = "preview::icon"
	FILE_ATTRIBUTE_RECENT_MODIFIED                    = "recent::modified"
	FILE_ATTRIBUTE_SELINUX_CONTEXT                    = "selinux::context"
	FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE            = "standard::allocated-size"
	FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE              = "standard::content-type"
	FILE_ATTRIBUTE_STANDARD_COPY_NAME                 = "standard::copy-name"
	FILE_ATTRIBUTE_STANDARD_DESCRIPTION               = "standard::description"
	FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME              = "standard::display-name"
	FILE_ATTRIBUTE_STANDARD_EDIT_NAME                 = "standard::edit-name"
	FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE         = "standard::fast-content-type"
	FILE_ATTRIBUTE_STANDARD_ICON                      = "standard::icon"
	FILE_ATTRIBUTE_STANDARD_IS_BACKUP                 = "standard::is-backup"
	FILE_ATTRIBUTE_STANDARD_IS_HIDDEN                 = "standard::is-hidden"
	FILE_ATTRIBUTE_STANDARD_IS_SYMLINK                = "standard::is-symlink"
	FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL                = "standard::is-virtual"
	FILE_ATTRIBUTE_STANDARD_IS_VOLATILE               = "standard::is-volatile"
	FILE_ATTRIBUTE_STANDARD_NAME                      = "standard::name"
	FILE_ATTRIBUTE_STANDARD_SIZE                      = "standard::size"
	FILE_ATTRIBUTE_STANDARD_SORT_ORDER                = "standard::sort-order"
	FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON             = "standard::symbolic-icon"
	FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET            = "standard::symlink-target"
	FILE_ATTRIBUTE_STANDARD_TARGET_URI                = "standard::target-uri"
	FILE_ATTRIBUTE_STANDARD_TYPE                      = "standard::type"
	FILE_ATTRIBUTE_THUMBNAILING_FAILED                = "thumbnail::failed"
	FILE_ATTRIBUTE_THUMBNAIL_IS_VALID                 = "thumbnail::is-valid"
	FILE_ATTRIBUTE_THUMBNAIL_PATH                     = "thumbnail::path"
	FILE_ATTRIBUTE_TIME_ACCESS                        = "time::access"
	FILE_ATTRIBUTE_TIME_ACCESS_USEC                   = "time::access-usec"
	FILE_ATTRIBUTE_TIME_CHANGED                       = "time::changed"
	FILE_ATTRIBUTE_TIME_CHANGED_USEC                  = "time::changed-usec"
	FILE_ATTRIBUTE_TIME_CREATED                       = "time::created"
	FILE_ATTRIBUTE_TIME_CREATED_USEC                  = "time::created-usec"
	FILE_ATTRIBUTE_TIME_MODIFIED                      = "time::modified"
	FILE_ATTRIBUTE_TIME_MODIFIED_USEC                 = "time::modified-usec"
	FILE_ATTRIBUTE_TRASH_DELETION_DATE                = "trash::deletion-date"
	FILE_ATTRIBUTE_TRASH_ITEM_COUNT                   = "trash::item-count"
	FILE_ATTRIBUTE_TRASH_ORIG_PATH                    = "trash::orig-path"
	FILE_ATTRIBUTE_UNIX_BLOCKS                        = "unix::blocks"
	FILE_ATTRIBUTE_UNIX_BLOCK_SIZE                    = "unix::block-size"
	FILE_ATTRIBUTE_UNIX_DEVICE                        = "unix::device"
	FILE_ATTRIBUTE_UNIX_GID                           = "unix::gid"
	FILE_ATTRIBUTE_UNIX_INODE                         = "unix::inode"
	FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT                 = "unix::is-mountpoint"
	FILE_ATTRIBUTE_UNIX_MODE                          = "unix::mode"
	FILE_ATTRIBUTE_UNIX_NLINK                         = "unix::nlink"
	FILE_ATTRIBUTE_UNIX_RDEV                          = "unix::rdev"
	FILE_ATTRIBUTE_UNIX_UID                           = "unix::uid"
	MENU_ATTRIBUTE_ACTION                             = "action"
	MENU_ATTRIBUTE_ACTION_NAMESPACE                   = "action-namespace"
	MENU_ATTRIBUTE_ICON                               = "icon"
	MENU_ATTRIBUTE_LABEL                              = "label"
	MENU_ATTRIBUTE_TARGET                             = "target"
	MENU_LINK_SECTION                                 = "section"
	MENU_LINK_SUBMENU                                 = "submenu"
	NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME        = "gio-native-volume-monitor"
	NETWORK_MONITOR_EXTENSION_POINT_NAME              = "gio-network-monitor"
	PROXY_EXTENSION_POINT_NAME                        = "gio-proxy"
	PROXY_RESOLVER_EXTENSION_POINT_NAME               = "gio-proxy-resolver"
	SETTINGS_BACKEND_EXTENSION_POINT_NAME             = "gsettings-backend"
	TLS_BACKEND_EXTENSION_POINT_NAME                  = "gio-tls-backend"
	TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT          = "1.3.6.1.5.5.7.3.2"
	TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER          = "1.3.6.1.5.5.7.3.1"
	VFS_EXTENSION_POINT_NAME                          = "gio-vfs"
	VOLUME_IDENTIFIER_KIND_CLASS                      = "class"
	VOLUME_IDENTIFIER_KIND_HAL_UDI                    = "hal-udi"
	VOLUME_IDENTIFIER_KIND_LABEL                      = "label"
	VOLUME_IDENTIFIER_KIND_NFS_MOUNT                  = "nfs-mount"
	VOLUME_IDENTIFIER_KIND_UNIX_DEVICE                = "unix-device"
	VOLUME_IDENTIFIER_KIND_UUID                       = "uuid"
	VOLUME_MONITOR_EXTENSION_POINT_NAME               = "gio-volume-monitor"
)
const (
	SigAborted                         = "aborted"
	SigAcceptCertificate               = "accept-certificate"
	SigActionAdded                     = "action-added"
	SigActionEnabledChanged            = "action-enabled-changed"
	SigActionRemoved                   = "action-removed"
	SigActionStateChanged              = "action-state-changed"
	SigActivate                        = "activate"
	SigAllowMechanism                  = "allow-mechanism"
	SigAskPassword                     = "ask-password"
	SigAskQuestion                     = "ask-question"
	SigAuthorizeAuthenticatedPeer      = "authorize-authenticated-peer"
	SigAuthorizeMethod                 = "authorize-method"
	SigCancelled                       = "cancelled"
	SigChangeEvent                     = "change-event"
	SigChangeState                     = "change-state"
	SigChanged                         = "changed"
	SigClosed                          = "closed"
	SigCommandLine                     = "command-line"
	SigDisconnected                    = "disconnected"
	SigDriveChanged                    = "drive-changed"
	SigDriveConnected                  = "drive-connected"
	SigDriveDisconnected               = "drive-disconnected"
	SigDriveEjectButton                = "drive-eject-button"
	SigDriveStopButton                 = "drive-stop-button"
	SigEjectButton                     = "eject-button"
	SigEvent                           = "event"
	SigGAuthorizeMethod                = "g-authorize-method"
	SigGPropertiesChanged              = "g-properties-changed"
	SigGSignal                         = "g-signal"
	SigGotCompletionData               = "got-completion-data"
	SigHandleLocalOptions              = "handle-local-options"
	SigIncoming                        = "incoming"
	SigInterfaceAdded                  = "interface-added"
	SigInterfaceProxyPropertiesChanged = "interface-proxy-properties-changed"
	SigInterfaceProxySignal            = "interface-proxy-signal"
	SigInterfaceRemoved                = "interface-removed"
	SigItemsChanged                    = "items-changed"
	SigLaunchFailed                    = "launch-failed"
	SigLaunched                        = "launched"
	SigMountAdded                      = "mount-added"
	SigMountChanged                    = "mount-changed"
	SigMountPreUnmount                 = "mount-pre-unmount"
	SigMountRemoved                    = "mount-removed"
	SigMountpointsChanged              = "mountpoints-changed"
	SigMountsChanged                   = "mounts-changed"
	SigNetworkChanged                  = "network-changed"
	SigNewConnection                   = "new-connection"
	SigObjectAdded                     = "object-added"
	SigObjectRemoved                   = "object-removed"
	SigOpen                            = "open"
	SigPreUnmount                      = "pre-unmount"
	SigReload                          = "reload"
	SigRemoved                         = "removed"
	SigReply                           = "reply"
	SigRun                             = "run"
	SigShowProcesses                   = "show-processes"
	SigShowUnmountProgress             = "show-unmount-progress"
	SigShutdown                        = "shutdown"
	SigStartup                         = "startup"
	SigStopButton                      = "stop-button"
	SigUnmounted                       = "unmounted"
	SigVolumeAdded                     = "volume-added"
	SigVolumeChanged                   = "volume-changed"
	SigVolumeRemoved                   = "volume-removed"
	SigWritableChangeEvent             = "writable-change-event"
	SigWritableChanged                 = "writable-changed"
)
